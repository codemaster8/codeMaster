<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="RightsTokenGet_By_Native_DRMClientID_UV-3241_R201502" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="ProjectSettings@shadowPassword"/>
  <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="RightsTokenGet_ByRightsTokenID_Retailer_TestCases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="D:\Execution_Report_R3_Builds\Build_R3_2\OnlyP1\RightsTokenGet_R3"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="RightsTokenGet_ByRightsTokenID_Retailer_TestCases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Rights_API\Execution_Reports\R3_Reports\Build_1_0_6_1_Patch2_5\RTGEt"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/soapUIReports/Sprint111_000/R4/ReportAt-2013-11-13:02-28-12/Project10</con:setting></con:settings>
  <con:requirements/>
  <con:properties>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <con:property><con:name>AccountDisplayName</con:name><con:value>Rights_Account_20140325_125518</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property>
    
    
    
    
    
    
    
  <con:property><con:name>alid_bkp</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>AppHost</con:name><con:value>https://qa.p.uvvu.com</con:value></con:property><con:property><con:name>AppPort</con:name><con:value>7001</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1adG0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssYDeks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVPGOZ6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d8FmBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq5YQFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF6/VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgcRqcBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwrwuBpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8JdkndYuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_783dfa9e-2697-4dda-aa32-8ff10082363e</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>BAB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>7BB77B2569644410418DE3449481F9A8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:7BB77B2569644410418DE3449481F9A8</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_0c31da58-1b91-49bd-8f1e-3259ebb4f578</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid_bkp</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F7F6636B877F34109B445E349481F9A8</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>D4345FA2128F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>NodeID</con:name><con:value>dececs</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>76349D05128F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>ParamRTCReq</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>j1tendra</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ReExport</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>high</con:value></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_9.3</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\RightsTokenGet</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>RightsTokenGet</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>jitendra</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F7F6636B877F34109B445E349481F9A8</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1adG0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssYDeks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVPGOZ6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d8FmBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq5YQFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF6/VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgcRqcBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwrwuBpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8JdkndYuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM=</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>targetDECEDB</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>null:null</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>UserName</con:name><con:value>Rights_TokenGet_User_20140325_125528</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>CAB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>useroid</con:name><con:value>8BB77B2569644410418DE3449481F9A8</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>222259</con:value></con:property><con:property><con:name>encodedNodeAccID</con:name><con:value>urn:dece:accountid:org:dece:D4345FA2128F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:D4345FA2128F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:76349D05128F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>encodedTermsofUse</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>encodedULC</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>encodedMUC</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>encodedMAC</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>encodedUDUC</con:name><con:value>urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:RTGET_R3_EXAMPLE_ALIDVersion_244299.txt</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>3BB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>PORTALCS_NODE_OID</con:name><con:value>DABD1A709AAD9052E0401F0A2222596E9F</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value></con:property><con:property><con:name>nodeIdACCESS:CS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdACCESS</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON:CS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCOO</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCOO:CS</con:name><con:value>coordcs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECE:CS</con:name><con:value>dececs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV:CS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP:CS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP:CS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdPORTAL</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdPORTAL:CS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP:CS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdRET</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRET:CS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>encodeURN</con:name><con:value>NO</con:value></con:property><con:property><con:name>DeviceHost</con:name><con:value>https://qa.p.uvvu.com</con:value></con:property><con:property><con:name>thirdPartyAudienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs/</con:value></con:property><con:property><con:name>assertXML_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert_2</con:name><con:value>nVbZbuo6FH0/XxGlj1XIwJASAVKYCueUFgrtLX25Mo4B08QJtgO0X3/sQMJQ2kuvhIS8s7322oOXXWEg8C3HZQxRjkOidJtV9V/PnhTMEsxrRtGGWqFk2Vp5kjc1Oz+Bk3whj7yyrSpdxmLUJYwDwquqZZgFzbA0yx6ZlmOVHKuYMy3jVVWeEWUCWrjkDFXZBD5hThK2qsaUOCFgmDkEBIg5HDpDt3fnCE8HpJzUWmXLMglIa3POI0fXYc5DEPk+zMEw0Cv6kU/FY84QzwjgMUW7mB6rqru96/U6t87nQjrTLcMwdKOsCx+P4dmVWvuVbkZel0zD7boBSEgwBD7+AJJUD/F56CmuPwsp5vPgC2hTNw0JraEN1KBZIFeqvg+QsLsQ6YgkZUBjc2CmYI9oiigiEClPj92qenVZB7d7RxQQNg1pwE7WP6OEyAr5YYQ8jaWZpewuRzxTrloFQadLoB8zvEL3ckwiABFT+hRN8eYOMzF8HlOS9isbJn44nTIEf9KWin7IVVDXz1SniWeI8f/Ts8N+bVGegR+j2uvG6968gg592LzOe+4Az+jo5jrqhBarJhQOnbeksnbv1qfDms3WbtM4GuTr5sJbxqj3Eb8PV3b9bjLEf1wb2CN2/ebXFwvS56v+oxnXmy8h+Sfmtns7fl2x3pPenw3q9I3nS9OyN6a/SKfV62za4/WfccAWg/Wgt+7Hi0hfPNz+BmX9t9cCI7vArjuDOrP7fDYmwS3H/kfnebRoRpvly5TfDl46L63uYvmrOG8+954+8pN7fluoN4YP40F1n9NhDsfGVBKG8WSBIE+Xcjy6TaUt+gX49/IiLdjTpomrE0mNYhwRrtbkLiktTiwECHuOaOZ23c6XjLLbcm3Dcl03f9MyCobZNlzDLpetptFMNWjL4oRiIyRTLGNJld3Oz/cEYeAwRDxEtVUYwzli6jeITcCB0iWP4nCEhKFRKFTcNNx2sd0uWSXLLbqFRssqNspmu9Rqu1ap2TBV5T7kD+SBulOO6LGCF48U/BFBHGEkZV7OORODzrgoyRKsYu6buRXIERSLi4BKLXaswk1RZziIfCQJ60HoxT7KRfMoKZDOtv+WBiBLrJjBKKQc+GZyDL/M8vRbWhDh42HpwGRKdSSais7cSGaaz6e8i2dvrhTejT0sT5uoLqcYbpkcf9oPjZyWbGL2iaXMsw0/BIDsDIT+DT/9tDRZRG+FD+Knt6y4OISs1NL+LkFumYtXqzjpqG0Ylk4FvC6U09SHCMZC995H4RsiegahX3TtZKxPImf2Y34xn5MhBxwFYv6UZHnBm2OImHxzdMX52Vz6oDkKKerG0YafszV88TSRjL99vUAHSj9h7ou/dUi9fbvOYB3EEXmKhwbHZCZX8oJ5/2I6YChgsVDEkB6CnwM4F/zYmBU548LFNE1ijr7+okipq6oAwjAmvNtUE8Oh/CY8+XuEnL3TJ5hE4nd39oZ9eWe/9O6GQggDoGa++L+dNZyMC0SqfBokXKrqRjxBRXAyO5D7HcFzit9u3bjFctM6Ufx2VsCjTGqfzJ8tBzU9PQ+1vw==</con:value></con:property><con:property><con:name>assertId_2</con:name><con:value>_d7b416c3-057c-4627-9b31-73bcb343ed97</con:value></con:property><con:property><con:name>assertionAccountId_2</con:name><con:value>F3609AEAFE8A59D2E0401F0A07992D0F</con:value></con:property><con:property><con:name>assertionUserId_2</con:name><con:value>F3609AEA702AAA38E0401F0A07992D0D</con:value></con:property><con:property><con:name>assertionAccountIdFULL_2</con:name><con:value>urn:dece:accountid:org:dece:F3609AEAFE8A59D2E0401F0A07992D0F</con:value></con:property><con:property><con:name>assertionUserIdFULL_2</con:name><con:value>urn:dece:userid:org:dece:F3609AEA702AAA38E0401F0A07992D0D</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:\certs\</con:value></con:property><con:property><con:name>TOUVersion</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</con:value></con:property><con:property><con:name>TOUUrl_06</con:name><con:value>qa.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl_07</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>AppHostq</con:name><con:value>https://qa.q.uvvu.com</con:value></con:property><con:property><con:name>NativeDrmId</con:name><con:value>GW8mF7mVGmrRvLyImzNANNd5VH8=</con:value></con:property></con:properties>
  <con:encryptedContent xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
  <con:wssContainer>
    
    
    
    
  <con:crypto><con:source>C:/certs/DSP_CS_1_concat.pem</con:source><con:password>123</con:password><con:type>KEYSTORE</con:type></con:crypto></con:wssContainer>
  <con:databaseConnectionContainer/>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenGet" type="rest" id="eb8ba84c-9639-4e95-8729-9eb15df6eb51" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
      <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:inferredSchema><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<inf:schema xmlns:inf="http://www.eviware.com/soapui/InferredSchema"><inf:namespace>http://www.decellc.org/schema</inf:namespace><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>Errors</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:sch="http://www.decellc.org/schema">sch:_Errors</inf:reference></inf:type></inf:particle><inf:prefix key="http://www.w3.org/2001/XMLSchema" value="xs"/><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>Errors_Error</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>ErrorID</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>Reason</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>OriginalRequest</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>ErrorLink</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="sch:OriginalRequest" xmlns:sch="http://www.decellc.org/schema"><inf:other>sch:ErrorLink</inf:other></inf:comesBefore><inf:comesBefore qname="sch:ErrorLink" xmlns:sch="http://www.decellc.org/schema"/><inf:comesBefore qname="sch:Reason" xmlns:sch="http://www.decellc.org/schema"><inf:other>sch:OriginalRequest</inf:other><inf:other>sch:ErrorLink</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>false</inf:completed><inf:mixed>false</inf:mixed><inf:name>_Errors</inf:name><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>false</inf:completed></inf:content></inf:complexType></inf:schema>]]></con:inferredSchema>
    <con:resource name="RightsTokenGet[ByTokenId]" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="5cb6a1af-426e-455b-ab80-bfb8cac44df9">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>AccountID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>RightsTokenID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="RightsTokenGet[byTokenID]" method="GET" id="b87cb941-e428-4606-aca6-3f5eebd2dd7b">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 404 401 500 403</con:status>
          <con:params/>
          <con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>500 401 503</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:sch="http://www.decellc.org/schema">sch:RightsTokenList</con:element>
        </con:representation>
        <con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsToken</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsToken</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="8122307e-cf90-4940-9659-fcf8c95f8500">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZd6rKEn73V7jcjy7DoMZhJZ7VDBJUVBCc3hiaQRmUBkF//Wkwuk129nTvfbgPWbGLGr6q+rq7+uWfPPCrJxgjLwpfa9QTWavC0IwsL3Rea5o6bHRr/wwqL0gPfLoPEIJxgjWrIvdasw3DsmiSbpgtU2+0YLvTMJq03uiRJEVStaqIUArFECV6mLzWaCxskJ0G1VKpXr/53G/3nqhec1urLm/R6SI6xhOifhnvtZbGYT/SkYf6oR5A1E/M/gJIkz7W7Os3MLXBO7wyYEwMXizUX3hOqCdpDN8dWui15ibJoU8QWZY9Zc2nKHYImiRJguwRWMdCnvOthlN9N4aWGNrRdc3qYRR6pu57F72IKMHEjawq8J0o9hI3+IlriqDIwnUD5mbDpFrhtxrxPUCJ7g89fQAZI72BXJ26OVOgDWPcNFjVFPG19u03fbkaqbEeIjuKA/Rp/XdYYHiCfnSAVgPdUrrB+nOPX9Rp8ALNvhiafoq8E5wWzT/oJkTVeQxtL594CFPKQtWy8dUc3XgDzb/pxQvxiBPDJr6oDOc5ECX/SaMem3T1stT9FA426QhkYJ64YZNxju1wdVLPLUi+xTvntYTwqHwFde/x+/ozQ++EejcSYLTN2xMmNkapNWGXm7Dpd2R+KYX02QwVgdn5l5U492Fi79+6w046QntHWx4DY26vj9tEPa/teX3k0mhMVahLZ8HuU5fQz07rcA7m9U5vvFS3B12YEoLSDTWnac75oNUyFIf3Z8+qRi6m9fBI5nNjlhnubtTSg6O9EpisojEn9zxi88WGbY3ESLIX+9fvOT3mUOQ1hucyyeL3uk32OD3R7wu22P823pcJHEiiyKUXlgXnhQMykQEO/tuBKePsj+7eE3oZyQBZHgKOZfwdP5HAXgCUxjOuxC6XUs5ewIhxpktsqFaAv2Ukhc+4bMMtZfmNz1zVEpZnQ/DT7YWfSgCVxqwr8Qq/5BSVlyQQXWW5xBlCvpMWUibKG66CHXB8frhYQi+BQu6ZtNiWFm16s2in2/USy4fnSTA9GSrvS6wksIujsBCNJifzI6BsViY9TLHtZRIcospGYx6MRge4A3CYkTgmuEjqPpNUjZ5yil7K1I8ySRRGkowyVi6zEip8Nlpql++1YBmJtQI+51Uwv9bCVNnhlNyuR0hftUNJARnnlMZjPrNmNyCSTGYV9lqrCZ8pvKJNh5IiZjwoZRyf+cigp64huCezKecjFeweG8PK/GoY4u+hcjLP7WNFF4bACJaU2VRc02t7+jrKnG034+TNaBxtRexmCmSeYWSAAZGgSA3XnwETZtmeHbwe7cGJPYwC6MYViYrG+9MlJ7tec+bMp6s2Z+87c8GbN3XLJUTfpHfNPRBFaI0pV9YtZUMoXOhdnmdjbQ29eHNJpm2Zeva67YqySrU1F/kd62290cb1fGPK6my+0FbzS55Pj7vuxU/eZsxbvBhJnDObQjhHZp0g9SGjdrk2u3nbYT7ZCgnbFeBIDADCznF4DxOYedtdSfimSDwmL5DYTGBXrLAAglDnRYaTZXvoUnNTWKYaNZVE3vJxmc6bteJXtizD4U6R+mp72NBDcqsCq3Qmt/ihI2vt+mgNt/LUV5cJyA5LO6QoUjjIb7aUOaZUMMASswWDdxFTSUWg6bPDiMzHy2eSOsqWP1r0gNbMF/Q+n7nO9rx3tnvclM3D1tmowF+qDxwTMcVWFVnlFQl0r/stl0StqfhmkB+MwMw5FfesNI5UhleGMqnlHAfGVxlSAZ2jzYXfSSxf2ldALumYFidj7aJNOPVmKp9i0qYPdNkZNPlbjhUUq3zk2JEFMvjMMf7KMR7Yx7rY5SjUfmYPaJU5jMAf5c5yMuodSHk92VeY+pBwEs9vzcJupo7rK+qcddydvFr1RM5l66G9cZtGwpD6xZThaN8RPGXPhc8t/yxNJLmteYR/JnfwmKFJZSpSId9MLkOiF6d1Jth6weXSbNFaMF+kJ1HTx4g6u8Zx1ct287dngoiFc/vS2Z7k4ToyN9d75PMheRdej1Hi8YD9cALfJqpFauygmdyWxT0sctUhvhz15OfTGfVElRLPatilaj8N0QGaGAa0agM7hlb0Qjy6/BSPjULbKwyLUfN68/56FjSDvgH1GMa1X3gqkq6KoYJHiShEUI1eawifEGnoHVOM1cUXbK06jZJZOIuBncC4HFqpr4dWBadz8GAx2T4MAjDXg4MPn8woIHTTjNIwQfgHKmeNnwL7/O2WA9axvEIBFbAYiIsJPw/SNNmnbpj+EPvNPUgtrxgpcEGS2DOvSD5+GrznhhILmkf9pB+op5P+FMIUT/VxmeYN+93ks+CDe+JzZveI1skz77y7PzREDk8+A8CwHH/3+/HbZws8AxfiAjjCyDFueMdreBfi/mxA/+BHjG6YFvzB87uPu/wjthQPbosE76cAt79aLn//yvlgjdNPYJ58JWN9DLAI/sunj9k3Cz0snuN/WRRb36v+ha+vPn4U3vO5Y0pw04w0gT//Ui327mvtneeeVSsFt8PhYVc8lp/jWZ4AVxORq/3gtJz93of5/GdvNopYS5OF6cJAr911vd8rN7yyTybe51i/n5wPGH+OX5s4eOjUBhTdbLXvdfkAafCD+EfJf1HE+Dbf/00ZFX74f1dCMOQYFtcRX1XN1v+klJ835+Bf" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823100"/>
            <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:144040"/>
          </con:parameters>
        </con:request>
        <con:request name="Get Information on the RightsTokenCreate by Node=Retailer" mediaType="application/xml" id="313b359b-bf35-40d3-8519-b9e8ee3cc4ea">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAMLAssertion2=zVdbk6q6En73V1isR8vhosyoNeOucBUVFcTrG0IEFAEJCPrrd8DR5cyadTvnPBxrrDGd7s7X3V+Szus/+cGvnmCMvDB4I+gniqjCwAptL3DeiJkh1VvEP93KKzIPPtMBCME4wZpVRXgjtpuNbTMUU0eW20zrTci+1DcNxqyzFP7QRFVBKIVKgBIzSN4IhqKpOtWuU88Gw3QaDfz39MI+r4nq/LY8UyyPAQWoUy74RqRx0AlN5KFOYB4g6iRWZwrUYQdrdswbGqL7jq9cMCa7rzbqTD0nMJM0hu8ObfRGuEkSdUgyy7KnrPEUxg7JYKQk1Saxjo085xuBY303hrYSbMPrmDeDMPAs0/cuZrGiChM3tKvAd8LYS9zDT1zTJE0Vruswt+oW3Qy+EeT3BUp0f+jpA8gYmXXkmvTNmQ63MMZVg9WZrrwR335XmKuVEZsB2obxAX0a/x0YGJygH0bQrqNbTDdcf+7xi0R1X6HVUQLLT5F3gqOi+pFpQVSdxHDr5UMPYU7ZqFpWvpqjG3Gg9TfFeCUfcWLY5BeZETwHouQ/qdRjla5e5qafwq496+3GGauaobaeK246VlbTheTBMA7fSgiPyldQ9yK/jz9T9M6od6MeNC+txA6M0VmPSZXb+Gv5RVymcmS9yKABDj3v6NDW5NQe7CwjGjafF85l7SKjFRgb34onNFqMTts1I69rlXPvLNK5xxnRyXURf2TVNjlunFOlgdaayjSnhiGdM3ku0BHZPPTs7al/mswmXr85f9Eni57Xksb9dm2wR+K20gpbaST2BaUmHWhVWADWevse02MMRVwDeC6DLH4vWaotmIl5H/DFAbDFGzOBXVVRhPTC8+A8dUCmcMDB3x0Ycc7+6O49uZ1RHNA0CQg85+/EoQr2MqBnIueq/Hyu5vwF9DlnNMeGRgX4a07VxUzIVsJc03pi5hq2PD9vZD9dX8SRClBpzLuqqItzQTdEVQXhVZarwkbOd+pUzRRtJVSwA0HMo4sttxMo557FKKw6ZZnVlE3XyzmWS+fhYXTaGKKv8qrMT4/yVNk0BE3sA321sBgpxbaX4SEKK6sZ92DUj+AOQCmj8Jrgohr7TDVmzEjQzVJmfJSpitxXNZTxWhmVXBGz/nx2+Z4LnlN5+yDmogEm11xYBi+NqPWyj8wFG6g6yASnNB6ImT2+AVE1Kqvw11wNxUwX9dlIUnUlE0EpE8TMRxtm5G5k92Q1tLxvgN1jYXhNXEgBng/0k3VmjxVTlsDmMKethu5aHuuZyzBz1q1M0Fb9QbhWsJsR0ESO0wAGRIEiNJx/Dgy5OTuOvDbjweFWCg/QjSsqHQ72p0tOtbzG2JmMFqyw3b9MZG/SMG2XVHyL2TX2QFGgPaBdzbT1FakLgXd5Hg9mS+jFq0syYjX62WuxFX2RzpZC6L/YveVqNqjlK0szxpPpbDG55PnouGtd/KQ35nrxtK8KzngE4QRZNZIyJc5oCSy/6u0wn7Y6BdkKcFQOAHnnOKKHCcz1dlcS9nRVxOQFKp/J/IKXp0CWa6LCCZq2lVx6YsnzdEaPVEW0fZym82qp+5U1zwm4UpS5WEcrRqLWBrBLZ1pTlBxtxtb6S7jWRr4xT0AWzbcBTVNypPW2auZYasEAW8mmHN5FXCVVwMwcR30qH8yfKfqo2X5/2gazRj5l9vnYddbnvbPe46KsHrbOygD+3HjgmIIptqhohqiroHXdb7mqzBq6bx3yaHOwcsHANSuNQ4MTdUmjZrkggMFVhgzA5Gh1EXcqL5b2FZCrJqbFabN00SoYeWNDTDFp0we67DYM9VuOFRSrfOTYkQca+Mwx8coxEWyPNaUl0Ih95iO0yBxOFo/ay3zYb0eUthzuK1xNIp3E85vjoJUZg9qCPmcv7k5bLNqK4PK1YLtyG5uEo8yLpcH+/kX29L0QPDf9szpUNXbmkf6Z2sFjhoaVkUIHYiO5SGQ7TmvcYe0dLpdGk5kdJtP0pMzMAaLP7ua4aGe7Se+ZJGP5zF5e1idNWobW6nqPfD4k78LrMUo+HrAfTuBbSzVNNztoJbdhcQ8rQlXCl6OZ/Lw9o5/oUuLZ9W2p2kkDFEELw4A20d3G0A5fyUeXn9bjw2DrFYZFs3m9eX/dDFqHzgaaMYyJX3gqgq4qgY5biTBA0AjfCIRPiDTwjinG6uILlqiOwmQcjGOwTWBcdq30112rjsOJPFi0tg+NAMzNQ+TDJys8kKZlhWmQIPwDlb3GT4F9nrvFgHVsr1BABSwO4mTCz500/dxhb5j+EPvNPUhtr2gpcEKS2LOuSD5Odd9jQ4kNraN5MiP66WQ+BTDFbX1chnnDfjf5LPjgnvwc2X1F++RZd97dnxqKgDufLuB4Qbz7/Tj32QI3wYW4AI4wcowb3vFuvAt5fzegf/AzxtxYNvzB87uPu/wjtjRxg2mC99MBl79aDn//zPlgjcNPYJ58JeN9DLBY/JdvH6tjFXpYPMH/sjC2v2f9C19fTX4U3uO5Y0pw0TZpAn8+Uy327hvxznPPJkrB7XB42BWP6RdEXiTB1UQRiB+clr3fezOf/+zRRpNLdTi1XHgwibuu93vlulfWycL7HOt3knOE8ef4uYkXDxyiSzONJnvPywdI3R/EP0r+iyTGt/7+b9Koi9L/XQqBJHA8ziO+qhrN/0kqP2/O7r8=" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823121"/>
            <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:168666"/>
          </con:parameters>
        </con:request>
        <con:request name="Get Information for the RightsToken by Node=Retailer,701" mediaType="application/xml" id="d9f3eda5-aa89-40e6-9d6c-56b63336acb3">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAMLAssertion2=zVdpk6q8Ev7ur7A4H6ccFsdxqdG3wioqKghu31gioCxKQNBf/wYdPc6cOdu998O1ytJ0ujtPdz9JOm//FGFQPcIE+XHUJehniqjCyI4dP3K7hKGLtRbxT6/yhswwYDoAIZikWLMq811iY1mOw1BMDdneS1Z7gY1mzaozZq1B4U+ToomqjFAG5QilZpR2CYaiqRrVrjFNna53GvUO03xutxprojq/AWBKABhShDqXJbtElkSd2EQ+6kRmCFEntTszoIw6WLNj3vAQvXeElwUTsvfmoM7MdyMzzRL47tBBXcJL032HJPM8f87rz3HikgzGSlJtEus4yHe/ETjad2PoyNEmvo45M4oj3zYD/2yWKyow9WKnCgI3TvzUC3/imiZpqnRdg4Vds+mX6BtBfl/ggu4PPX0AmSCzhjyTvjnT4AYmuG6wamhyl/j2+9Jc7fTEjNAmTkL0afx3cGB0hEG8h04N3aK6Iftzj1+kqvcG7Y4c2UGG/CMcl/XfmzZE1WkCN34x8hFmlYOql9pXC3SjDrT/phxv5CNODJv8IjO870KU/ie1eqzT1cvcDDLYG+3m3m5A7cVoqKR5nr6Ihnds1tsGb3QvEB6Vr6DuZX4ffybpnVPvRjHTHLhkX4lobhCPA1E02RFv+FB21hljjMKZsVzuyKkFWnaiDl9liYrGHg39gzEaUjIjtJJpK39SXvsrdlUx/bCV8duxfF4zM/cUDxYH7dgC8xfroIdte7+NhuhIt41DOipcgbF90GAtA7Tp1rb/pJrUNOAs7yQWp2gwq+ytozyRl9JhHrZXpDcTzkb3e0yPMZRxDeHpEmT5f9mg2ryZmvcBVx4BG7w1U9hTZJnPzhwHTjMX5DILXPzdgjHr7g7ezpfaOcUCVRUBz7HBVhgpYCcB2hBYT+Hmc6XgzmDAuuM5NtQrIFiziibkfL7i56raF3JPd6T5yZKCbH0WxgpAF2POUwRNmPOaLigKiK+yQuEtqdgqMyWX1RVfwQ54odifHamdQqnwbUZuKLMGs5o1svVyjuXiaRSOj5YuBAqnSNzsIM1kq86rwgBoq4XNiBm2PY/CfVxZGeyD0WAPtwCKOYXXBGdF3+WKbjBjXjMvMv2jTJGlgaKinFMvUUkVIR/MjfP3XHCswjmhUAg6mF5zYeucOKbWywEyF41I0UDOuxfjoZA7kxsQRaXyCnfN1UjINUEzxqKiybkALjJeyANkMWPPkryjXVeLgQ62j4XhVGEhYgJakXa0T41DxZREYIVz2q5rnu03fHMZ5+66lfPqajCM1zJ2MwaqwLIqwIAoUIaG88+CETtvTPZ+m/HhaCPGIfSSikLHw93xXFAtvz5xp+NFg9/smlPJn9ZNxyPlwGa29R2QZegMaU81HW1Fanzkn18nQ2MJ/WR1TscNlX71W42KtsiMJR8HTae/XBnDp2Jlq/pkOjMW03NRjA/b1jlI+xO2n8wGCu9OxhBOkf1EUqbI6i2+wa36W8ynjUbBRgW4CguAtHVdwccEZvvbKwn7miJg8gKFyyVuwUkzIElPgszyqroRPXpqS/PMoMeKLDgBTtNptdSCyppjeVwpylys9ytGpNY6cC7O1BdBdFWj8TRYwrU6DvR5CvL9fBPRNCXt1f5GyV1bKRngyPmMxbuIrWQyMMzJfkAVw/krRR9UJxjM2sCoFzNmV0w8d33auesdLsrqYeusdBDM9QeOyZhii4qqC5oCWtf9ViiyUdcCOyz2VmgXvI5rdjGOdVbQRJUyCp4Hw6sM6YAp0OosbBVOuNhXQKGYmBZHa+mhVTT2J7qQYdJmD3TZWgz1W46VFKt85NiBAyr4zDHhyjEBbA5PcounUeOV26NF7rKScFCb89GgvafU5WhXYZ9E0k394GUStXJ9+LSgT3nT26qLRVvmPe4p2qy8upWylHm2VTjYNSVf2/HR60twUkaK2jB8MjhRW3jI0agylulIqKdnkWwn2RMbrv3wfK6/MEY4nWVH2TCHiD551mHRzrfT/itJJtKpcW6uj6q4jO3V9R75fEjehddjlHw8YD+cwLemapZZW2int2F5D8t8VcSXo5n+vEGjn+mLxHdqm4tqJ4vQHtoYBnSIHk1RTJ1+Ix99flqQi6ONX1qWHef16v11P2iHHQuaCUyIX3gqo67KkYZ7iThCUI+7BMJHRBb5hwyD9fANS1THcTqJJgnYpDC5NK70142rhuPZ+7Dsbh86AViY4T6Az3YckqZtx1mUIvwHXZqNnwL7PHeLAes4fqmASlgsxNmEn5vp+mvn5YbpD7Hf3IPM8cueAickTXz7iuTjVO8hNgfa8DmKHfiM28gb4rvinxm22z8akr9AQ35OxH0d5+g/rHp7Dsg87pR6gOV44e7349xnC9w2l+ISLsJ4r1hhhh8uybPln8n7SwP9g58+pmU78AfP7z7u8o/YstSLZinefyFmS/Uy/P3D6IM1Dj+FRfqVjAswwHLxX76W7I5d6mHxFP/kceJ8z/oXvr6a/Ci8x3PHlOKiWVkKfz5TLbd6l3jfFr5DXAS3w+SBL4/p5wVOIMHVROaJH5xeesX35r9AP23+l8poZnswNIm7rv975Zp/qZONjwWs30lPe4y/wA9UvHjkEr16Cx9kzPe98AFU7wfxj5L/Io3J7UXwN4nUBPH/LolA5FmOZur4cqu//E9S+Xl79v4F" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823121"/>
            <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:189772"/>
          </con:parameters>
        </con:request>
        <con:request name="Get Information for the RightsToken by Node=Retailer,799- V7.8" mediaType="application/xml" sslKeystore="222259_concat.pem" id="f4ea79b8-d6da-4f4f-afbb-7a9ef7c10047">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdZc6rMFn33V1ieRythUKJYJ6lqBhEVlcEB3xBaQBmUBkF//W0wGpOTM3y3KqmkN3tYvfeiWf0TWWFA9wBCMEn9OKrLwmvDsmySIhn2qUOR8KlNtainrrWBT+SmxWwdh952qW2jLiOUQTlCqRWlrw2apKgnsoV/DJru0e0eQz4zrfa6UV/ABOHM2OWZbNSLMIhQr6r62siSqBdbyEe9yAoh6qV2TwfKuIc9e9YNUuPt5xVkVTB589L00CMI+9mBNgwC+9mOQ+In8cnnp4N6uu9GVpol8L2mg14b77F5nj/nrec4cQmaJEmCZAns4yDf/dF4q92CoSNH2/i65q0ojnzbCvyLVYJSYOrFTh0Ebpz4qRf+JjVFUGSZ+gkW9pNNtaMfDeKjQIXuHzN9Apkg6wl5FnVLpsEtTGBkw/pck18bP/5pgNdQI7EitI2TEH1Z/zdEMDrBID5A5wndNnYD9+8Zv+nW209o9+TIDjLkn+CkZMnBsiGqzxK49YuxjzD3HFSvpl8v0I1g0P4vE/lJPOLEsIlvOiP4LkTp/zOux1FdsyysIINvnabhrfSu3GbN6b6QgnA0NkJ7b3Qz8bWC8Oh8BXWf9Pv6K0/vtHoPWtrrxSVTZhoI8i3Z3rWXl9kwgCG18Vr5S3c9P+sDMzR1PTlYs2JwnhK0Icep03U62qkoQGz47j51m8PCYWuXo6BM20uS7SbRKjN3OujsLIt8IXc7w/Re2iBOrKYVs8l64qwjlZVaoitTjoBkIVNBGHAItffu3IMHZNRmw34+iDxtHzoRZZ3RfNx+/djT4x7KfY3gudpk+f+KIVnBSq37gi8Pii1+O1P4psi42IXnwVl3QS5zwMW/OzDh3P3R2/sSm5McUNU+EHgu2IljBewlQM1FzlP4xUIp+AsYcu5kgQONGgjWnKKJuZCbwkJVB2LuGY60OG+kIFtfxIkCUBXMe4qoiQtBM0RFAfHVVijCRip2iq7ksmoKNZxAEIvDxZHYFEqFb9Myo+gMbepMtl4tsL1/HoeT08YQA4VXJF4/Srq8aQmqOASaubTpfoZjL+PwENfMOfcQNDzAHYD9nMQ1wUUx9rlizOmJoFmVzfhsU2RpqKgo59VqV1JNzIeL+eWjFzyn8E4oFqIBZtde2Abfn5Dr1RBZSyZSNJALbhU8EnNnegOiqGRe46+9Gou5JmrzSV/R5FwElU0Q8wBt6Im3kbyT3VKLoQF2j4PhVXHZj/DzSDvZZ+ZYs6Q+2IQLym5pnu0zvrWKc3fdzQXVHI7itYzTTIAqcpwKMCASlFvD/efAmFsw04PP0j4cb/txCL2kplDxaH+6FGTXb03d2WTJCNt9Zyb5s5bleIQc2PSutQeyDJ0R5amWo5mEJkT+5WU6mq+gn5iXdMKo1IvfZWraMpuvhDjoOIOVOR81C9NWjelMny9nl6KYHHfdS5AOptwg0YeK4E4nEM6Q3SRIq88ZXYHhzcEO82mrkZCpAVfhAJB2riv6mMDcYHcl4UBTRExeoPC5xC95SQeS1BRlTlDVbd+jZra0yObURJFFJ8BtOpsrLaiteU7AkyKt5fpg0n1ybQCnSqa2xb6rzpnmcAXX6iQwFinID4ttRFGkdFAHWyV3baVkgCPnOoffIq6WyWBuTQ9DshgtXkjqqDrBUGfBvFXo9L6Yeu76vHfXezwU8+HVMQ0QLIwHjsmYYsuaaoiaArrX961Q5HlLC+ywOGxCuxAMPLMqODY4Ueur5LwQBDC62pAB6AKZF3Gn8GIVXwOFYmFanDYrD5nRxJ8aYoZJmz3QZbehyb9yrKRY7TPHjjxQwVeOiVeOiWB7bMpdgULMC39Ay9zlJPGodhbjIXsg1dV4X+OafcJN/aA9jbq5MWouqXPe8XbqcsnKgsc3o63ptTYpR1oXW4XDfUfytb0QvbSDszJWVGbuE8GZ3MFjjsa1iUxFYiu99Ak2yZpcuPbDy6XVpufhTM9O8twaIersbY5LNt/NBi8EkUhn5tJZn9T+KrbN63fk6yF5N16PUeLxgP10At+kl55tdtBOb8vyOywL9T7+OFrpn2VcafGdp23l2juUWhClMEobb2VUKeF6GRZ6vtPDX87rmgUsz/N9qgU4XmDbfZFsk1SfBFjQsHT/pXXTelcUXyDycbT1y1qlmL1+rP8M0A57G2glMGn8IVPZp7ocaVh9xBGCRvzaaJF0S2AxMIZi2A4pMEK3C7qAa3dEEtB0u1GfxOk0miZgm8LkQSC3vwpkDdr+wYelin7XEijFjThapywNqOeT9RzBDMvspFS6OLLLVA0gnCw82PgBPt2SQ4zS54N3qMTMb7fx9dltx9jH8UsHVILmIJ4W/EbSt2+If9kZ/a30v6UHmeOXmgW3L018+4rk86MPNpQ0uFOB7LDdG+a76z+Hsr+GEn9ARHxtxr2Sc/If6t4uJlhrYzlW3UcQHtrRej4+Z6dTVo2pU0rNBKcnKIIkdGhnWC6ejXgPI+KegfgXoX7H/KXu3f4ZXZZ6kZ7itzzEjKpXy79f0j5F4waksEi/s/EBvpaVxf94c7N7dumHzTP8J48T56Pv3+R6qIMhlyeUH7nlqlTY58/jfX8TenaMs/r4kIqTx9zfxX9X+7Px3q47lBSzYpOl8PdP6uXpg6/Kth1nUSoLjcrweCJWmNPzAfY+nH5JU0nc9ztLgX57Z1kpY932YGg17r7+352f/GrwNsRRyK+wvDYKfPvGxSP34QR+B/h4CFMkZjB9b9MnvG+/mH+1PHTuK3/f/gc=" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="AccountID" value="urn:dece:accountid:org:dece:107006"/>
            <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:9DA1D199CCF0B961E0401F0A2222590395"/>
          </con:parameters>
        </con:request>
      </con:method>
    <con:method name="PostMethod" method="POST" id="bd60321a-dd4a-41ce-92dd-d380dd73c1ee"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d4869ab3-45ab-4cf0-b93c-4ed648bac66f"><con:settings/><con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT" id="8900d932-904f-46f0-b12a-819d12eff852"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="ee97794f-715a-4991-9db1-a94fbf3f8dc2"><con:settings/><con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DeleteMethod" method="DELETE" id="5b61e4ca-7317-4fff-906c-ad7b36d0a4ad"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="078d7639-5e58-4a8a-9f48-56187ab64791"><con:settings/><con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD" id="785afb04-ca48-40d0-b602-3ef94f895508"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="4a8b75b8-efd5-4653-8169-dd0371788870"><con:settings/><con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" basePath="" definitionUrl="" id="e4bf26a0-f6df-43cd-8efb-b985baa32034" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints/>
    <con:resource name="STS" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?" id="92ab44ef-be54-413c-bbc6-f8f77339c93d">
      <con:settings/>
      <con:parameters>
        
      <con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#tokentype}</con:default></con:parameter></con:parameters>
      <con:method name="STS - POST" method="POST" id="a9b600b2-0752-4436-b9ae-c03b6d13abd7">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="72c3a4db-b4ad-4f41-aaf3-05b3402fee94">
          <con:settings/>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="STS Get" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" id="ee1361eb-d4ba-4d77-9e60-adddbe2d0e69">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ASSERTION</con:name>
          <con:value>${#TestCase#assertionUUID}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUUID}</con:default>
        </con:parameter>
      </con:parameters>
      <con:method name="STS - GET" method="GET" id="8bdeeebf-ba06-40ac-9bea-f801778eb2e6">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" mediaType="application/xml" id="14254ad3-17da-4ccb-a38e-ff6f4565547a">
          <con:settings/>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenCreate" type="rest" basePath="" definitionUrl="" id="ac945bb2-96fb-45c6-b57d-4c23e79b31d5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="RightsTokenCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" id="27dce6a9-fae0-4a47-a576-0be1e7ee6576">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>AccountID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="RightsTokenCreate Request" method="POST" id="7ce3111a-ab3d-45d6-8dfc-34cf1228b9d9">
        <con:settings/>
        <con:parameters>
          <con:parameter disableUrlEncoding="true">
            <con:name>AccountID</con:name>
            <con:value/>
            <con:style>TEMPLATE</con:style>
            <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
            <con:default/>
          </con:parameter>
        </con:parameters>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>201</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 401 403 404</con:status>
          <con:params/>
          <con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>text/html</con:mediaType>
          <con:status>413 500</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>text/plain</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c9dcf6e6-4b56-429d-9f0e-ba071c6a413e">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request><![CDATA[<ns4:RightsTokenData ALID="${#TestCase#ALID}" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="${#TestCase#ContentID}" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>
      <ns4:PurchaseProfile ContentProfile="${#TestCase#PPContentProfile1}">
         <ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload>
         <ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream>
      </ns4:PurchaseProfile>
      <ns4:PurchaseProfile ContentProfile="${#TestCase#PPContentProfile2}">
         <ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload>
         <ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream>
      </ns4:PurchaseProfile>
      <ns4:PurchaseProfile ContentProfile="${#TestCase#PPContentProfile3}">
         <ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload>
         <ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream>
      </ns4:PurchaseProfile>
   </ns4:RightsProfiles>
   <ns4:ResourceStatus>
      <ns4:Current CreatedBy="${#TestCase#RSCreatedby}" CreationDate="${#TestCase#RSCreationDate}">
         <ns4:Value>${#TestCase#RSValue}</ns4:Value>
         <ns4:Description>${#TestCase#RSDescription}</ns4:Description>
      </ns4:Current>
   </ns4:ResourceStatus>
   <ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc>
      <ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location>
      <ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentWebLoc>
      <ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location>
      <ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc>
      <ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location>
      <ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:FulfillmentManifestLoc>
      <ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location>
      <ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
   <ns4:ViewControl>
      <ns4:AllowedUser>${#TestCase#VCAllowedUser}</ns4:AllowedUser>
   </ns4:ViewControl>
</ns4:RightsTokenData>]]></con:request>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE Policy PolicyCreate" type="rest" basePath="" definitionUrl="" id="10aaefa3-d97f-4e74-be85-3edbd7a39ca6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="3a22e105-5b3e-47a0-89a9-88c7a3cdfdc6">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="POST" method="POST" id="64fa2d76-13bc-40c0-b3c8-191f12b8c0ae">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 403</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0 201</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyCreate I" mediaType="application/xml" postQueryString="false" id="99b7b77c-e74d-4686-a04c-f0c76f572157">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyCreate Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="d4c09459-c31a-4762-8262-8659664150f2">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="POST" method="POST" id="8a1c843b-b50c-46bc-bfb1-8eb3d4c35723">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 403</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0 201</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyCreate Account" mediaType="application/xml" postQueryString="false" id="01d22346-ee39-490a-bb7c-a7574e77e5a6">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DEC Policy PolicyGet API" type="rest" basePath="" definitionUrl="" id="9ecede1e-cbc1-42f9-bf9a-980d04ea7e24" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints>
      <con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="5c6330c2-d4fe-4337-b7f1-72f0a813ecb0">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="GET" method="GET" id="5f89871f-2c4c-415c-a472-26e35924675d">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyGet I" mediaType="application/xml" id="526e446a-61b7-4558-b1ec-e9df12e2350f">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyGet for Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="df682343-7d5e-4179-8d00-0b99dae99f71">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="GET" method="GET" id="ae7ae345-f502-4cb7-b280-cebbbc21b6b9">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyGet for Account" mediaType="application/xml" id="4007dd20-6cca-413b-b82d-33628d08491c">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE Policy PolicyDelete" type="rest" basePath="" definitionUrl="" id="c8e6c686-35a2-46af-b868-26ee5706330c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="9eeebcc5-511a-4a73-bf03-3a612ced2f7d">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="DELETE" method="DELETE" id="157b82a2-743b-4622-a2d7-1e0a83dc7b96">
        <con:settings/>
        <con:parameters/>
        <con:request name="PolicyDelete I" mediaType="application/xml" id="126bd564-9d8f-4a89-85fa-8be5403086e1">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyDelete Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="616019da-af25-4ba1-9de4-53e421852300">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="DELETE" method="DELETE" id="64162479-70dc-4d54-a77f-d74c27f9b1b1">
        <con:settings/>
        <con:parameters/>
        <con:request name="PolicyDelete Account" mediaType="application/xml" id="ff040439-d6b3-42cd-a04a-2790b0041ce9">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account_Create" type="rest" basePath="" id="6156a095-bbff-4341-8a6b-d4d47bbc52d7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="9260689c-3a09-450c-b0fe-dc17afec5f6a"><con:settings/><con:parameters/><con:method name="Method 1" method="POST" id="91d3b1ad-2855-47ad-9497-9cd421ee5bf4"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="472f0cdd-ba60-4351-a7b9-716201f9ab09"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserCreate" type="rest" basePath="" id="64d9004c-51dc-443f-b262-88b1318e099a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="858aa9e8-0082-45a7-a93b-063d95a70c7e"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="03c3c93f-7229-418c-bd54-1ae99702fc06"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="354a1616-bd7d-4889-895a-a4f6c8b03dd9"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" basePath="" id="a31c66ca-81a5-4839-b79e-cf2d6b4c362a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="FirstUser" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="e6699150-cb6f-44f6-9757-be3ae84cc212"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="0774dac3-e812-4a47-b743-182be4a25f3d"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="ff6c2c08-45a9-4a76-8f71-6bb687ca81e1"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DMRCreate" type="rest" basePath="" id="d8d80f71-8137-446f-a453-caca5409bdca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="DMRCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" id="1585d726-9546-454c-a32b-405d969587d0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="7608e288-cd27-4421-969f-c4b0fe744458"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="b46545b4-9c63-41b6-ad60-012d967cede4"><con:settings/><con:endpoint>https://qa.p.uvvu.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserStatusUpdate" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="" id="e95e73ce-f543-4c99-8494-1a36541414f7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/aravind.racharla/Desktop/Services/UserStatusUpdate_1.wadl"><con:part><con:url>file:/C:/Users/aravind.racharla/Desktop/Services/UserStatusUpdate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="UserStatusUpdate"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="UserStatusUpdate">
      <doc xml:lang="en" title="UserStatusUpdate"/>
      <param name="AccountID" default="AccountID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="UserID" default="UserID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="UserStatusUpdate">
        <doc xml:lang="en" title="UserStatusUpdate"/>
        <request>
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 401 403 404">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 404 500">
          <representation mediaType="text/xml"/>
        </response>
        <response status="303">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="403">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
      </method>
      <method name="GET" id="UserStatusUpdate - GET">
        <doc xml:lang="en" title="UserStatusUpdate - GET"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
          <representation mediaType="text/plain;charset=UTF-8"/>
        </response>
        <response status="403">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="${#Project#SchemaNameSpace}"/>
        </response>
      </method>
      <method name="POST" id="UserStatusUpdate - POST">
        <doc xml:lang="en" title="UserStatusUpdate - POST"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="${#Project#SchemaNameSpace}"/>
        </response>
      </method>
      <method name="DELETE" id="UserStatusUpdate - DELETE">
        <doc xml:lang="en" title="UserStatusUpdate - DELETE"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="${#Project#SchemaNameSpace}"/>
        </response>
      </method>
      <method name="HEAD" id="UserStatusUpdate - HEAD">
        <doc xml:lang="en" title="UserStatusUpdate - HEAD"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType=""/>
        </response>
        <response status="403">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="OPTIONS" id="UserStatusUpdate - OPTIONS">
        <doc xml:lang="en" title="UserStatusUpdate - OPTIONS"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="UserStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="809407ea-5414-456c-84fb-780534aa0a9c"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default></con:parameter></con:parameters><con:method name="UserStatusUpdate" method="PUT" id="d07256f9-9464-4306-8d15-3acb5b56a7b9"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d7746db2-be0b-4946-906e-a44a4bf669c0"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - GET" method="GET" id="904c0e34-d435-435b-8b5d-3af3b095988f"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="4ffbabae-2caf-4b72-afa1-3e40006a0c95" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - POST" method="POST" id="a721817f-8bdd-4098-b993-684074dc15cd"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="af015ab7-6701-4e8b-b1f5-044f93723c5a" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - DELETE" method="DELETE" id="63f7adb1-7217-465c-9fed-92bd486b586f"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="a388e4c0-a19b-4854-b091-2fd08964e32a" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - HEAD" method="HEAD" id="2bc448e1-3a91-45b5-80f9-d2c281ea4e31"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="52412c53-1cbe-4933-945d-87049a74a5fb" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - OPTIONS" method="OPTIONS" id="5b3f6c33-c28a-40cc-898e-508309dae10c"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="490fcfaf-d144-401e-9707-fe23c2efb041" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDataGet_byAPID_DRM" type="rest" basePath="" definitionUrl="" id="5e42ec57-9a3b-4ae4-9599-848381d2bbfe" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenDataGet_ByAPID_DRM" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/DRM/{NativeDRMID}/RightsToken/{APID}" id="406486a4-dd45-4dc3-bdd2-f27202867b9e"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>APID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NativeDRMID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsTokenDataGet_APID_DRM" method="GET" id="768b0349-aa87-4e81-abee-36a68fd1ad4b"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:RightsTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>502</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="d5989ce0-4c23-4aa2-8144-80ff5bd2bfa9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="APID" value="${#TestCase#APID}"/>
  <con:entry key="NativeDRMID" value="${#Project#NativeDRMID}"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:testSuite name="R1_RightsTokenGet_ByNativeDRMClientID" id="28349d85-2ab6-42d7-a827-6e5ec5a28f86">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property></con:properties>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10001_RightsTokenGet_RTL_FUNC_with_valid_APID and percent encoded NativeDRMClientID" searchProperties="true" id="92b7ce64-9aeb-4890-a746-fe62ec770fea">
      <con:description>This test case will verify that Application Tier properly handles a RightsTokenGet request when invoked with the GET method and valid request for Valid Account id and Rightstokenid.</con:description>
      <con:settings/>
      
      <con:testStep type="groovy" name="Reset User Credentials" id="d7ab1964-4f3b-4675-8996-f3f972d9f1c3">
        <con:settings/>
        <con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node DSP" id="5b876f56-dee7-47b2-a24e-bbc0332bfa5b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

log.info(testProject.getPropertyValue("nodeIdDSP"))
testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdDSP"));
log.info(testCase.getPropertyValue("nodeid"))
</script></con:config></con:testStep>
      
      
      
      
      
      
      <con:testStep type="groovy" name="Feed RightsTokenGet Request with Valid Data" id="c25c1ef5-fd6b-419a-b0f6-5034d126561c">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("APID","urn:dece:apid:EIDR-X:1234-%253A705908794-F5DD-9ABC-DEF0-8%3AABCD:");
//testCase.setPropertyValue("nodeid", testProject.getPropertyValue("Node_oid"));
testCase.setPropertyValue("expectErrTypeRTGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.getPropertyValue("assertionAccountIdFULL"))

// Call RightsTokenCreateRequest - Get the Required Rights Properties TestStep

def FeedRTCReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request");

FeedRTCReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTCReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTCReq, null );

TSrunner.runTestStepByName("Get the Required Rights Get Properties");

assert TSrunner.status == Status.INITIALIZED;
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsTokenGet Request" id="2687c1fc-c398-44c1-836e-8ad41070b48a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

log.info "RTCRequest"+RTCRequest;

def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

//TSrunnerRTC.runTestStepByName("pem set");TSrunnerRTC.runTestStepByName("RightsTokenDataget");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Response" disabled="true" id="0fb41c7c-d248-496e-918b-9a296c4f75d0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the RightsTokenGet Response" disabled="true" id="f07c47d2-8cce-4a1e-bcb7-6ec57ea36a94">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify theRightsTokenGet Response against DB Result" disabled="true" id="45f0cdcf-fcfa-4e4d-8486-02856d756976">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights GET  Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update Rights Token Details to Project Properties" disabled="true" id="2c6b018c-3a8d-40fb-b9e9-6ac586d9a6ad"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("rightstokenid", testCase.getPropertyValue("rightstokenid"));
testProject.setPropertyValue("DBrightstokenid", testCase.getPropertyValue("DBrightstokenid"));
</script></con:config></con:testStep><con:loadTest name="LoadTest 1" id="70d1ba1f-18df-4bf9-af7b-3baa32801931">
        <con:settings><con:setting id="HttpSettings@close-connections">true</con:setting></con:settings>
        <con:threadCount>5</con:threadCount>
        <con:startDelay>0</con:startDelay>
        <con:sampleInterval>250</con:sampleInterval>
        <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
        <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
        <con:historyLimit>-1</con:historyLimit>
        <con:testLimit>60</con:testLimit>
        <con:limitType>TIME</con:limitType>
        <con:loadStrategy>
          <con:type>Simple</con:type>
        </con:loadStrategy>
        <con:assertion type="Step Status" name="Step Status"/>
        <con:maxAssertionErrors>100</con:maxAssertionErrors>
        <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
        <con:strategyInterval>500</con:strategyInterval>
        <con:reportParameters/>
      </con:loadTest>
      <con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>accoid</con:name><con:value>C541C35424FBC0EEE0401F0A059935F3</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:EDCDD4E612F549C7E0401F0A059948CB</con:value></con:property><con:property><con:name>accountoid</con:name><con:value/></con:property><con:property><con:name>accountrowoid</con:name><con:value>A49F28BF260F2548E0401F0A0599026A</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:EIDR-X:1234-%253A705908794-F5DD-9ABC-DEF0-8%3AABCD:</con:value></con:property><con:property><con:name>assert</con:name><con:value/></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_29c87fd8-c363-4c28-a0f5-6dd27dccc40a</con:value></con:property><con:property><con:name>assertXML</con:name><con:value/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property>
      <con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>A49F28BF260F2548E0401F0A0599026A</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>retailer</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>A599B9961FE21A3DE0401F0A22225961EA</con:value></con:property><con:property><con:name>password</con:name><con:value/></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:C52FBD09141A8458E0401F0A2222595B5F</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:C52FBD0914288458E0401F0A2222595B5F</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rcUUID</con:name><con:value>1</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RTGET_R3_EXAMPLE_ALIDVersion_244299.txt" ContentID="urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:EDCDD4E612F549C7E0401F0A059948CB</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:EDCDD4E6153249C7E0401F0A059948CB</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>554</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:EDCDC9FEAB941121E0401F0A07994028" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt" ALID="urn:dece:alid:file:RTGET_R3_EXAMPLE_ALIDVersion_244299.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-18T11:28:25.496Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-18T11:28:25.506Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsTokenID</con:name><con:value/></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>1</con:value></con:property><con:property><con:name>rtDBinfo</con:name><con:value/></con:property><con:property><con:name>RTObjType</con:name><con:value>RightsTokenInfo</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAMLExpDate</con:name><con:value>2013-06-29 10:23:47.0</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>null:null</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value/></con:property><con:property><con:name>useroid</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value>A599B9961FE21A3DE0401F0A22225961EA</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>0176d553-7fcd-4ebe-89d7-82c08d6ec9b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1bed170-78dd-4b13-b0c7-345a1f9d62a3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>476875db-f4ec-4f86-82ca-aab1cac5bb97</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  </con:testSuite>
  
  
  
  
  
  
  
  <con:testSuite name="Common Test Steps" id="62b67cfe-3e55-45b4-87d6-0ddcb9b8bed2" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties/>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Request" searchProperties="true" id="730c85bd-9520-48a3-9a7a-48e7436326bf">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="032b34b4-2b85-4dfd-8a3f-da5c6dd80399">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
log.info("Call TC........."+CallingTCase.getName())
log.info("nodeid................."+CallingTCase.getPropertyValue("nodeid"))

//testCase.setPropertyValue("nodeid","0701");
//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ testCase.getPropertyValue("assert"));
//headers.put("Authorization","SAML2 assertion=zVdJk6rKEt77KwzPssNmUJzidN8oxkZFBcFph0UJKINSIOivv4W2HrvP/N5bvEVHW0lm1peZX2Vlff2nCIPqESXYj6OXGvNM16oogrHjR+5LzTLleqf2z2vlK7bDgO0BjFGSEs2qKr7UIAfXTY7p1jkHsfUmbHTrdmdj1xtduKHbzfWa7cJaVcU4Q2qEUztKX2oszTB1ulVnOibd6nHNHsM8c1xzVavObhjYEgNBFeHeZdeXWpZEvdjGPu5FdohwL4W9KdCGPaLZs2+Qaq/vIC8bJtTrVwf3pr4b2WmWoHeHDn6peWm671FUnufPeeM5TlyKpWmaorsU0XGw736pkYDfjZGjRpv4uhbsKI58aAf+2S531FDqxU4VBG6c+KkX/sQ1QzF06bqOCliHTDP6UqO+bXBB94eePoBMsF3Hns3cnBlogxJSOlS1DPWl9uWPqnM1NRM7wps4CfGn9d8hQtERBfEeOXV8C+wG7s89/iBbr18R7KkRDDLsH9GopMDehghXJwna+MXQx4RYDq5eyl8t8I09CP5NRb5SjzgJbOoHmRF9F+H0PynXY6muXmZ2kKFX8NQdthZDn2nuOKvNtU5spzD2K66ZxC8XCI/KV1D3Sr+vP/P0Tqt3I8tm1/suNd7S6TDeHncQGFjx/aHmSG/FErvmvCWnvpDussMM5EtLSmm4VrZcs6/EIE83whGrihu3Y8qElcPIYgehiZyx48AJL7QmKLbEaBW2AZaVnDl0DmEWdeSA0QYyT4+H4XSQ8+5yjhJx5e/bUmOqupQ4TFDBVvJRzHHDRTiAXe/cga21aL18i+kxhjKuATpdgix/Lzi6K9qpfV8IZRfYkNOZoldNVcXsLAjgNHVBrvLAJX9bMOLd3cHb+Uo3p3mg6zIQBT7YSkMN7BTAWBLvacJsphXCGfR5dzQjhmYFBCteM6RczJfiTNffpNwzHWV2WitBtjpLIw3gi7HgaZIhzUTDlDQNxFdZoYlrpdhqUy1X9aVYIQ5EqdifHaWbIqXwIaty2pRjl1MuWy1mRC6fhuHouDalQBM0RZgelKm6boi61AfGcg5ZOSO252G4jytLi38w6u/RFiA5p8me4KyZu1wzLXYkGvZFZn6UaarS13ScC/olKqUi5f2Zdf6WC4HXBCeUCskEk2suoCnII3q16GN7zkWaAXLRvRgPpNwZ34BoOp1XhGuuhlJuSIY1kjVDzSVwkYlSHuA1O/LWineEDb3om2D7WBhBl+ZyRL5HxhGeuEPFVmSwDmcMbBge9DnfXsS5u+rkor7sD+KVStyMgC7xvA4IIBqUoZH882DIz7jx3u+yPhpu5DhEXlLRmHiwO54LuuM3xu5kNOfEza49UfxJw3Y8Sg0gu23sgKoiZ8B4uu0YS8oQI//cGg+sBfKT5TkdcTrT8jtcxZhn1kKMg7bztlhag6diCXVzPJla88m5KEaHbeccpG9j/i2Z9jXRHY8QmmD4RNG2zJsdkROWb1vCp41BI64CXI0HQNm6ruQTAvNv2ysJ3wxNIuQFmpArwlxQpkBRniSVF3V9I3vMBCqzzGJGmio5AUnTabkwgspK4EVSKdqer/ZLVqZXJnAuzvSmJLu6xT31F2iljwJzloJ8P9tEDEMre/1to+Uu1EoGOGo+5ckp4iuZCix7vO/TxWDWopmD7gT9aRdYjWLK7oqx565OO3e1I0VZPhydpQmCmfnAMZVQbF7RTcnQQOd63gpNtRpGAMNivw5hIZqkZhfj2OQlQ9ZpqxBFMLjKsAnYAi/P0lYTpIt9BRSaTWhxXC88vIxG/tiUMkLa7IEu2zVL/5ZjJcUqHzl2EIAOPnNMunJMApvDk9oRGcy1hD2e5y6vSAe9PRv2u3taXwx3Ff5JptzUD5rjqJObg6c5c8rb3lafz7uq6AlP0WbpNdYpT9tnqKP+rq34xk6MWs3gpA01nbN8KjjRW3TI8bAyUplIaqRnmeom2RMfrvzwfG40WSucTLOjatkDzJy89WHezbeTtxZFJcqJO7dXR11exHB5vUc+N8m78NpGqccG+6ED3+aqabbeIpjeluU9rIpVmVyOdvrzGY15Zi4S36lvLqq9LMJ7BAkM5NReSzMHQdTLyBjnOz1ydV7XgOt2+W63xcgSy4CGKNFNmpFpQLdLoQS+Uo8wPmEU4mjjl5uVo+r1tv71FAnD3hrZCUpqv/BUJqqqRgYZP+IIIzN+qWHSVbLIP2QkPo9cyrXqKE7H0TgBmxQll3GX/fG4a5AU7H1UzsQPwwMq7HAfoGcYh5QNYZxFKSY/8GU++Smwz99uMRAdxy8VcAmLR6QA6PMI3mj3GjdMf4j95h5kjl+OISQhaeLDK5KPn14fYivL+hzFDnoua3iDfNf8U8vO95bUL/BQn1Nx38g5+g/b3p4RqkjGq1fAC6J09/vx22cLMm6X4hIvJoCvYFFGHjzJ89o/U/cXCv6HvJrsNXTQd57ffdzlH7FlqRdNU3JoQ8KX6mX5+wfVB2sSfoqK9EcyISAAy81/+cqCPVjqEfGE/MvjxPmW9R/4+tHHj8J7PHdMKSnaOkvRz79Uy8P+Uns/GL5TuwhuHeiBMI/pFyVBosDVRBVr3zm9DJjvL4YC//TFsNCGU+ih0K7ddf3fK9f9S50gaQxEv5ee9gR/QR62ZPPIfWh/95geOmCzK7MdXmZbtMxyzc69A5LOSLOtewf8GMnrd+LvJf9F7pPb2+Nvsm9I8v9d5oEs8gLDNsg12mj+T1L5+Uy//gs=");

testRunner.testCase.getTestStepByName("RightsTokenDataget").testRequest.setRequestHeaders(headers);


//SetUp test properties

testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
testCase.setPropertyValue("APID",CallingTCase.getPropertyValue("APID"));
testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
//testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
}
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",testCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="9c2017db-390b-4da4-b4b0-1fce6ebdc02c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenGet byTokenID");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="RightsTokenDataget" id="569631d6-c1f7-4ee0-b83c-e1af144a57f4"><con:settings/><con:config service="RightsTokenDataGet_byAPID_DRM" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/DRM/{NativeDRMID}/RightsToken/{APID}" methodName="RightsTokenDataGet_APID_DRM" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenDataget" mediaType="application/json" sslKeystore="DSP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1 ad G0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssY De ks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVP GO Z6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d 8F mBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq 5Y QFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF 6/ VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgc Rq cBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwr wu BpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8Jdk nd YuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM= " xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="APID" value="${#TestCase#APID}"/>
  <con:entry key="NativeDRMID" value="${#Project#NativeDrmId}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      
      
      
      <con:properties>
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:EDCDD4E612F549C7E0401F0A059948CB</con:value></con:property>
        
        <con:property><con:name>APID</con:name><con:value>urn:dece:apid:EIDR-X:1234-%253A705908794-F5DD-9ABC-DEF0-8%3AABCD:</con:value></con:property>
        
        <con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:EDCDD4E612F549C7E0401F0A059948CB</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property>
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:\certs\DSP_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>PolicyLockerViewAllConsent</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:F3636D837C6FC7A0E0401F0A05995275</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10001_RightsTokenGet_RTL_FUNC_with_valid_APID and percent encoded NativeDRMClientID</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R1_RightsTokenGet_ByNativeDRMClientID</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1 ad G0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssY De ks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVP GO Z6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d 8F mBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq 5Y QFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF 6/ VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgc Rq cBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwr wu BpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8Jdk nd YuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM= </con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Pem" searchProperties="true" id="57feac14-2621-42c1-ba21-0992f43a79c7"><con:settings/><con:testStep type="groovy" name="Set Pem" id="7c82e997-6553-4212-8c17-a8cda1048bee"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");
log.info "nodeId: "+nodeId;
String certPath;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
{
  log.info "it's Windows";
  certPath = testProject.getPropertyValue("certsPath_Windows");
} 
else 
{
  log.info "it's not Windows"
  certPath = testProject.getPropertyValue("certsPath_Linux");
}

log.info "certPath===="+certPath;

File f1;
if(nodeId=="loadtest:retailer"){
                                f1 = new File(certPath+"loadtest_retailer_concat.pem");
                }else{
                                f1 = new File(certPath+nodeId + "_concat.pem");
                }

File f2 = new File(certPath+nodeId + ".jks");
File f3 = new File(certPath+"truststore-"+nodeId + ".jks");
boolean imFine = true;
if(f1.exists()) 
{
                if(nodeId=="loadtest:retailer"){
                                keyStorePath = certPath+"loadtest_retailer_concat.pem";
                }else{
                                keyStorePath = certPath+nodeId + "_concat.pem";
                }
                pwd = "123"       
}
else if(f2.exists())
{
               keyStorePath = certPath+nodeId + ".jks";
                pwd = "abcd1234"           
}
else if(f3.exists())
{
               keyStorePath = certPath+"truststore-"+nodeId + ".jks";
                pwd = "abcd1234"           
}
else
{
               log.info "Error!";
               imFine = false;
}

/*switch (nodeId) {
                case "sriniretailer":
                                keyStorePath = certPath+"\\"+nodeId + ".jks";
                                pwd = "abcd1234"
                break;
default:
keyStorePath = certPath+"\\"+nodeId + "_concat.pem";
pwd = "123"
break;
}
*/

if(imFine)
{
                log.info "keyStorePath: "+keyStorePath;
                def callTSname = testCase.getPropertyValue("sName");
                def callTCname = testCase.getPropertyValue("tName");
                
                def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
                
                callTC.setPropertyValue("keyStorePath","$keyStorePath");
                
                
                SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
                SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
                log.info 'pwd='+pwd
}

assert imFine == true;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenGet Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>Common Test Steps</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreateRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="79cadfe0-b36f-4ab5-b08d-9caadd0cdd54">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="2fc72b24-9e65-4bdb-a200-fcac18bfe8da">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("assert"));


testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="c82379f9-78ae-4cc6-a27a-049d78953002">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreate Request POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenCreate Request POST" id="721c63b9-5453-444f-b5b9-4a7dbb5e1e30">
        <con:settings/>
        <con:config service="RightsTokenCreate" methodName="RightsTokenCreate Request" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenCreate Request POST" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_CS_1_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1ad G0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssYDe ks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVPGO Z6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d8F mBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq5Y QFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF6/ VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgcRq cBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwrwu BpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8Jdknd YuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:request>
            <con:assertion type="GroovyScriptAssertion" id="15e3c188-5059-40df-ab50-5ff1b9032a5b">
              <con:configuration>
                <scriptText>// check for the HTTP Response code 
log.info  messageExchange.responseHeaders["#status#"]</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="AccountID" value="${#TestCase#AccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript><![CDATA[def RightsTCLogs;
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\RightsLog\\RightsTClogFile.txt");

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
   	   def rawRequest = new String( r.rawRequestData );   		     	

   	    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
       	"TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
        	" ###################" + "\n\n" ;
   }
    else
   {	
   	 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
   	  " ###################" + "\n\n";	
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
//RightsTClogFile << RightsTCLogs;
}]]></con:tearDownScript>
      <con:properties>
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</con:value></con:property>
        
        <con:property><con:name>ALID</con:name><con:value>urn:dece:alid:org:Metadata_ALID_473355026</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:METADATA_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</con:value></con:property>
        
        <con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        
        <con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property>
        
        
        <con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property>
        <con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property>
        <con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_CS_1_concat.pem</con:value></con:property><con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>ns3.google.com</con:value>
        </con:property>
        
        
        <con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property>
        
        
        
        <con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:7BB77B2569644410418DE3449481F9A8</con:value></con:property>
        
        
        <con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property>
        <con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property>
        
        <con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property>
        <con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property>
        <con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:pd</con:value>
        </con:property>
        
        
        <con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property>
        
        
        <con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property>
        
        
        <con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property>
        
        <con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1ad G0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssYDe ks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVPGO Z6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d8F mBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq5Y QFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF6/ VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgcRq cBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwrwu BpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8Jdknd YuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM=</con:value>
        </con:property>
        
        
        <con:property><con:name>SoldAsBundleID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:METADATA_CID_DONT_TOUCH_1.txt</con:value></con:property>
        <con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property>
        
        
      <con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>Copy of RightsToken-Generation</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase></con:testSuite><con:testSuite name="Test Cases Containing APIs" id="495889d5-7d38-45a4-9d00-5ad30e3c3d0c" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a50a8f3b-e79f-4b04-8df8-3d57118e6a7a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="2e1abbf3-5ed0-44f4-bec2-386c7939f83a">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e39d8fce-ff55-41b7-b5d2-b2cf766ed532">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="5dbee055-f63b-4702-bfb7-28cbd83dc94b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DELETE - PolicyDelete" id="19c47a07-b6db-47b5-8829-4c67b4c5d87e">
        <con:settings/>
        <con:config service="DECE Policy PolicyDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="RET_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="04fb2dd5-589a-44e4-a111-e0d38adea51e">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="d18576c5-2941-4507-98d9-237dce2b30db">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="d90df054-d151-4dc7-96df-6cb692d2a80a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdbc6JKEH7fX0Gxjynk6gUqWoWoCRvMRd2cTV62xqFRcmAgzGB0f/0ZMBA1JiebVFlFTU9fvr5Md3tKURxplk0pZCxMiOAOuuJvVQekmQGW2njuS0ZzjqW52UISUg0ACFS/Y2ii4FKag0soQ4R1RU1RdUnVJLU5U03LaFmG2TB19V4UbiGjXDVnaSiisI4jQq3SbFfMM2IliIbUIigGajFsTe2xZ3FOC1WYxN7pFmVpMOstGUstWcYNHzBEEW7gJJZP5T2eU59a03BBEMszeLbp0674LPv09NR40htJtpA1RVFkxZQ5j0/DxXex960SBt8lQbI9O4gkJMQoCv+gAtQY2DLxBTtaJFnIlvEbqlVZVQrVEqyxhFWDfBflFwMlug9q2gOZUSTRJVIrZRMIIAOCQfg5cbvi949lcCs7yxChQZLF9OD8d5CArCBKUvAlWnlWofu4xiPh6p0CtlyCo5yGK7gsyiRFGKhwnUEQrr2Q8uLzqVCmX1hT/gurKgP8N2k5lXexcujykegMwgVQ9pmc7eZrq+UWRTn01EQ/Wy5+RMTLvMd7TwmcUbBsPtCVO+6WEHaZt6DqdD+fD4u1rq1nobOL9ckGXeud1u0dQrF/kd6tbzd9vX3HlMkPv8mLRV0GSW4sO8ObyB7R1ZUTDy/G/4w68fgq+1f+g+b0yX2Ynt8435Sl/nASb2Zn5/aNno3PnWDl3cOv88dR+zo9i3JipnHqzbzRXcfDPz1NiVhwacgnN+482TAttWV4tCfD+/5P4/yb/suH8z8TvT3MTPfCo3CidF982vVhn1i1hGk+fwDMqmNRHu5AGPF8IfZ+eykooS8FJauVFj2KMiBM7BVSRWuxct6AQt/iydyehwOzMzK0Yb9t6vZA6Q8VQ1FHiq00TVPV1WbVg7YoDiA6CQnCwlbRZbf18z5AHFsUiA+ZtEpyvAQqvqNxgBgSXDLhjyMhFGYJ7+KOrvbtjmoOTaNvDrR+u++02sagpTSb7UFT5R38MmFX5CqzAwbZXgfXtL0OPgEcpiEUbb6oc8oLnTIekke0ylmkNlaoQSDngyArerGlGZ2mTMM4jaAALMeJn0fQSJdpGSCZbr+ahDAtqZPhrHx/b7p3eFdFgvP4YcFAC1/6wLMJR0aRXjnyhsOtmaLuOlypt3M/LJ4ZDyvLQrxFsn/1Ui1FmdSlYjvOcOpMK9g1919If1bYubr8vORvZ/pb/aT4wLOn11+R/ZLxz5v+mmHvC157X/WaP5wvir+WlN+pffnw2dWG/FW4Y7Za3fg2wmdVr2oaj6jx2MhXq7xsE+1iDmdcvczHsSpPAed8mG5myb9A5FqF/KFdpkZ9YLmm7+PL2ZJMGWIQ86YmlMcPLLJToMUi6/KmvP7olrxnkseNwZodozkR33cLxO+uxNjCBR8nX/PPU5L5L+k6omvHDveTb68sJIviVGwtmzeKAidcbcjHbJLtKj+m4JjxfWId5BoL49U0zxm8fSMU87MrIoyTnDB3IJaE3Zle4mSbFKwXpldqyr3heRFc0zcXwV9jb8qna4zEmjf8f2YpLMsFg1jsmyWWrrjm/2u4cbLY2SGeAb5aI3TTdoZ9taMNB/Ua0TbNptEy6gDuedJ7RX5N2Ynp4Xvo/Qc=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:ED98F39ACEB182EDE0401F0A07995464</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:ED98F42EB793AD0BE0401F0A05991315</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<html><head><title>JBoss Web/2.1.3.GA - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 412 - </h1><HR size="1" noshade="noshade"><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>A specified precondition has failed for this request ().</u></p><HR size="1" noshade="noshade"><h3>JBoss Web/2.1.3.GA</h3></body></html>]]></con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 412 Precondition Failed</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>text/html;charset=utf-8</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>961</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ed0e354d-7838-45ac-ac58-9b1a4c844738">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ccb75ee2-52b8-4afc-acb8-7d859e972c48">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");
testCase.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("streamhandleFULL",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyAuthority",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus",null);
testCase.setPropertyValue("policyResourceXML",null);
testCase.setPropertyValue("expectErrTypePolicyCreate",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="c73f953c-15f1-4302-9563-047a83d97194">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
testCase.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
testCase.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("encodedpolicyClass",callTC.getPropertyValue("policyClass"));
}

if (testCase.getPropertyValue("expectErrTypePolicyCreate") == null || testCase.getPropertyValue("expectErrTypePolicyCreate") == "") {
		testCase.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
		testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}

switch (testCase.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		testCase.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="e1f8d946-8bf4-4e99-aeca-2b76236d60e1">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="d38d7c89-70f1-4f23-9126-f3ecd86b5629">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("POST - PolicyCreate Account");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - PolicyCreate Account" id="0482c0e3-267d-42f5-9fed-90024d370f98">
        <con:settings/>
        <con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">    <dece:Policy>       <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>       ${#TestCase#policyResourceXML}       <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->       <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>       <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>       <dece:ResourceStatus>          <dece:Current CreatedBy="${#TestCase#policyCreator}">             <dece:Value>${#TestCase#policyStatus}</dece:Value>          </dece:Current>       </dece:ResourceStatus>    </dece:Policy> </dece:PolicyList>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="2d319f7a-b64e-4ae2-bbdf-20895f40cdef">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value;
			break;
		case "#status#": 
			status = value; 
			break;
		case "Connection": 
			connection = value; 
			break;
		case "Content-Type": 
			contentType = value; 
			break;
		case "Content-Length": 
			contentLength = value; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the response headers and body" id="ed6a46cc-1015-4b77-8bbb-b2b00c55e374">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url       = testProject.getPropertyValue("targetHost");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnstream = testProject.getPropertyValue("urnstream");
def acct      = testCase.getPropertyValue("nodeaccountid");

def sh            = testCase.getPropertyValue("streamhandleFULL");
def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = testCase.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = testCase.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");
assert testCase.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep>
      <con:properties>
        
        <con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>assert</con:name><con:value>nVdbc6JME773V1juZcpwUDxVkqrhGFRUEFG8+QqHEVEEZUDQX/8OGF2Tze6773eRMtP04enuh6bnBTv7gO0BjFGc+FFYVcXX2v+4Ftt016tG3eGaTL0J2526s2p363Sj4bI0vaJbLlOrqhinSA1x4oTJa42lGbZOt+p022SYXrPV41rPXKO1rFUtFGPimqg807Vqvg9C3CvDvtbSOOxFDvZxL3T2CPcS2JsCbdgjmj3nhqn29nJFWQaM3zZJcuhRFHx2EURBAJ9htKdeqE86Ly7uTX0vdJI0Rh8xXfxa+7DNsuw5azxHsUeRfGiK7lJEx8W+96P2VrkZI1cN19H1LDhhFPrQCfyLU4DSULKJ3CoIvCj2k83+N64ZiqEL13WUwzpkmuGPGvUzQInuLz19Ahljp443DnNzZqA1ilEIUXVmqK+1H3/XwautGTshXkfxHn85/zdIKDyhIDogt45vmd3Q/b3Hb8r19oJgTw1hkGL/hEYFTQ4ORLg6idHaz4c+JuRzcbVsfzXHN4Yh+F9a8kI94iSwqW8qI/oewsn/06/HXl29WE6Qordo2onsre/NEz3SfQ4KDXvmOtLRHquvJYRH5Suoe6s/zl+JeufVh5EHLNxll/NjMPEpyjKYZQbQXD4aQ0rlsvGFzkT4pLSTdDvdddhl6zSjlqsYD3S4HFhdqhseUx/5rMSow2nFMldC1FYXc8wGltZg1fZsmzOrxSDZjXfBIKBmi+yyjCaDw0gX89yhYdAZxqDBKlQ4Vik7jqkJnqsTqLDLSjRK/GAHbOu0zye0uxub8PVnTo85FHkN0LlMsvh/wdFd0Umc+0EoJsWavJ4JetNUVUwvggDOUw9kKg888rcFI97bHTc7X+lmNA90XQaiwAdbaaiBnQKYmcRvNMGytFy4gD7vjSxiaFZAsOQ1Q8rEzBYtXX+Xso3pKtZ5pQTp8iKNNIBLY2GjSYZkiYYpaRqIrrJcE1dKvtWmWqbqtlghDkQpP1xcpZsgJfchq3LalGPtKZcuFxaRy+fhfnRamVKgCZoiTI/KVF01RF3qA8OeQ1ZOie1luD9EFXvGPxj1D2gLkJzRJCa4aOYu08wZOxINp5SZn2WaqvQ1HWeCXmalVKSsb80uP2sh8Jrg7qVcMsHkWgtoCvKIXi762JlzoWaATPRK44GUueMbEE2ns4pwrdVQygzJmI1kzVAzCZQyUcoCvGJHm5WyOcGGnvdNsH1sjKBLczkkz0PjBM/cseIoMljtLQY2jA30Od9ZRJm37GSibvcH0VIlbkZAl3heBwQQDYrUSP15MOQtbnzwu6yPhms52qNNXNGYaLA7XXK64zfG3mQ058T1rj1R/EnDcTeUGkB229gBVUXugNnojmvYlCGG/qU1HswWyI/tSzLidKbld7iKMU9nCzEK2u77wp4NnnIb6uZ4Mp3NJ5c8Hx23nUuQvI/593ja10RvPEJoguETRTsyb3ZETrDft4RPa4NGXAV4Gg+AsvU8yScE5t+3VxK+G5pEyAs0IVOEuaBMgaI8SSov6vpa3jDkRbLSGTPSVMkNSJnO9sIIKkuBF0mnaGe+PNisTC9N4JbO9KYke/qMe+ov0FIfBaaVgOxgrUOGoZWD/r7WMg9qBQNcNZvy5C3iK6kKZs740KfzgdWimaPuBv1pF8wa+ZTd5eONtzzvvOWONMV+eHVsEwSW+cAxlVBsXtFNydBA5/q+5Zo6axgB3OeH1R7mokl6VhpHJi8Zsk7PclEEg6sMm4DNsX2RtpoglfYVkGsOocVptdhgOxz5Y1NKCWnTB7psVyz9rxwrKFb5zLGjAHTwlWPSlWMSWB+f1I7IYK4lHPA883hFOupta9jvHmh9MdxV+CeZ8shwa47DTmYOnubMOWtvtvp83lXFjfAUru1NY5XwtHOBOurv2opv7MSw1QzO2lDTuZlPBWd6i44ZHlZGKhNKjeQiU904feL3S39/uTSa7Gw/maYndeYMMHPerI7zbradvLcoKlbO3KW9POnyIoL29TvydUjehdcxSj0O2E8T+LZ7TdPVFsHkdiy+w6pYlcnH0Un+vMcVEt+tr0vV3qFYBnGCwqT2VlgVO1wvJZue7/bIl/N6BqBLdwSJATwtsQ2pLdFNmpFpQLe73RbLNm7L3hXFF4hCFK79Ilaxzl4/1n8GCPe9FXJiFNf+4KmoU1UNDbJ9RCFGZvRaa3CdTqPT5oSOJHaljtjiRKnZITgFWeDlLl+rjqJkHI5jsE5Q/LAhd75uyAaC/sFHxRpd7BKYLBM4IZU4Oqc0CZjnk/McopQs2nGx6/bYZoejsL8/BKjAS+0jNw3Q82FzKOtC4esvW3cgLqVF3col57fpfX12qwTRcf1CARfJ8Ih0EX2z6zdvmfyScePbO8HNPUhdv9hlSFmT2IdXJJ8f/WRJQY87RYqUbpjvql8Fn9xSXzO6R3JPPrwT/X4VIps02bXebg05Os/H5/R0SssWtIs9MibuKYaiWWqKYEqWwbMZ7VBI3V1Qf7WH31F/iXyXf8aXJptwmpCXeE8IUy2P/34J+2RNSpCgPPlOJgTk2lUE/+PNDPZgoUfEE/KTRbH7s/Lf+HqIQyAXA8gPveJULNDn3zQYRsStT4ZQFD86/87Bd8E/C+/1umNJCDFWaYJ+/6RaTJfXmgNhlIaJKtZKwePEK3Em5wPq/VT6xU25wn7cSXL82zvJQhtO4Qbtndpd1/935bpfdh4iYoX9EstrLSfXaxI89B4m7AfAT0O22ZXZDi+zLVpmuWbnPmS5bpdmW+BewE+ZvP0i/lXyUNOv1H77Bw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value></con:property><con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        <con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property>
        
        
        <con:property><con:name>httpConnect</con:name><con:value>[close]</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>[813]</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property>
          <con:name>httpContentType</con:name>
          <con:value>[application/xml]</con:value>
        </con:property>
        
        <con:property><con:name>httpStatus</con:name><con:value>[HTTP/1.1 400 Bad Request]</con:value></con:property><con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        
        <con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:EnableUserDataUsageConsent</con:value>
        </con:property>
        
        <con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value></con:property><con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        
        <con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value></con:property>
        
        
        <con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property>
        
        
        <con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property>
          <con:name>username</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        
        
      <con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:EnableUserDataUsageConsentCannotBeCreated">
      <Reason Language="en">EnableUserDataUsageConsent Cannot Be Created</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A/Policy/urn:dece:type:policy:EnableUserDataUsageConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#EnableUserDataUsageConsentCannotBeCreated</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="659ef6d4-9a62-442d-8e7d-801c7314fbe2">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b0270b79-e84c-42d6-b54f-154f9366af31">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="409e17a1-5dbc-49f9-8019-ceec72fa671b">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="549d60bf-ebf5-41ff-b520-4bc18b60954e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DELETE - PolicyDelete" id="f0c98d2a-24e7-4962-9bd9-066145063da2">
        <con:settings/>
        <con:config service="DECE Policy PolicyDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="c0ff17d5-9cac-459f-a9fd-b334f96413b0">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="af102951-afd6-4b73-86f0-5c4278bea995">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="77894047-0f17-4a5d-bec6-b4e8d44b60ca">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_04600 - StreamCreate - DLPCS - Policy - Can create stream when ShareMediaHistory policy is absent</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0914</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">d8a2af59-94ce-4d58-a97b-8920da8cf22a</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>nVdbc6JME773V1jupZVwUKJYSaqGg4gRFMTjHQ4joAjKgKC//hswGpPNZvf9LlJmmj480/1MT88ztncB2wEYozjxo7CqSi81p22z9prjH/gmRA9Nh2s/2Hxr9dDmWdqx23DNsnatqmKcIjXEiR0mLzWWZpgHmn1gGxbT7jBMh2s/Np7YZa06RTEmnonKI12r5rsgxJ0y6kstjcNOZGMfd0J7h3AngZ0x0AYdotmxr5Bqr88XkGXA+NVLkn2HouCjgyAKAvgIox31TH3SeXZwZ+y7oZ2kMXqP6eCX2rttlmWPWeMxil2KpWmaonmK6DjYd3/VXitXY+So4Tq6rEU7jEIf2oF/tgtQGkq8yKmCwI1iP/F2f3DNUAxduH5AOXyATDP8VaM+ApTo/tHTJ5Axth+wZzNXZyZaoxiFEFUnpvpS+/VPBbyYWrEd4nUU7/CX9X9DhMIjCqI9ch7wdWNXcP/u8ZtsvT4j2FFDGKTYPyK9YMnehghXRzFa+/nAx4R7Dq6W1a/m+EowBP9LRZ6pe5wENvVNZiTfRTj5f8p1X6qLl6kdpOh1sxLWs6WfshD4E+RHOtqedXvT3Z+NlxLCvfIF1K3S7+uvPL3R6t1oAA/R2LCSgexOcY+jj4yeeBN60M7zE71zJ3Yd+KfhAL+ZwO5G9fai1zbHQDlleqzEs+OIltBQUIaNbOXEFd49D3hz1oTsRuJYfafjpm/kmzifLpOeuu812+xWZXcbOW9sELfmYc41t3xLH+P6ZgR3eIZHI1525MbEOlV0J6FURY7n43oW9qW+P4EvH3u630Oxrzd0KjdZ/D/naF6yE/u2EItGsSanM0GvmqpK6VkUwWnsgkwVgEv+NkAX3O3B2/oKn9ECMIwukEQh2MgDDWwVwExkwdPE6VTLxTPoC64+JYZWBQRLQTPlTMoW0tQwenLmWY4yPa2UIF2eZV0DuDQWPU025alkWrKmgegiyzVppeQbbaxlqrGQKsSBJOf7s6PwCVJyH7Iqp405djHm0uV8SuTd02CnH1eWHGiipojjgzJWVw3JkPvAXMwg202J7Xmw20eVxUS4M+rv0QagbkaTmOCsWdtMsyasLpl2KbM+yzRV6WsGzkSj3JVSkbP+dHL+yIUoaKKzk3PZAqNLLqAldnV6Oe9je8aFmgkyyS2N3+TMGV6BaAadVcRLrgZyZsrmRO9qpprJoJRJchbgFat7K8U7woaR9y2wuS+MaMizbki+h+YRnrhDxVa6YLWbMrBhetDnfHseZe6ynUnGov8WLVXiRgeGLAgGIIBoUGyN5F8AA2HKDfc+z/posO5GO+TFFY2J3rbHc063/cbQHekzTlpvWyPFHzVsx6PUgPC6sQWqipw3xjNsx1xQphT656fh22SO/HhxTnTOYJ78NlcxZ+lkLkVBy+nNF5O3er6AhjUcjSez0TnP9cOmfQ6S3lDoxeO+JrlDHaERhnWKtruC1ZY4cdHbED6tTRpxFeBqAgDKxnVlnxBY6G0uJOyZmkzICzQxU8SZqJCTqdRlVZAMY931mBFUpumE0TVVdgKSptNibgaVpShIpFK0PVvuF2yXXlrAKZ0ZTbnrGhOu3p+jpaEH1jQB2X66DhmGVvZGb61lLtQKBjhqNhbIKRIqqQom9nDfp/O36RPNHAwn6I95MGnkY3abDz13edq6yy0pyuLu6CwsEEytO46phGKzimHJpgbal/OWa+qkYQZwl+9XO5hLFqlZaRxZgmx2DXqSSxJ4u8iwBdgcL87yRhPl0r4Ccs0mtDiu5h5ehLo/tOSUkDa9o8tmxdJ/5VhBscpnjh1EYICvHJMvHJPB+lBX2xKDuSdxj2eZKyjywWhNB31+TxvzwbYi1LuUm/hBcxi2M+utPmNOWcvbGLMZr0qeWA/XC6+xSgTaPkMD9bctxTe3UvjUDE7aQDO4iU8FJ3qDDhkeVHSVCeVGcu5SfJzWhd3S353PjSY72Y3G6VGd2G+YOXmrw4zPNqPeE0XFyok7t5ZHozuP4OJyj3xtkjfhpY1S9w32Uwe+jl7jdLVBMLkui3tYlapdcjnayc9jXCHxnYd1qdrZF7MgTlCY1F4Lq2KE66Rk0POdDrk5L2teeHriWE4A3acWzXCCTDdppksDmuP5JiuC66x3QfEFohiFa7+IVQyzl8v6Z4Bw11khO0Zx7QdPRZ6qamiS6SMKMbKil1qj2QUc05VaEgA0EMVWQxJEDtAsC/inFsfWqnqUDMNhDNYJiu8G5ObXAdlE0N/7qJii32cJnJBEHOxjmgTM49F+DFFKxuy4mHQ7bLPNlQmgnHS3h+QD6W7xPsLJ497bl8PMH7fx9dt1x0TH8QsFXIAWEKkW+makb14R/7Yz9tvR/+oepI5fzCwkfUnswwuSz58+2FDQ4EYFmmeaV8w31X8z5Rnm6XdT6gdE1Ndk3CI5R/8u7vVhQmZtMo6V7xFMinawHw+P6fGYlmVq0TRLxcQ9xVA0NUYwJePiyYq2KKRuHqh/GdRvmL/Evck/o0sTLxwn5JTvCKOq5fLvj7RP1iQBCcqT72RiQJ5lRfAfX26wAws9Ih6RnyyKnY+8f+PrLg6BXHQoP3SLVTFhnz6X9/0kdGBEvPqkSUXxve/v7L+L/Vl4S9cNSkJYsUoT9Ocv1aL7vNRsCKM0TFSpVgruO2KJOTntUedD6Tc35Yj7/mbJ8R/fLHNtMIYe2tm1m67/d+UHvyw8RMQK+yWWl1pOXt8keOjedeB3gH9owtxPTfjzTl5/E/8uucvpV2a//g8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ShareMediaHistory</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User.old" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true" id="b508664e-0d98-43ad-bc4f-458da059f960">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="5323fd43-08ba-4e0f-831f-5eb7d256d344">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");
testCase.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("streamhandleFULL",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyAuthority",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus",null);
testCase.setPropertyValue("policyResourceXML",null);
testCase.setPropertyValue("expectErrTypePolicyCreate",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ecf79052-d652-4a69-a152-1016a2818d4a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
testCase.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
testCase.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (testCase.getPropertyValue("expectErrTypePolicyCreate") == null || testCase.getPropertyValue("expectErrTypePolicyCreate") == "") {
		testCase.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
		testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}

switch (testCase.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		testCase.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="3d4aa7f8-020e-4648-aa2d-19b67923ac00">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="a570d265-5dcb-4ab9-9ef6-72e35b7a6276">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - PolicyCreate");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "C:\\DECE\\certs\\222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - PolicyCreate" id="12a15e67-610c-4fc8-946b-0bd620fa9f5d">
        <con:settings/>
        <con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="USER" value="${#TestCase#assertionUserIdFULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="a70305af-8e1b-414c-9ccd-0cbe72c26d9e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the response headers and body" id="cb311cfa-c0c9-4ac6-8c06-76f02fd92ab4">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def acct      = testCase.getPropertyValue("nodeaccountid");

def sh            = testCase.getPropertyValue("streamhandleFULL");
def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = testCase.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = testCase.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");
assert testCase.getPropertyValue("httpStatus") == expectHTTPstatus;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdrc6LMEv7ur7B8P6YMA4qKtUnVcBUVFcTrl1MII6IIyoAgv/4MGF2Tze6751QllUzTl6e7H5qeH9g6+kwXYoyi2AuDqiq+1cC25TgIOHUENk69CbabegcBpt4CLbtBc6zd2li1qopxgtQAx1YQv9UYQNN10KnTrElzXQZ0QeuV6K9r1TmKMPFMVF5BrZod/QB3y6hvtSQKuqGFPdwNrCPC3djuTqE27BLNrnWHVHv/cQNZBozed3F86lKU/eogG/m+/WqHR+oH9Unnh4O7U88NrDiJ0EdMB7/VPmzTNH1NG69h5FIMAIACHEV0HOy5/9TeK3dj5KjBNrydBSsIA8+2fC+3ClAainehU4W+G0ZevDv+xjVN0aBwXUeZXbfpZvBPjfoZoET3l54+gYywVcc7i747M9AWRSiwUXVmqG+1f/6qgTdTM7ICvA2jI/5y/t8QoeCC/PCEnDq+J3YH9/cev6nW+w9kd9XA9hPsXdCoYMnJshGuTiK09bKhhwn3HFwtu1/N8J1gyP5fOvKDesZJYFPfVEb0XITj/6ddz626eZlbfoLejQmVMeK5OVjTOTjZfDJcOC3vfFw4zbcSwrPyDdSj0x/nrzx90OrDKHQD3zTkjcCpSm+7ygVFXqP8QDkQHE9bus2qSy/WTdULrkprDgb7iWHlg5lLNXiutaItHzh7n9bjcSbzlb1Dq42WJevjpm4PaVvxpA5ub6PZYQNyat3K2y8djHtxx1fVoCVIiRIjCqtzfpFxemSIC77nn0ULpjzdr0yQEB/nvW0vcfdNdPAUt/P2M6fnHIq8BuhaJln8v2QBJ1qx9TgIxaDYkrczRu+aqopJLgjwOnVhqvLQJb97OOLdw3lHonAp4KGuy1AUeH8vDTV4UCA9k/idJsznWibksM+7ozkxNCvQX/OaIaViuhLnut6T0p3pKPPrRvGTdS6NNIhLY2GnSYY0Fw1T0jQY3mSZJm6UbK9NtVTVV2KFOBCl7JQ7ChcjJfNsRmW1KcuspmyyXs6JXL4Oj6PLxpR8TdAUYXpWpuqmIepSHxqrhc3ICbHNh8dTWFnN+Cej/gntIZJTQGLCXDMPqWbOmJFoWKXM/CzTVKWv6TgV9DIrpSKl/fks/1kLgdcE5yhlkgknt1rYpiCPwHrZx9aCDTQDpqJbGg+k1BnfgWg6SCvCrVZDKTUkYzaSNUNNJVjKRCn18YYZ7TbK7mI39Kxvwv1zYwRdWsgBeR4YF/vKniuWIsPNcU7bDWNne6xnLcPUXXdSUV/1B+FaJW5GUJd4XocEEIBFaqT+PBzyc3Z88jjGQ8OtHB7RLqpodDg4XPIMdLzG2J2MFqy4PbQnijdpWM6OUn2b2TcOUFWRM6B3uuUYK8oQAy9vjQezJfKiVR6PWJ1ueR22YiyS2VIM/bbTW65mg5dsZevmeDKdLSZ5lo3O+07ux70x34umfU10xyOEJth+oYAl82ZHZIVVb0/4tDUAYivQ1XgIlb3rSh4hMN/b30jYMzSJkBdqQqoIC0GZQkV5kVRe1PWtvKMntjJPZvRIUyXHJ2W6rpaGX1kLvEg6BazF+rRiZLA2oVM605uS7Ooz9qW/RGt95JvzGKan+TagaaCc9N5WS11bKxjgqOmUJ28RX0lUOLPGpz7IBvMWoM+64/enHJw1silzyMY7d309uOsDacrq6dVZmdCfm08cUwnFFhXdlAwNdm7vW6aps4bh28fstDnamWiSnpXGoclLhqyDWSaKcHCTYRMyGV7l0l4TpNK+AjPNIrS4bJY7vApG3tiUEkLa5Iku+w0D/pVjBcUqnzl2FqAOv3JMunFMgtvzi9oRacy2hBNepC6vSGe9PR/2uRPQl8NDhX+RKTf2/OY46KTm4GVBX9P2bq8vFpwq7oSXYLvaNTYxD6zc1lH/0FY84yAGraZ/1Yaazs48yr+CPTqneFgZqXQgNeJcprgoeeGPa++Y540mMztOpslFnVkDTF93m/OCS/eTXouiIuXK5u31RZeXob26fUe+DsmH8DZGqecB+2kC31evabLZIzu+H4vvsCpWZfJxtOI/r3GFxHPq21K1eyp2QRyjIK69F1bFCtdNyKLnOV3y5bydIeRAR5BoyAOJaUhtCTQBLQMI2hzXYpjGfde7ofgCUQiDrVfEKpbZ28f6zwDtY3eDrAhFtT94KupUVQODbB9hgJEZvtX+Q3dAgwVNlutwmwbXtMiqxdoW07bbW5ptgAZCDrulLabF1qqjMB4H4whuYxQ97cqtr7uygWzv5KFiof5YK3BManK2Lkns068X6zVACdm4o2Lp7TLNDkth73jyUYGcOoZO4qPX0+5UVojCt79M3bJxKXXQ1kr8uI5P5dLz23S/PrtXhug4XqGAi4x4RLqKvq7+5Ie9p/NL2sy3V4S7e5g4XrHbkDLHkWffkHx+9JM1BV0elCHU6NwxP1T/2pT71ZT6AyLqazEekZyL9xT3foEhOzlZ28p7CyYdPVuv59fkcknKHraLlTQi7imaAtQU2QlZK69meEAB9fBA/c1C/8D8Je5D/hldEu+CaUymwZHQrVoe//0y98maFCBGWfydTPDJ9a0I/scbnt21Cz0inpA/aRg5P+v+ja+nOARyMcm8wC1OxSZ+/dzej9eka4fEq0eGWRg9+/7O/rvYn4WPcj2gxIQVmyRGv39SLabUW82y7TAJYlWslYLnyVlijq8n1P2p9IubchX+uNtkv7vI0tRSG07tHTpatYeu9+/Kda9svI2IFfZKLG+1jNzSSfDAfZrUHwA/DesmJzMdXmZaQGbYZucxrFmOA0wLPgr4KZP3X8S/Sp5q+pXZ7/8F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/0/Account/urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A/User/urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyAuthority</con:name>
          <con:value>urn:dece:role:type:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResourceXML</con:name>
          <con:value>&lt;dece:Resource>urn:dece:type:rating:US:MPAA:g&lt;/dece:Resource></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="06b7c8af-f82c-4917-b4ee-64e0ba7ae303">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e1929a27-c9f9-4057-aac1-23e71820c092">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");
testCase.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("streamhandleFULL",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyAuthority",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus",null);
testCase.setPropertyValue("policyResourceXML",null);
testCase.setPropertyValue("expectErrTypePolicyCreate",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="559896a2-fca6-4993-95b2-08c0ea5f8fd5">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
testCase.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
testCase.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("encodedpolicyClass",callTC.getPropertyValue("policyClass"));
}

if (testCase.getPropertyValue("expectErrTypePolicyCreate") == null || testCase.getPropertyValue("expectErrTypePolicyCreate") == "") {
		testCase.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
		testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}

switch (testCase.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		testCase.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="89f1723f-a1fb-4674-b634-9d6bda5e7ab0">
        <con:settings/>
        <con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["us:mpaa:G", "us:mpaa:pg", "us:mpaa:pg-13","us:mpaa:r", "us:mpaa:nc-17", "us:mpaa:NR",
	"us:mpaa:m", "us:mpaa:GP", "us:mpaa:SMA","us:mpaa:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:g","US:MPAA:pg","US:MPAA:pg-13","US:MPAA:r","US:MPAA:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-Y7-fv","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvmovieRatingsUK = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18",];
chvrsRatingCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r","ca:chvrs:e"]
tvRatingCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+","ca:cbsc:e"]
RatingIR = [/*"ie:ifco:e",*/"ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
RatingAU = [/*"au:ncs:e",*/"au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
RatingNZ = [/*"nz:oflc:e",*/"nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
RatingFR = ["fr:moc:u","fr:moc:10","fr:moc:12","fr:moc:16","fr:moc:18"];
RatingDE = ["de:fsk:0","de:fsk:6","de:fsk:12","de:fsk:16","de:fsk:18"];
RatingAT = ["at:fsk:0","at:fsk:6","at:fsk:12","at:fsk:16","at:fsk:18"];
RatingCH = ["ch:fsk:0","ch:fsk:6","ch:fsk:12","ch:fsk:16","ch:fsk:18"];

RatingLU_MOC = ["lu:moc:u","lu:moc:10","lu:moc:12","lu:moc:16","lu:moc:18"];
RatingLU_FSK = ["lu:fsk:0","lu:fsk:6","lu:fsk:12","lu:fsk:16","lu:fsk:18"];
RatingBE = ["be:kijkwijzer:AL","be:kijkwijzer:6","be:kijkwijzer:9","be:kijkwijzer:12","be:kijkwijzer:16"];
RatingNL = ["nl:kijkwijzer:AL","nl:kijkwijzer:6","nl:kijkwijzer:9","nl:kijkwijzer:12","nl:kijkwijzer:16"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {

	case "${urnRating}lu:moc:u":
	case "${urnRating}lu:moc:10":
	case "${urnRating}lu:moc:12":
	case "${urnRating}lu:moc:16":
	case "${urnRating}lu:moc:18":
		for (rating in RatingLU_MOC) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	case "${urnRating}lu:fsk:0":
	case "${urnRating}lu:fsk:6":
	case "${urnRating}lu:fsk:12":
	case "${urnRating}lu:fsk:16":
	case "${urnRating}lu:fsk:18":
		for (rating in RatingLU_FSK) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	case "${urnRating}nl:kijkwijzer:AL":
	case "${urnRating}nl:kijkwijzer:6":
	case "${urnRating}nl:kijkwijzer:9":
	case "${urnRating}nl:kijkwijzer:12":
	case "${urnRating}nl:kijkwijzer:16":
		for (rating in RatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	
case "${urnRating}be:kijkwijzer:AL":

case "${urnRating}be:kijkwijzer:6":

case "${urnRating}be:kijkwijzer:9":

case "${urnRating}be:kijkwijzer:12":

case "${urnRating}be:kijkwijzer:16":

	for (rating in RatingBE) { 

		rating = urnRating + rating;

		this.log.info "rating[$rating] - resource[$resource]";

		resourceXml += "<dece:Resource>$rating</dece:Resource>\n";

			if (rating == resource) {

				break;
	
		}

		}

		break;	

	case "${urnRating}fr:moc:u":
	case "${urnRating}fr:moc:10":
	case "${urnRating}fr:moc:12":
	case "${urnRating}fr:moc:16":
	case "${urnRating}fr:moc:18":
		for (rating in RatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	case "${urnRating}de:fsk:0":
	case "${urnRating}de:fsk:6":
	case "${urnRating}de:fsk:12":
	case "${urnRating}de:fsk:16":
	case "${urnRating}de:fsk:18":
		for (rating in RatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}at:fsk:0":
	case "${urnRating}at:fsk:6":
	case "${urnRating}at:fsk:12":
	case "${urnRating}at:fsk:16":
	case "${urnRating}at:fsk:18":
		for (rating in RatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}ch:fsk:0":
	case "${urnRating}ch:fsk:6":
	case "${urnRating}ch:fsk:12":
	case "${urnRating}ch:fsk:16":
	case "${urnRating}ch:fsk:18":
		for (rating in RatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	//case "${urnRating}ie:ifco:e":
	case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
		for (rating in RatingIR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
			
	//case "${urnRating}au:ncs:e":
	case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
		for (rating in RatingAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	//case "${urnRating}nz:oflc:e":
	case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
	case "${urnRating}nz:oflc:r16":
	case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
		for (rating in RatingNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

	case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r":
	//case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
	case "${urnRating}ca:cbsc:18+":
	//case "${urnRating}ca:cbsc:e":
		for (rating in tvRatingCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;


	case "${urnRating}US:MPAA:m":
	case "${urnRating}US:MPAA:nc-17":
	case "${urnRating}US:MPAA:r":
	case "${urnRating}US:MPAA:pg-13":
	case "${urnRating}US:MPAA:pg":
	case "${urnRating}US:MPAA:g":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	case "${urnRating}us:tvpg:tv-Y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:12a":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsUK) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	default:
		//resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="4f455e86-63b3-4980-9fde-0a8935585277">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("POST - PolicyCreate");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - PolicyCreate" id="4a9a7046-b2c6-4dff-b80e-92f3039c73e6">
        <con:settings/>
        <con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_CS_1_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
  <con:entry key="USER" value="${#TestCase#encodedAssertionUserIdFULL}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="7f02ada6-516a-4967-b043-e7ba954d22a4">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the response headers and body" id="0ae0147a-cdb0-4a7c-9ff3-201d04a3535f">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url       = testProject.getPropertyValue("targetHost");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnstream = testProject.getPropertyValue("urnstream");
def acct      = testCase.getPropertyValue("nodeaccountid");

def sh            = testCase.getPropertyValue("streamhandleFULL");
def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = testCase.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = testCase.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");
assert testCase.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        <con:property><con:name>assert</con:name><con:value>pVddc6I8FL7vr2DYSwcDiCJMdQZBu7S29hXbdfdmJw1Bs8VgSVC6v/4NWKxa2+3HTGecHM7Hc3KenHN6yuAi1m2HMZxyklDJ9zry7zCKIGyZmtKAVlMxVKOptLFuKJEF221s3DVbZluWfMYy7FPGIeUdWVc1Q1F1RW1MNM3WTLvZqLdM9Zcs3eKUCddCpa7KUr6IKbPLsB05S6mdQEaYTeECM5sjO3Auh7bQtGGFSe6eblCWAdPunPOlDQCqhxjhOEZ1lCzAKdjTOQ2ZHZAZhTxL8VPMkHXkJ9v1el1fN+pJOgO6qqpAtYDQCRmZfZO7J5UxDn0aJZuzC2lCCYIx+QsLUJeYz5NQcuJZkhI+X7ziWgOaWrhWcI4UpBn0mwyeA5To3ulpD2TKoMLmUKucjXGEU0wRlm7Gfkf+9r4KbmwnKaQsStIFOzh/DBKmKxwnSxwqrMqsQvd+j0euq3uKke1TFGeMrPBVQZMlRJhJ1ymOSD4kTJAvZFJZfiln4o9ULMPoI2U5BbtYBXRw5HY8MsOMf6Zmu/XaeLmFcYa7s9r05wj8hEYyxd9/XKKQmtOzmlVzH+47JYRd5Q2obbmfzodk3XLrycgZnxm0Zvp/zXttxGvZH6rO+uvobniDwXnuXK5BlKd0ajTb6VC9uT5PgiD8Ps9n2f2073urWjr6bk59Xcuv0trJKE8za+GO/gIrPsvP6YK3fCs6t24nnvPrkV3c5rn+YzVa/7oJLvPr2qq1vAV6qzaKr2Cr5pJpM/95Nhhd8WziX51cjFXSbqj+RfSgec5wlKP/Os857eawL6xaQpDd/cGIV8eCHr4nDUS9IH+7vRQSEipRqWovix7FOKZc7hZWRWuxM9GASGiLYm7OutdvOZYxME1z0DA01eoZRrPfMCyjrQ0sp131oA2KA4huQiNSxCq67IY/bwNEC5thGuJUWSUZmmMmv+HRgxxKPh2Lx5FQhieJ6OLtXlMzGo7n9YxWo90zvLYx6OuW22v1Bm6jpcvSVcJHdJQ6Ecfpfgc39jr4GCOyJLho8wXPmSA64+JKHuAq47FWX8E6xZkYBGnRi23daDcBI4tljAvAYJGEWYzry/myvCDANr+6AhErpeP+pHx/r6Z3+K26CaETkkKBFbn0sKgmPjKKjCqR1xM2dxOu3DtZSIpnJq6VpwRtkOx/emZLQZMtVRzX7QduUMHean/A+rPG3tAJrr9i+9sNfmufdfD50F8LPPxC1sOvZi34+0Xzl5bgDQqCQ/ZvA4UrshO22qDEUiBGRrd6uw+w/lDPVqusfK1mMQ5T4R5oQNdAgFEmZtrjJLnHFGxdgHetFFvUB5G38n18GZ/TgEOOF6K3SOXxHftkgFmxT/qiN+bvXVb3Qop74zjnx2RuLNbOAvGbmymyUaEnxNfiZ52k4XO5jvjaiSPyFEskJ3RWnIrl4fEVUqBEuCVi2iXprvNjDo4F3xduL3mLhQs23WUcv/5FKsZYR4YIJRnlvieXgt3RWuLkj0tsPyu9cFOO76d9LGev7mPTy2EghtwCyltd8m9lhZR0QVgu1r4SS0fOxb8XIjid7YzyJ4C707zlimlueP1/TfP9TLovxC8lO3d6+B66/wM=</con:value></con:property>
        <con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8</con:value></con:property><con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        
        <con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property>
        <con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property>
        <con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8/User/urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        
        
        
        <con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property>
        <con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property>
        <con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property>
        <con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value></con:property><con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        
        
        
        
        <con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:us:tvpg:tv-y</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:type:rating:us:tvpg:tv-y&lt;/dece:Resource>
</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>synced</con:name><con:value>true</con:value></con:property>
        
        <con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        
      <con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value></con:property><con:property><con:name>encodedpolicyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_CS_1_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d47d8ffc-9b2e-47d4-b513-978a519c3335">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="39aa46a2-2168-4520-8644-b3fad438d957">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("returnXMLResult",null);
testCase.setPropertyValue("XMLbody",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="983c9e28-31fe-4c78-8f19-2197da3b622d">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("encodedpolicyClass",callTC.getPropertyValue("policyClass"));
}

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (testCase.getPropertyValue("returnXMLResult") == null || testCase.getPropertyValue("returnXMLResult") == "") {
		testCase.setPropertyValue("returnXMLResult","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="c54470ed-d0e0-4446-90ab-2cb66232ccc4">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - PolicyGet I");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GET - PolicyGet I" id="0f4fcbe1-99ee-4ae5-8637-aa4582a54fac">
        <con:settings/>
        <con:config service="DEC Policy PolicyGet API" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GET - PolicyGet I" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
  <con:entry key="USER" value="${#TestCase#encodedAssertionUserIdFULL}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="5105ee68-4e6f-4a28-a013-1a6c44d9d2e7">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('GET - PolicyGet I');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="38b57f96-fef4-4f8b-a929-e91598fe5d8d">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists == " + testCase.getPropertyValue("policyExists");
log.info "xmlPolicyClass - $xmlPolicyClass";</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="f6c46c7c-cd91-4ead-8e87-074a43de500a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));

if (testCase.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",testCase.getPropertyValue("XMLbody"));
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVddc6I8FL7vr2DYSwcDiCJMdQZBu7S29hXbdfdmJw1Bs8VgSVC6v/4NWKxa2+3HTGecHM7Hc3KenHN6yuAi1m2HMZxyklDJ9zry7zCKIGyZmtKAVlMxVKOptLFuKJEF221s3DVbZluWfMYy7FPGIeUdWVc1Q1F1RW1MNM3WTLvZqLdM9Zcs3eKUCddCpa7KUr6IKbPLsB05S6mdQEaYTeECM5sjO3Auh7bQtGGFSe6eblCWAdPunPOlDQCqhxjhOEZ1lCzAKdjTOQ2ZHZAZhTxL8VPMkHXkJ9v1el1fN+pJOgO6qqpAtYDQCRmZfZO7J5UxDn0aJZuzC2lCCYIx+QsLUJeYz5NQcuJZkhI+X7ziWgOaWrhWcI4UpBn0mwyeA5To3ulpD2TKoMLmUKucjXGEU0wRlm7Gfkf+9r4KbmwnKaQsStIFOzh/DBKmKxwnSxwqrMqsQvd+j0euq3uKke1TFGeMrPBVQZMlRJhJ1ymOSD4kTJAvZFJZfiln4o9ULMPoI2U5BbtYBXRw5HY8MsOMf6Zmu/XaeLmFcYa7s9r05wj8hEYyxd9/XKKQmtOzmlVzH+47JYRd5Q2obbmfzodk3XLrycgZnxm0Zvp/zXttxGvZH6rO+uvobniDwXnuXK5BlKd0ajTb6VC9uT5PgiD8Ps9n2f2073urWjr6bk59Xcuv0trJKE8za+GO/gIrPsvP6YK3fCs6t24nnvPrkV3c5rn+YzVa/7oJLvPr2qq1vAV6qzaKr2Cr5pJpM/95Nhhd8WziX51cjFXSbqj+RfSgec5wlKP/Os857eawL6xaQpDd/cGIV8eCHr4nDUS9IH+7vRQSEipRqWovix7FOKZc7hZWRWuxM9GASGiLYm7OutdvOZYxME1z0DA01eoZRrPfMCyjrQ0sp131oA2KA4huQiNSxCq67IY/bwNEC5thGuJUWSUZmmMmv+HRgxxKPh2Lx5FQhieJ6OLtXlMzGo7n9YxWo90zvLYx6OuW22v1Bm6jpcvSVcJHdJQ6Ecfpfgc39jr4GCOyJLho8wXPmSA64+JKHuAq47FWX8E6xZkYBGnRi23daDcBI4tljAvAYJGEWYzry/myvCDANr+6AhErpeP+pHx/r6Z3+K26CaETkkKBFbn0sKgmPjKKjCqR1xM2dxOu3DtZSIpnJq6VpwRtkOx/emZLQZMtVRzX7QduUMHean/A+rPG3tAJrr9i+9sNfmufdfD50F8LPPxC1sOvZi34+0Xzl5bgDQqCQ/ZvA4UrshO22qDEUiBGRrd6uw+w/lDPVqusfK1mMQ5T4R5oQNdAgFEmZtrjJLnHFGxdgHetFFvUB5G38n18GZ/TgEOOF6K3SOXxHftkgFmxT/qiN+bvXVb3Qop74zjnx2RuLNbOAvGbmymyUaEnxNfiZ52k4XO5jvjaiSPyFEskJ3RWnIrl4fEVUqBEuCVi2iXprvNjDo4F3xduL3mLhQs23WUcv/5FKsZYR4YIJRnlvieXgt3RWuLkj0tsPyu9cFOO76d9LGev7mPTy2EghtwCyltd8m9lhZR0QVgu1r4SS0fOxb8XIjid7YzyJ4C707zlimlueP1/TfP9TLovxC8lO3d6+B66/wM=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8/User/urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/21/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 404 Not Found</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>818</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value></con:property><con:property><con:name>encodedpolicyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_CS_1_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="216ce564-0dd2-43a9-b983-f074b55cf97f">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="db794dc7-c0a2-433a-bf65-ff4488b2f661">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("returnXMLResult",null);
testCase.setPropertyValue("XMLbody",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="96cdeb56-4cd8-48fb-8c52-c3bc53b8914e">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("encodedpolicyClass",callTC.getPropertyValue("policyClass"));
}

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (testCase.getPropertyValue("returnXMLResult") == null || testCase.getPropertyValue("returnXMLResult") == "") {
		testCase.setPropertyValue("returnXMLResult","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="cc2fc7b6-9812-426b-9cda-7a0bb1204fe5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - PolicyGet for Account");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GET - PolicyGet for Account" id="d1cbe65b-a5c2-4952-8559-28c8bd1f25e6">
        <con:settings/>
        <con:config service="DEC Policy PolicyGet API" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GET - PolicyGet for Account" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="09b781df-3e57-427b-ba68-120d6ae97b9b">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('GET - PolicyGet for Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value;
			break;
		case "#status#": 
			status = value; 
			break;
		case "Connection": 
			connection = value; 
			break;
		case "Content-Type": 
			contentType = value; 
			break;
		case "Content-Length": 
			contentLength = value; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="76a1770c-6589-4869-93c9-611dfe202a28">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def XMLbody = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "[HTTP/1.1 200 OK]" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists == " + testCase.getPropertyValue("policyExists");
log.info "xmlPolicyClass - $xmlPolicyClass";</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="2fda670e-226a-4c68-ae2d-2adc3ec87c73">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));

if (testCase.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",testCase.getPropertyValue("XMLbody"));
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        
        
        
        <con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZdb+o4EH2/vyLKfQ5xCCQkKkiUQJddetsL3NLysjLOENwbHBo7EPrr1w5NCvRjuyshIU/GM2dmjo99wfE6rvtdziEVNGHaMGjrf7fAdnFr6RnYDm2jsai7hrdwm0bLcT0bFo63dBe6NuQ8gyHjAjPR1uvIsg1kGZYztTy/jnzUqDkIzXXtDlIuQ0uXGtK1fB0z7hdp23qWMj/BnHKf4TVwXxB/0r0e+dLTxyUmvXNxQFkkTDsrITa+aZJaCATimNRIsjYvzBOfi5D7ExoxLLIUXnKGvK2/7N3tdrWdXUvSyKwjhEzkmdIn5DT6rne+lZshHLJlclj3MEsYJTimz1iBugaxSkKtG0dJSsVq/UFoy7SQCm1ATgxiNdh33XxNUKD7YqQTkCnHBl9hqww2hiWkwAhov8bDtv79axM87J2mmPFlkq752fq/QQK2hTjZQGjwsrIS3dcjvtOuzgUQf8hInHG6hR+KJhtMgGu3KSxpPqJcki/kWjF+Leclw4D8l5FcmMc4JWzznc4ENAIu/s+8jmd1iHKH4ww6NI3FataAfXQ/m1z93q8mV/lsNb/NZqRdQDh2PoCqRv2yPidqxauXTYMI/flwM3v4dTm170eOGNOfw8fe4+18wvK/HtM9HkfjxdCc3mVhsk6f+aWgTzaEOzEfR7Pd4o5dLm7vGi6EzYB/a+7vsxytfs5u5iOM7m9u59EoD91fce/qej3dP+Wt1g+bPDxcifB57jw/1X9vnH69C8sUjdxlIA1OPsPutfdHsPl2Q/r9iM69q5/RCGVi8zxotV9rOq7h1FjKwSRbPAIR5VJRYxhoAzkvLD6XFmWhobEsXP2N0icugAm9o3YpWfEzKT409OUwD+vAdoKe7fW6jUbXs/tBHzWQNUBd5Hqe7Qao1J8DijOIvYQtqcqlFPbAn88BkrXPgYWQGtskIyvg+icRAyywNmRjeTASxmGaSAVvBJ7XRE5Qdwb9fjdA1mXQcpBjuc1+vx84A137kYgbdpN2lwLSE/Wu10/UewyEbigoiVc855LoXMiWPOFtJmKrtsU1Bpm8BFKlw3690WqanK43MSjA5joJsxhqm9WmaJDJD/91AxNeWFUDiwP4YX3n38pWSJ+QKgeuirkEOU44v4fkr1lW8kHF7hRZxxWX4btZSNU5k30VKSUHJKefXumieFJxRZVUYq5czw0nYc3ziqpM4ZaSivHVNS1VXupApxzIE6491bLtNitG4CqNS2V40zKRY06AZFKo9tPkNzCzCmF+6Y6oUJ9lruyn+DKxYhOBBawlYbRi+YUHwgS4eiAMJeHzr74+TlLKvgnIxXu2XizfEQrxp08N4hPlJ8238m+XpOHruN6JdZRH1ilfBYKySK3UjbD/gBUkkWGplLAkPQ7+XoD3kp8aqyZXWIRk0yIT8PEXTWlTW8eEJBkTw0AvDMd6WeAU+w34r05vwhSa/HLJ5vzDS/b+ejSRyrXGeuVL/93ZoAVdCMhdnBZY2nou34syOYuO9PkF4BuJtuyma/cbl62BdybRjaqBJ5V03pjfWo56en4eOv8A</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:D36DC13573E4B8F9E0401F0A22225937D4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:D36DC39CA44A93EDE0401F0A22225937D0</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property>
        
        
        
        
        
        
        
        
        
        <con:property><con:name>httpConnect</con:name><con:value>[close]</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>[963]</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>[application/xml;charset=utf-8]</con:value></con:property>
        
        
        
        
        
      <con:property><con:name>httpStatus</con:name><con:value>[HTTP/1.1 200 OK]</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:EnableUserDataUsageConsent</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>false</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:D36DC18132142FB2E0401F0A22225937D2">
      <PolicyClass>urn:dece:type:policy:EnableUserDataUsageConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:D36DC39CA44A93EDE0401F0A22225937D0</Resource>
      <RequestingEntity>urn:dece:org:org:dece:222259</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:D36DC39CA44A93EDE0401F0A22225937D0" CreationDate="2013-01-16T19:20:05.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD36DC13573E4B8F9E0401F0A22225937D4</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD36DC39CA44A93EDE0401F0A22225937D0</con:value></con:property><con:property><con:name>encodedpolicyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AEnableUserDataUsageConsent</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" disabled="true" id="a03df54f-2dc4-4d24-a6e7-eb45c5bf2a63">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="8a39224f-ee82-40ed-af47-4ddaa4292386">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="a8d1d7d6-f488-4b2f-b55a-ff2446ff2c76">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="9aab78b4-e7e2-4a55-b30c-e5bd05ce1901">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("STS - POST");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "C:\\DECE\\certs\\222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - POST" id="74706cca-e0cd-4ab9-877f-300bb2db8ac3">
        <con:settings/>
        <con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="eff0c1e6-a02c-49e7-b411-da33dfa96e9e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="8b8061f2-ebb3-4a85-a45b-15e79e660a10">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTS");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/06/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="96aed2f7-1660-4d03-ac3e-d2c67d34bcd8">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="f2b79deb-f8ec-44bb-91be-7882d53fdb55">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        <con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        <con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_4ea8a581-7fa5-4c7b-b7c7-9a1d1a33d9f1</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property>
        <con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property>
        
        
        
        
        
        
        
        
        <con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property>
        
      <con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>jbaisakh</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" disabled="true" id="02319723-32f8-4568-b0da-82d714320366">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3e70501f-a350-4b80-aabd-ebdeeff3e0bf">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="266c0edd-50ae-4a92-af63-76c17e038b57">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="eba1fd0d-b6b7-4cc3-aaef-5d0a7cbdfac9">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "C:\\DECE\\certs\\222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
		case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	 break;
	
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" id="3b9167e0-887a-4fe3-8db2-463dd5c660dd">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="86912442-3068-4aa6-b3cd-d80df09d70ba">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="981b211d-4bbb-4149-91ab-d7e92ba08047">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="da005de2-763b-4761-9a46-446883df0778">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="55d82448-384a-4ef2-80e5-74fc40f58842">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/0/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="d1e1bd8a-699f-46c5-83b9-a6befe2b1ae7">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="1b9f8d26-f0e1-40c0-a1d9-6540870d0316">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="01d75106-8bd3-4e05-81c9-6828bd37bc05">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6pKE333V1juR8twE0UrSdVwDSoaEK8vX+EwAoqgDAj668+g0W2ys/fZ53tImWm6e1Z3L4Y1z9jZhWwXYIySNIijqi6/1P6HmqjlQIZutBzUaTR5ptkQWGfdgE1+Dds0dIRWq1bVMc6QHuHUidKXGkszbIMWGjRj050uy3W59lOHF5a16hQlmKQmLk90rVrswgh3L9u+1LIk6sYODnA3cnYId1PYHQNj0CWeXeeGqfb6fEV52TB59dN036Uo+OQiiMIQPsF4Rz1Tn3yeXdwdB17kpFmCPvZ08UvtIzbP86ece4oTj2JpmqboDkV8XBx4P2qvlVswcvVoHV/XkhPFUQCdMDg7JSgDpX7sVkHoxUmQ+rvfpGYohi5TN1ABG5BpRj9q1M8NLuj+MtMnkAl2Gth3mFsyC61RgiKIqhNLf6n9+LsJXmPtxInwOk52+Mv6v0FC0RGF8R65DXyr7Ibu7zN+067XZwS7egTDDAdHNCxpsncgwtX3BK2DYhBgQj4XVy/jrxb4xjAE/8tInqlHnAQ29U1n5MBDOP1/5vU4q2uWqRNm6DVE2qHAe703kthAiJ2Is+LVKot3Any5QHh0voK6j/pj/ZWod159BAW7sLm1Jqdmr6AdiznXHTVLAUcb9dHhvJDxmxBtXWE7eqt3ohW1RMga+LJjNdvN7UlfHunFbgrOW5Xy6YFf2UutN2/VUWdCK7fQsDVcKK36ysiVtjk74tnxkJ2GrWmdHgJo9Oc81xaCZNQEiSpvOZyuEB62BhrHrM3NelvxzpkOHDn3BX6kp2AxWikvP2t6rKGsq49OlyLL/+c83ZGd1LkvpPKkWJPXM0Wvhq7L2VmSwGnsgVwXgUf+NmAoetuDvw20Tk6LwDRVIEtiuFEGBthqgJkoom9I06lRSGfQE73hlATaFRAuRcNScjlfyFPTfFNy33a16WmlhdnyrAwNgC/Bkm8oljKVLVsxDBBfbYUhr7RiY4yNXDcXcoUkkJVif3a1Toq0IoCszhtjnl2M+Ww5nxK7ehrshseVrYSGZGjS+KCN9RUnm0oPWIsZZNWMxJ4Hu31cWUzEh6DeHm0AUnOa7AnOhr3NDXvCDmXLudjszzZD13qGiXPJvFSlVZS8N52cf/ZCEg3J3SmFYoP3ay+gLalDejnvYWfGR4YFctm7BPeV3B3dgBgmnVeka68GSm4p1mSoGpaeK+Bik5U8xCt26K80/wg5s+jZYPM4GMlUZmpEnkfWEZ74Q8XRVLDaTRnIWT4M+MCZx7m3FHLZXPT68VInaYbAVETRBAQQDcrSSP9FMBCn/GgfdNgADdZqvEN+UjGYuL89ngtaCLiR9z6c8fJ6237XgnfOcX1KDyG74bZA15HbZ3zTca0FZclRcG6N+pM5CpLFOR3yJtMKBL5izbLJXI7Dtvs2X0z69WIBTXv0Pp7M3s9FMTxshHOYvo3Et2TcM2RvNEToHcM6RTuqaAsyLy3eNoRPa4tGfAV4hgiAtvE8JSAEFt82VxK+WYZCyAsMKdekmaSNgabVFV2UTXOt+sw71KbZhBkauuKGpE2nxdwKK0tJlMmkaGe23C9YlV7awL0kM5uK6pkTvt6bo6U5DO1pCvL9dB0xDK3tzbe1kXvQKBng6vlYJG+RWCHv6MQZ7Xt00Z+2aOZgumFv3AETrhiz22Lke8vT1ltuyVAWD6/Owgbh1H7gmE4oNquYtmIZQLi+b4WhTzgrhLtiv9rBQrbJzC7BsS0qlmrSk0KWQf9qwzZgC7w4KxtDUi7xFVAYDqHFcTX38SIaBiNbyQhpswe6bFYs/a8cKylW+cyxgwRM8JVjypVjClgf6rogM5hvSXs8yz1RUw5mezrodfa0OR9sK2Jdpbw0CJujSMjtfn3GnPK2vzFns44u+1I9Wi98bpWKtHOGJupt21pgbeWo1QxPxsAw+UlAhSd6gw45HlSGOhMpXHpWqU6S1cXdMtidz1yTnezex9lRnzh9zJz81WHWyTfvby2KSrQTf24vj6Y6j+Hi+h35ekjejddjlHo8YD+dwDftNc5WGwTT27L8DutyVSUfRyf9s44rLYHbWF9cu/tSDOIURWnttYwqNVw3I0ovcLvky3ldA0aiFbnVoRWaEVhWVegmzag0oNudDifzyk3sXVF8gSjF0Too9yrl7PVj/WeAcNddISdBSe0Pmco+VfXIIuojjjCy45eawnKCKAgcrcoip3JAVdt0W6VbCgcEXm7KteowTkfRKAHrFCUPCpn9qpAtBIN9gEoZXWoJTMQETkknDs4xS0Pm6eg8RSgjQjsptW6XbQo8hYPdPkQlXmoXu1mInvb+/tIXCl9/2YYD8cVa9u0icn5b3tdnt04QHzcoHXBZjIjIFNE3Wp+9VfJLxdy3d4JbepC5QallSFvTJIBXJJ8f/WRJSY87RcqSbpjvrl8Nn9JSXyu67+QeA3gn+v0qRJQ00Vqvt4EcnKfDU3Y8ZpcRtEsdmZD0FEPRLDVGMCNi8GTHWxRR9xTUX+nwO+ovO9/tn/FlqR+NU/IS7whhqpflv1/CPkWTFqSoSL+zSSG5dpWb//FmBruw9CPmd/KTx4n7s/Pf5HrYh0AuD6Ag8spVKaBPvxkwjEnagBxCcfKY/LsE323+2Xjv1x1LSoixylL0+yfV8nR5qTkQxlmU6uXrTAyPJ94FZ3rao+5Pp1/SXCTsx52kwL+9k8yNwRj6aOfU7r7Bvzs3gsvkISJROLhgeakV5HpNNo+8hxP2A+C3h6ysqn86ZD9X8vqL+VfLQ0+/Uvv1Hw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_e4e6ac10-6ae9-4514-82af-c45fc70ca866</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_e4e6ac10-6ae9-4514-82af-c45fc70ca866</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4248</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=ISO-8859-1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Authorization Information Extraction via STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_e4e6ac10-6ae9-4514-82af-c45fc70ca866" IssueInstant="2012-08-01T09:23:37.958Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_e4e6ac10-6ae9-4514-82af-c45fc70ca866">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>leGqxspIJOC2i8oan3Robbuom8c=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
iml4kRUy4Jx0aR1z+aFutA30M+OqzYDsH8nkd8kOH+9nb/ZeeRLhDaR474kyIZv0YmVAzkF/h0Lh
pC6Hgb9FW86wReN6NYE6+bMwE7QWvsWvquyN6V+0NAcMKX5378irO4ArFDk3stbesN6LG31fQjfk
gzuIAaDwh85OItAYObE=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="E238B8830FDB3F3AFF707F06E3A85D4D" NotOnOrAfter="2012-08-02T09:23:37.958Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/222259"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2012-08-01T09:23:27.958Z" NotOnOrAfter="2013-08-01T09:23:37.958Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:222259</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_e4e6ac10-6ae9-4514-82af-c45fc70ca866</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2012-08-01T09:23:37.958Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of STS API" searchProperties="true" disabled="true" id="98721890-40f0-48af-9a53-c38ebcb492b9">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c4c71f8d-980f-49db-8713-8d499f75a5c7">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="5d10e6a8-7e80-4efc-b44f-495a0a231479">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("username","SCHOrg1Full1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="4786e982-b23f-40a0-a0f5-9b6ef4633514">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("STS - POST");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "C:\\DECE\\certs\\222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - POST" id="0360c499-398b-4f3a-bd71-44f31911e661">
        <con:settings/>
        <con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            </con:settings>
            <con:endpoint>https://qa.p.uvvu.com:7002</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="http://www.decellc.org/schema/2010/10/dece">
  <Username>${#TestCase#username}1</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="962bea25-f680-46bd-9a4c-838122755d55">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="bdae6369-8534-4a4e-a73a-a339be158b07">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url           = testProject.getPropertyValue("targetURL");
def urnacct       = testProject.getPropertyValue("urnaccount");
def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTS");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/0/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="5d1349e5-4bdb-4275-bb69-4c3969b0f8b7">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="1eb1ad65-4095-45ff-9ca6-c9515f527f6e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Authorization Information Extraction via STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6f8a0720-d056-4d0a-a707-d5c1fcddb9da</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>SCHOrg1Full1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/plain; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/6f8a0720-d056-4d0a-a707-d5c1fcddb9da</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="Test Configuration/Setup" id="12e79c6d-5203-4b43-8f2f-69b336f3bc58" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" id="2618c4cb-9d46-4af3-a130-f1758db03f97">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Properties" id="c62ec256-0b43-4bad-86a7-2c5b7a996a2f">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("username",null);
testCase.setPropertyValue("password",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("nodeaccountid",null);
testCase.setPropertyValue("nodeuserid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("userrowoid",null);
testCase.setPropertyValue("accountrowoid",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assert",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="5f8734ae-734e-4400-b7bc-45d10ccdff90">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS" id="962e6901-d85b-4ab6-9b3a-2d61620b8727">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Disable QC Uploading" id="6a28fc32-7ae1-4c26-8096-2eaa879ede6b">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS GET" id="e9b8c62c-e7a9-409a-b293-8264b50949d3">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information" id="bde08b41-0c75-4089-884b-e887806d66a9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID, b.ROW_OID, c.ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid</con:query>
          <con:assertion type="XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>uname</con:name>
              <con:value>${#TestCase#username}</con:value>
            </con:property>
            <con:property>
              <con:name>nodeid</con:name>
              <con:value>${#TestCase#nodeid}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TestCase-Level Property Transfer" id="11afc515-1652-441d-9bf2-69efdfced106">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false">
            <con:name>accountoid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath>
            <con:targetType>accountoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false">
            <con:name>useroid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath>
            <con:targetType>useroid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false">
            <con:name>userrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[1]</con:sourcePath>
            <con:targetType>userrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
            <con:name>acctrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[2]</con:sourcePath>
            <con:targetType>accountrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Setup base node-level information based on calling Node type" id="a15255ee-9c52-40ec-a420-7243035021a7">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def baseNodeType = testCase.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
testCase.setPropertyValue("cid",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("alid",testProject.getPropertyValue("alid"));
//testCase.setPropertyValue("deceorgid",testProject.getPropertyValue("deceorgid"));

//if (testProject.getPropertyValue("targetPort") == "443") {
//	testCase.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost"));
//	testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost"));
//} else {
//	testCase.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost") + ":" + testProject.getPropertyValue("targetPort"));
//	testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost") + ":" + testProject.getPropertyValue("targetPort"));
//}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
testCase.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testCase.setPropertyValue("nodeaccountid",testCase.getPropertyValue("assertionAccountId"));
testCase.setPropertyValue("nodeuserid",testCase.getPropertyValue("assertionUserId"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Promote variables to calling TestCase" id="85183f88-1587-4f01-975b-b656b478a50c">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def toTCName = testCase.getPropertyValue("tName");
def toTSName = testCase.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = testCase.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodetype":
			case "expectErrTypeSTS":
			case "expectErrTypeSTSGet":
			case "username":
			case "password":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,testCase.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        
        
        
        <con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_e4e6ac10-6ae9-4514-82af-c45fc70ca866</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value>nVdbd6o8E773V7jcly7LQWnFtdu1wlFUVBCPdxgioAhKQNBf/wWs1nZ3H97vostmyMw8mXmSPPmJ7X3AdgDGKE78KKxq0mttzbAsz29aDQetm41Ws7lutNvrdYPjmhxsvdhNHrZqVQ3jFGkhTuwwea2xNMM0aLbBshbDdTi+w/JPHNde1aozFGMSmUx5omvVfB+EuFNmfa2lcdiJbOzjTmjvEe4ksDMB+qBDZnbsG6Ta288ryDJh/OYlyaFDUfDJQRAFAXyC0Z76SX2a89PBnYnvhnaSxug9p4Nfa+++WZY9Zc2nKHYplqZpiuYpMsfBvvuj9la5OSNHCzfRdSzaYRT60A78i12A0lHiRU4VBG4U+4m3/01ohmLoInQD5bABmVb4o0Z9JCjR/WOkTyBjbDewZzO3YCbaoBiFEFWnpvZa+/FPDby6WrEd4k0U7/GX8X9DhMITCqIDchr4trAbuH+P+E213n4i2NFCGKTYP6FhwZKDDRGujmO08fOBjwn3HFwtu1/N8Y1gCP6XjvykHnES2NQ3lZF8F+Hk/2nXY6uuUWZ2kKI34xwKo3k8lqPxaZOl7VXESWEwDYdr+FpCeJx8BXXv9Pv4K0/vtHp3mpszK3c2m65Ob0aeVG/lG7IZ0/V8aUmU4xq2Z8LJiT4dB8tgPtLseAXOx73YPkR1tOSgPkl9WZ6nblcfyxVlFrKB11otz71nc6NsPSaEMgXC1taQgrFnhcOIPWzW464b+Wfa7ncVf7FayJKqZnKP3eOROYvPp5Y605FUwWOHkazntM6MxDOmT4YDXj/W9LiGYl19dC4XWfy/4GheshP7PhCLg2JDdmeC3nRNk9KLKILzxAWZJgCX/G3BUHB3R2/nq3xGC8AwFCCJQrCVBzrYqYCZyoKni7OZnosX0BPc4Yw4WhUQrATdlDMpW0ozw+jKmWc56uy8VoN0dZGHOsCls+jpsinPJNOSdR1EV1uuS2s13+oTPdOMpVQhASQ5P1wclU+QmvuQ1Th9wrHLCZeuFjNiV86D/fC0tuRAF3VVnBzVibZuSobcA+ZyDlklJb6Xwf4QVZZT4cGpd0BbgJSMJjnBRbd2mW5N2aFk2qXN+mzTNbWnGzgTjXJVakXOerPp5aMWoqCLzl7OZQuMr7WAlqgM6dWih+05F+omyCS3dO7LmTO6AdENOquI11oN5MyUzelQ0U0tk0Fpk+QswGt26K1V7wSbRt6zwPaxMaIhz5WQfA/NEzxzx4qtKmC9nzGwaXrQ53x7EWXuqp1JxrLXj1YaCTMEhiwIBiCAaFAsjdRfAANhxo0OPs/6aLBRoj3y4orORP3d6ZLTbb85csfDOSdtdi9j1R83bcejtACy2+YOaBpy+oxn2I65pEwp9C/Po/50gfx4eUmGnME8+22uYs7T6UKKghenu1hO+/V8CQ1rNJ5M5+NLng+P2/YlSLojoRtPerrkjoYIjTGsU7StCFZb4sRld0v4tDFpxFWAqwsAqFvXlX1CYKG7vZKwa+oyIS/QxUwV56I6AapalzVBMoyN4jFjqM7SKTPUNdkJSJnOy4UZVFaiIJFO0fZ8dViyCr2ygFMGM1qy4hpTrt5boJUxDKxZArLDbBMyDK0ejO5Gz1yoFwxwtGwikF0kVFINTO3RoUfn/dkzzRwNJ+hNeDBt5hN2l488d3XeuasdacryYessLRDMrAeOaYRi84phyaYO2tf9luvatGkGcJ8f1nuYSxbpWekcWYJsKgY9zSUJ9K82bAE2x8uLvNVFufSvgFy3CS1O64WHl+HQH1lySkibPtBlu2bpv3KsoFjlM8eOIjDAV47JV47JYHOsa22JwdyzeMDzzBVU+Wi8zAY9/kAbi8GuItQVyk38oDUK25nVr8+Zc/bibY35nNckT6yHm6XXXCcCbV+ggXq7F9U3d1L43ArO+kA3uKlPBWd6i44ZHlSGGhPKzeSiUHyc1oX9yt9fLs0WO92PJ+lJm9p9zJy99XHOZ9tx95miYvXMXV5WJ0NZRHB5vUe+HpJ34/UYpR4P2E8n8E16TdL1FsHkNizuYU2qKuRytJM/y7jC4juNTTm1cyi0IE5QmNTeCq9CwnVSIvR8p0NuzuuYB7woigrTBIIo8S1Fpls0o9CA5nieVZ6bN613RfEFohiFG7/IVYjZ62X9Z4Bw31kjO0Zx7Q+RijpVtdAk6iMKMbIiombBMyNzbf6Z4bmm0morHNNmWU6Sn2WOYRihVh1GySgcxWCToPhBIDe/CmQTQf/go0JFv2sJnJBCHO1TmgTM08l+ClFKZHZcKN0O22pzZQEoJ90fIPlATrf4EOHk6eAdSjHz22V8/XZbMZnj+MUEXIAWEOkW+kbSMzfEv6yM/Vb638KD1PELzULKl8Q+vCL5/OmDDQUN7lSgX2j2hvk+9V9def5XV+oPiKivxbhnck7+Q97bw4RobSLHyvcIJk072k/Hp/R0Sss2vRRSMybhKZriqQmCKZGLZyvaoZC6R6D+RajfMX/Je7d/RpcmXjhJyC7fE0ZVy+HfH2mfvEkBEpQn39nEgDzLiuR/fLnBDizmEfOY/GRR7HzU/ZtYD3kI5OKE8kO3GBUK+/y5ve87oQMjEtUnh1QUP8b+zv+73J+N93LdoSSEFes0Qb//Ui1On9eaDWGUhokm1UrD44lYYk7OB9T5mPRLmFLivr9ZcvzbN8tCH0ygh/Z27T7X//vkhl82HiLihf0Sy2stJ69vkjx0H07gd4CPhzBDtt7D3vuE9+0X86+Wh8p95e/b/wA=</con:value></con:property><con:property><con:name>sName</con:name><con:value>Common Test Steps</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>null:null</con:value></con:property>
        
        
        
      <con:property><con:name>tName</con:name><con:value>Get SAML Assertion - STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>jbaisakh</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" id="2230cff8-b0c4-4339-9237-c390db54b7a5">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="118c305e-ecb2-4b2c-a077-c6b9f5a94bf2">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("streamhandle",null);
testCase.setPropertyValue("dbxmlresponse",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectTransactionid",null);
testCase.setPropertyValue("expectNickname",null);
testCase.setPropertyValue("expectJDBCSQL",null);
testCase.setPropertyValue("expectDBCreatedBy",null);
testCase.setPropertyValue("expectDBDeletedBy",null);
testCase.setPropertyValue("expectDBCreateUser",null);
testCase.setPropertyValue("expectDBDeleteUser",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="a3594a0c-1558-4750-bd2a-c43ab3301b0d">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
testCase.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
testCase.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
testCase.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
testCase.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
testCase.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
testCase.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
testCase.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
testCase.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
testCase.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
testCase.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));

if (testCase.getPropertyValue("expectDBStatus") == "" || testCase.getPropertyValue("expectDBStatus") == null) {
		testCase.setPropertyValue("expectDBStatus","deleted");
}
if (testCase.getPropertyValue("expectDBCreatedByNodeType") == "" || testCase.getPropertyValue("expectDBCreatedByNodeType") == null) {
		testCase.setPropertyValue("expectDBCreatedByNodeType",testCase.getPropertyValue("nodetype"));
}
if (testCase.getPropertyValue("expectDBDeleteUser") == "" || testCase.getPropertyValue("expectDBDeleteUser") == null) {
		testCase.setPropertyValue("expectDBDeleteUser",testCase.getPropertyValue("useroid"));
}
if (testCase.getPropertyValue("expectDBCreateUser") == "" || testCase.getPropertyValue("expectDBCreateUser") == null) {
		testCase.setPropertyValue("expectDBCreateUser",testCase.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA row" id="b8caa22b-bc85-43a8-9788-916032457abd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA where STREAM_HANDLE_OID = :sh</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="6a3569de-a6fa-44c2-a50b-772bec091cc8">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data" id="c17a36f0-0960-4d29-b47c-485d8ae9fd28">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def urnnode   = testProject.getPropertyValue("urnNode");
def acct      = testCase.getPropertyValue("nodeaccountid");

String XMLbody = testCase.getPropertyValue("dbxmlresponse");
String expectStreamHandle = testCase.getPropertyValue("streamhandle");
String expectAccountOID   = testCase.getPropertyValue("accountoid");
String expectRightsToken  = testCase.getPropertyValue("rightstokenid");
String expectUserOID      = testCase.getPropertyValue("expectDBCreateUser");
String expectStatus       = testCase.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = testCase.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + testCase.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = testCase.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_DATE/>
            <UPDATED_BY/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>975DA31F89B0B21EE0401F0A059979D9</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>975DA31F899FB21EE0401F0A059979D9</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>0900</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>2010-12-15 11:29:52.337</EXPIRATION_DATE>             <CLOSED_DATE>2010-12-14 11:29:53.657</CLOSED_DATE>             <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:0910</CLOSED_BY_ORG_ID>             <CREATED_DATE>2010-12-14 11:29:52.335</CREATED_DATE>             <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>*</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>${#TestCase#expectDBStatus}</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" id="ef834773-01d6-4722-bd2c-470f0f919bb9">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e3dfdd01-9f70-457d-bdfa-3693daa4c8b4">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("streamhandle",null);
testCase.setPropertyValue("dbxmlresponse",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectTransactionid",null);
testCase.setPropertyValue("expectNickname",null);
testCase.setPropertyValue("expectJDBCSQL",null);
testCase.setPropertyValue("expectDBCreatedBy",null);
testCase.setPropertyValue("expectDBDeletedBy",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectDBCreateUser",null);
testCase.setPropertyValue("expectDBDeleteUser",null);
testCase.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="aeb806be-1810-4c5d-8cd4-2bb0498736b8">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
testCase.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
testCase.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
testCase.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
testCase.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
testCase.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
testCase.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
testCase.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
testCase.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
testCase.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
testCase.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));


if (testCase.getPropertyValue("expectDBStatus") == "" || testCase.getPropertyValue("expectDBStatus") == null) {
		testCase.setPropertyValue("expectDBStatus","deleted");
}
if (testCase.getPropertyValue("expectDBCreatedByNodeType") == "" || testCase.getPropertyValue("expectDBCreatedByNodeType") == null) {
		testCase.setPropertyValue("expectDBCreatedByNodeType",testCase.getPropertyValue("nodetype"));
}
if (testCase.getPropertyValue("expectDBDeleteUser") == "" || testCase.getPropertyValue("expectDBDeleteUser") == null) {
		testCase.setPropertyValue("expectDBDeleteUser",testCase.getPropertyValue("useroid"));
}
if (testCase.getPropertyValue("expectDBCreateUser") == "" || testCase.getPropertyValue("expectDBCreateUser") == null) {
		testCase.setPropertyValue("expectDBCreateUser",testCase.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row" id="d4b7fb73-c21e-4ab1-8ba0-9022702e9e8f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>${#TestCase#expectDBStatus}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="c8821cc6-f257-4493-841a-d3fe338c08f1">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data" id="2483c5c3-84db-45f9-b602-03d398e2511c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def urnnode   = testProject.getPropertyValue("urnNode");
def acct      = testCase.getPropertyValue("nodeaccountid");

String XMLbody = testCase.getPropertyValue("dbxmlresponse");
String expectStreamHandle = testCase.getPropertyValue("streamhandle");
String expectAccountOID   = testCase.getPropertyValue("accountoid");
String expectRightsToken  = testCase.getPropertyValue("rightstokenid");
String expectUserOID      = testCase.getPropertyValue("expectDBCreateUser");
String expectStatus       = testCase.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = testCase.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + testCase.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = testCase.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == 1;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectStatus[$expectStatus]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HISTORY_OID>978DCC35FCDE7C08E0401F0A05996438</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY/>
            <UPDATED_DATE/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="8b566c84-b309-4b05-9563-6444b75b746a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="df9ff5ca-6178-46ab-b351-dacddd086713">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="2e96c891-60ba-4122-8d3c-ce2fdc38e64f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" id="a50108d4-ba14-49b3-86db-e8acdf8b887b" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="13cd639b-db7c-46fe-8334-348da29d05cd">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="088bf121-5920-4e79-bb6c-1066328b0afb" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="03a2ad2c-580f-4f9f-b64c-519b464622e3" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" id="cac8d07d-d882-4b5f-a63c-78245ca2264a" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" id="be904a4c-0669-4873-b9ef-f8565faf7b88" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" id="c4d8e58d-1448-4a6b-b1ed-546c0093dc9b" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" id="f225a77b-03c2-4da2-9808-8e71c825a44c" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="45813405-ff26-495a-bfa5-a2155e8b0890" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="c7c1871c-a846-40b3-aff5-15e63a86ea7b" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_10024-RightsTokenGet - Policy - RTL_CS  - ParentalControl:RatingPolicy  - US - TVPG - TV-Y rating - Full User and CID Rating TVPG:TV-Y7</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">R1_RightsTokenGet_Policy_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVddc6I8FL7vr2DYSwcDiCJMdQZBu7S29hXbdfdmJw1Bs8VgSVC6v/4NWKxa2+3HTGecHM7Hc3KenHN6yuAi1m2HMZxyklDJ9zry7zCKIGyZmtKAVlMxVKOptLFuKJEF221s3DVbZluWfMYy7FPGIeUdWVc1Q1F1RW1MNM3WTLvZqLdM9Zcs3eKUCddCpa7KUr6IKbPLsB05S6mdQEaYTeECM5sjO3Auh7bQtGGFSe6eblCWAdPunPOlDQCqhxjhOEZ1lCzAKdjTOQ2ZHZAZhTxL8VPMkHXkJ9v1el1fN+pJOgO6qqpAtYDQCRmZfZO7J5UxDn0aJZuzC2lCCYIx+QsLUJeYz5NQcuJZkhI+X7ziWgOaWrhWcI4UpBn0mwyeA5To3ulpD2TKoMLmUKucjXGEU0wRlm7Gfkf+9r4KbmwnKaQsStIFOzh/DBKmKxwnSxwqrMqsQvd+j0euq3uKke1TFGeMrPBVQZMlRJhJ1ymOSD4kTJAvZFJZfiln4o9ULMPoI2U5BbtYBXRw5HY8MsOMf6Zmu/XaeLmFcYa7s9r05wj8hEYyxd9/XKKQmtOzmlVzH+47JYRd5Q2obbmfzodk3XLrycgZnxm0Zvp/zXttxGvZH6rO+uvobniDwXnuXK5BlKd0ajTb6VC9uT5PgiD8Ps9n2f2073urWjr6bk59Xcuv0trJKE8za+GO/gIrPsvP6YK3fCs6t24nnvPrkV3c5rn+YzVa/7oJLvPr2qq1vAV6qzaKr2Cr5pJpM/95Nhhd8WziX51cjFXSbqj+RfSgec5wlKP/Os857eawL6xaQpDd/cGIV8eCHr4nDUS9IH+7vRQSEipRqWovix7FOKZc7hZWRWuxM9GASGiLYm7OutdvOZYxME1z0DA01eoZRrPfMCyjrQ0sp131oA2KA4huQiNSxCq67IY/bwNEC5thGuJUWSUZmmMmv+HRgxxKPh2Lx5FQhieJ6OLtXlMzGo7n9YxWo90zvLYx6OuW22v1Bm6jpcvSVcJHdJQ6Ecfpfgc39jr4GCOyJLho8wXPmSA64+JKHuAq47FWX8E6xZkYBGnRi23daDcBI4tljAvAYJGEWYzry/myvCDANr+6AhErpeP+pHx/r6Z3+K26CaETkkKBFbn0sKgmPjKKjCqR1xM2dxOu3DtZSIpnJq6VpwRtkOx/emZLQZMtVRzX7QduUMHean/A+rPG3tAJrr9i+9sNfmufdfD50F8LPPxC1sOvZi34+0Xzl5bgDQqCQ/ZvA4UrshO22qDEUiBGRrd6uw+w/lDPVqusfK1mMQ5T4R5oQNdAgFEmZtrjJLnHFGxdgHetFFvUB5G38n18GZ/TgEOOF6K3SOXxHftkgFmxT/qiN+bvXVb3Qop74zjnx2RuLNbOAvGbmymyUaEnxNfiZ52k4XO5jvjaiSPyFEskJ3RWnIrl4fEVUqBEuCVi2iXprvNjDo4F3xduL3mLhQs23WUcv/5FKsZYR4YIJRnlvieXgt3RWuLkj0tsPyu9cFOO76d9LGev7mPTy2EghtwCyltd8m9lhZR0QVgu1r4SS0fOxb8XIjid7YzyJ4C707zlimlueP1/TfP9TLovxC8lO3d6+B66/wM=</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish LockerViewAll" searchProperties="true" id="7d044c1a-ed22-480f-a1d0-c561b6f165d2">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d7d19483-e793-4534-ac06-5f7e1f143080">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass", "urn:dece:type:policy:LockerViewAllConsent");
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="97790bb2-1333-4a85-8683-4f343947a645">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyResource") == null || testCase.getPropertyValue("policyResource") == "") {
	testCase.setPropertyValue("policyResource","urn:dece:rightslockerid:org:dece:0900");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}
if (testCase.getPropertyValue("policyRequestEntity") == null || testCase.getPropertyValue("policyRequestEntity") == "") {
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for LockerViewAll" id="beb2b6dc-1b7f-432c-804a-ddfeaf3e7e91">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate LockerViewAll if necessary" disabled="true" id="09f1acbe-e6e4-4c10-8d01-d668cac14076">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def exists = testCase.getPropertyValue("policyExists");

if (exists != "true") {
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdbb+I6EH7fXxFlH6uQGwESFaSQpLt0aeGQwtnty8p1DHgJTrCdQPn1xwkNBUp7uq2EFHk8l28unhkuGVjGhuMyhijHCZF6flv+HVnQhmhqKQ3L0pR6VDeUlm2ayoPWsgEwLWTquiz1GMtQjzAOCG/Lhqabim4oeutO1x2r4eh2zbb0e1maIMqEasFS02Rps4wJc0qzbTmjxEkAw8whYImYw6ETujd9R3A6oMIkdy53KEuDtDPnPHVUFdYiBFEcwxpMluqlesRzGTEnxDMCeEbRk82IteUn2fV6XVubtYTOVEPTNFWzVcETMTz7Kne+VMIo6pFpsjt7gCQEQxDjLShA3SA+TyLJjWcJxXy+fEW1rupaoVpBG6hAvU6+yuqzgRLdOzUdgaQMKGwO9ErZCE0RRQQiaTzqteWv78vgTvaOAsKmCV2yk/PfQUIkR3GSokhhlWcVuvdrPBOuziWCTo/AOGM4R7dFmaQAIiYNKZriTR8zUXwRk8r0SxsmfriqMgT/Ji2X6iFWAV09Ex0fzxDjH8nZYb52WiYgzlAnmY1+eFd2DqnupchMJ9/hxXC1NaIBbJcQDpl3oPbpfjqfFuu+tp6Ees36ZPWwGo22XM/7j+P03uj61/l4MdTjlr0GsyaHvW/J7ba+2BrD62Fqu2Pavwla5u0imvwYf+sHj4OEjv9428aXAbqHze5Nt79dqI1/KY5WqjtcxL8mGtR8nBvD8J/wV/ZTT1sDy1ik4YX/aI+t7bQ+Zs3GINncwnzdT+9oy837X37auW5e/OHe94v19+v7Lu267WefDn04JlYtIcwe/iDIq2NRHj1fuhL5Avzt9lJQcKRMS1YnLXoU44hwuVNIFa3FyUQDwpEjkrk7B74XNC23G2iG4Rr1INDqmn6luVrTti3TaFY9aIfiBKKXkCkubBVddlc/bwOES4chEiGq5EkG54jJb2j0AQdSj4zE40gIQ3eJ6OLmlWU1upreDOpW02pdmVbd01u+1TKuPNMPPFm6TfiADKg75Yged/D6UQcfIYhTjIo2X9Q5E4XOuAjJCuQZj/VaDmoEZWIQ0KIXO0a9ZakML9MYFYDVZRJlMaql87QMkMp2X0MBkJVUP5iU7+9V907vqkgInggXDKzwpYtENtGZUaRVjrzucPPQ4Uq9m0W4eGYirJxiuENyfPVcLUWZ7EvF9bwg9MIK9p77L6Q/KuwNbj8u+dsLf+sfFPf7bjj8jOynjH/c9OcM9z/hdf+zXo+Cu08FLZi8lFTfqH319NntDUU5PjBbrW5iGxGzqlM1jRWorWpZnmdlm2gWc5gK9aoYx7oaIpiJYfp4lywQUfcq1HftMnvUJ5b39GN8GZ+TkAOOlqKpSeXxHYtsiFixyPZEU968d0s+MinixtGGn6N5sdh3C8RvrsTQgQWfIA/FZ53Q6DldZ3Qd2BF+iu2VYzIrTsXW8vhKUcBEqMVizCb0UPk5BeeMHxP3Qd5j4aKaHjKOXr+RivnZlgGESUZ4z5dLwuFML3HyxxQ5z0wv1JR7w9MiuGGvLoI/b/qhmK5LIO958f8zK7gsF4jkYt8ssbTljfhfI4yT2cEO8QTw/BqhN95aI4496bwgv6QcxPT0PXT+Aw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:EDCE75ABE016A24EE0401F0A07995327</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:EDCE75ABE022A24EE0401F0A07995327</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:LockerViewAllConsent</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:EDCE75ABE022A24EE0401F0A07995327</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:EDCE75ABE022A24EE0401F0A07995327</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R3_Device_Role_Changes</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_300013 - RightsTokenDataGet - Policy - AllowAdult - US - MMPA - Can create RightsToken that IS_ADULT = 'y' without policy</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="8fde3020-0bc4-46e5-87b4-fffa5fac96fe">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b63d36b9-9a22-4f24-a215-7990fa840a78">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="d65c789e-c443-41de-82ef-dec8f48e86e4">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.getPropertyValue("policyCreator") == testCase.getPropertyValue("assertionUserIdFULL");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="dbb59997-2891-423a-ba34-3e3650b2c032">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="79d48f87-b765-413a-90e2-9c6faa23cfa0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="ab4fada1-3c24-44f8-adb5-c11a4646294c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));
//testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVddc6I8FL7vr2DYSwcDiCJMdQZBu7S29hXbdfdmJw1Bs8VgSVC6v/4NWKxa2+3HTGecHM7Hc3KenHN6yuAi1m2HMZxyklDJ9zry7zCKIGyZmtKAVlMxVKOptLFuKJEF221s3DVbZluWfMYy7FPGIeUdWVc1Q1F1RW1MNM3WTLvZqLdM9Zcs3eKUCddCpa7KUr6IKbPLsB05S6mdQEaYTeECM5sjO3Auh7bQtGGFSe6eblCWAdPunPOlDQCqhxjhOEZ1lCzAKdjTOQ2ZHZAZhTxL8VPMkHXkJ9v1el1fN+pJOgO6qqpAtYDQCRmZfZO7J5UxDn0aJZuzC2lCCYIx+QsLUJeYz5NQcuJZkhI+X7ziWgOaWrhWcI4UpBn0mwyeA5To3ulpD2TKoMLmUKucjXGEU0wRlm7Gfkf+9r4KbmwnKaQsStIFOzh/DBKmKxwnSxwqrMqsQvd+j0euq3uKke1TFGeMrPBVQZMlRJhJ1ymOSD4kTJAvZFJZfiln4o9ULMPoI2U5BbtYBXRw5HY8MsOMf6Zmu/XaeLmFcYa7s9r05wj8hEYyxd9/XKKQmtOzmlVzH+47JYRd5Q2obbmfzodk3XLrycgZnxm0Zvp/zXttxGvZH6rO+uvobniDwXnuXK5BlKd0ajTb6VC9uT5PgiD8Ps9n2f2073urWjr6bk59Xcuv0trJKE8za+GO/gIrPsvP6YK3fCs6t24nnvPrkV3c5rn+YzVa/7oJLvPr2qq1vAV6qzaKr2Cr5pJpM/95Nhhd8WziX51cjFXSbqj+RfSgec5wlKP/Os857eawL6xaQpDd/cGIV8eCHr4nDUS9IH+7vRQSEipRqWovix7FOKZc7hZWRWuxM9GASGiLYm7OutdvOZYxME1z0DA01eoZRrPfMCyjrQ0sp131oA2KA4huQiNSxCq67IY/bwNEC5thGuJUWSUZmmMmv+HRgxxKPh2Lx5FQhieJ6OLtXlMzGo7n9YxWo90zvLYx6OuW22v1Bm6jpcvSVcJHdJQ6Ecfpfgc39jr4GCOyJLho8wXPmSA64+JKHuAq47FWX8E6xZkYBGnRi23daDcBI4tljAvAYJGEWYzry/myvCDANr+6AhErpeP+pHx/r6Z3+K26CaETkkKBFbn0sKgmPjKKjCqR1xM2dxOu3DtZSIpnJq6VpwRtkOx/emZLQZMtVRzX7QduUMHean/A+rPG3tAJrr9i+9sNfmufdfD50F8LPPxC1sOvZi34+0Xzl5bgDQqCQ/ZvA4UrshO22qDEUiBGRrd6uw+w/lDPVqusfK1mMQ5T4R5oQNdAgFEmZtrjJLnHFGxdgHetFFvUB5G38n18GZ/TgEOOF6K3SOXxHftkgFmxT/qiN+bvXVb3Qop74zjnx2RuLNbOAvGbmymyUaEnxNfiZ52k4XO5jvjaiSPyFEskJ3RWnIrl4fEVUqBEuCVi2iXprvNjDo4F3xduL3mLhQs23WUcv/5FKsZYR4YIJRnlvieXgt3RWuLkj0tsPyu9cFOO76d9LGev7mPTy2EghtwCyltd8m9lhZR0QVgu1r4SS0fOxb8XIjid7YzyJ4C707zlimlueP1/TfP9TLovxC8lO3d6+B66/wM=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8/User/urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/21/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:us:tvpg:tv-y</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenGet_Policy_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10024-RightsTokenGet - Policy - RTL_CS  - ParentalControl:RatingPolicy  - US - TVPG - TV-Y rating - Full User and CID Rating TVPG:TV-Y7</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="5ad770b7-a9b0-4b3e-950a-ba25383297be">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="420c0e0b-9ba8-498d-b730-a2e347409259">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="038e0c98-ec49-4fc5-a48d-0efc66d2102f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.getPropertyValue("policyCreator") == testCase.getPropertyValue("assertionUserIdFULL");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for Policy" id="8962ec6d-9544-406c-9206-70f642f559a8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="bdc7eb06-1812-4a41-947f-26de4d0a7954">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", testCase.getPropertyValue("policyClass"));

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for Policy" id="8b4b4ea6-7951-4800-aa30-566ad912acee">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));
//testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVddc6I8FL7vr2DYSwcDiCJMdQZBu7S29hXbdfdmJw1Bs8VgSVC6v/4NWKxa2+3HTGecHM7Hc3KenHN6yuAi1m2HMZxyklDJ9zry7zCKIGyZmtKAVlMxVKOptLFuKJEF221s3DVbZluWfMYy7FPGIeUdWVc1Q1F1RW1MNM3WTLvZqLdM9Zcs3eKUCddCpa7KUr6IKbPLsB05S6mdQEaYTeECM5sjO3Auh7bQtGGFSe6eblCWAdPunPOlDQCqhxjhOEZ1lCzAKdjTOQ2ZHZAZhTxL8VPMkHXkJ9v1el1fN+pJOgO6qqpAtYDQCRmZfZO7J5UxDn0aJZuzC2lCCYIx+QsLUJeYz5NQcuJZkhI+X7ziWgOaWrhWcI4UpBn0mwyeA5To3ulpD2TKoMLmUKucjXGEU0wRlm7Gfkf+9r4KbmwnKaQsStIFOzh/DBKmKxwnSxwqrMqsQvd+j0euq3uKke1TFGeMrPBVQZMlRJhJ1ymOSD4kTJAvZFJZfiln4o9ULMPoI2U5BbtYBXRw5HY8MsOMf6Zmu/XaeLmFcYa7s9r05wj8hEYyxd9/XKKQmtOzmlVzH+47JYRd5Q2obbmfzodk3XLrycgZnxm0Zvp/zXttxGvZH6rO+uvobniDwXnuXK5BlKd0ajTb6VC9uT5PgiD8Ps9n2f2073urWjr6bk59Xcuv0trJKE8za+GO/gIrPsvP6YK3fCs6t24nnvPrkV3c5rn+YzVa/7oJLvPr2qq1vAV6qzaKr2Cr5pJpM/95Nhhd8WziX51cjFXSbqj+RfSgec5wlKP/Os857eawL6xaQpDd/cGIV8eCHr4nDUS9IH+7vRQSEipRqWovix7FOKZc7hZWRWuxM9GASGiLYm7OutdvOZYxME1z0DA01eoZRrPfMCyjrQ0sp131oA2KA4huQiNSxCq67IY/bwNEC5thGuJUWSUZmmMmv+HRgxxKPh2Lx5FQhieJ6OLtXlMzGo7n9YxWo90zvLYx6OuW22v1Bm6jpcvSVcJHdJQ6Ecfpfgc39jr4GCOyJLho8wXPmSA64+JKHuAq47FWX8E6xZkYBGnRi23daDcBI4tljAvAYJGEWYzry/myvCDANr+6AhErpeP+pHx/r6Z3+K26CaETkkKBFbn0sKgmPjKKjCqR1xM2dxOu3DtZSIpnJq6VpwRtkOx/emZLQZMtVRzX7QduUMHean/A+rPG3tAJrr9i+9sNfmufdfD50F8LPPxC1sOvZi34+0Xzl5bgDQqCQ/ZvA4UrshO22qDEUiBGRrd6uw+w/lDPVqusfK1mMQ5T4R5oQNdAgFEmZtrjJLnHFGxdgHetFFvUB5G38n18GZ/TgEOOF6K3SOXxHftkgFmxT/qiN+bvXVb3Qop74zjnx2RuLNbOAvGbmymyUaEnxNfiZ52k4XO5jvjaiSPyFEskJ3RWnIrl4fEVUqBEuCVi2iXprvNjDo4F3xduL3mLhQs23WUcv/5FKsZYR4YIJRnlvieXgt3RWuLkj0tsPyu9cFOO76d9LGev7mPTy2EghtwCyltd8m9lhZR0QVgu1r4SS0fOxb8XIjid7YzyJ4C707zlimlueP1/TfP9TLovxC8lO3d6+B66/wM=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8/User/urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8/Policy/urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/21/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenGet_Policy_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10022-RightsTokenGet - Policy - RTL_CS  - NoPolicy - Enforcement - US - MMPA - Can create RightsToken that IS_ADULT = 'y' with Policy and all rating as per Matrix</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="88897aec-96ba-4395-ab04-3dd42d1fab6d">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="9702d0d8-2bd1-4a66-8ff2-c16d01d34460">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="ca90c562-71be-4d63-ba19-75e3664d7d4c">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="cbb188bd-d862-44b5-b86f-719c1001e136" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="d4140af6-fabe-472f-8fbc-321cfabbda88" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="7f7d1adb-d82c-4fc4-a878-c49021549789" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="1c8acbde-ea12-4b20-87f8-f6aba6d5bef3" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="c947bd6f-1d88-4075-87db-da782c0b784f" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="27f0c0eb-0047-480c-962a-1ac35f26b4d2" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:NoPolicyEnforcement" id="7c399165-6dd2-4a55-8d0f-93d16bc1913c" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:NoPolicyEnforcement" id="6f27362d-2413-4864-9f85-8340ecd3b75c" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="DeleteAllUserPolicies" id="e17c0814-b6fd-4d89-ab7f-d80cf493c4fd"><con:settings/><con:config><script>import dbUtils.dbPolicy;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )
def username = context.expand( '${#TestCase#username}' )

a = new dbUtils.dbPolicy(log,testProject.getPropertyValue("targetDECEDB"));
log.info "useroid"+useroid;
log.info "username=="+username;

a.policyDelete(302,username,"deleted")
a.policyDelete(300,username,"deleted")
a.policyDelete(304,username,"deleted")
a.policyDelete(303,username,"deleted")</script></con:config></con:testStep><con:testStep type="groovy" name="DeleteUserPolicies" disabled="true" id="f1ffc1b0-8820-46f9-937e-399dcecef86d"><con:settings/><con:config><script>import dbUtils.dbPolicy;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,testProject.getPropertyValue("targetDECEDB"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
a.policyDelete(303,useroid,"deleted")
</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVddc6I8FL7vr2DYSwcDiCJMdQZBu7S29hXbdfdmJw1Bs8VgSVC6v/4NWKxa2+3HTGecHM7Hc3KenHN6yuAi1m2HMZxyklDJ9zry7zCKIGyZmtKAVlMxVKOptLFuKJEF221s3DVbZluWfMYy7FPGIeUdWVc1Q1F1RW1MNM3WTLvZqLdM9Zcs3eKUCddCpa7KUr6IKbPLsB05S6mdQEaYTeECM5sjO3Auh7bQtGGFSe6eblCWAdPunPOlDQCqhxjhOEZ1lCzAKdjTOQ2ZHZAZhTxL8VPMkHXkJ9v1el1fN+pJOgO6qqpAtYDQCRmZfZO7J5UxDn0aJZuzC2lCCYIx+QsLUJeYz5NQcuJZkhI+X7ziWgOaWrhWcI4UpBn0mwyeA5To3ulpD2TKoMLmUKucjXGEU0wRlm7Gfkf+9r4KbmwnKaQsStIFOzh/DBKmKxwnSxwqrMqsQvd+j0euq3uKke1TFGeMrPBVQZMlRJhJ1ymOSD4kTJAvZFJZfiln4o9ULMPoI2U5BbtYBXRw5HY8MsOMf6Zmu/XaeLmFcYa7s9r05wj8hEYyxd9/XKKQmtOzmlVzH+47JYRd5Q2obbmfzodk3XLrycgZnxm0Zvp/zXttxGvZH6rO+uvobniDwXnuXK5BlKd0ajTb6VC9uT5PgiD8Ps9n2f2073urWjr6bk59Xcuv0trJKE8za+GO/gIrPsvP6YK3fCs6t24nnvPrkV3c5rn+YzVa/7oJLvPr2qq1vAV6qzaKr2Cr5pJpM/95Nhhd8WziX51cjFXSbqj+RfSgec5wlKP/Os857eawL6xaQpDd/cGIV8eCHr4nDUS9IH+7vRQSEipRqWovix7FOKZc7hZWRWuxM9GASGiLYm7OutdvOZYxME1z0DA01eoZRrPfMCyjrQ0sp131oA2KA4huQiNSxCq67IY/bwNEC5thGuJUWSUZmmMmv+HRgxxKPh2Lx5FQhieJ6OLtXlMzGo7n9YxWo90zvLYx6OuW22v1Bm6jpcvSVcJHdJQ6Ecfpfgc39jr4GCOyJLho8wXPmSA64+JKHuAq47FWX8E6xZkYBGnRi23daDcBI4tljAvAYJGEWYzry/myvCDANr+6AhErpeP+pHx/r6Z3+K26CaETkkKBFbn0sKgmPjKKjCqR1xM2dxOu3DtZSIpnJq6VpwRtkOx/emZLQZMtVRzX7QduUMHean/A+rPG3tAJrr9i+9sNfmufdfD50F8LPPxC1sOvZi34+0Xzl5bgDQqCQ/ZvA4UrshO22qDEUiBGRrd6uw+w/lDPVqusfK1mMQ5T4R5oQNdAgFEmZtrjJLnHFGxdgHetFFvUB5G38n18GZ/TgEOOF6K3SOXxHftkgFmxT/qiN+bvXVb3Qop74zjnx2RuLNbOAvGbmymyUaEnxNfiZ52k4XO5jvjaiSPyFEskJ3RWnIrl4fEVUqBEuCVi2iXprvNjDo4F3xduL3mLhQs23WUcv/5FKsZYR4YIJRnlvieXgt3RWuLkj0tsPyu9cFOO76d9LGev7mPTy2EghtwCyltd8m9lhZR0QVgu1r4SS0fOxb8XIjid7YzyJ4C707zlimlueP1/TfP9TLovxC8lO3d6+B66/wM=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:6CE6A4DE777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:2DE6A94F777F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<PolicyList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:CF21E8B5D9AF05EEE0401F0A2222594FA0">
      <PolicyClass>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</PolicyClass>
      <RequestingEntity>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E" CreationDate="2012-11-23T03:15:35.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenGet_Policy_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10024-RightsTokenGet - Policy - RTL_CS  - ParentalControl:RatingPolicy  - US - TVPG - TV-Y rating - Full User and CID Rating TVPG:TV-Y7</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>useroid</con:name><con:value>3DE6A94F777F34109B445E349481F9A8</con:value></con:property><con:property><con:name>username</con:name><con:value>Rights_TokenGet_User_20140203_044749</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="4be145f1-5d0f-431b-9da3-fd577b0650db">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property" id="99846c49-d8f7-4d0e-bb7a-f42b0aefb975">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			/*nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "ErrorResponse";			
			if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			propertyValue = nodeRole;*/		
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="5e9d331a-9773-4989-952b-fd197b02abcc">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases" id="38673810-5e5b-457e-aebb-b52ae8763820">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = newTestCaseName.replace("_PERM_", "_FUNC_");		
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="cc6d6192-b97a-4b00-98bc-293c4cb1ffad">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="558065f3-84df-46dc-aba8-df16eed03531">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Dynamic LASP Test Cases"; 
//def oldString = """deleteTC.setPropertyValue("CallingTestSuiteName", testSuite.name);"""
//def newString = oldString + '\n' + """deleteTC.setPropertyValue("RequestorUUID", requestorUUID);"""

def oldString = """- LLASP -""";
def newString = """- DLASP -""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				stepScript = testStepList[j].getScript();
				stepScript = stepScript.replace(oldString, newString);
				targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsToken-Generation" searchProperties="true" id="e5acba31-b843-45f4-b5bc-cc8307b4c6c9"><con:settings/><con:testStep type="groovy" name="Feed Rights Token Data" id="5a102e53-3805-4898-b01d-e91c53465038"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

//RightsToken Request and properties
TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("nodeid",RTCRequest.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",RTCRequest.getPropertyValue("assert"));

testCase.setPropertyValue("AccountID",RTCRequest.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("ALID",testProject.getPropertyValue("alid"));
testCase.setPropertyValue("ContentID",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("PIRetailerTransx","transcation");
testCase.setPropertyValue("PIPurchaseAccount",RTCRequest.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("PIPurchaseUser",RTCRequest.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("VCAllowedUser","urn:dece:userid:org:dece:12222599");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Rights Token Create API" id="86d910ea-92e5-492f-ae7d-8e4ded820b19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get Rights Token Data" id="edc9246b-ba5b-403b-aaa8-5a658cc52d04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Create Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

log.info RTCRequest.getPropertyValue("TCaseName");

def runnerRTC = RTCRequest.run( null , false )

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTestCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

log.info "new generated rights token is "+testCase.getPropertyValue("rightstokenid");

//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));




//assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Response" id="e64f6a3a-3c2f-446d-9006-918223b6f278">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

RTCRequest.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
RTCRequest.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
RTCRequest.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
RTCRequest.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
RTCRequest.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify the RightsTokenGet Response" disabled="true" id="c3c30ea7-7211-40f7-ac28-c11192f743ff">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify theRightsTokenGet Response against DB Result" disabled="true" id="0282e43b-8aa0-4698-8b2d-004ab0c0439c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights GET  Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:F3609AEAFE8B59D2E0401F0A07992D0F</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTGET_R3_EXAMPLE_ALIDVersion_244299.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F3636D837C6FC7A0E0401F0A05995275</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F3609AEAFE8B59D2E0401F0A07992D0F</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F3609AEA702BAA38E0401F0A07992D0D</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RTGET_R3_EXAMPLE_ALIDVersion_244299.txt" ContentID="urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F3609AEAFE8B59D2E0401F0A07992D0F</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F3609AEA702BAA38E0401F0A07992D0D</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>10588</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F3636D837C6FC7A0E0401F0A05995275</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>HandlingETag</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Common Test Steps</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVdbb+I6EH7fXxFlH6sQJ9yaqCCF225aellSOLQvlesYcBvsEDvcfv3aoaFAaU+3lSohT+byzfjzzPSMw2lkux7nOBGEUc1v1fSHxxBXK8Vy1bAAQEYJVS3DgVbFKBVHp1YYPpbtItA1n/MU+5QLSEVNt4FVMoBt2NVb4Lig5NqlQhEU73VtgBMuXUuVgrRaTiPK3SxsTU8T6jLICXcpnGLuCuQG3mXXlZouzDHp9bMNyixgUp8IEbumiQohRjiKUAGxqXlm7umchdwNyJhCkSb4JWbIa/qL7WKxKCyKBZaMTRsAYALHlDohJ+Ofev1HboxDn47Y5tyElFGCYETWUIG6xGLCQs2LxiwhYjJ9x7VlWkC5NvASGcgq0Z+6+RogQ/dJT3sgEw4NPoFW7qyHRzjBFGGt3/Nr+s/P3eDG9jaBlI9YMuUH53+DhOkcRyzGocHzzHJ0n/d4pFz1M4xcn6Io5WSOrxRNYogw124SPCLLLuGSfCHXsuvXllz+kZxlGP3LtZyZu1gldPNIdVpkjLn4yp3t3tfGywBGKa7Pnptp40ks/vRXwfnA6Q6Xw7JZdC4GwV0tg7CrvAG1ve6X8yFZt9x6MTo/7+GL4UmDjVZW/Kt78TRK78w/qDu8/LXqrYvCmszsZn8FWmzdeOzc38/j9g2/LJfvn4OTy2q/24/WYyRkue87yx8X0c3MS6PrvnnSAcPi/MYnw4Z15ff+LP2UrU6G/5346boyivzr5Pn8t3O3XiwGAzI4Zet1yfn127ooXYDS3SQOJs8/7hpJ5TS+TspXo8mSde975X7tNafdHPaFeUsI0scnjER+VPTwW1pH3hcUH7cXJSGhMcpU3Vj1KC4wFXpdWanW4qayAZHQlZe5OXeKFeB4ba8K7IbnFU/boASsDvBA1XHsFmjlPWiD4gBik9ERUbFUl93w52OAaOpyTEOcGHOWognm+gceW1BAzac9+TgY5fiWyS5etp1ms92o2BUAGk2rbTW8BqgCzy5VK2Wn09K1Kyau6XXijQRO9jq4Ze918B5GJCZYtXnFcy6JzoUsyQzOUxFZhTksUJzKQZCoXiztTssmJ9M4wgqwOWVhGuFCPImzApl882sbEPFM2mvfZu/v3fQOv+WVkDohUQpc5dLA8jbxkVFk5Ym8n3B5N+HcvZeGRD0zWVaRELRBsv/plS2KJluqeLLyQTPIYW+1/8H6q8atrhfcfMf2oRk8WF918PXQ3wvc/UbW3e9mLfn7TfO3luYHFDQP2b8NFM7JTth8g5JLgRwZ9fztzmBhVkjn8zR7rVUAbDOR7k05FS0zwCiVM211y54xNbcuzE+tFFvUB5G38n18qZjQQECBp7K3aNnxE/tkgLnaJ33ZG5efXVb3Qsq6CbwUx2TNSK6dCvGHmylykdKT4hv5s2BJ+HpdR3ztxJF5yiVSEDpWJ7U8rN4hBWLSLZHTjiW7zo85OBZ8X7gt8haLkGx6TAV+/4umxlhNhwixlApfjQsp2B2tGU6xirH7qvTGTTa+X/axJX93HxtedgM55KZQ3+qS/1c2SEYXhHW19mVYavpS/nshg9Pxzih/AXhsmnfap42y07IPpnlnW8C9TOpvxG8lOzU9fA/1vw==</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of RightsToken-Generation" searchProperties="true" id="24da2826-1f84-4e09-8725-5988f8385043"><con:settings/><con:testStep type="groovy" name="Feed Rights Token Data" id="be2c970b-0038-43d9-8f88-414375b858dc"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

//RightsToken Request and properties
TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET:CS"));
testCase.setPropertyValue("assert",testCase.getPropertyValue("assert"));

testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8");
testCase.setPropertyValue("ALID","urn:dece:alid:org:Metadata_ALID_473355026");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:METADATA_CID_DONT_TOUCH_1.txt");
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:METADATA_CID_DONT_TOUCH_1.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("PIRetailerTransx","transcation");
testCase.setPropertyValue("PIPurchaseAccount",testCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("PIPurchaseUser","urn:dece:userid:org:dece:7BB77B2569644410418DE3449481F9A8");
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("VCAllowedUser","urn:dece:userid:org:dece:12222599");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Rights Token Create API" id="1c020907-ce2b-4194-bdd6-b8c423607b92"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get Rights Token Data" id="d5e3ac74-69aa-41e4-8a73-2161170d8701"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Create Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

log.info RTCRequest.getPropertyValue("TCaseName");

def runnerRTC = RTCRequest.run( null , false )

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTestCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

log.info "new generated rights token is "+testCase.getPropertyValue("rightstokenid");

//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));




//assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Response" id="7a34fcde-2cb5-4b15-bb00-c0af52ba2da1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

RTCRequest.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
RTCRequest.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
RTCRequest.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
RTCRequest.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
RTCRequest.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify the RightsTokenGet Response" disabled="true" id="9214d347-e4a0-42da-9577-08a558b21ee8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify theRightsTokenGet Response against DB Result" disabled="true" id="c9fe588b-9e3d-4857-a7d7-ed8c32db0b7d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights GET  Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:org:Metadata_ALID_473355026</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:METADATA_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F3636D837C6FC7A0E0401F0A05995275</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:7BB77B2569644410418DE3449481F9A8</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RTGET_R3_EXAMPLE_ALIDVersion_244299.txt" ContentID="urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:F3609AEAFE8B59D2E0401F0A07992D0F</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F3609AEA702BAA38E0401F0A07992D0D</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>10588</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F3636D837C6FC7A0E0401F0A05995275</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:METADATA_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>HandlingETag</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Common Test Steps</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1ad G0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssYDe ks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVPGO Z6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d8F mBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq5Y QFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF6/ VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgcRq cBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwrwu BpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8Jdknd YuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM=</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="Setup" id="9c539326-5c7c-4caa-a0ca-231baf72c198" disabled="true"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="d31df2aa-2ee4-4299-a840-2fff111c9118"><con:settings/><con:testStep type="datagen" name="AccName" id="026801fa-d71a-47ee-930a-4e2fe8dac4ff"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Rights_Account_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="483a8493-60b8-4c0c-92ea-5067e0ffcf87"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" id="bab80d15-059d-4532-a844-9a985c2c5615"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="919f8ce6-642b-4935-95c3-5ac1fb89f3b1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete" searchProperties="true" id="b61e8c38-fbf2-4275-94aa-99ba2eceb8dd"><con:settings/><con:testStep type="jdbc" name="Delete_Account" id="348fa40d-d6b0-4edd-81d7-09168926d2b3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
accountid ACCOUNT.ACCOUNT_OID%TYPE;
newsfeedid NEWSFEED_EVENT.NEWSFEED_EVENT_OID%TYPE;
BEGIN
select ACCOUNT_OID into accountid from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}';
--select NEWSFEED_EVENT_OID into newsfeedid from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from RIGHTS_LOCKER where ACCOUNT_OID = accountid;
delete from NODE_ACCOUNT where ACCOUNT_OID = accountid;
delete from DRM_DOMAIN where ACCOUNT_OID = accountid;
delete from ACCOUNT_STATUS_HISTORY where ACCOUNT_OID = accountid;
--delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID = newsfeedid;
--delete from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from ACCOUNT where ACCOUNT_OID = accountid;
END;</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ACCID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="698233cd-a56e-43bf-9c60-9ee1fd4ff24d"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="41fbc737-56b2-489a-8533-1a24d256b232"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn:dece:accountid:org:dece:[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="76793cd9-f7ed-4b35-af3a-53802a9afb90"><con:settings/><con:testStep type="datagen" name="UserName" id="77bfd38d-e68a-447d-b99f-532b28c79b42"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Rights_TokenGet_User_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="80a35e1e-8d34-492f-860e-5a3fc37769e9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="ce87b621-4ddb-4be0-a765-65a1d9b6b719"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="a62e8a38-75a0-4e05-b5ac-975056f69feb"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="b272065f-128a-4cd6-a78a-494605be6973"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="31c8a4f4-e5d6-4c0a-a281-787414672c2f"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite Utility Test Cases" disabled="true" id="13c1f70d-6d8b-435c-ab8d-94bdce6765d9"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="23fac59e-9321-4210-bf00-a1f057c17fc1"><con:settings/><con:testStep type="groovy" name="Establish Test Case properties" id="ad96b2bb-e365-4b81-baa7-7eb6231abbbf"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("expectErrType",null);
testCase.setPropertyValue("XMLbody", null);
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);
testCase.setPropertyValue("assertionUUID",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="c013159b-2ff4-4a31-99a2-6311bb30b8a3"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="27b46ef0-2d26-421d-8ddc-a3caf793febd"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('POST - STS');

def expXML = tStep.httpRequest.response.getResponseContent();


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody",expXML);
testCase.setPropertyValue("status",status);
//testCase.setPropertyValue("connection",connection);
testCase.setPropertyValue("contentType",contentType);
testCase.setPropertyValue("contentLength",contentLength);
testCase.setPropertyValue("contentLocation",contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="24c9faa0-a9b7-4093-b565-86cb7cc1047f"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
def url           = testProject.getPropertyValue("Provision_HostName");
def urnacct       = testProject.getPropertyValue("urnaccount");
def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
//boolean doContentLocaton  = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/rest/1/06/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/06/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="332c94c0-ba71-4a56-b48b-1f237a715299"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:properties><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_3baa8ff4-f122-4b18-948d-bde8505caca6</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Retailer_Work_Flow</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01000 - STS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c71c1e0b-b8dd-40f2-9a3d-a19ab43507b1"><con:settings/><con:testStep type="groovy" name="Establish Test Case properties" id="d2bf8279-8415-49db-8b0d-1523874d16b0"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("expectErrType",null);
testCase.setPropertyValue("XMLbody", null);
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertionUUID",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="7fc6bfbd-eaab-4d75-b3e0-b1ed5f1fd1c8"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="3068d6bb-df76-4084-8b2e-0a81b08f9861"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
//testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
//testCase.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="f872e577-6287-4d1b-a54f-eab6016d67f1"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="bhavins code" disabled="true" id="f0445baf-8655-4433-a1f4-6138704ffc7d"><con:settings/><con:config><script>def XMLbody = testCase.getPropertyValue("XMLbody");

List lines = XMLbody.readLines();
List newList;
//String XMLassertion = "";
StringBuffer XMLassertion = new StringBuffer();
Integer startLine;
Integer endLine;

for(i = 0; i &lt;= lines.size; i++)
{              
     line = lines[i];
          try {
                                if(line.trim()[0..16] == "&lt;saml2:Assertion ")
                                {
                                                startLine = i;
                                                //log.info startLine;
                                }
                                else if(line.trim()[0..17] == "&lt;/saml2:Assertion>")
                                {
                                                endLine = i;
                                                //log.info endLine;
                                }              
          }
          catch(Throwable e){
                                //Do Something
          }              
}
for(j = startLine; j &lt;= endLine; j++){
	XMLassertion.append(lines[j]);
}

this.log.info XMLassertion;

testCase.setPropertyValue("XMLassertion",XMLassertion.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Extract out &lt;Assertion> XML block" disabled="true" id="ceccc2e4-0a66-4046-861d-49e2ac9fc401"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbody.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbody.indexOf("&lt;/saml2:Assertion>");

testCase.setPropertyValue("XMLassertion",XMLbody.substring(startAssert, endAssert + 18).toString().trim());


this.log.info testCase.getPropertyValue("XMLassertion");</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="c5abedaa-e03c-4b70-8fd7-de5903176c43"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);

testProject.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="3c8c3fb9-fccf-4bd3-9166-97d26738b086"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value>http://c.decellc.com/Pdb0CZGBUrsvWFkIuYgs3qsXOaI=NILp5IJSyPaupxlJH92/ICZ5XkLovBzBB73wfUAIErYCKQEg5pr69oEAm3JpY5vh6OAzp0c3eEAj pligdNHt+af7dbgRIKbCXYjZ6g/jnGhmtEMIur9d/kRcSdiJzYxxsLIq4xVdOiQEQcAkD1DQ/ArW GbulJlyxMr0N9E9UszU=MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85 RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5 AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=94B6AE0F85AFC20DE0401F0A222259081Furn:dece:org:org:dece:80080010https://qa.q.uvvu.com:7002/dece/SecurityToken/Assertion/eed91199-941b-4565-b26d-e9063f83fd50urn:oasis:names:tc:SAML:2.0:ac:classes:Passwordurn:dece:org:neustar:coordinator94B6AE0F85ADC20DE0401F0A222259081F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>TestSuite Utility Test Cases</con:value></con:property><con:property><con:name>status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Generic STS GET</con:value></con:property><con:property><con:name>XMLassertion</con:name><con:value><![CDATA[<saml2:Assertion ID="92d22367-197d-4773-9057-74c89ccfda3c" IssueInstant="2010-11-15T19:46:20.197Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">        <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>        <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">           <ds:SignedInfo>              <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>              <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>              <ds:Reference URI="#92d22367-197d-4773-9057-74c89ccfda3c">                 <ds:Transforms>                    <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>                    <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">                       <ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>                    </ds:Transform>                 </ds:Transforms>                 <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>                 <ds:DigestValue>NtffQXv952YAnSnOQOJsjwSVhiQ=</ds:DigestValue>              </ds:Reference>           </ds:SignedInfo>           <ds:SignatureValue>L4l13e+/2KysklswaFIS5jY23RXvukUwbkoRxnf7VV6wThY1WiwZ+D5vEDVwQXXN4dDvYfEKHzfX 7HAq7IzxtAq4MuaWPysx0W7MGQ/uyRnRxb6bRQksqLjOwKsDA9H+cRG3hlgYkIfIz1AsjbZz6rOn Spq5Md0E/NIGNK+N3MI=</ds:SignatureValue>           <ds:KeyInfo>              <ds:X509Data>                 <ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85 RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5 AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate>              </ds:X509Data>           </ds:KeyInfo>        </ds:Signature>        <saml2:Subject>           <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">94B6AE0F85AFC20DE0401F0A222259081F</saml2:NameID>           <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">              <saml2:SubjectConfirmationData InResponseTo="C1BC299971F8420086E881CD885E93FF" NotOnOrAfter="2010-11-16T19:46:20.197Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/>           </saml2:SubjectConfirmation>        </saml2:Subject>        <saml2:Conditions NotBefore="2010-11-15T19:46:10.197Z" NotOnOrAfter="2011-11-15T19:46:20.197Z">           <saml2:AudienceRestriction>              <saml2:Audience>urn:dece:org:org:dece:80080010</saml2:Audience>           </saml2:AudienceRestriction>        </saml2:Conditions>        <saml2:Advice>           <saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/dece/SecurityToken/Assertion/92d22367-197d-4773-9057-74c89ccfda3c</saml2:AssertionURIRef>        </saml2:Advice>        <saml2:AuthnStatement AuthnInstant="2010-11-15T19:46:20.197Z">           <saml2:AuthnContext>              <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>              <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>           </saml2:AuthnContext>        </saml2:AuthnStatement>        <saml2:AttributeStatement>           <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">              <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">94B6AE0F85ADC20DE0401F0A222259081F</saml2:AttributeValue>           </saml2:Attribute>        </saml2:AttributeStatement>     </saml2:Assertion>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Core Identity Information Extraction" searchProperties="true" disabled="true" id="5aff2845-5367-4ce7-8d08-667972f74f8b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1158fac3-f58e-449f-9d12-657e3ff9aae2"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("nodeaccountid",null);
testCase.setPropertyValue("nodeuserid",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="04ed569b-1346-4850-8377-ef8ef5e00dd2"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));


</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information" id="0f952c8c-28a4-4ab9-a3bb-27445c3c5b35"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid
   
   


</con:query><con:assertion type="XPath Match"><con:configuration><path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:properties><con:property><con:name>uname</con:name><con:value>${#TestCase#username}</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>${#TestCase#nodeid}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="9871ec51-0e38-45a4-9905-bb7b9b3f3ea4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>accountoid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath><con:targetType>accountoid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false"><con:name>useroid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath><con:targetType>useroid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>nodeaccountid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_ACCOUNT_ID[1]</con:sourcePath><con:targetType>nodeaccountid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>nodeuserid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_USER_ID[1]</con:sourcePath><con:targetType>nodeuserid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase" id="63de362d-d080-41bd-a41f-914dbcd5f84c"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def toTCName = testCase.getPropertyValue("tName");
def toTSName = testCase.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = testCase.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodeid":
			case "username":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,testCase.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_01000 - STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS_Creation_Device_Nodes</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>Rights_TokenGet_User_20130930_081052</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="93f77868-f753-469c-b82c-d70f253c8457">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6a370fe3-e158-40ed-b1e7-572337dca91e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="4bd99472-31c4-49ac-9ecf-782c6fb4fdce">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

testCase.setPropertyValue("audienceList",testProject.getPropertyValue('audienceList'));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="URL_Builder_with_AudienceList" id="1c7549dd-10a6-402f-94ef-18c897f9fb16"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def urlParam;

log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+(testCase.getPropertyValue("audienceList").replaceAll(":","%3A"));
//def urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");
else
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");

log.info "urlParam=="+urlParam;
testCase.setPropertyValue("tokentype",urlParam);</script></con:config></con:testStep>
      <con:testStep type="groovy" name="pem set" id="ebe0003c-0af5-41a7-a992-e4c7d32c9b43">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="STS - POST" id="2803a8da-273d-45d3-b499-d3a62beccb59"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" id="cfaadafb-1927-4563-8394-72a5a1127f24" accept="" sslKeystore="RET_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:restRequest></con:config></con:testStep>
      <con:testStep type="restrequest" name="STS - POST1" disabled="true" id="c13c8cb9-db1c-4a8d-900e-d8d4908e6bd2">
        <con:settings/>
        <con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST1" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="216f5411-fd16-459c-bccd-57985717b1e6">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert+1, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="678640fa-c9ac-41f2-ab2f-7a9b5ef92bdc">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	////assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="cc9a11e3-9e8a-48fc-b7d2-18d852b4d468">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="196f7a80-1f5e-4eb2-90c4-b3c71fb5f65a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>E2E_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_b492f300-6d96-4c55-ae72-2ade1ad21962</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword&amp;audience=urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenGet_User_20140325_125528</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/plain; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_b492f300-6d96-4c55-ae72-2ade1ad21962</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value>HTTP/1.1 201 Created
Date: Tue, 13 Aug 2013 13:12:47 GMT
Server: Apache
x-Transaction-Info: t=1376399567 UgowzwofmIgAAGVfJDwAAAAp urn:dece:org:org:dece:222259 10.31.153.241
Cache-Control: no-cache, no-store
Location: https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cc15420e-dbff-466f-9e67-6cfc22af731e
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/plain; charset=UTF-8

</con:value>
        </con:property>
      <con:property><con:name>expectErrTypeSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ebe0003c-0af5-41a7-a992-e4c7d32c9b43</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generic STS GET" searchProperties="true" id="bf76ee5d-2000-45b1-9b4c-aeff10fc7fd4">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="905220a9-77dc-4d67-9be7-17885b00d96c">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="9b1abc59-c07d-47e8-aa8a-d0e5eac096b1">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="f5e1dce8-f444-4636-9528-2335ce3d310d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="6f4ce4c6-546c-41c3-98fe-e2c801d49a3d">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" disabled="true" id="e89e9fd6-eadd-4b91-ba75-e393b4b58d52">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="fec89fd5-d0c4-48bc-8685-c0dd02965f4c">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="719d4a99-5914-4406-8468-832099504fa8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="fee1bc23-6139-4eb8-9208-3417d642c477">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="958a013b-ad08-46b2-91d7-e829bdfcc327">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="475ca2f6-136c-4ed1-af21-b08ddc28fd38">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="f632e7e5-7a29-4596-aa52-5a187a17b98e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1adG0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssYDeks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVPGOZ6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d8FmBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq5YQFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF6/VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgcRqcBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwrwuBpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8JdkndYuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM=</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_783dfa9e-2697-4dda-aa32-8ff10082363e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BAB7A2D469644410418DE3449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7BB77B2569644410418DE3449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_783dfa9e-2697-4dda-aa32-8ff10082363e</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3427</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>E2E_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:7BB77B2569644410418DE3449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_783dfa9e-2697-4dda-aa32-8ff10082363e" IssueInstant="2014-03-25T07:13:15.451Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_783dfa9e-2697-4dda-aa32-8ff10082363e">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>mkCb8WecCYtsy6wJKny8qbZp2H8=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
RoM3qkhNHRdyExVg7xd1imW1HAHa56ZBd/Y31KGKaguQ+UQz/6O9zF4zJEwrPjtP+LgtQm2SDZE+
FAxXivBaRAlCEzhEs0d1HR0JTm0OBfw6E4yreLdH9DFMPSKihHzAJkKFLahRw3TRjdv75PcNReTD
5dkPhiLxu0WCqhBoTwc=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:7BB77B2569644410418DE3449481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_55850F1DB0F2F0B56C3BDA0B6113FC06" NotOnOrAfter="2014-03-25T10:13:15.451Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET_CS_1"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-03-25T07:13:05.451Z" NotOnOrAfter="2014-03-25T13:13:15.451Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:ACCESCS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:ACCESS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_783dfa9e-2697-4dda-aa32-8ff10082363e</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-03-25T07:13:15.451Z" SessionIndex="_783dfa9e-2697-4dda-aa32-8ff10082363e"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_CS_1_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>6f4ce4c6-546c-41c3-98fe-e2c801d49a3d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API DHost" searchProperties="true" id="82074733-6eb8-4dc1-90e8-fd495e86f993">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="58208f8d-7bae-4e48-9cce-0aae9b642ef0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="66f74cfe-ae1a-4386-9a1b-e632598bf06e">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

testCase.setPropertyValue("audienceList",testProject.getPropertyValue('audienceList'));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="74e1f00b-bdf6-4df7-bf9d-831774144be8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="URL_Builder_with_AudienceList" id="a127f648-de14-4843-a1b4-8cf5addece08"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+(testCase.getPropertyValue("audienceList").replaceAll(":","%3A"));
//def urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");
else
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");

log.info "urlParam=="+urlParam;
testCase.setPropertyValue("tokentype",urlParam);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="d5c4c8bf-fb5d-4e12-a932-1ede3225de0f"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" id="cfaadafb-1927-4563-8394-72a5a1127f24" accept="" sslKeystore="DEV_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:restRequest></con:config></con:testStep>
      <con:testStep type="restrequest" name="STS - POST1" disabled="true" id="c3edac0c-1a00-4592-b605-be802f69bf67">
        <con:settings/>
        <con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST1" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="2807152e-8d37-481d-9427-668154f0dfd6">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert+1, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="65951277-4c62-42e7-8d88-11819841677e">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	////assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="68b318ea-f871-431a-ba2f-30bd9aa15712">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="e5e178be-aacd-4a4f-90ed-24d52a664032">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS_Creation_Device_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_440815b7-fa8e-4727-9656-84e875805094</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword&amp;audience=urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenGet_User_20131218_065712</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/plain; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_440815b7-fa8e-4727-9656-84e875805094</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value>HTTP/1.1 201 Created
Date: Tue, 13 Aug 2013 13:12:47 GMT
Server: Apache
x-Transaction-Info: t=1376399567 UgowzwofmIgAAGVfJDwAAAAp urn:dece:org:org:dece:222259 10.31.153.241
Cache-Control: no-cache, no-store
Location: https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cc15420e-dbff-466f-9e67-6cfc22af731e
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/plain; charset=UTF-8

</con:value>
        </con:property>
      <con:property><con:name>expectErrTypeSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DEV_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generic STS GET DHost" searchProperties="true" id="617e2e26-8f93-4cd5-95b7-e2140c6b93be">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="227d1fb7-45e5-4985-82c1-2874738a707c">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="68c3d9c6-831d-4653-b493-f2087a8835bd">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="47c7f8d9-5b1a-4fcd-90d9-fce85912fdaf">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" disabled="true" id="08fbea30-44d6-4861-9b89-f0cc1003576d">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="df190423-d030-4332-8df5-4c43ee5936fd">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="DEV_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="b75b4bd5-691b-4444-904f-0dc2b78b4474">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="cb054384-68cd-47b5-8a7d-72e19e8fd546">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="deecc09c-b6b7-4867-a368-bca2a9bc4d18">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="340707ca-32ef-451c-922d-e72d3a154d0d">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="67a769ef-b519-4f54-9b18-592f76a14076">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="233387ad-b929-4d32-8190-a39c25a4054f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVdbc6JKEH7fX0Gxj1s4gCCXilahkoSNuRwlJpuXrXEYdbIwKDMYk1+/AwaixuRkk6pUWdP05euenu4vRwwmse56jOGMk5RKQb8t/zYM1dbMiaVMoY0Vw9ItxWmZLcU2sG2ZtmqqjiFLAWM5DijjkPK2rKtaU9F0RbNDTXNNy9VbDVsz7mRpjDMmXAuVhipL6ySmzC3DtuU8o24KGWEuhQlmLkfuyDsfuELThRUmuXO0QVkGzDpzzhcuAKgRYYTjGDVQmoAjsKNzFDF3RGYU8jzDzzEj1pafbR8eHhoPzUaazYCuqipQHSB0IkZm3+XOt8oYRwGdpptzD9KUEgRj8gQLUOeYz9NI8uJZmhE+T95wrQFNLVwreI0UpBn0uwxeApToPuhpB2TGoMLmUKucDfEUZ5giLF0Pg7b8/WM3uLENM0jZNM0Stnf+N0iYrnCcLnCksCqzCt3HPR4oV+cIIzegKM4ZWeGLok0WEGEmXWV4StYDwkTzRUwqr19aM/FHqi7D6F+u5QhsYxXQwYHq9MkMM/6ZO9u+r42XMYxz3FmzpXnqX54Et6c/wHV83Vvd9pNwaF/5f9olhG3lDaj6up/P+81a99azUcLHA2b1Qt9E3egOJNHyNCPraZCEk5+388fwKVoP5+HsbOU8PHUH4B6sz3w0m153w0dttFjet1pk3nSWIThGq29nv+7vnv7TWHTzU4uG7OrkRk39LLxD4JQMby0E4I8/dnCPJr+yXnQZncQnwfIOTH7cnEPurdLmZJhdpInZPLm8pd/GNIVjeBZfxTcZuCPWqX3dfslpO4ddYTUSRvnkHiNeHYv2CPrSsbgvyN8fL4WERMq0VHUXxYxiHFMudwqrYrS4uRhAJHLFZW7Ofr/nW6Zm2E3D0bqG7quGqh2rnmo5jqk5/WoGbVDsQeyldEqKWMWU3fTP+wBR4jJMI5wpqzRHc8zkdzz2IYdSQIficaSU4TAVU9xy7G7L01u239Udw1RNR216hq/pTcPz+7YnSxcpv6SXmTflONud4MbOBB9iRBYEF2O+6HMmGp1xUZIlXOU81hor2KA4F4sgK2axqxu2CRhJFjEuAIMkjfIYNxbzRVkgwDa/ugIRK6V9f1y+vzfT2/9WVULoRKRQYEUuXSxuEx9YRVqVyNsJW9sJV+69PCLFMxNl5RlBGyS7n166pWiTulW8Xs8f9UYV7Fr7H6w/a9y7vPi85e/e6Lf2SfP+wBtdfcX2S8E/H/prgQdfyHrw1ayHfvilovnj15bgnd4H+8+uDhStyFbYiroJNiJ2VacaGkvYWDby1Sovx4RV7OFMuAdiHWtghFEululjmP7BFNQuwIe4TI16L3It38WX8zkdcchxIoaaVB4/QGRHmBVENhBDef1RlrwTUtSN4zU/JOvFgu8WiN+lxMhFhZ4QX4mfhzSLXq7rgK+tOCJPwV45obPiVLCWxzeaAqXCLRFrNs22nR9ycCj4rrAuco2Fi26a5By//UUq9mdbhgilOeVBXy4F2zu9xMkfF9h9UXrlpuQNz0Rwzd4kgrfng5HYrgmUa13y/8oKKdsFYbngmyWWtrwW/9eI4HS2xSGeAe7TCM9sdT27pXtOt1/TCFPQCMc5rgu4k0nnlfi1ZKum+++h8xc=</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_440815b7-fa8e-4727-9656-84e875805094</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EDCEA56BA862A9BDE0401F0A0599599F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EDCE751483491B42E0401F0A0799519D</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_440815b7-fa8e-4727-9656-84e875805094</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3601</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS_Creation_Device_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:EDCEA56BA862A9BDE0401F0A0599599F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:EDCE751483491B42E0401F0A0799519D</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_440815b7-fa8e-4727-9656-84e875805094" IssueInstant="2013-12-18T11:57:26.814Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_440815b7-fa8e-4727-9656-84e875805094">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>xsq5HEOGIXH+/UlUCvXDmTR8PEk=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
mtVLs7CTE5cBdZ/mdqHrixfImTbJXhyTzdxRhTgKv9wzBL/j/xKEcgfUBTy1Spqj66ih39qT/Fcv
KYjZzQ1sdWJ1dRsPGW0oErTZc/HiRX7c/a+k8IjcbYrCdOdGlGIqZ/b+WMatAvo3bRrNom53GOXn
VnoaVaKlPlWr/Zi7H8U=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EDCE751483491B42E0401F0A0799519D</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_798B6A268EB294505903A4E1234AED8A" NotOnOrAfter="2013-12-18T14:57:26.814Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/DEV"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-12-18T11:57:16.814Z" NotOnOrAfter="2013-12-18T17:57:26.814Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:ACCESCS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:ACCESS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:CON</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:CON_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DEV</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_440815b7-fa8e-4727-9656-84e875805094</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-12-18T11:57:26.814Z" SessionIndex="_440815b7-fa8e-4727-9656-84e875805094"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EDCEA56BA862A9BDE0401F0A0599599F</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DEV_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Copy of E2E_TestCases" disabled="true" id="621f3c0f-946e-4ad8-a6b3-863f234e967d"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_AccptTest_00001_AccountCreate_API_Invocation_from_Retailer" searchProperties="true" id="44e5a883-3556-460f-9454-b8bace2799ae"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="calltestcase" name="AccName" id="36cfadcc-c35e-4290-8d41-87605c29123b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>d31df2aa-2ee4-4299-a840-2fff111c9118</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="dd92344a-59e4-4c72-b803-c1fb80b9d5c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("nodeIdRET"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("Account_Create");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);



</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="c17fec40-6cb2-4704-b0ff-513a624e956c"><con:settings/><con:config service="Account_Create" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#SchemaNameSpace}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>${#TestSuite#country}</Country>
</Account>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create2" disabled="true" id="a08661d8-6ce9-4962-89c0-fb7f2f2caff0"><con:settings/><con:config service="Account_Create" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create2" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="222259_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#SchemaNameSpace}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="4f16c332-5095-4062-bc42-b4a3f65f2484"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="9f2cd37d-5894-4b8d-8642-b42b2fe7b44b"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def acct      = testCase.getPropertyValue("nodeaccountid");
//def urnnode   = testProject.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = testCase.getPropertyValue("streamhandleFULL");
//def nodeid        = testCase.getPropertyValue("nodeid");
//def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = testCase.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	log.info "urlStr=="+urlStr;
	
	def decodedAccountID = URLDecoder.decode(urlStr,"UTF-8");
	log.info "decodedAccountID=="+decodedAccountID;

	//assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	assert decodedAccountID.matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	/*int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);*/

	int lastColon = decodedAccountID.lastIndexOf(':');
	int lastSlash = decodedAccountID.lastIndexOf('/');
	accountid     = decodedAccountID.substring(lastColon + 1);
	
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	testProject.setPropertyValue("NODEACCID",accountid);
		def encodedNodeAccID = "urn:dece:accountid:org:dece:"+accountid;
		log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
		if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
			testProject.setPropertyValue("encodedNodeAccID",URLEncoder.encode(encodedNodeAccID,"UTF-8"));
		else
			testProject.setPropertyValue("encodedNodeAccID",encodedNodeAccID);
						
	//testCase.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:7853F6A1C08F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3f3e8c09-0ec0-4582-9364-7ee82f493271</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_AccptTest_00002_FirstUserCreate_API_Invocation_from_Retailer" searchProperties="true" id="88204e60-a7ec-45a1-8ad3-21de4a1af008"><con:settings/><con:testStep type="calltestcase" name="Get_UserName" id="9e2b080a-239c-40c1-810d-78610b9ccf5c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>76793cd9-f7ed-4b35-af3a-53802a9afb90</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="62b7e1b5-7638-4c99-b1dd-3f91778e7ada"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("nodeIdRET"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);



</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="8a9177e0-d133-4f23-91a6-186f96df2331"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Gupta</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>testing@uvvutesting.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>test_+777@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
     <!-- <DateOfBirth MeetsAgeOfMajority="true">1988-02-25</DateOfBirth>-->
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#encodedNodeAccID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="User_Create1" disabled="true" id="b5458823-16af-445b-b1b3-e80180fd6bcf"><con:settings/><con:config service="UserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create1" mediaType="application/xml" postQueryString="false" id="44df2979-a9a7-4c26-962f-b889885a458f" sslKeystore="222259_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Gupta</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>testing@uvvutesting.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>test_+777@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
     <!-- <DateOfBirth MeetsAgeOfMajority="true">1988-02-25</DateOfBirth>-->
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="fc8067aa-f8ff-40c3-936e-6518ab8af4ec"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="f6ecf682-90ba-41e1-96a3-5d3e478e3456"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def acct      = testCase.getPropertyValue("nodeaccountid");
//def urnnode   = testProject.getPropertyValue("urnNode");

//def sh            = testCase.getPropertyValue("streamhandleFULL");
//def nodeid        = testCase.getPropertyValue("nodeid");
//def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = testCase.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	log.info "urlStr=="+urlStr;
	
	def decodedUserID = URLDecoder.decode(urlStr,"UTF-8");
	log.info "decodedUserID=="+decodedUserID;	

	//assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	assert decodedUserID.matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	/*int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);*/

	int lastColon = decodedUserID.lastIndexOf(':');
	int lastSlash = decodedUserID.lastIndexOf('/');
	userid     = decodedUserID.substring(lastColon + 1);

//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	testProject.setPropertyValue("NODEUSERID",userid);
	//testCase.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:7853F6A1C08F44109CF54F449481F9A8/User/urn:dece:userid:org:dece:99534674C08F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000 - STS" searchProperties="true" id="bf7e59c8-87fd-4939-a077-5b39b47e5f77"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="79af5ca1-05d7-4a4e-9589-be702119363f"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def userName = context.expand( '${#Project#UserName}' );
def node_OID = context.expand( '${#Project#nodeIdRET:CS}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username","policies_account_3_full_user_1_20140218_030054");

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);

testProject.setPropertyValue("thirdPartyAudienceList","urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdRTLCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdAccportalCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdAccportal")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDLASPCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDSP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDSPCS")+";")
testProject.setPropertyValue("audienceList",testProject.getPropertyValue("thirdPartyAudienceList"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" disabled="true" id="4279a178-2a8f-4ab8-939c-2b6daa3fdd4f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Core Identity Information Extraction")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST" id="430d513b-d6f4-4ea8-9c52-78dd644b8dd7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="b3541bdd-3150-4bf1-94f2-0caccc2d98ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountestCaseonsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS1" disabled="true" id="47be40f4-c90e-4554-932a-4f4a9f143f6c"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS1" mediaType="application/xml" postQueryString="false" id="2d23fd7d-42c2-4066-a537-e17979f93163" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500501;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" disabled="true" id="31a3890a-8c41-4b3e-ab5d-168f35407848"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="222233_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500500;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body" disabled="true" id="16e9532c-1ffa-4249-accf-7a576f19f473"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

//testProject.setPropertyValue("SAML",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="895cc0ae-0bc8-43d0-b198-27fc511bf43c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId"))
rightsLockerID = myAccount.accountGetRightsLockerId(accountID).toString();
log.info "accountID==="+accountID;
log.info "rightsLockerID==="+rightsLockerID;

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId"))
log.info "userID==="+userID;

testProject.setPropertyValue("accountOID",accountID);
testProject.setPropertyValue("rightsLockerID",rightsLockerID);
testProject.setPropertyValue("userOID",userID);
</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties" id="285a7b1b-beb1-416d-ab5b-351fc6e4535c"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));
else	
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",encodedAssertionAccountIdFULL);

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));
else
	testProject.setPropertyValue("encodedAssertionUserIdFULL",encodedAssertionUserIdFULL);


def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
else
	testProject.setPropertyValue("encodedTermsofUse",encodedTermsofUse);
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
else
	testProject.setPropertyValue("encodedULC",encodedULC);
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMUC",encodedMUC);
	
def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMAC",encodedMAC);
	
def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedUDUC",encodedUDUC);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" disabled="true" id="9973caf8-11a2-413d-92ca-87ffa294baa2"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Version" id="9822469b-7c5d-4b36-a731-158ba945e3d2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def tOUUrl;
def dBHost = context.expand( '${#Project#targetDECEDB}' )
def targetPort = context.expand( '${#Project#AppPort}' )
def versionMinor = context.expand( '${#Project#versionMinor}' )

String country = context.expand( '${#TestSuite#country}' );

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from CONSENT
              where
              consent_urn = 'urn:dece:type:policy:TermsOfUse'
              and
              COUNTRY = '$country'""";

log.info sql;

results = a.SelectFromDB(sql,dBHost);

assert results.length() > 0;
log.info "results" + results;

def myXML = new XmlSlurper().parseText(results);   

log.info "consent_Version==="+myXML.ResultSet.Row.CONSENT_VERSION.text();
                
def consent_Version = myXML.ResultSet.Row.CONSENT_VERSION.text();

if (versionMinor == "06") 
	tOUUrl = context.expand( '${#Project#TOUUrl_06}')
else
	tOUUrl = context.expand( '${#Project#TOUUrl_07}')	

testProject.setPropertyValue("TOUVersion",'https://'+ tOUUrl + ':' + targetPort + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');
log.info "TOU_Resource==="+testProject.getPropertyValue("TOUVersion");</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="3ab6464c-5d04-40b4-9dad-8825f8c74171"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#TOUVersion}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="eed9d0c3-4d79-4eea-a427-7a5c0315433e"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="96e8bbe1-5e7f-4993-a00a-881f605a7d98"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="222259_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="5f794b93-cfcd-4eae-92d7-3b207e60e7f8"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true" id="f2f26333-d9dc-4ea3-8ae5-2103c5e36001"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" disabled="true" id="92ce539c-9f4e-4a14-94ef-c38751fbde31"><con:settings/><con:config><script/></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVdbb+I6EH7fXxFlH1chV25RQcoFDrS0ZQl768vKtQ3xNnFo7HDprz92aChQ2u22EhLyMJ75ZubzzHDGQJpYrscYzjnJqDIMO+rvZstGM9DGmtVoNzUHIaABYFtaazYzDaNl2Q0bq8qQsQIPKeOA8o5qGaajGbZm1adG0zVt16zXnLp5oyrfcc6EaaFSM1RlnSaUuaXbjlrk1M0AI8ylIMXM5dCNvMuRKzRdUGFSu2dblKXDvBtzvnB1HdYQhjhJYA1mqX6mH+icIeZGZE4BL3L86BOxjvp4d7Va1VZ2LcvnumUYhm60daGDGJl/VrufqssYDeks254DQDNKIEjIA5CgLjGPM6R4yTzLCY/TF0ybumlI0xpeQw2aDv2s6k8OSnRvtHQAMmdAYzEwK2MTPMM5phAr3ybDjvr5bRXc3p3mgLJZlqfs6PxvkDBd4iRbYKSxKrIK3dstnkhX9wxDd0hhUjCyxFeSJgsAMVPGOZ6R9YgwQT7ElLL8ypqJD6lYhuG/lOVM38cqoOsnshOSOWb8PTXbr9fWyneQFLib3gW3rR8YBr842zRW5xd007q/vVlYg1anhLCvvAW1K/fj+ZisO249Xppkl/b9XXw1mKBNb/193lwjk6Q/zIE3APXGjY/0X7Z58d8FmBdfv3z7+qA3rtsPfefhvLfKx3/4+Mtozr+mVhTe9L586nvrn2Tpg4mXBL2HuMcMZA4mxvk0Na792arRczY5HqFBO+xfjqMLEg8evPO7i/4IxJOVPZ38QctmfQyvJngafqqju3FMRuvC+BHcx342XcHOU0z7MRwKq5YQFbd/MOTVUdJjGCp9US/AX28vUkKQNitV3YXsUYxjytWuvCVbi1uIBkSQK4q5PTd9v9n0rXqj3XAcxzQcsxX2bMdpOy2z3/ZaVQ/aojiCGGR0RqQv2WW3/HkdIExdhinCubbMChhjpr5iMQQcKEM6EY8jowxPM9HF6/VW3eiboW/0rb7h1xuB7Yee4TdM0+4HRkNVrjJ+Ta9zb8ZxftDBTeOgg08wJAuCZZuXPGeC6IyLlNyDZcETs7YENYoLMQhy2Ytdy2nVdUbSRYIlYD3NUJHg2iJelAnS2fbb0gBkpXTSm/4Oot9m+QhfjPH4tyodQgcRqcBkQD4WJcUn5pFRRfNy1PZ+1JV5r0BEvjWRW54TuEVy+NMTZSRXdnzxgqAXBVEFe6f9D7ffezkcedH4I3fLerzXwPtdf8zx6ANRjz4adUXi59f1V4ikH3N45w0tyZ7vahkS8110/271DO9B7b5WLJdF+fCacrLlwrwuBpypRxgWYjxtptkdpvrOhP6m7WCH+sjzTn6Ir+AxjTjgOBVtQimPb1gNI8zkajgUbW791r3zwKXIG8drfkoWJGKDlIhfXTKhC6WeEI/F1yrL0VO5Ttja8yPiFPsgJ3QuT3IP2LzADJgJs0QMrizfN37KwCnnh8JdkndYuGDTbcHxy78ociJ1VABhVlA+DNVSsD8lS5x8s8Duk9IzM+Ukflyt1uzF1ern5SgS8yoF6k6X/F1ZIyVdoPhjIfRLLB11Lf4pCOd0vjeVHwHuD2bf85ueFTp/G8yHkXSfiZ9L9nJ6/B66/wM=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_783dfa9e-2697-4dda-aa32-8ff10082363e</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>BAB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:BAB7A2D469644410418DE3449481F9A8</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>7BB77B2569644410418DE3449481F9A8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:7BB77B2569644410418DE3449481F9A8</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_783dfa9e-2697-4dda-aa32-8ff10082363e</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>policies_account_3_full_user_1_20140218_030054</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5659840c-9039-4018-9f10-930d7569ed20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10020_RightsTokenGet_RTL_FUNC_DiscreteMediaRightCreate_PERM_Access_Control_Rights_Positive</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R1_RightsTokenGet_ByRightsTokenID_RTL_TestCases</con:value></con:property><con:property><con:name>country</con:name><con:value>US</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="E2E_TestCases" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_AccptTest_00001_AccountCreate_API_Invocation_from_Retailer" searchProperties="true"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="AccountNameAndUserNameGeneration"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def today= new Date().format( 'yyyyMMdd_hhmms' );

testProject.setPropertyValue("AccountDisplayName","accname_"+today);


def uname= "RLDGbyList_firstuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

testProject.setPropertyValue("UserName",uname);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("nodeIdRTL"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("Account_Create");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);



</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create"><con:settings/><con:config service="Account_Create" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
                <DisplayName>${#Project#AccountDisplayName}</DisplayName>
                <Country>${#TestSuite#country}</Country>
                <UserList>
                                <User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
                                                <Name>
                                                                <GivenName>${#Project#UserName}</GivenName>
                                                                <SurName>surname</SurName>
                                                </Name>            
                                                <ContactInfo>
                                                                <PrimaryEmail>                                
                                                                                <Value>${#Project#PrimaryEmail}</Value>
                                                                                <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
                                                                </PrimaryEmail>
                                                </ContactInfo>
                                                <Credentials> 
                                                                <Username>${#Project#UserName}</Username>     
                                                                <Password>Password1</Password>
                                                </Credentials>
                                </User>
                </UserList>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def acct      = testCase.getPropertyValue("nodeaccountid");
//def urnnode   = testProject.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = testCase.getPropertyValue("streamhandleFULL");
//def nodeid        = testCase.getPropertyValue("nodeid");
//def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = testCase.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	log.info "urlStr=="+urlStr;
	
	def decodedAccountID = URLDecoder.decode(urlStr,"UTF-8");
	log.info "decodedAccountID=="+decodedAccountID;

//Changes made for Account User Policy API
//	//assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
//	assert decodedAccountID.matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
//	
//	/*int lastColon = urlStr.lastIndexOf(':');
//	int lastSlash = urlStr.lastIndexOf('/');
//	accountid     = urlStr.substring(lastColon + 1);*/
//
//	int lastColon = decodedAccountID.lastIndexOf(':');
//	int lastSlash = decodedAccountID.lastIndexOf('/');
//	accountid     = decodedAccountID.substring(lastColon + 1);
//	
//	//streamidFULL = urlStr.substring(lastSlash + 1);
//
//	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";
//
//	testProject.setPropertyValue("NODEACCID",accountid);
//		def encodedNodeAccID = "urn:dece:accountid:org:dece:"+accountid;
//		log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
//		if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
//			testProject.setPropertyValue("encodedNodeAccID",URLEncoder.encode(encodedNodeAccID,"UTF-8"));
//		else
//			testProject.setPropertyValue("encodedNodeAccID",encodedNodeAccID);
//						
//	//testCase.setPropertyValue("streamhandleFULL",streamidFULL);
//} else {
//	assert context.expand( '${#TestCase#httpLocation}') == "";
//}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;


def urlStr1 = b.getPath();

                if (testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
                {                              
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");                             
                } else {
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
                }

                urlStr1 = URLDecoder.decode(urlStr1);
                def arrayString = urlStr.split("Account/");
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]

       int lastColon = arrayString[1].lastIndexOf(':');
       accountid     = arrayString[0].substring(lastColon+4);
       userid     = arrayString[1].substring(lastColon +1);
       def useridfull = arrayString[1];    
       def accountidfull = arrayString[0];       
                                         
                                testCase.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                                testCase.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);

                                testCase.setPropertyValue("NODE_USER_ID",userid);
                                testCase.setPropertyValue("NODE_USER_ID_FULL",useridfull);

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

}</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:17B1224324774230E05305991F0A8728/User/urn:dece:userid:org:dece:17B1224324784230E05305991F0A8728</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\UltraVioletGit\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>AccountName</con:name><con:value>accname_20150101_033336</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17B1224324774230E05305991F0A8728</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17B1224324774230E05305991F0A8728</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>17B1224324784230E05305991F0A8728</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:17B1224324784230E05305991F0A8728</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3f3e8c09-0ec0-4582-9364-7ee82f493271</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f5bc192-1dae-4de1-bd17-61f54f69165d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_AccptTest_00002_FirstUserCreate_API_Invocation_from_Retailer" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="UserNameGeneration"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def uname= "RLDGbyList_firstuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

testProject.setPropertyValue("UserName",uname);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("nodeIdRTL"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def acct      = testCase.getPropertyValue("nodeaccountid");
//def urnnode   = testProject.getPropertyValue("urnNode");

//def sh            = testCase.getPropertyValue("streamhandleFULL");
//def nodeid        = testCase.getPropertyValue("nodeid");
//def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = testCase.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	log.info "urlStr=="+urlStr;
	
	def decodedUserID = URLDecoder.decode(urlStr,"UTF-8");
	log.info "decodedUserID=="+decodedUserID;	

	//assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	assert decodedUserID.matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	/*int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);*/

	int lastColon = decodedUserID.lastIndexOf(':');
	int lastSlash = decodedUserID.lastIndexOf('/');
	userid     = decodedUserID.substring(lastColon + 1);

//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	testProject.setPropertyValue("NODEUSERID",userid);
	//testCase.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:16E5FF98294828B5E05305991F0A947D/User/urn:dece:userid:org:dece:16E5FF98295428B5E05305991F0A947D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Code_Repo\API\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9339b89b-edaa-4754-993d-48c0b757afdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000 - STS" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = context.expand( '${#Project#UserName}' );
def node_OID = context.expand( '${#Project#nodeIdRTL}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username",userName);

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);

testProject.setPropertyValue("thirdPartyAudienceList","urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdRTLCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdAccportalCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdAccportal")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDLASPCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDSP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDSPCS")+";")
testProject.setPropertyValue("audienceList",testProject.getPropertyValue("thirdPartyAudienceList"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountestCaseonsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId"))
rightsLockerID = myAccount.accountGetRightsLockerId(accountID).toString();
log.info "accountID==="+accountID;
log.info "rightsLockerID==="+rightsLockerID;

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId"))
log.info "userID==="+userID;

testProject.setPropertyValue("accountOID",accountID);
testProject.setPropertyValue("rightsLockerID",rightsLockerID);
testProject.setPropertyValue("userOID",userID);
</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));
else	
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",encodedAssertionAccountIdFULL);

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));
else
	testProject.setPropertyValue("encodedAssertionUserIdFULL",encodedAssertionUserIdFULL);


def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
else
	testProject.setPropertyValue("encodedTermsofUse",encodedTermsofUse);
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
else
	testProject.setPropertyValue("encodedULC",encodedULC);
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMUC",encodedMUC);
	
def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMAC",encodedMAC);
	
def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedUDUC",encodedUDUC);</script></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Version"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def tOUUrl;
def dBHost = context.expand( '${#Project#targetSystem}' )
def targetPort = context.expand( '${#Project#targetPort}' )
def versionMinor = context.expand( '${#Project#versionMinor}' )

String country = context.expand( '${#TestSuite#country}' );

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
             consent_version            
             from
             CONSENT
             where
             CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
             and
             COUNTRY = '""" + country + """'
             order by
             consent_version desc)
             where rownum &lt; 2""";

log.info sql;

results = a.SelectFromDB(sql,dBHost);

assert results.length() > 0;
log.info "results" + results;

def myXML = new XmlSlurper().parseText(results);   

log.info "consent_Version==="+myXML.ResultSet.Row.CONSENT_VERSION.text();
                
def consent_Version = myXML.ResultSet.Row.CONSENT_VERSION.text();

if (versionMinor == "06") 
	tOUUrl = context.expand( '${#Project#TOUUrl}')
else
	tOUUrl = context.expand( '${#Project#TOUUrl}')	

testProject.setPropertyValue("TOUVersion",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');
log.info "TOU_Resource==="+testProject.getPropertyValue("TOUVersion");</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#TOUVersion}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="222259_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_719b7a62-ceaf-4fdf-b465-24e497da9183</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>17B1224324774230E05305991F0A8728</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:17B1224324774230E05305991F0A8728</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>17B1224324784230E05305991F0A8728</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:17B1224324784230E05305991F0A8728</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_719b7a62-ceaf-4fdf-b465-24e497da9183</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150604_1433421966819</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\UltraVioletGit\uv-coordinator-api-regression\Certs\QALP1PC/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10001_RightsLockerDataGet_RTL_FUNC_byDownloadQuery_with_ValidData</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R1_RightsLockerDataGet_byDownLoad_Query_RTL_TestCases</con:value></con:property><con:property><con:name>country</con:name><con:value>US</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>