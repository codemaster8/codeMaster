<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="MetadataCreation" resourceRoot="" soapui-version="4.5.2" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config">
  <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="RightsLockerDataGet_byDownLoad_Query_Retailer_TestCases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Rights_API\Execution_Reports\R3_Reports\Build_1_0_6_1_Patch2\P0_P1\RightsLockerGet_Download"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="D:\Execution_Report_R3_Builds\Build_R3_2\RightsLockerDateGet_Download"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsLockerDataGet_DownLoad_Query" type="rest" id="5b9982be-665c-476f-990a-d834ec144edc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint></con:endpoints>
    <con:resource name="RightsLockerDataGet_byDWQ" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=download" id="efc8d87b-0c8f-4b9f-9421-59f294f949a7">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>AccountID</con:name>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="RightsLockerDataGet_DWQ" method="GET" id="b5fb5da5-1a34-4c93-940f-9e700d32850b">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:sch="http://www.decellc.org/schema">sch:RightsTokenList</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>403 401 400 404</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="RightsLockerDataGet_DWQ" mediaType="application/xml" sslKeystore="222259_concat.pem" id="a0a6c4fd-6540-4848-a07c-25de7af7e6bb">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint xsi:nil="true"/>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="AccountID" value="urn:dece:accountid:org:dece:107006" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
        </con:request>
      </con:method>
    <con:method name="PostMethod" method="POST" id="4da0ad56-a471-4d1f-a81b-e5c1569e76c1"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="e356a091-d233-4298-930b-f6a94a54a0ae"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT" id="0104ac5b-0745-4fee-8373-1756c34e10cf"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="73043490-2a94-4162-b75f-8afb1717cf4f"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DeleteMethod" method="DELETE" id="9549dd16-8935-427f-867c-e873ba4d9a23"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="5a502942-e189-4987-84aa-991d8cea28f5"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD" id="b3fb7494-e487-4e89-8f04-f086e088b011"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="e4c24b52-8b8d-4988-87fb-b0a6c37fb61b"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource>
  <con:resource name="RightsLockerDataGet_byResponse" path="${#TestCase#urlPath}" id="efc8d87b-0c8f-4b9f-9421-59f294f949a7">
      <con:settings/>
      <con:parameters>
        
      </con:parameters>
      <con:method name="RightsLockerDataGet_DWQ" method="GET" id="b5fb5da5-1a34-4c93-940f-9e700d32850b">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:sch="http://www.decellc.org/schema">sch:RightsTokenList</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>403 401 400 404</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="RightsLockerDataGet_DWQ" mediaType="application/xml" sslKeystore="222259_concat.pem" id="a0a6c4fd-6540-4848-a07c-25de7af7e6bb">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint xsi:nil="true"/>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    <con:method name="PostMethod" method="POST" id="4da0ad56-a471-4d1f-a81b-e5c1569e76c1"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="e356a091-d233-4298-930b-f6a94a54a0ae"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT" id="0104ac5b-0745-4fee-8373-1756c34e10cf"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="73043490-2a94-4162-b75f-8afb1717cf4f"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DeleteMethod" method="DELETE" id="9549dd16-8935-427f-867c-e873ba4d9a23"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="5a502942-e189-4987-84aa-991d8cea28f5"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD" id="b3fb7494-e487-4e89-8f04-f086e088b011"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="e4c24b52-8b8d-4988-87fb-b0a6c37fb61b"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" basePath="" definitionUrl="C:\Documents and Settings\schinna\Desktop\Rights_8.0\STS wadl\STS_1.wadl" id="66e33ab1-8c05-4d76-b2be-3ce2d2887221" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints/>
    <con:resource name="STS" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" id="2fb40d3d-b448-4caf-8b02-4202637a5f46">
      <con:settings/>
      <con:parameters>
        
      </con:parameters>
      <con:method name="STS - POST" method="POST" id="fdd5ee6b-4dee-4b71-8e29-9cb3e573209d">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" id="b3ebf517-f96a-483d-b055-91f78aa3c53e">
          <con:settings/>
          <con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="STS Get" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" id="702ab808-f6be-4c21-a329-edc6f37699a4">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>ASSERTION</con:name>
          <con:value>${#TestCase#assertionUUID}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUUID}</con:default>
        </con:parameter>
      </con:parameters>
      <con:method name="STS - GET" method="GET" id="6de1bd98-65f4-4d49-bdfc-eb5cdeb9aba7">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" id="70796141-01cd-4b94-9619-3cf295885721">
          <con:settings/>
          <con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DEC Policy PolicyGet API" type="rest" basePath="" definitionUrl="C:\Documents and Settings\jbaisakh\Desktop\DEC%20Policy%20PolicyGet%20API_1_1.wadl" id="61aa1f79-6072-476a-9684-251723fbd1e0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="df01ec29-7afb-47aa-86f5-652bb94fcc1b">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="GET" method="GET" id="82bc2592-7f70-4eea-96ed-0c62b7df8e7f">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyGet I" mediaType="application/xml" id="423d7cf9-4e92-4f50-842d-14c42925635e">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyGet for Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="b3344cb6-2eb5-46a8-af13-142d3d1ed3b3">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="GET" method="GET" id="36821a5c-f0bd-41bb-b8a2-7f8bb4c679b8">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyGet for Account" mediaType="application/xml" id="f3dbd5ee-92b3-49c1-ae6e-cf8d467c8854">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE Policy PolicyCreate" type="rest" basePath="" definitionUrl="C:\Documents and Settings\jbaisakh\Desktop\DECE%20Policy%20PolicyCreate_1_1.wadl" id="2e261aa0-ff43-4eb8-bbd3-b8d76f6b6928" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="873ee9c4-1300-432c-b18e-b16fa0501539">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>MAJOR</con:name>
          <con:value>${#Project#versionMajor}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#versionMajor}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>MINOR</con:name>
          <con:value>${#Project#versionMinor}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#versionMinor}</con:default>
        </con:parameter>
      </con:parameters>
      <con:method name="POST" method="POST" id="00dbac7d-0247-4fb4-a45f-4a4900479e60">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 403</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0 201</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyCreate I" mediaType="application/xml" postQueryString="false" id="9bb6ecc5-eae6-4240-a50a-a50259681021">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyCreate Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="c7bf0cce-e5f0-425a-ab2a-17791030f64e">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="POST" method="POST" id="8dab5b30-9c7a-4982-8509-78d112b12432">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 403</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0 201</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyCreate for Account" mediaType="application/xml" postQueryString="false" id="b552df30-6115-4d25-b282-4480eb50a0a0">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE Policy PolicyDelete" type="rest" basePath="" definitionUrl="C:\Documents and Settings\jbaisakh\Desktop\DECE%20Policy%20PolicyDelete_1_1.wadl" id="be3a41ca-7002-4407-a2f3-e2cf605785b7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="496f27f9-7a29-48a5-a159-d6d4c0918efd">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="DELETE" method="DELETE" id="2ff89a50-6385-4e6f-aa67-44d7c4198e49">
        <con:settings/>
        <con:parameters/>
        <con:request name="PolicyDelete I" mediaType="application/xml" id="089ffb03-6593-4cd7-96c8-711385ccdcee">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyDelete Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="fd482501-6b27-4cba-b5af-512ef7c6255c">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter>
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="DELETE" method="DELETE" id="4c159357-70c4-4679-b338-7990c5240c1a">
        <con:settings/>
        <con:parameters/>
        <con:request name="PolicyDelete Account" mediaType="application/xml" id="1c2f2a66-23f0-4f04-8126-e1c0170580ca">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account_Create" type="rest" basePath="" id="a4b58f37-610f-423f-b2e8-504d7c930541" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="ad2453f1-8472-4f08-bdaa-293709bf4399"><con:settings/><con:parameters/><con:method name="Method 1" method="POST" id="67e909e1-688d-4325-8239-c0edbacfcdbb"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="a6adf6cf-fe25-4b93-9ae1-e0402c2ea718"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" basePath="" id="85200c0e-ea6d-4f96-b07e-99a46399337b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="FirstUser" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="71fb9b4b-0771-4fdf-97c7-832eb1658505"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="805c7486-430e-4705-b3ae-b20349892e9b"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:User</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="017c510b-839a-4e76-a262-cba73ad81898"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserCreate" type="rest" basePath="" id="f5051f17-7071-4d11-8f72-fd5ca65c705d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="0b1d6800-2aef-4e8f-9855-3170a3fe4c97"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="ff4e9126-ba85-4af8-b752-98f63cc95c05"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="ce843f36-7395-4c33-87b8-323f11526273"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenCreate" type="rest" basePath="" id="8c425d07-af41-42bb-aab0-e9d1df2aa6e8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="RightsTokenCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" id="f9afadce-2030-46e6-8ec2-db13fa102f12"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="d81d9047-2608-428c-aab0-0efd67bdd0c7"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:RightsTokenData</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="5cdcf82b-cf39-45e7-83d4-1ae2c3e641dc"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserStatusUpdate" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="C:\Users\aravind.racharla\Desktop\Services\UserStatusUpdate_1.wadl" id="16d8929e-8282-4f54-beb5-1a78f7315b6c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/aravind.racharla/Desktop/Services/UserStatusUpdate_1.wadl"><con:part><con:url>file:/C:/Users/aravind.racharla/Desktop/Services/UserStatusUpdate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="UserStatusUpdate"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#V1}/${#Project#V2}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="UserStatusUpdate">
      <doc xml:lang="en" title="UserStatusUpdate"/>
      <param name="AccountID" default="AccountID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="UserID" default="UserID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="UserStatusUpdate">
        <doc xml:lang="en" title="UserStatusUpdate"/>
        <request>
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 401 403 404">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 404 500">
          <representation mediaType="text/xml"/>
        </response>
        <response status="303">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="403">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
      </method>
      <method name="GET" id="UserStatusUpdate - GET">
        <doc xml:lang="en" title="UserStatusUpdate - GET"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
          <representation mediaType="text/plain;charset=UTF-8"/>
        </response>
        <response status="403">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="${#Project#SchemaNameSpace}"/>
        </response>
      </method>
      <method name="POST" id="UserStatusUpdate - POST">
        <doc xml:lang="en" title="UserStatusUpdate - POST"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="${#Project#SchemaNameSpace}"/>
        </response>
      </method>
      <method name="DELETE" id="UserStatusUpdate - DELETE">
        <doc xml:lang="en" title="UserStatusUpdate - DELETE"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="${#Project#SchemaNameSpace}"/>
        </response>
      </method>
      <method name="HEAD" id="UserStatusUpdate - HEAD">
        <doc xml:lang="en" title="UserStatusUpdate - HEAD"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType=""/>
        </response>
        <response status="403">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="OPTIONS" id="UserStatusUpdate - OPTIONS">
        <doc xml:lang="en" title="UserStatusUpdate - OPTIONS"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="UserStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="3b23d2f5-5928-4f27-81c5-1a371a2dfce8"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default></con:parameter></con:parameters><con:method name="UserStatusUpdate" method="PUT" id="18dc0c47-927f-42ce-853c-f2c93b1772cc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="17d4f6bf-2a7d-46c4-b60c-53c76ddc145a"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - GET" method="GET" id="4b87fb25-5e7e-4265-96d7-317bb82799b7"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="db3fb819-7a66-4738-a28e-253aa4a938fa"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - POST" method="POST" id="fdda3f24-393e-495d-b375-5bdeafa64c89"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="23c121e0-53d7-4dfb-b21c-bb49837d4d52"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - DELETE" method="DELETE" id="f9ebb33d-17c5-476a-851e-75c4dd3a8e34"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e72435d0-dff0-4d74-b581-c6ab6e2ea4d3"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - HEAD" method="HEAD" id="2e054afe-f3d0-430a-9bc0-7fc68d395fd1"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ee19c78d-2234-4b14-b151-ec823259f9cb"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserStatusUpdate - OPTIONS" method="OPTIONS" id="f4b2865f-c1e1-4852-84c5-0d83c6a81c3e"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="c59ae01d-5691-4640-a1de-594fdd273e0f"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ViewByFiler" type="rest" id="35f15d57-6a34-405a-831a-9c32a8944f96" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="ViewByFilterOptions_OnlyFilterEntryPoint" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=${#TestCase#QueryParam}" id="0d0273e7-7806-4c76-bb3c-1b3c10541589"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="ViewByFilter_withOnly_FilterEntryPoint" method="GET" id="7b36c591-93c1-4201-97d0-03feeb9eaf8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="be379300-27ac-411e-976d-bda889a8846f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:CC0444336137E599E0401F0A05997DAA" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="ViewByFilterOptions_OnlyFilterOffSet" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" id="0d0273e7-7806-4c76-bb3c-1b3c10541589"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>response</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterClass</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterOffset</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="ViewByFilter_withOnly_FilterOffset" method="GET" id="7b36c591-93c1-4201-97d0-03feeb9eaf8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="be379300-27ac-411e-976d-bda889a8846f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="response" value="download"/>
  <con:entry key="FilterClass" value="urn:dece:type:viewfilter:userbuyer"/>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:CC0444336137E599E0401F0A05997DAA"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="ViewByFilterOptions_OnlyFilterCount" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" id="0d0273e7-7806-4c76-bb3c-1b3c10541589"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>response</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterClass</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterCount</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="ViewByFilter_withOnly_FilterCount" method="GET" id="7b36c591-93c1-4201-97d0-03feeb9eaf8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="be379300-27ac-411e-976d-bda889a8846f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="response" value="download"/>
  <con:entry key="FilterClass" value="urn:dece:type:viewfilter:userbuyer"/>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:CC0444336137E599E0401F0A05997DAA"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="ViewByFilterOptions_FilterCount_and_FilterOffSet" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" id="0d0273e7-7806-4c76-bb3c-1b3c10541589"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>response</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterClass</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterCount</con:name><con:value/><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>FilterOffset</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="ViewByFilter_FilterCount_And_FilterOffset" method="GET" id="7b36c591-93c1-4201-97d0-03feeb9eaf8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="be379300-27ac-411e-976d-bda889a8846f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="response" value="download"/>
  <con:entry key="FilterClass" value="urn:dece:type:viewfilter:userbuyer"/>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:CC0444336137E599E0401F0A05997DAA"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="ViewByFilterOptions_FilterCount_and_FilterEntryPoint" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" id="0d0273e7-7806-4c76-bb3c-1b3c10541589"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>response</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterClass</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterCount</con:name><con:value/><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>FilterEntryPoint</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="ViewByFilter_FilterCount_And_FilterEntryPoint" method="GET" id="7b36c591-93c1-4201-97d0-03feeb9eaf8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="be379300-27ac-411e-976d-bda889a8846f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="response" value="download"/>
  <con:entry key="FilterClass" value="urn:dece:type:viewfilter:userbuyer"/>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:CC0444336137E599E0401F0A05997DAA"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="ViewByFilterOptions_FilterOffSet_and_FilterEntryPoint" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" id="0d0273e7-7806-4c76-bb3c-1b3c10541589"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>response</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterClass</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterOffset</con:name><con:value/><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>FilterEntryPoint</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="ViewByFilter_FilterOffset_And_FilterEntryPoint" method="GET" id="7b36c591-93c1-4201-97d0-03feeb9eaf8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="be379300-27ac-411e-976d-bda889a8846f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="response" value="download"/>
  <con:entry key="FilterClass" value="urn:dece:type:viewfilter:userbuyer"/>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:CC0444336137E599E0401F0A05997DAA"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="ViewByFilterOptions_All_3_FilterTypes" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" id="0d0273e7-7806-4c76-bb3c-1b3c10541589"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>response</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterClass</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>FilterCount</con:name><con:value/><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>FilterEntryPoint</con:name><con:value/><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>FilterOffset</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="ViewByFilter_All_3_FilterTypes" method="GET" id="7b36c591-93c1-4201-97d0-03feeb9eaf8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="be379300-27ac-411e-976d-bda889a8846f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="response" value="download"/>
  <con:entry key="FilterClass" value="urn:dece:type:viewfilter:userbuyer"/>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:CC0444336137E599E0401F0A05997DAA"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="ViewByFilterOptions_Invalid_Parameter_In_the_URL" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=${#TestCase#QueryParam}" id="0d0273e7-7806-4c76-bb3c-1b3c10541589"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="ViewByFilter_with_Invalid_Paramater" method="GET" id="7b36c591-93c1-4201-97d0-03feeb9eaf8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="be379300-27ac-411e-976d-bda889a8846f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:CC0444336137E599E0401F0A05997DAA" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="MapALIDtoAPID" type="rest" basePath="" definitionUrl="C:\Users\aravind.racharla\Desktop\Services\MapALIDtoAPID_1_1.wadl" id="fb89695a-1d99-45db-8915-c82550fbf903" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/aravind.racharla/Desktop/Services/MapALIDtoAPID_1_1.wadl"><con:part><con:url>file:/C:/Users/aravind.racharla/Desktop/Services/MapALIDtoAPID_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="MapALIDtoAPID"/>
  <resources base="https://${#Global#QA_HOST_P}:${#Global#QA_PORT}">
    <resource path="rest/${#Global#REST_API_Version}/Asset/Map/" id="MapALIDtoAPID">
      <doc xml:lang="en" title="MapALIDtoAPID"/>
      <method name="POST" id="MAPALIDtoAPIDCreate">
        <doc xml:lang="en" title="MAPALIDtoAPIDCreate"/>
        <request>
          <representation mediaType="application/xml" element="data"/>
        </request>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="data"/>
        </response>
        <response status="400 403 404 409">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="202">
          <representation mediaType="text/plain"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml"/>
        </response>
        <response status="201 202">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Map/${#TestCase#Profile}/${#TestCase#ALID}" id="MapALIDtoAPIDUpdate">
      <doc xml:lang="en" title="MapALIDtoAPIDUpdate"/>
      <method name="PUT" id="MapALIDtoAPIDUpdate">
        <doc xml:lang="en" title="MapALIDtoAPIDUpdate"/>
        <request>
          <representation mediaType="application/xml" element="coor:LogicalAsset" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </request>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:LogicalAsset" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="text/html; charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:LogicalAsset" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 201 202">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Map/${#TestCase#Profile}/${#TestCase#ALID}" id="MapALIDtoAPIDGet">
      <doc xml:lang="en" title="MapALIDtoAPIDGet"/>
      <method name="GET" id="MapALIDtoAPIDGet">
        <doc xml:lang="en" title="MapALIDtoAPIDGet"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="coor:LogicalAsset" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="coor:Error" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Map/${#TestCase#Profile}/${#TestCase#APID}" id="MapAPIDtoALIDGet">
      <doc xml:lang="en" title="MapAPIDtoALIDGet"/>
      <method name="GET" id="MapAPIDtoALIDGet">
        <doc xml:lang="en" title="MapAPIDtoALIDGet"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="coor:LogicalAsset" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="403">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="coor:Error" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
      </method>
      <method name="PUT" id="MapAPIDtoALID_PUT">
        <doc xml:lang="en" title="MapAPIDtoALID_PUT"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="400">
          <representation mediaType="text/xml"/>
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="DELETE" id="MapAPIDtoALID_DELETE">
        <doc xml:lang="en" title="MapAPIDtoALID_DELETE"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="OPTIONS" id="MapAPIDtoALID_OPTIONS">
        <doc xml:lang="en" title="MapAPIDtoALID_OPTIONS"/>
        <request/>
      </method>
      <method name="HEAD" id="HEAD">
        <doc xml:lang="en" title="HEAD"/>
        <request/>
        <response status="404">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="200">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="405">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType=""/>
        </response>
        <response status="403">
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://${</con:endpoint></con:endpoints><con:resource name="MapALIDtoAPID" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Map/" id="873cf96e-2e30-45c7-9a1d-7a87aed5df75"><con:settings/><con:parameters/><con:method name="MAPALIDtoAPIDCreate" method="POST" id="ba5cf652-7e0b-42a9-94df-e8a53088e1eb"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 409</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="4960f584-c344-4f2c-86f1-60df719c1361"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="MapALIDtoAPIDUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Map/${#TestCase#Profile}/${#TestCase#ALID}" id="81f4397e-88b8-45b1-9e9c-9402e1f10b6b"><con:settings/><con:parameters/><con:method name="MapALIDtoAPIDUpdate" method="PUT" id="78b5398e-021e-4ad0-8251-49dfd8623e6e"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:LogicalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:LogicalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:LogicalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200 201 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="574f5936-6824-4e8f-8eba-081c5eca61bf"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="MapALIDtoAPIDGet" method="GET" id="54b8225e-691a-4062-b982-39ca3d93c5be"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:LogicalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="fd6d6324-04b4-48fd-841f-6d0462824939"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="MapAPIDtoALIDGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Map/${#TestCase#Profile}/${#TestCase#APID}" id="44cdd7b3-23c5-4714-b2af-053bf4e69f11"><con:settings/><con:parameters/><con:method name="MapAPIDtoALIDGet" method="GET" id="e93dd256-04d0-4f1e-83b8-2a5cf6711176"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:LogicalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="09dc2631-e1e0-405e-9b8d-0464cff0277f"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="MapAPIDtoALID_PUT" method="PUT" id="2b4265cb-574f-4aab-b99f-cc90803d9f9d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="21e86b84-8edb-4ad0-a0ad-86ec2174df1c"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="MapAPIDtoALID_DELETE" method="DELETE" id="2c99d957-0dd5-4514-8deb-cac8945b0b94"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f641770f-4b38-444d-991f-5631a2bddfa5"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="MapAPIDtoALID_OPTIONS" method="OPTIONS" id="f4a65067-5094-46c3-a8fb-1f6d9b457a25"><con:settings/><con:parameters/><con:request name="Request 1" id="c066d522-57e4-4413-af67-b3be10d2b70f"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD" method="HEAD" id="9cb1995f-657c-4b79-b836-48197327fc4f"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ddd48076-1993-4014-a787-b6acf0647a64"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="MetadataBasicCreate_ContentProvider" type="rest" basePath="" definitionUrl="C:\Users\aravind.racharla\Desktop\Services\MetadataBasicCreate_ContentProvider_1_1.wadl" id="59a85885-50c9-4435-bc3c-3222b14e98f9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/aravind.racharla/Desktop/Services/MetadataBasicCreate_ContentProvider_1_1.wadl"><con:part><con:url>file:/C:/Users/aravind.racharla/Desktop/Services/MetadataBasicCreate_ContentProvider_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="MetadataBasicCreate_ContentProvider"/>
  <resources base="https://${#Global#HOST}:${#Global#PORT}">
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Basic/" id="MetadataBasicCreate">
      <doc xml:lang="en" title="MetadataBasicCreate"/>
      <method name="POST" id="POST MetadataBasic">
        <doc xml:lang="en" title="POST MetadataBasic"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="400 401 403 409">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="405 503">
          <representation mediaType="text/xml"/>
        </response>
        <response status="404 500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200 201 202">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="201 202">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="202">
          <representation mediaType="text/plain;charset=UTF-8"/>
        </response>
      </method>
      <method name="PUT" id="PUT MetadataBasic">
        <doc xml:lang="en" title="PUT MetadataBasic"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="400 403 404 409">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 405 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="HEAD" id="Head MetadataBasicCreate">
        <doc xml:lang="en" title="Head MetadataBasicCreate"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="503">
          <representation mediaType="text/html"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
          <representation mediaType="application/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="GET" id="GET MetadataBasicCreate">
        <doc xml:lang="en" title="GET MetadataBasicCreate"/>
        <request/>
        <response status="503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="dece:BasicAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="DELETE" id="Delete MetadataBasicCreate">
        <doc xml:lang="en" title="Delete MetadataBasicCreate"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
      <method name="OPTIONS" id="Option MetadataBasicCreate">
        <doc xml:lang="en" title="Option MetadataBasicCreate"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="401 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Basic/${#TestCase#CID}" id="MetadataBasicGet">
      <doc xml:lang="en" title="MetadataBasicGet"/>
      <method name="GET" id="GET MetadataBasic">
        <doc xml:lang="en" title="GET MetadataBasic"/>
        <request/>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=iso-8859-1"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
          <representation mediaType="text/html; charset=UTF-8"/>
        </response>
        <response status="404 500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="404 405 503">
          <representation mediaType="text/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="404">
          <representation mediaType="application/xml;charset=iso-8859-1"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="OPTIONS" id="OPTIONS MetadataBasic">
        <doc xml:lang="en" title="OPTIONS MetadataBasic"/>
        <request/>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="PUT" id="PUT MetadataBasic">
        <doc xml:lang="en" title="PUT MetadataBasic"/>
        <request>
          <representation mediaType="application/xml" element="coor:BasicAsset" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </request>
        <response status="400 401 403 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:BasicAsset" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="200 202">
          <representation mediaType="text/plain"/>
        </response>
        <response status="202">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="POST" id="POST MetadataBasic">
        <doc xml:lang="en" title="POST MetadataBasic"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE MetadataBasic">
        <doc xml:lang="en" title="DELETE MetadataBasic"/>
        <request/>
        <response status="400 401 403 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/plain"/>
          <representation mediaType="text/html; charset=UTF-8"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="404 405 503">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="data"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200 202">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="405">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD MetadataBasic">
        <doc xml:lang="en" title="HEAD MetadataBasic"/>
        <request/>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Basic/urn:dece:cid:file:greatmedia.mp4" id="MetadataBasicDelete">
      <doc xml:lang="en" title="MetadataBasicDelete"/>
      <method name="DELETE" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
        <response status="400">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Basic/${#TestCase#CID}" id="MetadataBasicDelete 2">
      <doc xml:lang="en" title="MetadataBasicDelete 2"/>
      <method name="DELETE" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Basic/" id="MetadataBasicCreate RTR">
      <doc xml:lang="en" title="MetadataBasicCreate RTR"/>
      <method name="POST" id="POST MetadataBasic">
        <doc xml:lang="en" title="POST MetadataBasic"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="400 401 409">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="503">
          <representation mediaType="text/html"/>
        </response>
        <response status="200">
          <representation mediaType="text/plain"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="PUT" id="PUT MetadataBasic">
        <doc xml:lang="en" title="PUT MetadataBasic"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="202">
          <representation mediaType="application/xml"/>
        </response>
      </method>
      <method name="HEAD" id="Head MetadataBasicCreate">
        <doc xml:lang="en" title="Head MetadataBasicCreate"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="503">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="GET" id="GET MetadataBasicCreate">
        <doc xml:lang="en" title="GET MetadataBasicCreate"/>
        <request/>
        <response status="503">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="DELETE" id="Delete MetadataBasicCreate">
        <doc xml:lang="en" title="Delete MetadataBasicCreate"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Basic/${#TestCase#CIDDelete}" id="MetadataBasicGet for Delete">
      <doc xml:lang="en" title="MetadataBasicGet for Delete"/>
      <method name="GET" id="GET MetadataBasic">
        <doc xml:lang="en" title="GET MetadataBasic"/>
        <request/>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="404 500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="OPTIONS" id="OPTIONS MetadataBasic">
        <doc xml:lang="en" title="OPTIONS MetadataBasic"/>
        <request/>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="PUT" id="PUT MetadataBasic">
        <doc xml:lang="en" title="PUT MetadataBasic"/>
        <request/>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="POST" id="POST MetadataBasic">
        <doc xml:lang="en" title="POST MetadataBasic"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE MetadataBasic">
        <doc xml:lang="en" title="DELETE MetadataBasic"/>
        <request/>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="data"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD MetadataBasic">
        <doc xml:lang="en" title="HEAD MetadataBasic"/>
        <request/>
        <response status="400 401 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://${</con:endpoint></con:endpoints><con:resource name="MetadataBasicCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Basic/" id="3706d502-df3d-404a-b564-132e724e071f"><con:settings/><con:parameters/><con:method name="POST MetadataBasic" method="POST" id="753138a5-1671-47b1-acb8-8603e96aa587"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200 201 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e6e2ee08-5772-4048-b9fc-5c7ae102bef2"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PUT MetadataBasic" method="PUT" id="3a48962d-e4f0-45c8-8643-07f52eb7f0d6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="5300f803-8751-4a92-8bbf-69800fb1cb15"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Head MetadataBasicCreate" method="HEAD" id="a7f6297a-4b9e-47ea-8f36-8edee46f3dea"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="cb106a0a-54b3-45ce-8b4a-72f759d654bc"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GET MetadataBasicCreate" method="GET" id="16449a71-4e59-4273-b629-d7609b85e3e4"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:BasicAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="069aff8f-7332-4642-a8e7-f0696784397c"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Delete MetadataBasicCreate" method="DELETE" id="01e48a38-6fbe-41d4-9bcc-fd32ca9b428e"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="0f040d17-02d1-46f3-bfbd-74b8a307277c"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Option MetadataBasicCreate" method="OPTIONS" id="a3fe2096-7711-4fdf-a119-9f112c7fe3f7"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8121c877-669b-4e28-bdc0-2d48559b0a46"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="POST MetadataBasic-1" method="POST" id="0b7df01b-6a2c-4ee2-b993-0ad03e3a9678"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="230103f5-ed6e-44f3-a18e-5c0ba31afbf7"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PUT MetadataBasic-1" method="PUT" id="718a4d5d-c831-433f-a8b1-31900ef86037"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8c68ab28-5c8b-4198-8c2d-ce88ca8f1a43"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Head MetadataBasicCreate-1" method="HEAD" id="6f135e5e-ff3a-4186-a9c1-5f6b63c2e7d6"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="b63cc061-f61d-4dc4-9e46-7815c6700ba6"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GET MetadataBasicCreate-1" method="GET" id="fc7bdc80-1caa-4883-906b-b43c8c077874"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e26625a2-0e10-426f-acbc-ba6a3b1f57cd"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Delete MetadataBasicCreate-1" method="DELETE" id="edfbb8d6-078e-4cd8-b5b9-b2e1363c6689"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d2c647c1-60ad-43e6-a9b9-f2a1f66f9308"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="MetadataBasicGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Basic/${#TestCase#CID}" id="f6ea23ea-e7cd-4085-bab9-637d3a88b37a"><con:settings/><con:parameters/><con:method name="GET MetadataBasic" method="GET" id="65954476-3dde-4f35-8856-2605578b9bc3"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 405 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="5a2ec487-e4ee-4032-8799-d5e281b60db5"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="OPTIONS MetadataBasic" method="OPTIONS" id="05e276ea-493d-4e75-ac37-59499bedf854"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="69f0beed-0787-4aeb-bcea-395d64d01051"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PUT MetadataBasic" method="PUT" id="bfb23172-d700-4330-8770-c6825400d3cd"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:BasicAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:BasicAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bf68acd2-f6ef-4643-a363-a29b1cf4e0cd"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="POST MetadataBasic" method="POST" id="3c576052-1a27-4408-85a2-1d281845fd08"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f4ffca1a-1540-4ee9-904d-3d0e7b3553da"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DELETE MetadataBasic" method="DELETE" id="5667707d-24a3-4612-befd-22a1c77772c5"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 405 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f3d7b3f7-a19b-4ddc-9365-2c26307deff6"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD MetadataBasic" method="HEAD" id="1c2da2fd-a8f2-45bf-9891-9aa93e5e427c"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="67a3c22b-d4d4-44b5-bf04-c5675ce55d64"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Method 1" method="DELETE" id="e18096bc-a70b-4628-9a74-d397aad0ee1d"><con:settings/><con:parameters/><con:request name="Request 1" id="26c8d4e9-b60f-4d12-9dab-778c4cbd3965"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="MetadataBasicDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Basic/urn:dece:cid:file:greatmedia.mp4" id="c20a0188-b278-476e-bde4-74dcea4e0ebb"><con:settings/><con:parameters/><con:method name="Method 1" method="DELETE" id="c3600e39-2791-4eb1-95a6-3da9d211399f"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="9790d3a9-db2c-488a-9208-db83b249f518"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="MetadataBasicGet for Delete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Basic/${#TestCase#CIDDelete}" id="a0851638-6b4e-4e27-bba3-1b24a3377b5f"><con:settings/><con:parameters/><con:method name="GET MetadataBasic" method="GET" id="08bcbef6-b28c-4cc1-b913-70c35011936a"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f82f8a47-bfa6-487a-b681-ed319e26d055"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="OPTIONS MetadataBasic" method="OPTIONS" id="81bec958-e5c9-45b5-8575-4affd5df4486"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e90d9c0d-be43-438e-9b99-b2ff2fa3e950"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PUT MetadataBasic" method="PUT" id="8e5fda46-41ef-48c4-be76-01b9e678a02e"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bdc880da-fee3-473d-8640-37935880988d"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="POST MetadataBasic" method="POST" id="49405748-46a5-4a17-a241-4c96377f8194"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="401ac1fc-0773-4f58-ae0a-65c4391f5641"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DELETE MetadataBasic" method="DELETE" id="13786221-9a0e-440f-8a66-9fd3b15a420f"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="28503511-dc8a-4b4c-ae00-8c636828f74b"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD MetadataBasic" method="HEAD" id="432d22d3-b645-4972-8ade-01b0399c5ad6"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="a506f2cd-7fd7-42b8-8da4-4c4c66c9a575"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="MetadataDigitalCreate_CTP" type="rest" basePath="" definitionUrl="C:\Users\aravind.racharla\Desktop\Services\MetadataDigitalCreate_CTP_1_1.wadl" id="057f0b00-96b1-44f3-b98e-760ec4168c26" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/aravind.racharla/Desktop/Services/MetadataDigitalCreate_CTP_1_1.wadl"><con:part><con:url>file:/C:/Users/aravind.racharla/Desktop/Services/MetadataDigitalCreate_CTP_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="MetadataDigitalCreate_CTP"/>
  <resources base="https://${#Global#HOST}:${#Global#PORT}">
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Digital/" id="MetadataPhysicalCreate">
      <doc xml:lang="en" title="MetadataPhysicalCreate"/>
      <method name="POST" id="POST MetadataBasicPhysicalCreate">
        <doc xml:lang="en" title="POST MetadataBasicPhysicalCreate"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403 404 409">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="404 500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 405 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200 201 202">
          <representation mediaType="text/plain"/>
        </response>
        <response status="201 202">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="400 409">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="PUT" id="PUT MetadataBasicPhysicalCreate">
        <doc xml:lang="en" title="PUT MetadataBasicPhysicalCreate"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="400 403 404 409">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200 202">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="dece:DigitalAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE MetadataBasicPhysicalCreate">
        <doc xml:lang="en" title="DELETE MetadataBasicPhysicalCreate"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD MetadataBasicPhysicalCreate">
        <doc xml:lang="en" title="HEAD MetadataBasicPhysicalCreate"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="GET" id="GET MetadataBasicPhysicalCreate">
        <doc xml:lang="en" title="GET MetadataBasicPhysicalCreate"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="data"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="OPTIONS" id="OPTIONS MetadataBasicPhysicalCreate">
        <doc xml:lang="en" title="OPTIONS MetadataBasicPhysicalCreate"/>
        <request/>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Digital/${#TestCase#APID}" id="MetadataPhysicalGet">
      <doc xml:lang="en" title="MetadataPhysicalGet"/>
      <method name="POST" id="POST MetadataPhysicalGet">
        <doc xml:lang="en" title="POST MetadataPhysicalGet"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 409">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 405 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="202">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="PUT" id="PUT MetadataPhysicalGet">
        <doc xml:lang="en" title="PUT MetadataPhysicalGet"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="400 403 404 409">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200 202">
          <representation mediaType="text/plain"/>
        </response>
        <response status="404 503">
          <representation mediaType="text/xml"/>
        </response>
        <response status="202">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE MetadataPhysicalGet">
        <doc xml:lang="en" title="DELETE MetadataPhysicalGet"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="202">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD MetadataPhysicalGet">
        <doc xml:lang="en" title="HEAD MetadataPhysicalGet"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
          <representation mediaType="application/xml" element="dece:DigitalAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
      <method name="OPTIONS" id="OPTIONS MetadataPhysicalGet">
        <doc xml:lang="en" title="OPTIONS MetadataPhysicalGet"/>
        <request/>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405 500">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="GET" id="GET MetadataPhysicalGet">
        <doc xml:lang="en" title="GET MetadataPhysicalGet"/>
        <request/>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200">
          <representation mediaType="text/plain"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Global#REST_API_Version}/Asset/Metadata/Digital/${#TestCase#APID}" id="MetadataPhysicalDelete">
      <doc xml:lang="en" title="MetadataPhysicalDelete"/>
      <method name="POST" id="POST MetadataPhysicalGet">
        <doc xml:lang="en" title="POST MetadataPhysicalGet"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 409">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 405 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="202">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="PUT" id="PUT MetadataPhysicalGet">
        <doc xml:lang="en" title="PUT MetadataPhysicalGet"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="400 404 409">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
        <response status="202">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE MetadataPhysicalGet">
        <doc xml:lang="en" title="DELETE MetadataPhysicalGet"/>
        <request/>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD MetadataPhysicalGet">
        <doc xml:lang="en" title="HEAD MetadataPhysicalGet"/>
        <request/>
        <response status="405">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
          <representation mediaType="application/xml" element="dece:DigitalAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
      <method name="OPTIONS" id="OPTIONS MetadataPhysicalGet">
        <doc xml:lang="en" title="OPTIONS MetadataPhysicalGet"/>
        <request/>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="500">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="GET" id="GET MetadataPhysicalGet">
        <doc xml:lang="en" title="GET MetadataPhysicalGet"/>
        <request/>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="405 500">
          <representation mediaType="text/plain"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="MetadataPhysicalCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Digital/" id="649d456a-0159-4475-9ab8-1827772e8309"><con:settings/><con:parameters/><con:method name="POST MetadataBasicPhysicalCreate" method="POST" id="49f8b9ca-f259-46c5-8b59-4ba52a699fe5"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200 201 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="516bef53-ab41-42fd-864e-cb6213f32695"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PUT MetadataBasicPhysicalCreate" method="PUT" id="7fa1b2d5-2e34-43ee-a86b-31970dba2fc3"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DigitalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="b06e8855-91a3-44f2-9e4e-ce0b7a7fb864"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DELETE MetadataBasicPhysicalCreate" method="DELETE" id="4436a9ba-70fd-4881-9c3c-9aa415b77c42"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="25409545-1160-4429-a3c2-55533034c2b1"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD MetadataBasicPhysicalCreate" method="HEAD" id="28671168-80cb-4bd2-b9c9-2989fd40bdd0"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="2857c97a-00b9-4546-a4d9-5c3fd2b1a044"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GET MetadataBasicPhysicalCreate" method="GET" id="9e8ed53a-d175-454d-b56c-c81f4c42d295"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="041f2af8-128d-4f6b-9ab8-7a42d9e5ccba"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="OPTIONS MetadataBasicPhysicalCreate" method="OPTIONS" id="005de16c-2560-46be-a0f7-e5e1bcdd7168"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="5617ae9d-2b32-44dd-9612-f9bb334323bf"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="MetadataPhysicalGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Digital/${#TestCase#APID}" id="4f5da78a-1274-417f-ba87-39835cc629af"><con:settings/><con:parameters/><con:method name="POST MetadataPhysicalGet" method="POST" id="41b4d1c6-3914-4f2c-9023-bdf2b5178c62"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="efb0e8f3-7f16-4efc-b477-2fbfa0f9b042"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PUT MetadataPhysicalGet" method="PUT" id="9451652e-4079-4fb8-8ce2-00c7f7d8665c"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="b7dfd974-3171-437c-83f7-64ece779d0e8"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DELETE MetadataPhysicalGet" method="DELETE" id="091428af-fd27-46c3-aed5-8caa0568294b"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="180c5a65-b8ce-4091-ba6a-47f79b396ea4"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD MetadataPhysicalGet" method="HEAD" id="c49d8a8d-96bf-4162-b601-10e15be61992"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DigitalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="3f05acb5-ce7e-4ae9-947a-e88c08a665be"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="OPTIONS MetadataPhysicalGet" method="OPTIONS" id="f06f53d9-7b92-48e6-ad94-e21dbce63674"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="3c730793-6761-48bb-bfef-987eb12322d6"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GET MetadataPhysicalGet" method="GET" id="da9edcd1-6d14-487f-900e-66b10f3577bf"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="94db8269-0427-4bdf-9e72-8c5e468220bf"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="POST MetadataPhysicalGet-1" method="POST" id="7f23c413-8056-48df-b7fd-cf13beff74bb"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="10e24187-9f69-4d33-a491-7f056cba5479"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PUT MetadataPhysicalGet-1" method="PUT" id="9de4ac29-12b5-45ea-8852-1dd252ba4a2f"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e01bfa75-8762-469e-bed2-8053840f52e0"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DELETE MetadataPhysicalGet-1" method="DELETE" id="de83c0c3-6ebb-4d7d-bb64-72e5877599cb"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="6470f3ae-91d9-413b-be7f-47ba8864ac73"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD MetadataPhysicalGet-1" method="HEAD" id="a69d0c2c-afdb-4024-8216-5cc3ccc18e1f"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DigitalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="22fa0d3b-74a1-47ec-8ec0-1eb984338337"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="OPTIONS MetadataPhysicalGet-1" method="OPTIONS" id="26cd7e43-3208-47f4-a91b-b359ac5a108d"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="84bfa148-8e49-4cbf-93f8-ba6aafd3f829"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GET MetadataPhysicalGet-1" method="GET" id="555ae90f-086b-4f9f-b220-ef2934563021"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="065bba60-55f8-42eb-9d73-87a39663a372"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenUpdate" type="rest" basePath="" definitionUrl="C:\Users\aravind.racharla\Desktop\Services\RightsTokenUpdate_1.wadl" id="9ac69a38-2314-484c-be8f-740360cb2cdf" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/aravind.racharla/Desktop/Services/RightsTokenUpdate_1.wadl"><con:part><con:url>file:/C:/Users/aravind.racharla/Desktop/Services/RightsTokenUpdate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="RightsTokenUpdate"/>
  <grammars>
    <include href="httpwwwdecellcorgschema.xsd"/>
  </grammars>
  <resources base="${#Project#AppHost}:${#Project#AppPort}">
    <resource path="rest/1/02/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightsTokenUpdate">
      <doc xml:lang="en" title="RightsTokenUpdate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="RightTokenUpdate">
        <doc xml:lang="en" title="RightTokenUpdate"/>
        <request>
          <representation mediaType="application/xml" element="html"/>
          <representation mediaType="multipart/form-data"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="html"/>
          <representation mediaType="multipart/form-data"/>
        </response>
        <response status="401 403 500 502">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 405 500">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400 401 403 404 500">
          <representation mediaType="application/xml" element="sch:Errors" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="405">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="DELETE" id="DeleteMethod">
        <doc xml:lang="en" title="DeleteMethod"/>
        <request/>
      </method>
      <method name="GET" id="GetMethod">
        <doc xml:lang="en" title="GetMethod"/>
        <request/>
      </method>
      <method name="POST" id="PostMethod">
        <doc xml:lang="en" title="PostMethod"/>
        <request/>
      </method>
      <method name="HEAD" id="HeadMethod">
        <doc xml:lang="en" title="HeadMethod"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part><con:part><con:url>file:\C:\Users\aravind.racharla\Desktop\Services\httpwwwdecellcorgschema.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://www.decellc.org/schema" elementFormDefault="qualified" xmlns="http://www.decellc.org/schema" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="Errors" type="_Errors"/>
  <xs:complexType name="Errors_Error">
    <xs:sequence>
      <xs:element name="Reason" type="xs:string"/>
      <xs:element name="OriginalRequest" type="xs:string"/>
      <xs:element name="ErrorLink" type="xs:string"/>
    </xs:sequence>
    <xs:attribute name="ErrorID" type="xs:string"/>
  </xs:complexType>
  <xs:complexType name="_Errors"/>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="RightsTokenUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="095e3635-99a4-48fb-80c3-15119e6a0a43"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="RightTokenUpdate" method="PUT" id="2cc05787-2841-453e-8dcb-9c76d17ef3e0"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:html</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>multipart/form-data</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:html</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>multipart/form-data</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 403 500 502</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="c6d76559-2b49-4d31-95b5-0c62e34bcfa5"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DeleteMethod" method="DELETE" id="634e18cc-4d1f-4bcd-b365-63ffc11177b8"><con:settings/><con:parameters/><con:request name="Request 1" id="7eaa4102-2b60-4b89-a96d-4c0e751dc2d6"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GetMethod" method="GET" id="ccacdcb6-fbeb-4f7c-8688-4be4aa83a25e"><con:settings/><con:parameters/><con:request name="Request 1" id="bfadfe97-941c-46ac-8ff1-74bc2f5e9016"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PostMethod" method="POST" id="f3898d81-fda8-4ac7-a523-4b1352e842f0"><con:settings/><con:parameters/><con:request name="Request 1" id="ee1a0a61-d2cc-4a00-a50d-7a62fbe41f6e"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD" id="e1de85fe-cb59-4451-902e-9d9034bdda49"><con:settings/><con:parameters/><con:request name="Request 1" id="20a9d96c-a9c5-493a-bac3-9cbd8373c4b7"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface>
  
  
  
  
  
  
  
  <con:testSuite name="Metadata_Creation" id="b733645f-0b89-476b-bbf5-bf955e3d667e"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreation_with_Unique_MD_Details" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="cf507894-e89e-4496-be7c-18ac90c823cf">
      <con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description>
      <con:settings/>
      
      <con:testStep type="groovy" name="Set Node Role to Retailer" id="e51d8314-ac24-4309-8770-6d06087fa2ca">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");
testCase.setPropertyValue("nodeid","222259");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for RTG");

assert TSrunnerRTC.status == Status.INITIALIZED;

WsdlTestCaseRunner TSrunnerRTC2 = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC2.runTestStepByName("Get Node Role for RTG");

assert TSrunnerRTC2.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node RETAILER" id="0a95e029-e270-412d-93a4-00b9c561a0ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="aa86f702-00c4-4107-bd52-03ecf6c93890"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )
//
//assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="SetUp User Credentials" id="37cf5465-99f7-41bf-b6ee-178d07c4031c"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId"))
rightsLockerID= myAccount.accountGetRightsLockerId(accountID).toString();

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("RightsLockerID","urn:dece:rightslockerid:org:dece:"+rightsLockerID);</script></con:config></con:testStep><con:testStep type="datasource" name="No_Of_Rights_To_Be_Created" id="6395cb65-d3ec-4544-a0d9-60a5a7188378"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">4&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">5&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">6&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">7&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">8&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">9&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">10&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">11&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">12&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">13&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">14&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">15&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">16&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">17&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">18&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">19&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">20&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">21&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">22&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">23&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">24&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">25&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">26&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">27&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">28&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">29&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">30&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">31&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">32&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">33&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">34&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">35&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">36&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">37&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">38&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">39&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">40&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">41&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">42&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">43&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">44&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">45&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">46&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">47&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">48&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">49&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">50&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">51&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">52&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">53&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">54&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">55&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">56&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">57&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">58&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">59&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">60&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">61&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">62&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">63&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">64&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">65&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">66&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">67&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">68&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">69&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">70&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">71&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">72&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">73&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">74&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">75&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">76&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">77&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">78&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">79&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">80&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">81&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">82&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">83&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">84&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">85&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">86&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">87&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">88&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">89&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">90&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">91&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">92&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">93&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">94&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">95&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">96&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">97&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">98&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">99&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">100&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">101&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">102&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">103&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">104&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">105&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">106&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">107&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">108&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">109&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">110&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">111&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">112&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">113&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">114&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">115&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">116&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">117&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">118&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">119&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">120&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">121&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">122&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">123&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">124&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">125&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">126&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">127&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">128&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">129&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">130&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">131&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">132&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">133&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">134&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">135&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">136&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">137&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">138&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">139&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">140&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">141&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">142&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">143&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">144&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">145&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">146&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">147&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">148&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">149&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">150&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">151&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">152&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">153&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">154&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">155&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">156&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">157&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">158&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">159&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">160&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">161&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">162&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">163&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">164&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">165&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">166&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">167&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">168&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">169&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">170&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">171&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">172&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">173&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">174&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">175&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">176&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">177&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">178&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">179&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">180&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">181&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">182&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">183&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">184&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">185&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">186&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">187&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">188&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">189&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">190&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">191&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">192&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">193&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">194&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">195&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">196&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">197&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">198&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">199&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">200&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">201&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">202&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">203&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">204&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">205&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">206&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">207&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">208&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">209&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">210&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">211&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">212&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">213&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">214&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">215&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">216&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">217&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">218&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">219&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">220&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">221&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">222&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">223&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">224&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">225&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">226&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">227&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">228&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">229&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">230&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">231&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">232&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">233&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">234&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">235&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">236&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">237&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">238&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">239&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">240&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">241&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">242&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">243&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">244&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">245&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">246&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">247&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">248&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">249&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">250&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">251&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">252&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">253&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">254&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">255&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">256&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">257&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">258&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">259&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">260&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">261&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">262&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">263&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">264&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">265&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">266&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">267&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">268&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">269&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">270&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">271&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">272&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">273&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">274&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">275&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">276&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">277&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">278&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">279&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">280&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">281&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">282&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">283&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">284&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">285&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">286&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">287&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">288&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">289&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">290&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">291&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">292&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">293&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">294&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">295&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">296&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">297&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">298&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">299&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">300&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">301&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">302&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">303&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">304&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">305&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">306&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">307&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">308&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">309&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">310&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">311&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">312&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">313&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">314&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">315&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">316&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">317&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">318&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">319&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">320&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">321&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">322&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">323&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">324&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">325&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">326&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">327&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">328&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">329&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">330&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">331&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">332&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">333&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">334&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">335&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">336&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">337&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">338&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">339&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">340&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">341&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">342&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">343&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">344&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">345&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">346&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">347&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">348&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">349&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">350&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">351&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">352&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">353&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">354&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">355&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">356&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">357&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">358&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">359&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">360&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">361&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">362&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">363&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">364&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">365&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">366&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">367&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">368&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">369&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">370&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">371&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">372&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">373&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">374&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">375&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">376&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">377&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">378&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">379&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">380&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">381&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">382&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">383&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">384&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">385&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">386&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">387&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">388&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">389&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">390&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">391&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">392&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">393&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">394&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">395&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">396&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">397&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">398&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">399&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">400&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">401&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">402&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">403&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">404&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">405&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">406&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">407&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">408&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">409&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">410&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">411&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">412&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">413&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">414&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">415&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">416&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">417&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">418&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">419&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">420&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">421&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">422&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">423&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">424&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">425&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">426&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">427&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">428&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">429&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">430&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">431&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">432&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">433&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">434&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">435&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">436&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">437&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">438&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">439&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">440&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">441&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">442&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">443&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">444&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">445&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">446&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">447&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">448&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">449&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">450&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">451&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">452&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">453&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">454&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">455&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">456&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">457&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">458&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">459&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">460&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">461&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">462&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">463&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">464&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">465&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">466&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">467&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">468&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">469&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">470&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">471&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">472&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">473&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">474&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">475&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">476&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">477&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">478&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">479&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">480&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">481&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">482&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">483&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">484&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">485&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">486&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">487&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">488&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">489&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">490&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">491&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">492&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">493&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">494&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">495&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">496&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">497&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">498&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">499&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">500&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">501&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">502&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">503&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">504&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">505&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">506&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">507&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">508&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">509&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">510&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">511&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">512&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">513&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">514&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">515&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">516&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">517&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">518&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">519&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">520&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">521&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">522&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">523&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">524&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">525&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">526&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">527&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">528&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">529&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">530&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">531&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">532&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">533&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">534&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">535&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">536&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">537&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">538&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">539&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">540&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">541&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">542&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">543&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">544&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">545&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">546&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">547&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">548&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">549&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">550&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">551&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">552&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">553&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">554&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">555&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">556&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">557&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">558&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">559&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">560&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">561&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">562&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">563&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">564&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">565&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">566&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">567&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">568&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">569&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">570&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">571&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">572&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">573&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">574&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">575&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">576&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">577&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">578&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">579&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">580&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">581&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">582&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">583&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">584&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">585&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">586&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">587&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">588&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">589&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">590&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">591&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">592&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">593&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">594&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">595&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">596&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">597&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">598&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">599&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">600&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">601&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">602&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">603&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">604&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">605&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">606&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">607&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">608&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">609&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">610&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">611&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">612&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">613&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">614&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">615&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">616&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">617&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">618&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">619&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">620&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">621&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">622&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">623&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">624&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">625&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">626&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">627&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">628&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">629&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">630&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">631&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">632&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">633&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">634&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">635&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">636&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">637&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">638&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">639&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">640&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">641&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">642&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">643&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">644&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">645&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">646&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">647&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">648&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">649&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">650&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">651&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">652&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">653&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">654&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">655&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">656&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">657&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">658&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">659&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">660&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">661&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">662&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">663&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">664&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">665&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">666&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">667&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">668&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">669&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">670&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">671&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">672&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">673&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">674&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">675&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">676&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">677&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">678&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">679&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">680&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">681&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">682&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">683&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">684&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">685&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">686&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">687&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">688&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">689&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">690&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">691&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">692&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">693&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">694&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">695&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">696&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">697&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">698&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">699&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">700&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">701&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">702&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">703&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">704&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">705&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">706&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">707&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">708&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">709&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">710&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">711&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">712&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">713&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">714&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">715&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">716&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">717&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">718&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">719&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">720&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">721&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">722&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">723&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">724&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">725&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">726&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">727&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">728&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">729&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">730&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">731&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">732&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">733&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">734&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">735&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">736&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">737&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">738&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">739&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">740&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">741&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">742&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">743&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">744&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">745&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">746&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">747&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">748&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">749&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">750&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">751&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">752&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">753&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">754&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">755&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">756&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">757&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">758&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">759&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">760&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">761&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">762&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">763&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">764&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">765&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">766&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">767&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">768&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">769&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">770&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">771&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">772&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">773&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">774&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">775&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">776&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">777&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">778&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">779&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">780&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">781&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">782&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">783&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">784&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">785&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">786&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">787&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">788&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">789&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">790&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">791&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">792&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">793&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">794&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">795&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">796&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">797&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">798&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">799&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">800&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">801&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">802&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">803&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">804&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">805&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">806&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">807&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">808&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">809&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">810&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">811&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">812&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">813&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">814&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">815&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">816&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">817&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">818&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">819&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">820&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">821&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">822&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">823&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">824&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">825&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">826&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">827&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">828&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">829&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">830&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">831&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">832&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">833&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">834&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">835&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">836&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">837&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">838&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">839&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">840&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">841&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">842&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">843&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">844&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">845&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">846&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">847&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">848&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">849&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">850&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">851&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">852&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">853&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">854&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">855&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">856&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">857&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">858&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">859&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">860&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">861&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">862&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">863&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">864&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">865&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">866&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">867&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">868&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">869&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">870&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">871&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">872&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">873&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">874&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">875&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">876&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">877&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">878&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">879&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">880&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">881&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">882&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">883&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">884&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">885&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">886&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">887&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">888&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">889&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">890&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">891&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">892&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">893&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">894&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">895&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">896&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">897&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">898&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">899&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">900&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">901&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">902&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">903&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">904&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">905&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">906&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">907&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">908&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">909&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">910&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">911&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">912&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">913&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">914&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">915&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">916&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">917&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">918&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">919&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">920&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">921&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">922&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">923&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">924&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">925&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">926&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">927&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">928&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">929&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">930&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">931&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">932&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">933&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">934&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">935&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">936&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">937&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">938&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">939&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">940&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">941&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">942&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">943&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">944&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">945&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">946&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">947&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">948&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">949&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">950&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">951&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">952&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">953&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">954&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">955&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">956&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">957&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">958&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">959&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">960&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">961&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">962&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">963&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">964&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">965&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">966&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">967&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">968&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">969&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">970&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">971&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">972&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">973&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">974&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">975&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">976&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">977&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">978&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">979&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">980&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">981&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">982&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">983&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">984&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">985&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">986&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">987&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">988&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">989&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">990&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">991&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">992&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">993&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">994&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">995&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">996&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">997&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">998&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">999&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1000&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1001&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1002&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1003&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1004&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1005&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1006&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1007&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1008&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1009&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1010&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1011&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1012&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1013&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1014&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1015&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1016&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1017&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1018&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1019&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1020&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1021&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1022&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1023&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1024&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1025&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1026&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1027&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1028&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1029&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1030&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1031&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1032&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1033&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1034&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1035&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1036&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1037&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1038&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1039&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1040&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1041&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1042&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1043&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1044&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1045&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1046&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1047&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1048&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1049&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1050&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1051&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1052&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1053&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1054&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1055&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1056&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1057&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1058&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1059&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1060&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1061&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1062&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1063&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1064&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1065&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1066&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1067&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1068&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1069&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1070&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1071&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1072&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1073&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1074&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1075&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1076&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1077&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1078&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1079&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1080&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1081&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1082&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1083&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1084&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1085&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1086&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1087&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1088&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1089&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1090&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1091&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1092&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1093&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1094&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1095&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1096&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1097&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1098&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1099&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1100&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Set Node Role to Metadata" id="16609ba5-108d-403c-bdc4-bb81cbc2e668">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeRole","urn:dece:role:contentprovider");
testCase.setPropertyValue("nodeid","222259");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for RTG");

assert TSrunnerRTC.status == Status.INITIALIZED;

WsdlTestCaseRunner TSrunnerRTC2 = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC2.runTestStepByName("Get Node Role for RTG");

assert TSrunnerRTC2.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node CONTENT PROVIDER" id="881e3c57-d0c5-4615-a64a-240fd7c8d2d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdCON"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RandomNoGenerator" id="ea9261fb-a878-4997-9fd6-a8a575e3a493"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;
def RandomNumberGenerated = randomIntId.toString();

def ContentID = "urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_"+RandomNumberGenerated+".txt"
def ALID = "urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_"+RandomNumberGenerated+".txt"


testCase.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
testCase.setPropertyValue("ContentID", "urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_"+RandomNumberGenerated+".txt");
testCase.setPropertyValue("APID", "urn:dece:apid:file:RIGHTS_EXAMPLE_APIDVersion_"+RandomNumberGenerated+".txt");
testCase.setPropertyValue("ALID", "urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_"+RandomNumberGenerated+".txt");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
log.info projectPath
def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

logFile.append(ContentID+"\t" +ALID +"\t"+"\n");

def loop = context.expand( '${No_Of_Rights_To_Be_Created#Loop}' )
def titleSort = "title_"+loop;
log.info "titleSort=="+titleSort;
testCase.setPropertyValue("TitleSort",titleSort);
testCase.setPropertyValue("TitleDisplay60",titleSort+"_60");
testCase.setPropertyValue("TitleDisplay19",titleSort+"_19");
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="df052b82-3c69-4f1d-ac40-c10260874c3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("CID-Create");
RestTestRequestStep testStep2 = testCase.getTestStepByName("APIDCreate");
RestTestRequestStep testStep3 = testCase.getTestStepByName("ALIDCreate");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="CID-Create" id="abeedee4-40ac-409c-8401-1776ca1bdc73"><con:settings/><con:config service="MetadataBasicCreate_ContentProvider" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Basic/" methodName="POST MetadataBasic-1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CID-Create" mediaType="application/xml" postQueryString="false" sslKeystore="CON_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<BasicAsset xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns="${#Project#SchemaNameSpace}" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#">
    <BasicData ContentID="${#TestCase#ContentID}">
        <ns2:UpdateNum>8</ns2:UpdateNum>
        <ns2:LocalizedInfo default="true" language="en-US">
            <ns2:TitleDisplay19>${#TestCase#TitleDisplay19}</ns2:TitleDisplay19>
            <ns2:TitleDisplay60>${#TestCase#TitleDisplay60}</ns2:TitleDisplay60>
            <ns2:TitleSort>${#TestCase#TitleSort}</ns2:TitleSort>
            
    <ns2:ArtReference resolution="840x1200">http://unihidef.edgesuite.net/images/movies/3B/48/3B48-70B9-87BC-6849-BAF6-B_800x1200.jpg</ns2:ArtReference>
    

            <ns2:Summary190>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours.</ns2:Summary190>
            <ns2:Summary400>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours -- in fact, smack dab in the middle of Central Park. Just three apples high and stuck in the Big Apple, the Smurfs must find a way to get back to their village before Gargamel tracks them down.</ns2:Summary400>
            <ns2:Genre>Comedy</ns2:Genre>
            <ns2:Genre>Adventure</ns2:Genre>
            <ns2:Genre>Animation</ns2:Genre>
            <ns2:Genre>Fantasy</ns2:Genre>
            <ns2:Genre>Family</ns2:Genre>
            <ns2:VersionNotes>---</ns2:VersionNotes>
            <ns2:OriginalTitle>The Smurfs</ns2:OriginalTitle>
            <ns2:CopyrightLine>Sony</ns2:CopyrightLine>
        </ns2:LocalizedInfo>
        <ns2:LocalizedInfo default="false" language="de">
            <ns2:TitleDisplay19>Die SchlÃ¼mpfe</ns2:TitleDisplay19>
            <ns2:TitleDisplay60>Die SchlÃ¼mpfe</ns2:TitleDisplay60>
            <ns2:TitleSort>SchlÃ¼mpfe, Die</ns2:TitleSort>
            <ns2:ArtReference resolution="800x1200">http://unihidef.edgesuite.net/images/movies/3B/48/3B48-70B9-87BC-6849-BAF6-B_800x1200.jpg</ns2:ArtReference>
            <ns2:Summary190>Die SchlÃ¼mpfe verlassen ihre magische Welt &amp; erobern den GroÃŸstadt-Dschungel New York.</ns2:Summary190>
            <ns2:Summary400>Die SchlÃ¼mpfe verlassen ihre magische Welt &amp; erobern den GroÃŸstadt-Dschungel New York. Gejagt vom bÃ¶sen Zauberer Gargamel mÃ¼ssen sie ein schlumpfiges Abenteuer bestehen.</ns2:Summary400>
            <ns2:Genre>Comedy</ns2:Genre>
            <ns2:Genre>Adventure</ns2:Genre>
            <ns2:Genre>Animation</ns2:Genre>
            <ns2:Genre>Fantasy</ns2:Genre>
            <ns2:Genre>Family</ns2:Genre>
            <ns2:VersionNotes>---</ns2:VersionNotes>
            <ns2:OriginalTitle>The Smurfs</ns2:OriginalTitle>
            <ns2:CopyrightLine>Sony</ns2:CopyrightLine>
        </ns2:LocalizedInfo>
        <ns2:RunLength>PT1H43M0.000S</ns2:RunLength>
        <ns2:ReleaseYear>2010</ns2:ReleaseYear>
        <ns2:ReleaseDate>2011-07-28</ns2:ReleaseDate>
        <ns2:ReleaseHistory>
            <ns2:ReleaseType>Premiere</ns2:ReleaseType>
            <ns2:Date scheduled="false">2011-07-28T10:10:10Z</ns2:Date>
        </ns2:ReleaseHistory>
        <ns2:WorkType>Movie</ns2:WorkType>
        <ns2:RatingSet>
            <ns2:Rating>
                <ns2:Region>
                    <ns2:country>US</ns2:country>
                </ns2:Region>
                <ns2:System>MPAA</ns2:System>
                <ns2:Value>NC-17</ns2:Value>
            </ns2:Rating>
        </ns2:RatingSet>
    </BasicData>

</BasicAsset>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep>
      
      
      
      <con:testStep type="delay" name="Delay" id="12b9f5ac-0b88-4f2b-a88a-d02c4bcfa3cd"><con:settings/><con:config><delay>${=project.properties["delayTime"].value}</delay></con:config></con:testStep>
      
      <con:testStep type="restrequest" name="APIDCreate" id="b0a1e60d-7514-415d-9f85-0c1aedd09bfc"><con:settings/><con:config service="MetadataDigitalCreate_CTP" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Digital/" methodName="POST MetadataBasicPhysicalCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="APIDCreate" mediaType="application/xml" postQueryString="false" sslKeystore="CON_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--
Sample XML file generated by XMLSpy v2009 sp1 (http://www.altova.com)
-->
<dece:DigitalAsset
APID="${#TestCase#APID}"
UpdateNum="1" ContentID="${#TestCase#ContentID}"
xsi:schemaLocation="http://www.decellc.org/schema/2013/06/coordinator dece.xsd"
xmlns:dece="${#Project#SchemaNameSpace}"
xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Audio>
<md:Description>String1</md:Description>
<md:Type>String2</md:Type>
<md:Encoding>
<md:Codec>String3</md:Codec>
<md:CodecType>String4</md:CodecType>
<md:BitrateMax>11</md:BitrateMax>
<md:SampleRate>22</md:SampleRate>
<md:SampleBitDepth>33</md:SampleBitDepth>
</md:Encoding>
<md:Language dubbed="true">en-US</md:Language>
<md:Channels>String5</md:Channels>
<md:TrackReference>String6</md:TrackReference>
</dece:Audio>


<dece:Video>
<md:Description>String7</md:Description>
<md:Type>String8</md:Type>
<md:Encoding>
<md:Codec>String9</md:Codec>
<md:CodecType>String10</md:CodecType>
<md:MPEGProfile>String11</md:MPEGProfile>
<md:MPEGLevel>String12</md:MPEGLevel>
<md:BitrateMax>44</md:BitrateMax>
</md:Encoding>
<md:Picture>
<md:AspectRatio>String13</md:AspectRatio>
<md:PixelAspect>NTSC</md:PixelAspect>
<md:WidthPixels>55</md:WidthPixels>
<md:HeightPixels>66</md:HeightPixels>
<md:ActiveWidthPixels>77</md:ActiveWidthPixels>
<md:ActiveHeightPixels>88</md:ActiveHeightPixels>
<md:FrameRate multiplier="1000/1001">99</md:FrameRate>
<md:Progressive>true</md:Progressive>
<md:Type3D>true</md:Type3D>
</md:Picture>
<md:ColorType>color</md:ColorType>
<md:SubtitleLanguage closed="true">en-US
</md:SubtitleLanguage>
<md:TrackReference>String14</md:TrackReference>
</dece:Video>

<dece:Subtitle>
<md:Format HDImage="true" SDImage="true">String</md:Format>
<md:Description>String15</md:Description>
<md:Type>String16</md:Type>
<md:FormatType>String17</md:FormatType>
<md:Language>en-US</md:Language>
<md:TrackReference>String18</md:TrackReference>
</dece:Subtitle>

<dece:Image>
<md:Width>0</md:Width>
<md:Height>0</md:Height>
<md:Encoding>String19</md:Encoding>
<md:TrackReference>String20</md:TrackReference>
</dece:Image>

<dece:Interactive>
<md:Type>String21</md:Type>
<md:Language>en-US</md:Language>
<md:TrackReference>String22</md:TrackReference>
</dece:Interactive>

</dece:DigitalAsset>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep>
      <con:testStep type="restrequest" name="ALIDCreate" id="1b701095-239f-4fe0-9aa9-d6679bf11fa3"><con:settings/><con:config service="MapALIDtoAPID" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Map/" methodName="MAPALIDtoAPIDCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ALIDCreate" mediaType="application/xml" postQueryString="false" sslKeystore="CON_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<LogicalAsset xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" AssentStreamLoc="http://tempuri.org" AssentStreamAllowed="true" MediaProfile="urn:dece:type:mediaprofile:hd" ContentID="${#TestCase#ContentID}" ALID="${#TestCase#ALID}" Version="0">
    <AssetFulfillmentGroup>
        <DigitalAssetGroup CanStream="true" CanDownload="true" DiscreteMediaFulfillmentMethods="urn:dece:type:discretemediaformat:dvd:cssrecordable ">
            <RecalledAPID LicensingAllowed="false" ReasonURL="http://tempuri.org">urn:dece:apid:file:RIGHTS_EXAMPLE_APIDVersion_955153.txt</RecalledAPID>
        </DigitalAssetGroup>
    </AssetFulfillmentGroup>
    <AssetRestriction>
        <Region>
            <ns2:country>US</ns2:country>
        </Region>
        <Start>2001-12-31T12:00:00.000Z</Start>
        <End>2001-12-31T12:00:00.000Z</End>
        <Restriction>urn:dece:contentrestriction:nodownload</Restriction>
    </AssetRestriction>
</LogicalAsset>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReSet Node Role to Retailer" id="5672e23f-73be-4a49-8655-eb2cce1f0457">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");
testCase.setPropertyValue("nodeid","222259");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for RTG");

assert TSrunnerRTC.status == Status.INITIALIZED;

WsdlTestCaseRunner TSrunnerRTC2 = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC2.runTestStepByName("Get Node Role for RTG");

assert TSrunnerRTC2.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="datasource" name="DataSource" id="b6d69230-72cc-45c8-9ced-80c5f8e36ce5"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ns3.google.com</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">${#TestCase#ALID}</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">${#TestCase#ContentID}</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">${#TestCase#ContentID}</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">true</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">true</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">true</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">true</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">true</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">true</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">RetailerTransaction_1_node05112012</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:transaction:category1</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>LICAcqBaseLoc</con:property><con:property>ALID</con:property><con:property>ContentID</con:property><con:property>SoldAsContentID</con:property><con:property>PPCanDownLoad1</con:property><con:property>PPCanDownLoad2</con:property><con:property>PPCanDownLoad3</con:property><con:property>PPCanStream1</con:property><con:property>PPCanStream2</con:property><con:property>PPCanStream3</con:property><con:property>PIRetailerTransx</con:property><con:property>PITransactionType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Set Node RETAILER 1" id="2e9fa0e9-a255-4e2c-83fb-e48978ecbde0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenCreate Request with Valid Data" id="a9790fa6-9596-479c-bb89-c11ee37b85fc">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

//RightsToken Request and properties
TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

def lICAcqBaseLoc = context.expand( '${DataSource#LICAcqBaseLoc}' );
def alid = testCase.getPropertyValue("ALID");
def contentID = testCase.getPropertyValue("ContentID");
def soldAsContentID = context.expand( '${DataSource#SoldAsContentID}' );
def canDownLoad1 = context.expand( '${DataSource#PPCanDownLoad1}' );
def canDownLoad2 = context.expand( '${DataSource#PPCanDownLoad2}' );
def canDownLoad3 = context.expand( '${DataSource#PPCanDownLoad3}' );
def canStream1 = context.expand( '${DataSource#PPCanStream1}' );
def canStream2 = context.expand( '${DataSource#PPCanStream2}' );
def canStream3 = context.expand( '${DataSource#PPCanStream3}' );

def retailerTransx = context.expand( '${DataSource#PIRetailerTransx}' )
def transactionType = context.expand( '${DataSource#PITransactionType}' )

//contentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_162500.txt"; 
//alid = "urn:dece:alid:file:ANK_EXAMPLE_ALIDVersion_162500.txt";

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("ALID",testCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",testCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",testCase.getPropertyValue("TitleSort") );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID",testCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("PIRetailerTransx","transcation");
testCase.setPropertyValue("PIPurchaseAccount",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("PIPurchaseUser",testCase.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("VCAllowedUser","urn:dece:userid:org:dece:12222599");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Create request" id="52fa4f3b-c0b4-43b5-92d8-1df1b2117602">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="datasourceloop" name="Rights_Token_Creation_Loop" id="7ead9e2d-b6b3-4a5c-adb6-930c937c3884"><con:settings/><con:config><dataSourceStep>No_Of_Rights_To_Be_Created</dataSourceStep><targetStep>Set Node CONTENT PROVIDER</targetStep></con:config></con:testStep><con:testStep type="datasource" name="ReferenceTypes_4" id="8cd08093-fc51-4372-b0b3-33177a56afb6"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">download&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">metadata&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">reference&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">token&lt;/con:entry></row></con:configuration></con:dataSource><con:property>referenceType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer_4" id="87c5c298-a833-4a2c-bd1e-a27395732e88"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>referenceType</con:name><con:sourceType>referenceType</con:sourceType><con:sourceStep>ReferenceTypes_4</con:sourceStep><con:targetType>referenceType</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsLockerDataGet Request with Valid Data" id="efe40a9d-740b-4660-9caf-797376f0ce8c">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties


//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the Required Rights Locker Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsLockerDataGet Request" id="46afe164-dc6a-48e9-978b-5957ca267c17">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("RightsLockerDataGet_DWQ");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsLockerDataGet Response" id="7fac13e4-0daf-4880-922d-526246079cb7">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsLockerData Get Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify the RightsLockerDataGet Response" id="0639a63d-96ee-4010-b560-db7b9e3ca0f0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="datasourceloop" name="DataSource Loop for ReferenceType_4" id="3f133435-1552-4ea0-a011-1c1621ac27bc"><con:settings/><con:config><dataSourceStep>ReferenceTypes_4</dataSourceStep><targetStep>Property Transfer_4</targetStep></con:config></con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>FA8A46445432BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_252859.txt</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:RIGHTS_EXAMPLE_APIDVersion_252859.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVZbU+JKEH7fX5GKj1bIlYspoCoEXHFBXW4efbGGSQPjSSYxM0Hw1+9MMAiIHvZUWVLT6en++jJfd52hKLRcjzFIOYmp0m031CeEKmBMy1irVdBMc2q1ilZDIP4BKls1MOxpxVSVLmMZdCnjiPKGahmmoxllzboYmZbr2K5VK1mO8agqE0iZMC1USoaqrKKQMjd321CzlLoxYoS5FEXAXI7dodfvuULTRQUmtVnfoMwdps0F54mr67gUAIYwxCUcR3pd39OpB8wdkjlFPEvh3WfAGur73dfX19KrXYrTuW4ZhqEbF7rQCRiZn6nNH8VlCLp0Fm/OPqIxJRiF5A1JUH3gizhQvHAep4Qvoi9Mm7ppSNMarLCGTYeeqfqHgxzdiZb2QKYMaWyBzMLYAGaQAsWgjAfdhnp2WgU3d0cpomwWpxE7OP8dJKBLCOMEAo0VkRXoTrd4JF3NOmC3S3GYMbKEG9kmCcLAlLsUZmTVI0w0X8CUvPzKiok/UnQZ4L8pS13fxSqg60ey0yZzYPz/1Gy3XhsrExRm0HxMy3xmPF+3ba8/vnl8GOGHsbXkb8aCNXIIu8obUNtyv58Pm3XbW++XHpNR66f5i/Zr9nll5PdMbjk3Rt+5b7WQDrpZnfR++/OJ06HYCirnvfNgEiymNLmdzvDomq5N7+L6sVNtv7XG+EdCrHlrfHcV/bz0F8+/OzQB32Qrwuy3Aazt+7ur8dqLLsbZuV5dX/Pz+062Wsysqe9NXvjAuPKer69WSXV+Y/3q/Si3HqJl962SzpPMuZ/2r+3XxkdMuzHsCwtKGGbTZ8C8OMr26LaVS1EvxL+nFykhgTbLVd1EchTjQLnalLcktbiZICASuKKYm/OlV/OcilOpOrZZ9j2nYziGeWl4Rvniwm5XywUHbVAcQPRjOiPSl2TZTf98DxBHLgMaQKot4wwvgKnfWGwjjpQuHYjHEVMGo1iweNsW8KyaKYEaRsXyHd9vG7ZndCoV67LVVpWbmN/S29SbcUj3Gby8x+ADwCQhIGle9jkTjc64SMkLWmY8NEtLVKKQiUGQSi52LadW1hmJkhAkYD2KgyyEUrJI8gTpbPNraQizXDrojPL392V4h9+KTAidgEgFJmNpgagmHBlFZhHI1wHXdgMuzHtZQOQzE2nlKcEbJPufPrpFtsm2VURET/7wySxwb9VPvv75pv4NKP0wH1tHwZLsuC1mqhgTgkSaRTVfUOmllC2XWV6/qiTIVJjXTd2o6kPAmWC59Sj+F6i+NaGfNGS2qA88b+X7+DK+oEOOOESi25T8eMKGMQQmN4yueC2rU9eXPZcibxxW/JjMD8UiIhF/u6tgF0s9Ib4TP69xGnyU64itHT8iTrFWcELn8iTHyfqLpsCxMEsE/8XprvFjBo453xduk7zFwkU3TTMOX39RJLE1VIRxnFHelQQiBLtkm+Pk6wTcD6VPZnJCf5/QK/blhP6n3xsK2ouQutUl/62skbxdMKhyEcixNNSVWDiFczrfIfd3gEf43SkLfm/5nn/A79VtAvciaX4Sf5bs5PTwPTT/AA==</con:value></con:property><con:property><con:name>assertid</con:name><con:value>_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>assertionUserId</con:name><con:value>FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_252859.txt</con:value></con:property><con:property><con:name>count</con:name><con:value>0</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EBAE2E3E49AAF1D0E0401F0A0799334A</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>retailer</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property>
        
      <con:property><con:name>PITransactionType</con:name><con:value/></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>Profile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>252859</con:value></con:property><con:property><con:name>RatingSystem</con:name><con:value>TVPG</con:value></con:property><con:property><con:name>RatingValue</con:name><con:value>TV-Y</con:value></con:property><con:property><con:name>rcUUID</con:name><con:value>1</con:value></con:property><con:property><con:name>referenceType</con:name><con:value>download</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FA8A46445439BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/06/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_652833.txt" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_652833.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">title_2</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_652833.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>132</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:UserNotActive">
      <Reason Language="en">The member is not active.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77/RightsToken</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#UserNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EBAE2E3E49AAF1D0E0401F0A0799334A</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>RightsTokenFull</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAMLExpDate</con:name><con:value>2013-06-22 06:09:58.0</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:contentprovider</con:value></con:property><con:property><con:name>set_role1</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_652833.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>title_2</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>StreamWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/streaminglink</con:value></con:property><con:property><con:name>StreamWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/q/streaminglink</con:value></con:property><con:property><con:name>StreamWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>StreamWebLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TitleDisplay19</con:name><con:value>title_3_19</con:value></con:property><con:property><con:name>TitleDisplay60</con:name><con:value>title_3_60</con:value></con:property><con:property><con:name>TitleSort</con:name><con:value>title_3</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>Rights_LockerDataGet_Download_user_20140529_084323</con:value></con:property><con:property><con:name>useroid</con:name><con:value>FA8A464674325CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/CON_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7906c070-6ed0-4f8c-ac74-d36b89d42085</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4e8967e6-8471-4ff1-ae0c-c6762b8d98b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7ff867b-bf5f-4917-a181-6de60d1e7b1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bb51748-8014-425b-87ff-3022dff35f72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7341965b-1dd1-4103-8019-98c20436d0ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dded0c02-d4c6-4728-bbdb-92942dbd4726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5b568cb5-d596-48f9-a931-b16cd2a473a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53456f19-3bf6-4b70-866c-2057fa7ffe7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8cd08093-fc51-4372-b0b3-33177a56afb6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>87c5c298-a833-4a2c-bd1e-a27395732e88</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>efe40a9d-740b-4660-9caf-797376f0ce8c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46afe164-dc6a-48e9-978b-5957ca267c17</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7fac13e4-0daf-4880-922d-526246079cb7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0639a63d-96ee-4010-b560-db7b9e3ca0f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f133435-1552-4ea0-a011-1c1621ac27bc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6395cb65-d3ec-4544-a0d9-60a5a7188378</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Common Test Steps" id="ef50c580-3ac5-429f-81ae-f73f6dbbdfab" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate SAML Assertion" searchProperties="true" id="1f0efe88-99d0-43eb-bd74-236a41652bb0">
      <con:settings/>
      <con:testStep type="groovy" name="Get Assertion From FormAuth" id="8a722a6c-5d38-486e-8430-76d89611d85e">
        <con:settings/>
        <con:config><script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("TSuiteName");
def callTCname = testCase.getPropertyValue("TCaseName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));

String nodeID = testCase.getPropertyValue("nodeid").toString();
String userID = testCase.getPropertyValue("username").toString();
String useroid = "";
String acctoid = "";

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
                def a = new dbUtils.dbUser(log,testProject.getPropertyValue("targetDECEDB"));
                useroid = a.userGetUserOID(userID);
                log.info "useroid" + useroid;
                acctoid = a.userGetAccountOIDbyUsername(userID);
                log.info "acctoid" + acctoid;
} 
catch (Throwable e) {
                log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
/*
*  LP1 security contexts
*/

if (testProject.getPropertyValue("targetDECEDB").toString() == "LP1") {
                switch (nodeID) {
                            case "222259":  
                                              if (userID == "schfau1")
                                                {
												    callTC.setPropertyValue("assert","nVdbc6pKE333V1jux5ThosRL7aRquIqKCoK3l69wGAFFUAYE/fVnwGhMdvY++3wPKTNNd8/q7sWw5ie29wHbBRijOPGjsKqKr7X/sR3Ybm2cdh02Xhr1JmTbdZvecPUXx2FbDoSwSdu1qopxitQQJ3aYvNZYmmHr9Eud7ZgM3WUb3WbrudGiV7XqDMWYpCYuz3Stmu+DEHfLbV9raRx2Ixv7uBvae4S7CexOgTbsEs+ufcNUe/t5RVluGL95SXLoUhR8dhBEQQCfYbSnflKffH46uDv13dBO0hi97+ng19p7bJZlz1njOYpdiqVpmqI7FPFxsO/+qL1VbsHIUcNNdF0LdhiFPrQD/2IXoDSUeJFTBYEbxX7i7X+TmqEYukhdRzmsQ6YZ/qhRHxuU6P4y0yeQMbbr2LOZWzIDbVCMQoiqlqG+1n783QSvsWZsh3gTxXv8Zf3fIKHwhILogJw6vlV2Q/f3Gb9p19tPBLtqCIMU+yc0KmhysCHC1UmMNn4+9DEhn4Or5firOb4xDMH/MpKf1CNOApv6pjOi7yKc/D/zepzVNcvMDlL0xvfnLYUC7BBrnqnTo4a0hm40TOK+/lpCeHS+grqP+n39lah3Xr0HSWMn5di4wzogsKjJuM8t20lgQGm0a+V2pEVgNxm5jV7gPZ3VrWyhdLdsb6KBvGfXg1XKNrw0NYIsX2FNrnCRJTqBlq+4mWxnl9ko1zseK9hb0z6klnYMzxSenKSFoUaRF4sDezXdjNftw9RSYrAbWJyxiMRROvXEvlfpQ7G3asyDU/9wTlkbrnv49aOmxxqKugboXBZZ/L/g6I5oJ/Z9IRQnxYa8ngl601RVTC+CAM5TF2QqD1zytwUj3t0dvZ2vdDKaB7ouA1Hgg6001MBOAYwl8Z4mzGZaLlxAn3dHMxJoVkCw4jVDysRsKc50vSdlnukos/NaCdLVRRppAJfBgqdJhjQTDVPSNBBdbbkmrpV8q021TNWXYoUkEKX8cHGUToKU3IesymlTjl1OuXS1mBG7fB7uR6e1KQWaoCnC9KhM1XVD1KU+MJZzyMopib0M94eosrT4h6D+AW0BkjOa7AkumrnLNNNiR6Jhlzbzs01Tlb6m40zQy6qUipT1Z9bloxcCrwnOXsolE0yuvYCmII/o1aKP7TkXagbIRLcMHkiZM74B0XQ6qwjXXg2lzJAMayRrhppJoLSJUhbgNTvy1op3gg0975tg+zgYQZfmckieh8YJnrljxVZksN7PGNgwPOhzvr2IMnfVzkR92R9EK5WkGQFd4nkdEEA0KEoj/efBkJ9x44PfYX003MjRHnlxRWOiwe50yem23xi7k9GcEze71kTxJw3b8Sg1gOy2sQOqipwB4+m2YywpQwz9y8t4YC2QHy8vyYjTmRe/zVWMeWotxChoOb3F0ho85Uuom+PJ1JpPLnk+Om7blyDpjflePO1rojseITTB8ImibZk32yInLHtbwqeNQSOuAlyNB0DZuq7kEwLzve2VhD1Dkwh5gSZkijAXlClQlCdJ5UVd38geM4HKLLWYkaZKTkDadF4ujKCyEniRTIq256vDkpXplQmcMpnelGRXt7in/gKt9FFgzhKQHWabkGFo5aD3NlrmQq1ggKNmU568RXwlVYFljw99Oh/MXmjmqDtBf9oBViOfsrt87Lmr885d7chQlg+vztIEwcx84JhKKDav6KZkaKB9fd9yTbUaRgD3+WG9h7lokpmVwZHJS4as01YuimBwtWETsDleXqStJkhlfAXkmk1ocVovPLwMR/7YlFJC2vSBLts1S/8rxwqKVT5z7CgAHXzlmHTlmAQ2xye1LTKYexEOeJ65vCId9dZs2O8caH0x3FX4J5lyEz9ojsN2Zg6e5sw5a3lbfT7vqKInPIWbpddYJzxtX6CO+ruW4hs7MXxpBmdtqOmc5VPBmd6iY4aHlZHKhFIjuchUJ06f+P3K318ujSZr7SfT9KRa9gAzZ299nHey7aT3QlGxcuYurdVJlxcRXF6/I18PybvxeoxSjwfspxP4pr2m6XqLYHJbFt9hVazK5ONoJ3/WcYXFd+qb0rV7KMQgTlCY1N6KqELDdVOi9HynS76c1zVodmS2zcvsC9NkuWZbops0I9OA5jodmn2Rb2LviuILRCEKN36xVyFnrx/rPwOE++4a2TGKa3/IVPSpqoYGUR9RiJEZvdZkXmDaDVFkQEdutoDMteg2y9Jtps2/yIBp1aqjKBmH4xhsEhR/KOQG/VUhGwj6Bx8VMrrQEpiICZyQThztU5oEzPPJfg5RSoR2XGjdLttscxT294cAFXipfeSkAXo+eIeyLxS+/rJ1G+LSSrc6nVLk/La8r89unSA+jl844KIYHpEpom+0fuNWyS8VN769E9zSg9TxCy1D2prEPrwi+fzogyUFPe4UKUq6Yb67fjV8Skt9rei+k3Py4Z3o96sQUdJEa73dBnK0n4/P6emUliNoFToyJukphqJZaopgSsTg2Yx2KKTuKai/0uF31F92vts/40sTL5wm5CXeE8JUy+W/X8I+RZMWJChPvrMJAbl2FZv/8WYGu7DwI+YJ+cmi2Pno/De5HvYhkIsDyA/dYlUI6PNvBgwjktYnh1AUPyb/LsF3m3823vt1x5IQYqzTBP3+SbU4XV5rNoRRGiaqWCsNjydeiTM5H1D3w+mXNKWEfb+T5Pi3d5KFNpxCD+3t2t3X/3fnul9OHiIShf0Sy2stJ9drsnnoPpyw7wC/P2Rp+ZtDFtwb+KmSt1/Mv1oeevqV2m//AA==");
                                                                callTC.setPropertyValue("assertId","_29c87fd8-c363-4c28-a0f5-6dd27dccc40a");
                                                                callTC.setPropertyValue("assertionUUID","_29c87fd8-c363-4c28-a0f5-6dd27dccc40a");
                                                                testProject.setPropertyValue("assertionUUID","_29c87fd8-c363-4c28-a0f5-6dd27dccc40a");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("assertionUserId","A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                log.info "Done setting the properties"
                                                                                                  
                                                } else if (userID == "schfau2") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_fab54b7f-b250-41ea-aa7b-0dd0af4f21ca");
                                                                callTC.setPropertyValue("assertionUUID","_fab54b7f-b250-41ea-aa7b-0dd0af4f21ca");
                                                                testProject.setPropertyValue("assertionUUID","_fab54b7f-b250-41ea-aa7b-0dd0af4f21ca");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223");
                                                                callTC.setPropertyValue("assertionUserId","AA908CE1AB0E23E7E0401F0A2222596223");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                
                                                } else if (userID == "SCHOrg1Full1") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                callTC.setPropertyValue("assertionUUID","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                testProject.setPropertyValue("assertionUUID","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:107006");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63");
                                                                callTC.setPropertyValue("assertionUserId","9A9CCCF13ABCD94FE0401F0A05992F63");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                 
                                                                                                
                                                } else if (userID == "jbaisakh") {
                                                	 /*callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_c3fd3cce-deb0-4ae0-9099-d6299df97db3");
                                                                callTC.setPropertyValue("assertionUUID","_c3fd3cce-deb0-4ae0-9099-d6299df97db3");
                                                                testProject.setPropertyValue("assertionUUID","_c3fd3cce-deb0-4ae0-9099-d6299df97db3");*/
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_368c2277-42a9-4cee-aa5c-8a5f6d8cf889");
                                                                callTC.setPropertyValue("assertionUUID","_368c2277-42a9-4cee-aa5c-8a5f6d8cf889");
                                                                testProject.setPropertyValue("assertionUUID","_368c2277-42a9-4cee-aa5c-8a5f6d8cf889");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionAccountId","A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserId","A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                } else {
                                                                log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
                                                                assert 1 == 2;
                                                }
                                                break;                            
                                case "0798":
                                      if (userID == "schfau1")
                                                {
												                                        callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_a50de6e4-c2c5-4169-83c0-5400256061e9");
                                                                callTC.setPropertyValue("assertionUUID","_a50de6e4-c2c5-4169-83c0-5400256061e9");
                                                                testProject.setPropertyValue("assertionUUID","_a50de6e4-c2c5-4169-83c0-5400256061e9");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("assertionUserId","A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                log.info "Done setting the properties"
                                                                                                  
                                                } else if (userID == "schfau2") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_5624dfb3-a541-4c78-ab79-033d200b06d1");
                                                                callTC.setPropertyValue("assertionUUID","_5624dfb3-a541-4c78-ab79-033d200b06d1");
                                                                testProject.setPropertyValue("assertionUUID","_5624dfb3-a541-4c78-ab79-033d200b06d1");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223");
                                                                callTC.setPropertyValue("assertionUserId","AA908CE1AB0E23E7E0401F0A2222596223");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                
                                                } else if (userID == "SCHOrg1Full1") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_750b84ee-7b1d-4eb2-af1f-7490b4523389");
                                                                callTC.setPropertyValue("assertionUUID","_750b84ee-7b1d-4eb2-af1f-7490b4523389");
                                                                testProject.setPropertyValue("assertionUUID","_750b84ee-7b1d-4eb2-af1f-7490b4523389");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:107006");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63");
                                                                callTC.setPropertyValue("assertionUserId","9A9CCCF13ABCD94FE0401F0A05992F63");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                 
                                                                                                
                                                } else if (userID == "jbaisakh") {
                                                                callTC.setPropertyValue("assert","nVdbc6pKE333V1jux5Th5g0rSdVwDSoqiNeXrxBGQLnJgKC//gwY3SY7e599voeUmaa7Z3X3YljzgszAp/sAIZikXhTWFeG18b8da5Lklm01WarFNFuMyTa3267dtGmr2+nY5JbpdRp1BaEMKiFKzTB9bdAkRTfJTpPsGhTVb7H9FvPca5GbRn0BE4RTY5dnslEvAj9E/Wrb10aWhP3IRB7qh2YAUT+1+jOgjvrYs2/eMDXeXq4oqw2TNzdN4z5BWM82tKDvW89WFBAvxCefFxv1Z54TmmmWwI89bfTa+IjN8/w5Z56jxCFokiQJkiWwj40850fjrXYLhrYS7qLrmjfDKPQs0/cuZglKhakb2XXgO1HipW7wm9QUQZFl6iYsrKZFtcIfDeLnBhW6v8z0CWSCzCZyTeqWTIc7mMDQgvW5rrw2fvzdBK+xRmKGaBclAfqy/m+QYHiCfhRDu4luld3Q/X3Gb9r19gKtvhJafoa8ExyXNIlNC6L6NIE7rxh5CJPPRvVq/PUC3RgGrf8ykhfiESeGTXzTGcFzIEr/n3k9zuqaZWH6GXxb7KTJjL0kmT89OS3QMonuYeF4yCbAawXh0fkK6j7qj/VXot559RGkF/s4XWp5MUBdO+nl55SMWOaoBeTGdGN5drlkHpUGw/lusjfgsFimMwqs0s2UnawmcWdDeQqvryNr07ksa8GhxYwX8/TpvbAvjGu3F3xg9raeuqHC7HhkFHJ/iJ3x+BDx6/fNINuzXcU4diiRW+0A67g6P+e083LKusWyxiwm80PLXRXDufjefZc9Unv9WdNjDWVdQ3iuiiz/X7VJVjBT877gy5Nih1/PFL6piiJkF54H55kDcoUDDv7bgzHnHI7uwZPZnOSApklA4Dl/L45UcJABNRc5V+UXC7XgL2DAOeMFDjRqwN9wqi7mQr4WFpr2LuauYcuL81b2s81FHKsAVcG8q4q6uBB0Q1RVEF1thSps5WKvztRc0dZCDScQxCK+2DKbQrnwLFppq7M2vZ61s81qge3SeRSMT1tD9FVelfnZUZ4pW0bQxAHQ10uLljIcexkFcVRbz7mHoEEM9wBKOYn3BBfVOOSqMafHgm5WNuOzTVXkgaqhnNeqquSamA8W88vPXvCcytuBWIgGmF57YRm8NCY3qwEyl+1Q1UEuOFXwUMztyQ2IqpF5jb/2aiTmuqjPx5KqK7kIKpsg5j7a0mN3K7sni9GKgQH2j4PhNXEphfh5qJ+sc/tYM2UJbIMFZTG6a3ltz1xFubPp5YK2HgyjjYLTjIEmcpwGMCASlKXh/nNgxC3ak9hjaQ+OdlIUQDepqVQ0PJwuBdnzmIkzHS/bwu7QncrelDFtl1B8i94zB6Ao0B5Srmba+prQhdC7dCbD+Qp6yfqSjtsa1fF67Zq+zOYrIfK79vtqPR8+FWtLMybT2Xw5vRTF+LjvXfz0fcK9J7OBKjiTMYRTZD0RpClxRk9o4zdkj/m000nYrgFH5QCQ944jepjA3Pv+SsJ3XRUxeYHK5zK/5OUZkOUnUeEETdtJLjW15EU2p8aqIto+btN5vdL92obnBDwp0lxu4jUtkRsD2FUyrSVKjjZvPw1WcKONfWORgjxe7EKKIuVYe9+puWOpJQNsJZ9x+C3iapkC5uYkHpDFcNEhqaNm+4MZC+ZMMaMPxcR1NueDszngoawfXp21AfyF8cAxBVNsWdMMUVdB7/q+FaoyZ3TfCop4G1iFYOCZVcGRwYm6pJHzQhDA8GpDBqALtL6Ie5UXq/gaKFQT0+K0XbloHY69iSFmmLTZA132W5r8V46VFKt95tiRBxr4yjHxyjER7I5PSk+gULvDx2iZO5wsHrXuYjRgY1JbjQ417kkinNTzW5OwlxvDpyV1zrvuXlsuWUVw+adwt3aZbcqR5sXS4ODQlT39IISdln9WR6rWnnuEfyb38JijUW2sUKHIpBeJYJPsiQs2XnC5MC16Hkxn2UmZm0NEnd3tccnm++l7hyAS+dy+dDcnTVpF1vr6Hfl6SN6N12OUeDxgP53AN+01y7Z7aKW3ZfkdVoS6hD+OZvpnHVdaPLu5q1z7cSkGUQrDtPFWRpUarp9hpefZffzlvK4BxZOi0GFJkaR6NC2JZIukJBKQXZZlhLZ4E3tXFF8g8lG488q9Sjl7/Vj/GaAV9LfQTGDS+EOmsk91JdSx+ohCBI3otdFpkz2KEnipJ9Acx3d6PGAwQLonteg2kLBCHkfpJJwkYJfC5EEh974qZB1aXuzBUkaXWgJhMYFS3ImjecpSn3o+mc8hzLDQTkqt26dbvTaBvCD2YYmXCCI78+Fz7MZVXwh0/aWbpoUqa9m3SuT8tryvz26dwD62VzqgshgO4inCb7Q+c6vkl4qZb+8Et/Qgs71Sy+C2polnXZF8fvSTJSU97hQpS7phvrt+NXxKS3yt6L6TffKsO9HvVyGspLHWersN5Gg+H5+z0ymrRtAtdWSC0xMUQdLEDFoZFoNnIzrAkLinIP5Kh99Rf9n5bv+ML0vdcJbilzjAhKlXy3+/hH2Kxi1IYZF+Z+N9fO0qN//jzczqW6UfNk/xTx4l9s/Of5PrYR8MuTyAvNApV6WAPv9mwFaE03r4EIqSx+TfJfhu88/Ge7/uWFJMjG2Wwt8/qZeny2vDtKwoC1NFaFSGxxOvwpmeY9j/6fRLmkrCftxJCvTbO8lKHc0sFwZm4+7r/btz06smb0EchbwKy2ujwNdrvHnoPJywHwC/PWQFSfrTIfu5krdfzL9aHnr6ldpv/wA=");
                                                                callTC.setPropertyValue("assertId","_f9a00b94-9143-43a9-bb7d-d2c766d0b386");
                                                                callTC.setPropertyValue("assertionUUID","_f9a00b94-9143-43a9-bb7d-d2c766d0b386");
                                                                testProject.setPropertyValue("assertionUUID","_f9a00b94-9143-43a9-bb7d-d2c766d0b386");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionAccountId","A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserId","A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                } else {
                                                                log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
                                                                assert 1 == 2;
                                                }
                                                break;
                                                
                                case "0701":  // Nodes with different roles other then Retailer/Retailer CS
                                case "0702":

									/* if (userID == "schfau1")
                                                
                                                {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                callTC.setPropertyValue("assertionUUID","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                testProject.setPropertyValue("assertionUUID","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("assertionUserId","A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                                         
                                                } elseif 
                                                 */   
                                                if (userID == "SCHOrg1Full1") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                callTC.setPropertyValue("assertionUUID","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                testProject.setPropertyValue("assertionUUID","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:107001");
                                                                callTC.setPropertyValue("assertionAccountId","107001");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:9D0EDCB4F1187DC8E0401F0A059975D3");
                                                                callTC.setPropertyValue("assertionUserId","9D0EDCB4F1187DC8E0401F0A059975D3");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                /*                                                
                                                } else if (userID == "jbaisakh") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                callTC.setPropertyValue("assertionUUID","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                testProject.setPropertyValue("assertionUUID","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionAccountId","A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserId","A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                */                callTC.setPropertyValue("useroid",useroid);
                                                } else {
                                                                log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
                                                                assert 1 == 2;
                                                }
                                                
                                                break;
                              default:
                                                log.info "ERROR - NodeID supplied is not configured!";
                                                assert 1 == 2;
                                              break;
                }

}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate SamlGetAssertionExpDate" id="1abf4b92-0b68-4a33-8785-16d81f3648e9">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

testCase.setPropertyValue("nodeid",callingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUUID",callingTCase.getPropertyValue("assertionUUID"));

               
def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;

nodeid = testCase.getPropertyValue("nodeid");
Uuid = testCase.getPropertyValue("assertionUUID");
rcSAMLuuid = myDbSaml.samlGetAssertionRowCount(Uuid,nodeid);
testCase.setPropertyValue("rcUUID",rcSAMLuuid.toString());

		if (rcSAMLuuid.toInteger() ==1){ 
			log.info "UUid : [$Uuid] Found, row count: $rcSAMLuuid";
			// check expiration date for the assertion	
			ValsamlExpDate = GetsamlExpDate(Uuid,nodeid);			
			ValSysDate = getSysDate();
			
				 if (CompareDates(ValsamlExpDate,ValSysDate).toString()=='true'){
			 		log.info  "SAML Assertion is Good !" 
			 		log.info "SAML Assertion Expiration Date till-[$ValsamlExpDate]";
			 		testCase.setPropertyValue("SAMLExpDate",ValsamlExpDate);
				 }
				 else{
				 	log.info "SAML Assertion is Expired."
				 	assert setSamlExpDate(Uuid.toString(),nodeid.toString(),4) == 1;	
				 	ValsamlRenwDate = GetsamlExpDate(Uuid,nodeid);
				 	SysDate = getSysDate();
				 	log.info "SAML Assertion Renewed till-[$ValsamlRenwDate]";
				 	assert CompareDates(ValsamlRenwDate,SysDate)== true;
				 	testCase.setPropertyValue("SAMLExpDate",ValsamlRenwDate);			 			 	
				 }
		
		}
		else{	
			log.info "UUid : [$Uuid] not Found, row count: $rcSAMLuuid";
			testCase.setPropertyValue("rcUUID",rcSAMLuuid.toString());	
			
		}


// Get SAML Expiration Date Mehtod
def GetsamlExpDate(String Uuid, String Nodeid){
def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;
ExpDate = myDbSaml.samlGetAssertionExpDate(Uuid ,nodeid);
samlExpDateXML = new XmlSlurper().parseText(ExpDate.toString());
samlExpDate = samlExpDateXML.toString();
return samlExpDate;
}


def getSysDate(){
	sysDate = new Date().format("yyyy-MM-dd hh:mm:ss.S");
	return sysDate;
}
	
def CompareDates( String SamlDate, String SysDate){
	
		def testSuiteamlDate = new Date().parse("yyyy-MM-dd hh:mm:ss.S",SamlDate.toString());
		def testSuiteysDate = new Date().parse("yyyy-MM-dd hh:mm:ss.S",SysDate.toString());

		log.info "SamlDateTime in Millisec:" + tSamlDate.getTime() + "- SysDateTime in Millisec:" + tSysDate.getTime();
		if (tSamlDate.getTime() >= tSysDate.getTime()){
		return true;
		}
	
}	

def setSamlExpDate( String Uuid, String Nodeid, int Years){
		def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;
		def rcsetSamlExpDate = myDbSaml.samlRenewAssertionYear(Uuid.toString(),Nodeid.toString(),Years.toInteger() );
		return rcsetSamlExpDate;
}

// Return SAML Assertion Validations 

callingTCase.setPropertyValue("SAMLExpDate",testCase.getPropertyValue("SAMLExpDate"));
callingTCase.setPropertyValue("rcUUID",testCase.getPropertyValue("rcUUID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_368c2277-42a9-4cee-aa5c-8a5f6d8cf889</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">222259</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-02-25 05:18:53.0</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10003 - RightsLockerDataGet_Download - Policy - ParentalControl:RatingPolicy - US - MPAA - G rating - Full User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsLockerDataGet_Download_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>jbaisakh</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get SAML Assertion - STS" searchProperties="true" id="bf97f894-69a7-440b-af8f-e20a28412d22">
      <con:settings/>
      <con:testStep type="groovy" name="Get SAML Assertion from STS" id="8efd8ec6-0a57-467b-9751-359429358f96">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

		testCase.setPropertyValue("nodetype",callingTCase.getPropertyValue("nodetype"));
		testCase.setPropertyValue("nodeid",callingTCase.getPropertyValue("nodeid"));
		testCase.setPropertyValue("username",callingTCase.getPropertyValue("username"));
		testCase.setPropertyValue("password",callingTCase.getPropertyValue("password"));
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype",callingTCase.getPropertyValue("tokentype"));
		testCase.setPropertyValue("loopuntil",callingTCase.getPropertyValue("loopuntil"));
		testCase.setPropertyValue("expectErrTypeSTS",callingTCase.getPropertyValue("expectErrTypeSTS"));
		testCase.setPropertyValue("expectErrTypeSTSGet",callingTCase.getPropertyValue("expectErrTypeSTSGet"));


def GetSTS = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authorization Information Extraction via STS")

GetSTS.setPropertyValue("tName",testCase.getName());
GetSTS.setPropertyValue("sName",testSuite.getName());

def runnerTC = GetSTS.run( null , false )

assert runnerTC.status == Status.FINISHED;


// Return Property Values to the Calling testcase

callingTCase.setPropertyValue("nodeid", testCase.getPropertyValue("nodeid"));
callingTCase.setPropertyValue("nodetype",testCase.getPropertyValue("nodetype"));
callingTCase.setPropertyValue("username",testCase.getPropertyValue("username"));
callingTCase.setPropertyValue("password",testCase.getPropertyValue("password"));
callingTCase.setPropertyValue("accountoid",testCase.getPropertyValue("accountoid"));
callingTCase.setPropertyValue("useroid",testCase.getPropertyValue("useroid"));
callingTCase.setPropertyValue("SAMLassertion",testCase.getPropertyValue("assert"));
callingTCase.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));
callingTCase.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));
callingTCase.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callingTCase.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callingTCase.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>jbaisakh</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10003 - RightsLockerDataGet_Download - Policy - ParentalControl:RatingPolicy - US - MPAA - G rating - Full User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsLockerDataGet_Download_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>assertCommon</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsLockerData Get Information" searchProperties="true" id="2cfd3a72-100c-4272-b79a-3cb2a189070d">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML" id="2a83263e-40c2-4a7e-858c-4f8e535b265c">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

//def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName("RightsLockerDataGet_DWQ").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
//callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="c10d0bb0-6601-4572-827e-ce700d572822">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));; 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
//def logFile = new File(projectPath +"\\" +testSuite.project.name +"\\"+ "\\soapUI-Logs-to-file.xls")
def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//logFile.write(testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders().ETag);
logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreation_with_Unique_MD_Details</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Metadata_Creation</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C7D2A2C8D973ED7E0401F0A05997B5C</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountNotActive">
      <Reason Language="en">The account is not active.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:F3A198D0565002CAE0401F0A05997450/RightsToken/List</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#AccountNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>375</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenlist</con:name>
          <con:value>[urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578]</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenObjlist</con:name>
          <con:value>[urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578:RightsTokenLocation]</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenLocation</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights Locker Data Validation" searchProperties="true" id="1745ea43-6777-4344-bb86-d7d3c6eb8113">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsLocker Data GET" id="9ceffcb0-3a63-4527-b914-357053e75479" disabled="true">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

RT_Data6 = mydbRights.rightstokenMDinfoGetRow(testCase.getPropertyValue("DBrightstokenid"));
log.info RT_Data6.toString();


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));


testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsLockerDataGet Response" disabled="true" id="bde1563b-809f-4315-bebf-0f1ed4c4f957">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();


def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();

RTObjType = testCase.getPropertyValue("RTObjType");


switch (RTObjType) {
	
	case "RightsTokenFull":

		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

	break;

	case "RightsTokenBasic":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

}

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken."$RTObjType".@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.Value).toString();

//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..actFFWeblocSize-1 ){
	
		actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..actFFManifestSize-1 ){
	
		actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Actual Rights Purchase Info
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;

// Assert RightsToken LockerId

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;

// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;

// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile == actRTG_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR == actRTG_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload == actRTG_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream == actRTG_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="RightsLockerDataGet  DB validation _BeforeSPrint3_5" id="f9d4de78-86a3-46bb-bae3-aca3a7a9d132" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();


def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();
	
	
	
log.info "Expected Return Object Type : [RightsTokenLocation]  - Actual Return Object Type is : [$RTObjType]"; //Updated by Aravind
assert RTObjType == 'RightsTokenLocation'; //	Updated by Aravind
	
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		log.info "Expected LockerId :" +expectRTG_Lockerid; //Updated by Aravind
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
	break;

}

// Actual RightsToken Data 

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[rtc].@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.size()!= 0){
		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.Value).toString();
		}
		
//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc.size();
 		
 		if(actLicAcqSize != 0){
 			for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc[i];
			}
 		}
// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.size();
	
		if (actFFWeblocSize != 0){
			for ( int i in 0..actFFWeblocSize-1 ){
			//actRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[i-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[i-1]).toString());
			actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Location[i]).toString();
			actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Preference[i]).toString();
			}
		}
actRTG_FFWebLoc_Location.sort();

// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.size();
	
		if(actFFManifestSize != 0) { 
			for ( int i in 0..actFFManifestSize-1 ){
	
			actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Location[i]).toString();
			actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Preference[i]).toString();
			}
		}
		actRTG_FFManifestLoc_Pref.sort();

// Actual Rights Purchase Info

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.size()!= 0){
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	
		}
		
actRTG_FFManifestLoc_Location.sort()
actRTG_FFManifestLoc_Pref.sort()
actRTG_FFWebLoc_Location.sort()
actRTG_FFWebLoc_Pref.sort()

if(processFlag.toString() == 'true'){

 	log.info "validating rights token"


// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}
	log.info "Sold As :" +AssertRTData['RtSoldAs']; //Updated By Aravind
	assert  AssertRTData['RtSoldAs']==null; // Updated By Aravind
	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile
	log.info "RightsToken Profiles: " +AssertRTData['RtProfile'] //Updated by Aravind
	assert AssertRTData['RtProfile']==null //Updated by Aravind
	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 
	log.info "RightsToken Status: " +AssertRTData['RtStatus']; //Updated by Aravind
	assert AssertRTData['RtStatus'] == null //Updated by Aravind
	
	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	log.info "RightsToken Purchase Info: "+AssertRTData['RtPinfo']; //Updated by Aravind
	assert AssertRTData['RtPinfo'] == null;  //Updated by Aravind

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	//log.info "RightsLockerId: "+AssertRTData['RtlockerID']; //Updated by Aravind
	//if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	//}
	 
	
 }
 else{
 	
	log.info  "Invalid Rightstoken Data ......[$DBrightstokenid]";
	
	if(RT_Data3.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	log.info "RightsLockerId :"+AssertRTData['RtlockerID']; //Updated by Aravind
	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	}
	
	if(RT_Data2.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}

// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
   }
   if(RT_Data2.toString().isEmpty()){
   	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}

//  Assert Rights PurchaseInfo Location

	assert AssertRTData['RtPinfo'] == 0; //No Purchase Info Should be returned for Download Query Request. - Aravind Updated

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
	}
if(RT_Data.toString().isEmpty()){

	log.info "RightsToken DB data is not avialable";
}			
}
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="RightsLockerDataGet  DB validation" id="0efc85d4-0e4f-4cdc-9a05-7d694a26074c">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();


def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
if !((rtc+1)>(RTCountSize -1))
	def DBrightstokenid2 = (Resp_RightsTokenID[rtc+1]).toString().tokenize(':').last(); //For Update/Create Date Order

	
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

// Fetch RightsToken info from RIGHTS_TOKEN table for the second RightsToken
if !((rtc+1)>(RTCountSize -1))
{
SECND_RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid2"));

testCase.setPropertyValue("SECND_DbResultRTXml",SECND_RT_Data.toString());
testCase.setPropertyValue("SECND_DbResultRT-SoldAsXml",SECND_RT_Data2.toString());
testCase.setPropertyValue("SECND_DbResultRT-PMPPXml",SECND_RT_Data3.toString());
testCase.setPropertyValue("SECND_DbResultRT-FFLocXml",SECND_RT_Data4.toString());
}

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
		if !((rtc+1)>(RTCountSize -1))
			SECND_Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();
	
	
	
log.info "Expected Return Object Type : [RightsTokenLocation]  - Actual Return Object Type is : [$RTObjType]"; //Updated by Aravind
assert RTObjType == 'RightsTokenLocation'; //	Updated by Aravind
	
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		log.info "Expected LockerId :" +expectRTG_Lockerid; //Updated by Aravind
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break;

}

//Comparing for the order of RightsToken Displayed.
		log.info "$[rtc] Rights TokenGet UPDATED DATE  : [$expectRTG_PS_UpdatedDate] - $[rtc+1] Rights TokenGet UPDATED DATE : [$SECND_expectRTG_PS_UpdatedDate]";
		log.info "$[rtc] Rights TokenGet CREATED DATE  : [$expectRTG_PS_CreationDate] - $[rtc+1] Rights TokenGet CREATED DATE : [$SECND_expectRTG_PS_CreationDate]";
		def date1=null;
		def date2=null;
		if (expectRTG_PS_UpdatedDate != null)
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_UpdatedDate);
		else
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_CreationDate);
		if !((rtc+1)>(RTCountSize -1))
		{
			if (SECND_expectRTG_PS_UpdatedDate != null)
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_UpdatedDate);
			else
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_CreationDate);
			
			assert date1.getTime() > date2.getTime();
		}

// Actual RightsToken Data 

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[rtc].@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.size()!= 0){
		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.Value).toString();
		}
		
//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc.size();
 		
 		if(actLicAcqSize != 0){
 			for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc[i];
			}
 		}
// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.size();
	
		if (actFFWeblocSize != 0){
			for ( int i in 0..actFFWeblocSize-1 ){
			//actRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[i-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[i-1]).toString());
			actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Location[i]).toString();
			actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Preference[i]).toString();
			}
		}
actRTG_FFWebLoc_Location.sort();

// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.size();
	
		if(actFFManifestSize != 0) { 
			for ( int i in 0..actFFManifestSize-1 ){
	
			actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Location[i]).toString();
			actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Preference[i]).toString();
			}
		}
		actRTG_FFManifestLoc_Pref.sort();

// Actual Rights Purchase Info

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.size()!= 0){
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	
		}
		
actRTG_FFManifestLoc_Location.sort()
actRTG_FFManifestLoc_Pref.sort()
actRTG_FFWebLoc_Location.sort()
actRTG_FFWebLoc_Pref.sort()

if(processFlag.toString() == 'true'){

 	log.info "validating rights token"


// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}
	log.info "Sold As :" +AssertRTData['RtSoldAs']; //Updated By Aravind
	assert  AssertRTData['RtSoldAs']==null; // Updated By Aravind
	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile
	log.info "RightsToken Profiles: " +AssertRTData['RtProfile'] //Updated by Aravind
	assert AssertRTData['RtProfile']==null //Updated by Aravind
	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 
	log.info "RightsToken Status: " +AssertRTData['RtStatus']; //Updated by Aravind
	assert AssertRTData['RtStatus'] == null //Updated by Aravind
	
	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	log.info "RightsToken Purchase Info: "+AssertRTData['RtPinfo']; //Updated by Aravind
	assert AssertRTData['RtPinfo'] == null;  //Updated by Aravind

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	//log.info "RightsLockerId: "+AssertRTData['RtlockerID']; //Updated by Aravind
	//if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	//}
	 
	
 }
 else{
 	
	log.info  "Invalid Rightstoken Data ......[$DBrightstokenid]";
	
	if(RT_Data3.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	log.info "RightsLockerId :"+AssertRTData['RtlockerID']; //Updated by Aravind
	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	}
	
	if(RT_Data2.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}

// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
   }
   if(RT_Data2.toString().isEmpty()){
   	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}

//  Assert Rights PurchaseInfo Location

	assert AssertRTData['RtPinfo'] == 0; //No Purchase Info Should be returned for Download Query Request. - Aravind Updated

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
	}
if(RT_Data.toString().isEmpty()){

	log.info "RightsToken DB data is not avialable";
}			
}
}
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10032_RightsLockerDataGet_RTL_FUNC_byDownloadQuery_with_ValidData_Pending_User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsLockerDataGet_byDownLoad_Query_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:DBA259483F4B1642E0401F0A0599380F</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:DBA250BE54FF1132E0401F0A059925DF</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>DBA259483F4B1642E0401F0A0599380F</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>DBA250BE55001132E0401F0A059925DF</ACCOUNT_OID>
      <USER_OID>067F70858BA6370348AD9BF029948186</USER_OID>
      <RIGHTS_LOCKER_OID>DBA250BE55071132E0401F0A059925DF</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>DBA250BE54FF1132E0401F0A059925DF</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>transcation</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>null</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>DBA2502216E4A4D2E0401F0A2222597A0A</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2013-05-01 05:26:30.826</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList FilterMoreAvailable="false" FilterCount="1" FilterOffset="0" FilterEntryPoint="0" FilterClass="urn:dece:type:viewfilter:title" AccountID="urn:dece:accountid:org:dece:DBA250BE54FF1132E0401F0A059925DF" RightsLockerID="urn:dece:rightslockerid:org:dece:DBA250BE55071132E0401F0A059925DF" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:DBA259483F4B1642E0401F0A0599380F">
      <RightsTokenLocation ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt">
         <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
         <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/aaa</Location>
            <Preference>1</Preference>
         </FulfillmentWebLoc>
         <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/bbb</Location>
            <Preference>1</Preference>
         </FulfillmentWebLoc>
         <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/ccc</Location>
            <Preference>1</Preference>
         </FulfillmentManifestLoc>
         <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/ddd</Location>
            <Preference>3</Preference>
         </FulfillmentManifestLoc>
      </RightsTokenLocation>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT_StatusHistoryXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>DBA259483F531642E0401F0A0599380F</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2013-05-01 05:26:30.768</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASE_PROFILE_OID>DBA259483F501642E0401F0A0599380F</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>pd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-05-01 05:26:30.768</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASE_PROFILE_OID>DBA259483F511642E0401F0A0599380F</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-05-01 05:26:30.768</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASE_PROFILE_OID>DBA259483F521642E0401F0A0599380F</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>hd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-05-01 05:26:30.768</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>DBA259483F4F1642E0401F0A0599380F</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-05-01 05:26:30.768</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>DBA259483F4D1642E0401F0A0599380F</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-05-01 05:26:30.768</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>DBA259483F4C1642E0401F0A0599380F</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-05-01 05:26:30.768</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>DBA259483F4E1642E0401F0A0599380F</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>DBA259483F4B1642E0401F0A0599380F</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2013-05-01 05:26:30.768</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      <con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:CB65DD1FD6B01423E0401F0A2222593A4E</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:CB65DD1FD6BE1423E0401F0A2222593A4E</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>DbResultRT-StatusHistoryXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>CB65D8F790208E47E0401F0A2222593A52</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>CB65D8F790178E47E0401F0A2222593A52</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>RightsToken has been created.</DESCRIPTION>
      <CREATED_DATE>2012-10-06 14:34:27.83</CREATED_DATE>
      <CREATED_BY_NODE_OID>222259</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>CB65DD1FD6C31423E0401F0A2222593A4E</CREATED_BY_USER_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Response Validation" searchProperties="true" id="88206053-812b-47d9-a470-003400480144">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="b4724897-4699-4f51-8ced-d141ea95e1fc">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsLockerData Get Information").getPropertyValue("RTObjType");

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName("RightsLockerDataGet_DWQ").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName("RightsLockerDataGet_DWQ").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreation_with_Unique_MD_Details</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Metadata_Creation</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:EBAE2E3E49AAF1D0E0401F0A0799334A</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:F3A198D0565002CAE0401F0A05997450</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList AccountID="urn:dece:accountid:org:dece:107006" RightsLockerID="urn:dece:rightslockerid:org:dece:7001" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken>
      <RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9CC1FA6E91E304A7E0401F0A0599277F">
         <RightsLockerID>urn:dece:rightslockerid:org:dece:7001</RightsLockerID>
         <RightsTokenData ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
            <SoldAs>
               <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
               <ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ContentID>
            </SoldAs>
            <RightsProfiles>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
            </RightsProfiles>
            <ResourceStatus>
               <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-21T01:42:39.004Z">
                  <Value>urn:dece:type:status:active</Value>
               </Current>
            </ResourceStatus>
            <LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</LicenseAcqBaseLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/aaa</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/bbb</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ccc</Location>
               <Preference>3</Preference>
            </FulfillmentManifestLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ddd</Location>
               <Preference>1</Preference>
            </FulfillmentManifestLoc>
            <PurchaseInfo>
               <NodeID>urn:dece:org:org:dece:222259</NodeID>
               <RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</RetailerTransaction>
               <PurchaseAccount>urn:dece:accountid:org:dece:107006</PurchaseAccount>
               <PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</PurchaseUser>
               <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
            </PurchaseInfo>
         </RightsTokenData>
      </RightsTokenFull>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>QAerrorID</con:name>
          <con:value>null</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request" searchProperties="true" id="c058b53d-bc5b-4e24-b166-a12b047227d8">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="9d150558-3221-49aa-8cd2-6be92b83a8a2">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsLockerDataGet_DWQ").testRequest.setRequestHeaders(headers);


// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="8b321210-bd04-4610-a8a6-808fa7d6bf83">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_DWQ");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsLockerDataGet_DWQ" id="93084f5d-7048-4a6e-9934-ad96b7a0ed27">
        <con:settings/>
        <con:config service="RightsLockerDataGet_DownLoad_Query" methodName="RightsLockerDataGet_DWQ" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=download" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsLockerDataGet_DWQ" mediaType="application/xml" accept="application/xml" sslKeystore="RET_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVZtU+o6EP7ur+jUj3dK0zehHWGmtnLFA4qA3nPOFyemAaJtWpq0gr/+JsUiIHo5d4YZJtvN7rMveXbPGUxi0/MZwzknKVV6YVt9BE7ktizkaiaaPmm22zS1ltFqalELWKbRnLqm7ahKj7EC9yjjkPK2agLD1oClAXNi2J515tlOAxjWb1V5wDkTpoVKA6jKMokp8yq3bbXIqZdCRphHYYKZx5E39gd9T2h6sMakds7XKCuHeWfOeebpOmpEGOE4Rg2UJvq5vqNzHjFvTGYU8iLH7z4j1lbf776+vjZerUaaz3QTAKADVxc6ESOzU7VzUl/GUY9O0/U5gDSlBMGYvEEJaoD5PI0UP56lOeHz5AvThm4AaVrDS6Qhw6anqv7hoEJ3pKUdkDmDGptDozY2wlOcY4qwcj/qtdXT4yq4vjvJIWXTNE/Y3vnPIGFa4jjNcKSxOrIa3fEWD6Src46R16MoLhgp8Y1skwwizJRhjqdk2SdMNF/ElKr8ypKJH6m7DKM/Kcu5vo1VQNcPZCckM8z4/6nZdr3WVh5gXODO9GZgJ07+e+EuHPQ2n2Xz4R0E965dgHYFYVt5DWpT7vfzfrNueuv90lt/HvYuVuFk4Rpkhfxu1C3L/uCflvvrZ2+RPbw4jC6KIIA++ostR7T5sjCKUbgaXl0lV0k4MDI7aGXja+vhLjj54f/9NMl+rOhzUFxDRF34fOeUF+ZlPgP3SyO/bo1+DbFzXU777IWfPQfLwF5gfgtLy3xCZn94X76g4ZLfLiYXJ5Obkk2vXgnJby+is8W1ZczaHzFtx7ArrClhXDw9Y8Tro2yPXqh0Rb0g/55epIRE2rRS9TLJUYxjytWOvCWpxSsEAZHIE8Vcn7uWb7it0G85vmMA078ENjC6wAeO6zZt+7LmoDWKPYhBSqdE+pIsu+6f7wGixGOYRjjXyrRAc8zUbyyGkEOlR0ficaSU4UkqWLwbBMC9tIFtdMNWaJqBA9ymFV5e+IFl+W5TVW5Sfktvc3/Kcb7L4M0dBh9hRDKCJc3LPmei0RkXKVnAsuCx0Shhg+JCDIJccrFn2i1HZyTJYiwB60kaFTFuZPOsSpDO1v+mBhGrpKPLSfX+vgxv/1udCaETEanAZCwXWFQTHxhFVh3IlwGbYDvg2rxfREQ+M5FWnhO0RrL76aNbZJtsWkVE9BiMH40a90b96Oufb+rfgNL387FxFJVky209U8WYECTSqau5gI1FoyjLoqpfUxJkLszrhg6a+hijQrDcapK+YKpvTOhHDZkN6j3PG/kuvoLP6ZhDjhPRbUp1PGLDGGMmN4yeeC3LY9eXHZcibxwv+SFZEItFRCL+dldBHpJ6QjwUf69pHn2U64CtLT8iTrFWcEJn8iTHyeqLpkCpMEsE/6X5tvFDBg453xVukrzBwkU3PRUcf/1FkcTWViFCaUF5L1QrwTbZVjj5KsPeh9InMxWhv0/oJftyQv8c9MeC9hKobnTJfytrpGoXhFW5CFRY2upSLJzCOZ1tkfs7wAP8DpwzBwAz2ON3B2wSuBNJ55P4s2Qrp/vvofMv" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="AccountID" value="${#TestCase#encodedAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreation_with_Unique_MD_Details</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Metadata_Creation</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:F3A198D0565002CAE0401F0A05997450</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:F3A198D0565002CAE0401F0A05997450</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Node Statuses" searchProperties="true" id="298e4dea-1ba6-4fd0-8ee0-8c0097bb79e3">
      <con:settings/>
      <con:testStep type="groovy" name="Get Node Statuses for RTLG" id="bb2aec88-5ffc-4629-ae25-7c7a6d74259e">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;
NodeStatusXML = myDb.SelectFromDB("select Status from NODE_STATUS where Status != 'active'","LP1");

log.info NodeStatusXML.toString();

testCase.setPropertyValue("NodeStatusXML",NodeStatusXML.toString());
callingTCase.setPropertyValue("NodeStatusXML",testCase.getPropertyValue("NodeStatusXML"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Statuses for RTLG" id="966b71aa-f69c-4534-a426-4090ad99b83f">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

log.info CallingTCase.getName();
//log.info CallingTCase.getPropertyValue("nodeid");

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("NodeStatus",CallingTCase.getPropertyValue("NodeStatus"));

nodeid = testCase.getPropertyValue("nodeid");
NodeStatus = testCase.getPropertyValue("NodeStatus");

myNode.nodeSetStatus(nodeid ,NodeStatus);

Upd_NodeStatus = myNode.nodeGetStatus(nodeid);

testCase.setPropertyValue("NodeStatus",Upd_NodeStatus);

CallingTCase.setPropertyValue("NodeStatus",testCase.getPropertyValue("NodeStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>NodeStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10004_RightsLockerDataGet_RTL_FUNC_byDownloadQuery_with_Inactive_NodeID</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsLockerDataGet_byDownLoad_Query_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value>active</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsError Validation" searchProperties="true" id="774db726-7490-4208-b3f8-850ad4c4a796">
      <con:settings/>
      <con:testStep type="groovy" name="Validate Rights Errors" id="a8a1d1fc-1527-4976-8116-7601370f3874">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbErrors;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RightsErrors = new dbErrors(log,testProject.getPropertyValue("targetDECEDB"));;


def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
def errId = CallingTCase.getPropertyValue("QAerrorID");
log.info errId;
/*
log.info errId.tokenize(':').last();
if(errId.contains('Policy'))
{
	log.info 'Policy:' + errId.tokenize(':').last();
	ErrorID = 'Policy:' + errId.tokenize(':').last();
}
else
{
	log.info errId.tokenize(':').last();
	ErrorID = errId.tokenize(':').last();
}
*/
def xmlData = "";

try {
			 xmlData = RightsErrors.errGetIdInfo(errId.toString());
                log.info xmlData;
                
                assert xmlData.trim().length() > 1;

                def myXML = new XmlSlurper().parseText(xmlData);
                

                log.info myXML.ResultSet.Row.size();
                testCase.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
                testCase.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
                testCase.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

                /*
                *  The DB does not contain the complete HTTP status
                *  string, only the code.  Thus, we must adjust.
                */
                switch (testCase.getPropertyValue("errorStatusCode")) {
                                case "400":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
                                                break;
                                case "403":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
                                                break;
                                case "404":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
                                                break;
                                case "409":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
                                                break;
                }
}
catch (Throwable e) {
                log.info "STEP FAILURE! --- " + e;
                
}


CallingTCase.setPropertyValue("errorStatusCode",testCase.getPropertyValue("errorStatusCode"));
CallingTCase.setPropertyValue("errorReason",testCase.getPropertyValue("errorReason"));
CallingTCase.setPropertyValue("errorID",testCase.getPropertyValue("errorID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsLockerDataGet Response Validation without DST</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Account Status" searchProperties="true" id="dea325fa-7bee-429c-b85f-647356ebbc34">
      <con:settings/>
      <con:testStep type="groovy" name="Get Account Status for RTLG" id="cb8f538c-89a6-45ac-9749-1e3860cefeed">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

//AccountID = callingTCase.getPropertyValue("accountoid");

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;

SqlStr = callingTCase.getPropertyValue("SqlStr");

log.info SqlStr;

AccountStatusXML = myDb.SelectFromDB(SqlStr, "LP1");

log.info AccountStatusXML.toString();

testCase.setPropertyValue("AccountStatusXML",AccountStatusXML.toString());
callingTCase.setPropertyValue("AccountStatusXML",testCase.getPropertyValue("AccountStatusXML"));

AccXML = new XmlSlurper().parseText(AccountStatusXML.toString());

AccountStatus = AccXML.ResultSet.Row.STATUS

testCase.setPropertyValue("AccountStatus",AccountStatus.toString());
callingTCase.setPropertyValue("AccountStatus",testCase.getPropertyValue("AccountStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Account Status for RTLG" id="53c2958f-d300-4735-9781-1dbac7c0c9d2">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

log.info callingTCase.getPropertyValue("accountoid");

AccountID = callingTCase.getPropertyValue("accountoid");


//testCase.setPropertyValue("AccountID",AccountID);

AccountStatus = callingTCase.getPropertyValue("AccountStatus");

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myAccount.accountSetStatus(AccountID.toString(),AccountStatus.toString());

log.info AccountStatus.toString();

testCase.setPropertyValue("AccountStatus",AccountStatus.toString());
callingTCase.setPropertyValue("AccountStatus",testCase.getPropertyValue("AccountStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10007_RightsLockerDataGet_RTL_FUNC_byDownloadQuery_with_Account_Status_Inactive</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsLockerDataGet_byDownLoad_Query_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set User Status" searchProperties="true" id="11686018-53c8-4cc2-8ce6-0bff6be1a1b7">
      <con:settings/>
      <con:testStep type="groovy" name="Get User Status for RTLG" id="4eb54f8a-e6dd-4ab4-9a46-9c0ab698519d">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

USerID = callingTCase.getPropertyValue("useroid");
myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myUser.userGetStatus(USerID);

log.info UserStatus.toString();

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;

SqlStr = callingTCase.getPropertyValue("SqlStr");

UserStatusXML = myDb.SelectFromDB(SqlStr,"LP1");

log.info UserStatusXML.toString();

testCase.setPropertyValue("UserStatusXML",UserStatusXML.toString());
callingTCase.setPropertyValue("UserStatusXML",testCase.getPropertyValue("UserStatusXML"));

testCase.setPropertyValue("UserStatus",UserStatus.toString());
callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set User Status for RTLG" id="8a09b14d-78d3-40ad-838c-e8a50fd8123f">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();



USerID = callingTCase.getPropertyValue("useroid");
testCase.setPropertyValue("UserOid",USerID.toString());

UserSetStatus = callingTCase.getPropertyValue("UserStatus");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myUser.userSetStatus(USerID.toString(),UserSetStatus.toString());

log.info UserStatus.toString();

testCase.setPropertyValue("UserStatus",UserStatus.toString());
callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10032_RightsLockerDataGet_RTL_FUNC_byDownloadQuery_with_ValidData_Pending_User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsLockerDataGet_byDownLoad_Query_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>UserOid</con:name>
          <con:value>067F70858BA6370348AD9BF029948186</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Node Role" searchProperties="true" id="14852c35-795c-4832-b84b-36aeaf71f750">
      <con:settings/>
      <con:testStep type="groovy" name="Set Node Role for RTG" id="1e532f5f-a7f0-4114-9d97-57c81b1a8878">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

testCase.setPropertyValue("nodeid", callingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("NodeRole", callingTCase.getPropertyValue("NodeRole"));

myDbNode = new dbUtils.dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

nodeid = testCase.getPropertyValue("nodeid");
NodeRole = testCase.getPropertyValue("NodeRole");

rcNode = myDbNode.nodeSetRole(nodeid,NodeRole);

log.info  testCase.getPropertyValue("NodeRole") + " has been NodeRole Updated" ;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Node Role for RTG" id="9655f16d-864b-4e92-886d-bf880750c1ff">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

myDbNode = new dbUtils.dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

testCase.setPropertyValue("nodeid", callingTCase.getPropertyValue("nodeid"));

nodeid = testCase.getPropertyValue("nodeid");

NodeRole = myDbNode.nodeGetRole(nodeid);

log.info "NODE Role : " + NodeRole.toString();

testCase.setPropertyValue("NodeRole",NodeRole.toString());
callingTCase.setPropertyValue("NodeRole",testCase.getPropertyValue("NodeRole"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreation_with_Unique_MD_Details</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Metadata_Creation</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
  <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreateRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="78d73fd9-423e-488b-b037-b49228694f5a">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="782efd56-506b-4c52-b8a6-184d5f1dd886">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("assert"));


testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="0bb3eeb3-3328-46bd-ac11-938e8ae24510">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreate Request POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenCreate Request POST" id="9f937e7c-d8eb-44d3-b79d-b1e1483af7df">
        <con:settings/>
        <con:config service="RightsTokenCreate" methodName="Method 1" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenCreate Request POST" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVZbU+JKEH7fX5GKj1bIlYspoCoEXHFBXW4efbGGSQPjSSYxM0Hw1+9MMAiIHvZUWVLT6en++jJfd52hKLRcjzFIOYmp0m031CeEKmBMy1irVdBMc2q1ilZDIP4BKls1MOxpxVSVLmMZdCnjiPKGahmmoxllzboYmZbr2K5VK1mO8agqE0iZMC1USoaqrKKQMjd321CzlLoxYoS5FEXAXI7dodfvuULTRQUmtVnfoMwdps0F54mr67gUAIYwxCUcR3pd39OpB8wdkjlFPEvh3WfAGur73dfX19KrXYrTuW4ZhqEbF7rQCRiZn6nNH8VlCLp0Fm/OPqIxJRiF5A1JUH3gizhQvHAep4Qvoi9Mm7ppSNMarLCGTYeeqfqHgxzdiZb2QKYMaWyBzMLYAGaQAsWgjAfdhnp2WgU3d0cpomwWpxE7OP8dJKBLCOMEAo0VkRXoTrd4JF3NOmC3S3GYMbKEG9kmCcLAlLsUZmTVI0w0X8CUvPzKiok/UnQZ4L8pS13fxSqg60ey0yZzYPz/1Gy3XhsrExRm0HxMy3xmPF+3ba8/vnl8GOGHsbXkb8aCNXIIu8obUNtyv58Pm3XbW++XHpNR66f5i/Zr9nll5PdMbjk3Rt+5b7WQDrpZnfR++/OJ06HYCirnvfNgEiymNLmdzvDomq5N7+L6sVNtv7XG+EdCrHlrfHcV/bz0F8+/OzQB32Qrwuy3Aazt+7ur8dqLLsbZuV5dX/Pz+062Wsysqe9NXvjAuPKer69WSXV+Y/3q/Si3HqJl962SzpPMuZ/2r+3XxkdMuzHsCwtKGGbTZ8C8OMr26LaVS1EvxL+nFykhgTbLVd1EchTjQLnalLcktbiZICASuKKYm/OlV/OcilOpOrZZ9j2nYziGeWl4Rvniwm5XywUHbVAcQPRjOiPSl2TZTf98DxBHLgMaQKot4wwvgKnfWGwjjpQuHYjHEVMGo1iweNsW8KyaKYEaRsXyHd9vG7ZndCoV67LVVpWbmN/S29SbcUj3Gby8x+ADwCQhIGle9jkTjc64SMkLWmY8NEtLVKKQiUGQSi52LadW1hmJkhAkYD2KgyyEUrJI8gTpbPNraQizXDrojPL392V4h9+KTAidgEgFJmNpgagmHBlFZhHI1wHXdgMuzHtZQOQzE2nlKcEbJPufPrpFtsm2VURET/7wySxwb9VPvv75pv4NKP0wH1tHwZLsuC1mqhgTgkSaRTVfUOmllC2XWV6/qiTIVJjXTd2o6kPAmWC59Sj+F6i+NaGfNGS2qA88b+X7+DK+oEOOOESi25T8eMKGMQQmN4yueC2rU9eXPZcibxxW/JjMD8UiIhF/u6tgF0s9Ib4TP69xGnyU64itHT8iTrFWcELn8iTHyfqLpsCxMEsE/8XprvFjBo453xduk7zFwkU3TTMOX39RJLE1VIRxnFHelQQiBLtkm+Pk6wTcD6VPZnJCf5/QK/blhP6n3xsK2ouQutUl/62skbxdMKhyEcixNNSVWDiFczrfIfd3gEf43SkLfm/5nn/A79VtAvciaX4Sf5bs5PTwPTT/AA==" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:request>
            <con:assertion type="GroovyScriptAssertion" id="1120a36c-30e5-4a97-8d6a-512d7c593aa2">
              <con:configuration>
                <scriptText>// check for the HTTP Response code 
log.info  messageExchange.responseHeaders["#status#"]</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="AccountID" value="${#TestCase#encodedAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Exact RightsToken Request XML" id="1451d7cd-e449-45fa-81de-7f2e2f731920"><con:settings/><con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="13b54146-b12d-4c74-99d3-461192bd6988"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");
def RightsResLocation = RightsResHeader.getAt("Location");
log.info RightsResHttpStatus[0];
log.info RightsResLocation;

log.info "Response Time : $RightsResTime:ms";

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

if(RightsResHttpStatus[0] == "HTTP/1.1 201 Created")
{
def RTKLoc = RightsResLocation[0].tokenize('/')
log.info RTKLoc[RTKLoc.indexOf("RightsToken").next()];
testCase.setPropertyValue("rightstokenid",RTKLoc[RTKLoc.indexOf("RightsToken").next()] );

def decodedRTKLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("RightsToken").next()],"UTF-8");
log.info "decodedRTKLoc=="+decodedRTKLoc;

testCase.setPropertyValue("rightstokenid",decodedRTKLoc);

log.info RTKLoc[RTKLoc.indexOf("Account").next()];
def decodedAccountIDLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("Account").next()],"UTF-8");
log.info "decodedAccountIDLoc=="+decodedAccountIDLoc;
testCase.setPropertyValue("Accountid",decodedAccountIDLoc);

//log.info RTKLoc[RTKLoc.indexOf("Account").next()];
//testCase.setPropertyValue("Accountid",RTKLoc[RTKLoc.indexOf("Account").next()]);
//com.eviware.soapui.support.UISupport.showInfoMessage("RightsToken has been Created"); 
}
else{
log.info " RightsToken Create failed - [ " + RightsResHttpStatus[0] + " ]"
}
// Returns Rights token , Account id
testCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("rightstokenid").tokenize(':').last());
callingTCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
callingTCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
log.info testCase.getPropertyValue("DBrightstokenid");
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));</script></con:config></con:testStep><con:tearDownScript><![CDATA[def RightsTCLogs;
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\RightsLog\\RightsTClogFile.txt");

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
   	   def rawRequest = new String( r.rawRequestData );   		     	

   	    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
       	"TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
        	" ###################" + "\n\n" ;
   }
    else
   {	
   	 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
   	  " ###################" + "\n\n";	
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
//RightsTClogFile << RightsTCLogs;
}]]></con:tearDownScript>
      <con:properties>
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_652833.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_652833.txt</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property>
        
        
        
        <con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value></con:property>
        
        
        
        
        
        
        
        
        <con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value>nVZbU+JKEH7fX5GKj1bIlYspoCoEXHFBXW4efbGGSQPjSSYxM0Hw1+9MMAiIHvZUWVLT6en++jJfd52hKLRcjzFIOYmp0m031CeEKmBMy1irVdBMc2q1ilZDIP4BKls1MOxpxVSVLmMZdCnjiPKGahmmoxllzboYmZbr2K5VK1mO8agqE0iZMC1USoaqrKKQMjd321CzlLoxYoS5FEXAXI7dodfvuULTRQUmtVnfoMwdps0F54mr67gUAIYwxCUcR3pd39OpB8wdkjlFPEvh3WfAGur73dfX19KrXYrTuW4ZhqEbF7rQCRiZn6nNH8VlCLp0Fm/OPqIxJRiF5A1JUH3gizhQvHAep4Qvoi9Mm7ppSNMarLCGTYeeqfqHgxzdiZb2QKYMaWyBzMLYAGaQAsWgjAfdhnp2WgU3d0cpomwWpxE7OP8dJKBLCOMEAo0VkRXoTrd4JF3NOmC3S3GYMbKEG9kmCcLAlLsUZmTVI0w0X8CUvPzKiok/UnQZ4L8pS13fxSqg60ey0yZzYPz/1Gy3XhsrExRm0HxMy3xmPF+3ba8/vnl8GOGHsbXkb8aCNXIIu8obUNtyv58Pm3XbW++XHpNR66f5i/Zr9nll5PdMbjk3Rt+5b7WQDrpZnfR++/OJ06HYCirnvfNgEiymNLmdzvDomq5N7+L6sVNtv7XG+EdCrHlrfHcV/bz0F8+/OzQB32Qrwuy3Aazt+7ur8dqLLsbZuV5dX/Pz+062Wsysqe9NXvjAuPKer69WSXV+Y/3q/Si3HqJl962SzpPMuZ/2r+3XxkdMuzHsCwtKGGbTZ8C8OMr26LaVS1EvxL+nFykhgTbLVd1EchTjQLnalLcktbiZICASuKKYm/OlV/OcilOpOrZZ9j2nYziGeWl4Rvniwm5XywUHbVAcQPRjOiPSl2TZTf98DxBHLgMaQKot4wwvgKnfWGwjjpQuHYjHEVMGo1iweNsW8KyaKYEaRsXyHd9vG7ZndCoV67LVVpWbmN/S29SbcUj3Gby8x+ADwCQhIGle9jkTjc64SMkLWmY8NEtLVKKQiUGQSi52LadW1hmJkhAkYD2KgyyEUrJI8gTpbPNraQizXDrojPL392V4h9+KTAidgEgFJmNpgagmHBlFZhHI1wHXdgMuzHtZQOQzE2nlKcEbJPufPrpFtsm2VURET/7wySxwb9VPvv75pv4NKP0wH1tHwZLsuC1mqhgTgkSaRTVfUOmllC2XWV6/qiTIVJjXTd2o6kPAmWC59Sj+F6i+NaGfNGS2qA88b+X7+DK+oEOOOESi25T8eMKGMQQmN4yueC2rU9eXPZcibxxW/JjMD8UiIhF/u6tgF0s9Ib4TP69xGnyU64itHT8iTrFWcELn8iTHyfqLpsCxMEsE/8XprvFjBo453xduk7zFwkU3TTMOX39RJLE1VIRxnFHelQQiBLtkm+Pk6wTcD6VPZnJCf5/QK/blhP6n3xsK2ouQutUl/62skbxdMKhyEcixNNSVWDiFczrfIfd3gEf43SkLfm/5nn/A79VtAvciaX4Sf5bs5PTwPTT/AA==</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
      <con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_652833.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>title_2</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>RightsTokenCreation_with_Unique_MD_Details</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Metadata_Creation</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/06/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_652833.txt" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_652833.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">title_2</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_652833.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:UserNotActive">
      <Reason Language="en">The member is not active.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77/RightsToken</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#UserNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>132</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:EBAE2E3E49AAF1D0E0401F0A0799334A</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>EBAE2E3E49AAF1D0E0401F0A0799334A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Get Information" searchProperties="true" id="fcc99625-532c-43c5-b71f-bb2510277043">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenGet Response" id="c5704f39-f4c6-4454-89e3-29d5436216c0">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def Resp_RightTokenObj = Val_RightsResXml.children().collect{ it[0].name()};
testCase.setPropertyValue("RTObjType", Resp_RightTokenObj[0]);
log.info Resp_RightTokenObj[0];

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus[0] == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
}
else{
log.info " RightsToken Get failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
callingTCase.setPropertyValue("RTObjType",testCase.getPropertyValue("RTObjType"));



</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:UserNotActive">
      <Reason Language="en">The identified user is not active.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn:dece:accountid:org:dece:C5426124F9CE4642E0401F0A05995BDD/RightsToken/urn:dece:rightstokenid:org:dece:C543C91485F63E3DE0401F0A059920A4</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#UserNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2582</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsToken-Generation</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Error</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Create Information" searchProperties="true" id="4ddf4928-683a-46c9-9b46-5218a647b1fa">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML" id="79606feb-fbad-4e2c-9c08-7559bd5646f8">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="448fcef0-6bbd-456c-8b0f-3e6d38666328">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");
def RightsResLocation = RightsResHeader.getAt("Location");
log.info RightsResHttpStatus[0];
log.info RightsResLocation;

log.info "Response Time : $RightsResTime:ms";

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

if(RightsResHttpStatus[0] == "HTTP/1.1 201 Created")
{
def RTKLoc = RightsResLocation[0].tokenize('/')
log.info RTKLoc[RTKLoc.indexOf("RightsToken").next()];
testCase.setPropertyValue("rightstokenid",RTKLoc[RTKLoc.indexOf("RightsToken").next()] );

def decodedRTKLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("RightsToken").next()],"UTF-8");
log.info "decodedRTKLoc=="+decodedRTKLoc;

testCase.setPropertyValue("rightstokenid",decodedRTKLoc);

log.info RTKLoc[RTKLoc.indexOf("Account").next()];
def decodedAccountIDLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("Account").next()],"UTF-8");
log.info "decodedAccountIDLoc=="+decodedAccountIDLoc;
testCase.setPropertyValue("Accountid",decodedAccountIDLoc);

//log.info RTKLoc[RTKLoc.indexOf("Account").next()];
//testCase.setPropertyValue("Accountid",RTKLoc[RTKLoc.indexOf("Account").next()]);
//com.eviware.soapui.support.UISupport.showInfoMessage("RightsToken has been Created"); 
}
else{
log.info " RightsToken Create failed - [ " + RightsResHttpStatus[0] + " ]"
}
// Returns Rights token , Account id
testCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("rightstokenid").tokenize(':').last());
callingTCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
callingTCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
log.info testCase.getPropertyValue("DBrightstokenid");
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));</script></con:config>
      </con:testStep>
      <con:properties>
        
        <con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:E12976717AF56458E0401F0A05997339</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>E129CFC72DB70D03E0401F0A07992E9B</con:value></con:property>
        <con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_567448.txt" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_567448.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">title_1</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_567448.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:E12976717AF56458E0401F0A05997339</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:E12976717B186458E0401F0A05997339</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property>
        
        <con:property><con:name>RightsResTime</con:name><con:value>5605</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:E129CFC72DB70D03E0401F0A07992E9B</con:value></con:property>
        
        
      <con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_40003_ViewByFilter_LastModifiedDate_Verify_RightsTokens_Display_Order_on_UpdatedDate_when_RT_has_Unique_Metadata_Details</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R4_ViewByFilterClass=LastModifiedDate_And_without_FilterOffset_FilterCount</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HandlingETag" searchProperties="true" id="1406e6cb-a6d6-4f23-b478-ad69772e2ebe"><con:settings/><con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="ce71d520-bd70-49c7-9a53-2768c3e61e40">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

/*def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("UpdateUserStatus_To_Suspended").testRequest.setRequestHeaders(headers);
*/

// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",CallingTCase.getPropertyValue("nodetype"));

//SetUp test properties
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("assertionAccountIdFULL",CallingTCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",CallingTCase.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assert",CallingTCase.getPropertyValue("assert"));
//Testing RightLockerDataGet Request Properties Loaded correctly.

//testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get-Set Node Role To RetailerCustomerSupport" id="d3c3978d-b207-41f4-bf06-82d02bdb36b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("NodeRole",'urn:dece:role:retailer:customersupport');

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for RTG");
TSrunnerRTC.runTestStepByName("Get Node Role for RTG");

testCase.setPropertyValue("NodeRole",CallingTCase.getPropertyValue("NodeRole"));

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" disabled="true" id="5bfe21af-5ad3-41bb-bdbd-fc013fe63c44">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("UpdateUserStatus_To_Suspended");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
	case "9000":
		keyStorePath = "/opt/dece/certs/9000_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Rights Token Create" id="0b99d8c1-635e-4998-bb73-37690068e652"><con:settings/><con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTGRequest = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("RightsToken-Generation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;
testCase.setPropertyValue("DBrightstokenid",null);
def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
log.info rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTG = RTGRequest.run( null , false )
			assert runnerRTG.status == Status.FINISHED;
		}
		else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="UpdateUserStatus_To_Suspended" disabled="true" id="bc8b67cc-a21d-453c-9c27-f485746c2d98"><con:settings/><con:config service="UserStatusUpdate" resourcePath="${#Project#Provision_HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateUserStatus_To_Suspended" mediaType="application/xml" postQueryString="false" id="362f1329-9a61-437c-8948-ae364a90e8ba" sslKeystore="222259_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">       <Current>          <Value>urn:dece:type:status:suspended</Value>          <Description>User Updated</Description>       </Current> </ResourceStatus>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#assertionAccountIdFULL}"/>
  <con:entry key="UserID" value="${#Project#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get the Required Rights Locker Properties" disabled="true" id="56a9feb4-b005-4a9d-b47e-219b73164ee1">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("UpdateUserStatus_To_Active").testRequest.setRequestHeaders(headers);

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Copy of pem set" disabled="true" id="95750e65-66e0-413f-b32a-bda752e1bbef">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("UpdateUserStatus_To_Active");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
	case "9000":
		keyStorePath = "/opt/dece/certs/9000_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="UpdateUserStatus_To_Active" disabled="true" id="38bea79e-c28d-4ec6-9493-1e1c2946b5b6"><con:settings/><con:config service="UserStatusUpdate" resourcePath="${#Project#Provision_HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateUserStatus_To_Active" mediaType="application/xml" postQueryString="false" id="362f1329-9a61-437c-8948-ae364a90e8ba" sslKeystore="222259_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">       <Current>          <Value>urn:dece:type:status:active</Value>          <Description>User Updated</Description>       </Current> </ResourceStatus>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#assertionAccountIdFULL}"/>
  <con:entry key="UserID" value="${#Project#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="calltestcase" name="Reset_NodeRole_AsPer_TC" disabled="true" id="e42c54f6-6a1a-4d09-92fd-0f2d6e1d8ba1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>4e0eb789-a890-4034-bdb5-4af7fb7b2dc9</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_OID</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Get-Set Node Role As Per TC Requirement" id="8316f054-bbb2-43d3-9b38-faa2ca727d92"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for RTG");
TSrunnerRTC.runTestStepByName("Get Node Role for RTG");



assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config></con:testStep><con:properties><con:property><con:name>TSuiteName</con:name><con:value>R3_PatchChanges_PORTAL[:CS]_Nodes</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_30001 - RightsLockerDataGet_byDownloadQuery - PERM - SecurityRoleValid - Invocation with PORTAL</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:DB7DF7741842F92FE0401F0A05990A48</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>retailer</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:portal</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>DBA4458A9B1310C1E0401F0A05995B2F</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>1</con:value></con:property><con:property><con:name>rtDBinfo</con:name><con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:DBA4458A9B1310C1E0401F0A05995B2F</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:DBA43DE4D219956DE0401F0A22225906A5</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:DBA43DE4D229956DE0401F0A22225906A5</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>2876</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:DBA43DE4D219956DE0401F0A22225906A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:DBA43DE4D229956DE0401F0A22225906A5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4361fdd7-f028-4786-b8d4-2346f55dc9a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0d4b022f-ba50-4696-bd29-d468b8121eda</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9111d58a-6e83-45eb-9896-fde2de254442</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>70d06b5d-fa0d-436e-9b05-9c327b6f7da2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>688a1f56-20de-4f68-9d36-d791cd28ddb1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>18f1ba9c-08b7-43fb-9f2a-5e01490ce75b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>184c2a7a-7543-4a0b-8ca4-4b1ff162fa60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request_With_D_Host" searchProperties="true" id="67cc73c3-a0eb-4e91-939a-7636cea998ba">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="021d210c-2a6a-4386-aa0b-3aa0244c1214">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsLockerDataGet_DWQ").testRequest.setRequestHeaders(headers);


// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="45e1729a-4b7c-492c-8dc0-6ca0564bdb75">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_DWQ");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
	case "8600":
		keyStorePath = "/opt/dece/certs/8600_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsLockerDataGet_DWQ" id="ba225cc2-1dc9-4cc8-9542-2c39bb0d6a38">
        <con:settings/>
        <con:config service="RightsLockerDataGet_DownLoad_Query" methodName="RightsLockerDataGet_DWQ" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=download" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsLockerDataGet_DWQ" mediaType="application/xml" accept="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="AccountID" value="${#TestCase#encodedAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_300001 - RightsLockerDataGet - PERM - SecurityRoleValid - Invocation with Device</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R3_Device_Role_Changes</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:D34FC9CF2F761501E0401F0A05993ECB</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD34FC9CF2F761501E0401F0A05993ECB</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsLockerData Get Information_with_D_Host" searchProperties="true" id="002eed35-c3e6-4453-b77a-4d1eaa180bd2">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML" id="8cba5322-705f-4ad7-9532-244ed2143dff">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

//def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request_With_D_Host").getTestStepByName("RightsLockerDataGet_DWQ").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
//callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="bce5d042-bf67-43d8-b983-76b87c6660c9">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request_With_D_Host").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request_With_D_Host").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request_With_D_Host").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));; 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
//def logFile = new File(projectPath +"\\" +testSuite.project.name +"\\"+ "\\soapUI-Logs-to-file.xls")
def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//logFile.write(testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders().ETag);
logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_300001 - RightsLockerDataGet - PERM - SecurityRoleValid - Invocation with Device</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R3_Device_Role_Changes</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C7D2A2C8D973ED7E0401F0A05997B5C</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<RightsTokenList FilterMoreAvailable="false" FilterCount="1" FilterOffset="0" FilterEntryPoint="0" FilterClass="urn:dece:type:viewfilter:title" AccountID="urn:dece:accountid:org:dece:D34FC9CF2F761501E0401F0A05993ECB" RightsLockerID="urn:dece:rightslockerid:org:dece:D34FC9CF2F821501E0401F0A05993ECB" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:D34FD2C6604BAD47E0401F0A2222592584">
      <RightsTokenLocation ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
         <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
         <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/bbb</Location>
            <Preference>1</Preference>
         </FulfillmentWebLoc>
         <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/aaa</Location>
            <Preference>1</Preference>
         </FulfillmentWebLoc>
         <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/ddd</Location>
            <Preference>3</Preference>
         </FulfillmentManifestLoc>
         <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/ccc</Location>
            <Preference>1</Preference>
         </FulfillmentManifestLoc>
      </RightsTokenLocation>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>3728</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenlist</con:name>
          <con:value>[urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578]</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenObjlist</con:name>
          <con:value>[urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578:RightsTokenLocation]</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenLocation</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Response Validation_with_D_Host" searchProperties="true" id="0ed626a8-1be5-4fa2-9895-c5cc221997c7">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="30fa96af-8662-4eae-8dd4-3ad82e7507fa">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;
String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsLockerData Get Information_with_D_Host").getPropertyValue("RTObjType");

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request_With_D_Host").getTestStepByName("RightsLockerDataGet_DWQ").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request_With_D_Host").getTestStepByName("RightsLockerDataGet_DWQ").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "API call not authorized";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_30013 - RightsLockerDataGet - PERM - SecurityRoleValid - Invocation with Device</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsLockerDataGet_byDownload_Query_Invocation_ByPermission_TestCases_with_LockerViewAllConsents</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:CDE364CFC5254B5DE0401F0A2222596B57</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:D34F31CA0211E812E0401F0A05997A46</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList AccountID="urn:dece:accountid:org:dece:107006" RightsLockerID="urn:dece:rightslockerid:org:dece:7001" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken>
      <RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9CC1FA6E91E304A7E0401F0A0599277F">
         <RightsLockerID>urn:dece:rightslockerid:org:dece:7001</RightsLockerID>
         <RightsTokenData ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
            <SoldAs>
               <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
               <ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ContentID>
            </SoldAs>
            <RightsProfiles>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
            </RightsProfiles>
            <ResourceStatus>
               <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-21T01:42:39.004Z">
                  <Value>urn:dece:type:status:active</Value>
               </Current>
            </ResourceStatus>
            <LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</LicenseAcqBaseLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/aaa</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/bbb</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ccc</Location>
               <Preference>3</Preference>
            </FulfillmentManifestLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ddd</Location>
               <Preference>1</Preference>
            </FulfillmentManifestLoc>
            <PurchaseInfo>
               <NodeID>urn:dece:org:org:dece:222259</NodeID>
               <RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</RetailerTransaction>
               <PurchaseAccount>urn:dece:accountid:org:dece:107006</PurchaseAccount>
               <PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</PurchaseUser>
               <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
            </PurchaseInfo>
         </RightsTokenData>
      </RightsTokenFull>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>QAerrorID</con:name>
          <con:value>null</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights Locker Data Validation_with_D_Host" searchProperties="true" id="a2370db1-fe07-4b09-884b-d9545743b7f2">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsLocker Data GET" disabled="true" id="25f559d5-b746-4d6d-a48f-a79a52fc4abb">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

RT_Data6 = mydbRights.rightstokenMDinfoGetRow(testCase.getPropertyValue("DBrightstokenid"));
log.info RT_Data6.toString();


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));


testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsLockerDataGet Response" disabled="true" id="a590b22b-cb7c-4b68-bde8-864390c8695e">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();


def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();

RTObjType = testCase.getPropertyValue("RTObjType");


switch (RTObjType) {
	
	case "RightsTokenFull":

		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

	break;

	case "RightsTokenBasic":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

}

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken."$RTObjType".@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.Value).toString();

//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..actFFWeblocSize-1 ){
	
		actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..actFFManifestSize-1 ){
	
		actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Actual Rights Purchase Info
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;

// Assert RightsToken LockerId

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;

// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;

// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile == actRTG_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR == actRTG_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload == actRTG_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream == actRTG_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="RightsLockerDataGet  DB validation" id="5cd7655a-e8a4-4945-b4db-8f3978ae07d3">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request_With_D_Host").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();


def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();

log.info "RTObjType=="+RTObjType;
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
	break;

}

// Actual RightsToken Data 

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[rtc].@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.size()!= 0){
		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.Value).toString();
		}
		
//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc.size();
 		
 		if(actLicAcqSize != 0){
 			for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc[i];
			}
 		}
// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.size();
	
		if (actFFWeblocSize != 0){
			for ( int i in 0..actFFWeblocSize-1 ){
			//actRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[i-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[i-1]).toString());
			actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Location[i]).toString();
			actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Preference[i]).toString();
			}
		}
actRTG_FFWebLoc_Location.sort();

// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.size();
	
		if(actFFManifestSize != 0) { 
			for ( int i in 0..actFFManifestSize-1 ){
	
			actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Location[i]).toString();
			actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Preference[i]).toString();
			}
		}
		actRTG_FFManifestLoc_Pref.sort();

// Actual Rights Purchase Info

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.size()!= 0){
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	
		}
		
actRTG_FFManifestLoc_Location.sort()
actRTG_FFManifestLoc_Pref.sort()
actRTG_FFWebLoc_Location.sort()
actRTG_FFWebLoc_Pref.sort()

if(processFlag.toString() == 'true'){

 	log.info "validating rights token"


// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	}
	 
	
 }
 else{
 	
	log.info  "Invalid Rightstoken Data ......[$DBrightstokenid]";
	
	if(RT_Data3.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	}
	
	if(RT_Data2.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}

// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
   }
   if(RT_Data2.toString().isEmpty()){
   	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
	}
if(RT_Data.toString().isEmpty()){

	log.info "RightsToken DB data is not avialable";
}			
}
}
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_30013 - RightsLockerDataGet - PERM - SecurityRoleValid - Invocation with Device</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsLockerDataGet_byDownload_Query_Invocation_ByPermission_TestCases_with_LockerViewAllConsents</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:D34FD2C6604BAD47E0401F0A2222592584</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:D34F31CA0211E812E0401F0A05997A46</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>D34FD2C6604BAD47E0401F0A2222592584</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>D34FC9CF2F7B1501E0401F0A05993ECB</ACCOUNT_OID>
      <USER_OID>D34FC9D0AED6BC06E0401F0A2222591569</USER_OID>
      <RIGHTS_LOCKER_OID>D34FC9CF2F821501E0401F0A05993ECB</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>D34FC9CF2F761501E0401F0A05993ECB</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>transcation</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>null</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>D34FC9D0AED1BC06E0401F0A2222591569</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2013-01-15 07:37:09.77</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList FilterMoreAvailable="false" FilterCount="1" FilterOffset="0" FilterEntryPoint="0" FilterClass="urn:dece:type:viewfilter:title" AccountID="urn:dece:accountid:org:dece:D34FC9CF2F761501E0401F0A05993ECB" RightsLockerID="urn:dece:rightslockerid:org:dece:D34FC9CF2F821501E0401F0A05993ECB" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:D34FD2C6604BAD47E0401F0A2222592584">
      <RightsTokenLocation ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
         <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
         <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/bbb</Location>
            <Preference>1</Preference>
         </FulfillmentWebLoc>
         <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/aaa</Location>
            <Preference>1</Preference>
         </FulfillmentWebLoc>
         <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/ddd</Location>
            <Preference>3</Preference>
         </FulfillmentManifestLoc>
         <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/ccc</Location>
            <Preference>1</Preference>
         </FulfillmentManifestLoc>
      </RightsTokenLocation>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT_StatusHistoryXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>D34FD2C66053AD47E0401F0A2222592584</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2013-01-15 07:37:09.346</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASE_PROFILE_OID>D34FD2C66050AD47E0401F0A2222592584</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>pd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-01-15 07:37:09.346</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASE_PROFILE_OID>D34FD2C66051AD47E0401F0A2222592584</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-01-15 07:37:09.346</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASE_PROFILE_OID>D34FD2C66052AD47E0401F0A2222592584</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>hd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-01-15 07:37:09.346</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>D34FD2C6604CAD47E0401F0A2222592584</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-01-15 07:37:09.346</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>D34FD2C6604FAD47E0401F0A2222592584</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-01-15 07:37:09.346</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>D34FD2C6604EAD47E0401F0A2222592584</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-01-15 07:37:09.346</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>D34FD2C6604DAD47E0401F0A2222592584</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>D34FD2C6604BAD47E0401F0A2222592584</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2013-01-15 07:37:09.346</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      <con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:CB65DD1FD6B01423E0401F0A2222593A4E</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:CB65DD1FD6BE1423E0401F0A2222593A4E</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>DbResultRT-StatusHistoryXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>CB65D8F790208E47E0401F0A2222593A52</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>CB65D8F790178E47E0401F0A2222593A52</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>RightsToken has been created.</DESCRIPTION>
      <CREATED_DATE>2012-10-06 14:34:27.83</CREATED_DATE>
      <CREATED_BY_NODE_OID>222259</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>CB65DD1FD6C31423E0401F0A2222593A4E</CREATED_BY_USER_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request Generic" searchProperties="true" id="e23db5b2-cc4c-4af6-b613-ee70e22ab7c7">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="3a2a1bd9-4195-4995-9303-a3b4bac193bf">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def versionMajor = testProject.getPropertyValue("versionMajor");
def versionMinor = testProject.getPropertyValue("versionMinor");

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsLockerDataGet_DWQ").testRequest.setRequestHeaders(headers);


// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ResponseType",CallingTCase.getPropertyValue("ResponseType"));
//Testing RightLockerDataGet Request Properties Loaded correctly.
def encodedAccountID = context.expand( '${#TestCase#encodedAccountID}' )
def responseType = context.expand( '${#TestCase#ResponseType}' )
def queryParam = CallingTCase.getPropertyValue("QueryParam");

if (responseType!="null")
 urlPathString = "rest/$versionMajor/$versionMinor/Account/"+encodedAccountID+"/RightsToken/List?response="+responseType;
else
 urlPathString = "rest/$versionMajor/$versionMinor/Account/"+encodedAccountID+"/RightsToken/List?";

if (queryParam == null)
	testCase.setPropertyValue("urlPath",urlPathString);
else
	testCase.setPropertyValue("urlPath",urlPathString+queryParam);

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="724b251b-a73d-472c-9bd6-2dc6fbc9cd44">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_DWQ");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
	case "8600":
		keyStorePath = "/opt/dece/certs/8600_concat.pem";
	break;
	case "DABD1A709AAD9052E0401F0A2222596E9F":
		keyStorePath = "/opt/dece/certs/iscportalcs1_concat.pem";
	break;
	case "DABD1A709AA89052E0401F0A2222596E9F":
		keyStorePath = "/opt/dece/certs/iscportal1_concat.pem";
	break;
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsLockerDataGet_DWQ" id="8e065d48-39cd-4d94-88b0-90a0dd9417df">
        <con:settings/>
        <con:config service="RightsLockerDataGet_DownLoad_Query" methodName="RightsLockerDataGet_DWQ" resourcePath="/${#TestCase#urlPath}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsLockerDataGet_DWQ" mediaType="application/xml" accept="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVfZkqrKEn33KwzPo2EzOWF0d0QxqKioCI4vNxCKQZmkmPTrb6Gt2+7dve8+1xesJCtz5UDWqlek+x7dAwjBOHHDoCoJb7X/dPbkntl32UaLMslGk+k0Gyykug221SQtyLQoqkvWqhJCKZQClOhB8lajSYppkGyD6mhkp0c2ewz70m21d7XqCsYIm8YqL3hX4XsB6l3dvtXSOOiFOnJRL9B9iHqJ0VOBPOlhzZ5+x1R7f72hvDqM350kiXoEYbyY0ICeZ7wYoU+8Ep90Xk3UU1070JM0hh8+TfRW+9ib5/lLzryEsU3QJEkSJEtgHRO59j+198p9MzSlwApva14PwsA1dM+96CUoGSZOaFaBZ4exmzj+D6YpgiJL0w1YGA2Dagb/1IhfDq7o/tLSJ5Ax0hvI0am7sQW0YAwDA1aXC+mt9s/fVfC2V4v1AFlh7KMv638HCQYZ9MIImg10j+yO7u8tfpOu91do9KTA8FLkZnBatkmkGxBV5zG03GLiItx8Jqpey18t0L3DoPFvSvJKPOPEsIlvMiO4NkTJ/1Ov51rdrKx0L4Xv0krStctwrZED7yDEMy2K8mUw1aRO9+0K4Vn5BupR6o/110Z99NXHJthdMWzrOGLRHNEDl57Os+NWFFMrz+pKzhqJmg/YyLIUYTFmi+JkLtxLNgdLaX3S2Hiwri8nppOdGdPpXir67MDXveUgPl/GixMIGTMZHHx6NaNGQ5jLC0YZcS5Ql4SUjtLd5HKQHUVf2Jf1WVadve4HuyJdHQaaq8mrChCa6pDZLb3NaW/wkTimlLdfMT3HUMY1hudrkOX/TYtkBT3RHwu+nBQW/jwT+C5LEl8XeB5A3ga5xAFb4iYXMOXs48k5ugM2JzmgLPtAAGd5AXLB3gorRRmLublaebuV1O9z8qKZD8FWqOAXglishN1mROrrXbSl++RO5Thzswj3zCgyh8d86BhTWZNzXLazfBCLqSaS66vMLvD6Ih9kaqYtmcr6wLHyQsyF/OpREHNnulsvou2SzY2LqMigOQDUUuQdeaj5K8pgFo5xECcyOF7lnCPzq5VciBqYVzh7usKxaXx/Fxm+Ge19z3kyPsTGNXOwOu8HXrq7iAeZFwe8ehqo0p4RFHEEFtvlfr066ut+VjGGU7C/e3Rbrr4Jc3vXzQVlOxqHO8nJjClQRI5TAE4XCWRpMALhgANyE7jFhT9w7ZA3+zkxolGlznqD9ubsnjZIH5CeTnW71Haybs9PbUEM6rtxuj84srPpz+pj1cyWbMJetiirZ23dpYwispSNOEzGhTVU1Mp+LhQbY1g37RHhXdh+LHdGIL6cHU+2F8m6PUPnvWtZa24za3ody5OZRWR5VnRGdS1UjjHZ5iBDE9tzNk4qwJY5AAaH5YFTZK5bJtWUcmUrczroi0kKLgc6GdOr02iYecaWAWExXs8Ox4/CmEIuckSuiLitxEpXAGZZhKG6FPsHsORsO+Zssc8phgCUrTTOtzhfyyFW/prH/jWPtsgBkdmBNjusMEuSTWaJ2myCc8Atgz7ryKdibbZ9snOC4kSdRs1cRlMr2K3Do+y78TJO1eV4PJ0Uey0dHA94VlmkOs6YXUXMjhFwp2PNOQqhoM+j7TaJ6oERG4kU+bJUXGY7dOi6e58c1VsUNycFo0Mv/X2+HOjibhzbKjUeLoI502ErKLXOQ79+6Obruqa2o47JB5ZwPhO7eEWGIOyzi9bJLGj66CzzSTu3RuC41+lp4bHcmRXHO83IF8p4rfr1VqWVTSY+edGI5jSa5eogb4qKUmdMThtqKIrdbdq1i3gWmPRWT9rZjly13cg7snR61JoRs7J9XKx5ZkYdeV5Rmhtj59udyBgRCyIDYseaSIPz/qJfIn9m3Abo1+nwEN7mB/E8WT6NnjvpUHG3QiO5L8sDSBKqfXwq6MmfCUwpcc2GdVXtRSULQgkMktp7uaskL70UUxzX7OEj47YW292+2Ke7/U6LF/oMJZJNkuqTgGyxLNmnm3eWc0PxBSIfBpZb+ip53O2U+jNAw+8hGJgwbmRhajgQ1f5gscxXVQoW+PgNAwS1EPPEFs+LAssAkmfwN850QJMW280m2aUokqH4dq06DZNZMIuBlcD4E0ekyE8ccQENN3JhSSTL0xTh4xQlOCUnPUsTj3rJ9JcApphqxiXb69HNbotArh95sARM+KGZevAlcqJrggh0e9IN3UBXKY1/LfZ60P8Y4dd392RgHdMtFVAZDgdxQeE3fJe+x/JzzMxzzHfzIDXd8jzHmU1i17gh+fzqV8OUnfLolltQd9QP5a+CT4aJrzE9fJmZazy6/nEhwHwSM473e1FO+svpJc2y9FqGTsmmYmyeoAiyQ6jQSDElOmvhEQbEwwTxV2z0gfqL54f8M740cQI1wV+0j5umel3+xVVEhai8iki46Yu/ved8conzlsAi+U7Ge/jGUiL+46XG6BmlHhbP8SMPY/NXub6x9eQHx1mOMDewy1XJPc8/9IURYrMuHmNh/Gz8OwPfOf8sfCT5gSXB3bRPE/jzm2o5n95qumGEaZBIQu0qeJ6ZV5zJOYK9X0q/mbmyvw86X6Af6fxGnqh4evl67aHr/m/lhnttFwPiXci9YnmrFfhmip0H9tOM/gD425juUoDjuzwDQPt5THc4nn4k8FMk77+Jf5c85fTr9/D+Xw==" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ResponseType" value="${#TestCase#ResponseType}"/>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="urlPath" value="${#TestCase#urlPath}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_40001_ViewByFilter_LastModifiedDate_Verify_RightsTokens_Display_Order_on_CreationDate_when_RT_has_Unique_Metadata_Details</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R4_ViewByFilterClass=LastModifiedDate_And_without_FilterOffset_FilterCount</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:E68FE81ABC8C3AA6E0401F0A05997BC2</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:E68FE81ABC8C3AA6E0401F0A05997BC2</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>metadata</con:value></con:property><con:property><con:name>urlPath</con:name><con:value>rest/1/07/Account/urn:dece:accountid:org:dece:E68FE81ABC8C3AA6E0401F0A05997BC2/RightsToken/List?response=metadata&amp;FilterClass=urn%3Adece%3Atype%3Aviewfilter%3Alastmodifieddate</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsLockerData Get Information for Generic" searchProperties="true" id="f97b53a4-1bc9-4c60-9972-31eb8c502770">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML" id="93087464-80ac-4021-9f56-9af7b4da936c">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

//def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName("RightsLockerDataGet_DWQ").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
//callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
/*
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
def myP = testRunner.testCase.testSuite.project.name;

def logFile = new File(projectPath +"\\"+myP +"\\"+callingTCaseName+".txt");

//Capturing Request
def req = new String(RT_RequestBody);
logFile.append("RLGet Request:\n");
log.info "Request: "+req;
logFile.append(req);

def RT_ResponseBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName("RightsLockerDataGet_DWQ").testRequest.response.rawResponseData;

//Capturing Response
logFile.append("\n\nResponse:\n");
res = new ByteArrayOutputStream();
//def res = tStep.httpRequest.response.getRawResponseData();;
strVal  = new String(RT_ResponseBody);
logFile.append(strVal);
log.info "Response: "+strVal;
logFile.append("********************************************************************************************************************************\n");
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="d45ce567-c920-4cc6-b27e-ba17f25f386f">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));; 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
//def logFile = new File(projectPath +"\\" +testSuite.project.name +"\\"+ "\\soapUI-Logs-to-file.xls")
def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//logFile.write(testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders().ETag);
logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_40001_ViewByFilter_LastModifiedDate_Verify_RightsTokens_Display_Order_on_CreationDate_when_RT_has_Unique_Metadata_Details</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R4_ViewByFilterClass=LastModifiedDate_And_without_FilterOffset_FilterCount</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C7D2A2C8D973ED7E0401F0A05997B5C</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<RightsTokenList FilterMoreAvailable="false" FilterCount="3" FilterOffset="0" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" AccountID="urn:dece:accountid:org:dece:E68FE81ABC8C3AA6E0401F0A05997BC2" RightsLockerID="urn:dece:rightslockerid:org:dece:E68FE81ABC943AA6E0401F0A05997BC2" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E68FF05DB47A4F00E0401F0A05990F88">
      <RightsTokenDetails Language="en-us" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_543876.txt" ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_543876.txt">
         <TitleDisplay60>title_3_60</TitleDisplay60>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4184F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4154F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB41A4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4194F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4174F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4164F00E0401F0A05990F88</ArtReference>
         <Summary190>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours.</Summary190>
         <Genre>Family</Genre>
         <Genre>Comedy</Genre>
         <Genre>Adventure</Genre>
         <Genre>Fantasy</Genre>
         <Genre>Animation</Genre>
         <RunLength>PT1H43M0.000S</RunLength>
         <WorkType>Movie</WorkType>
         <RatingSet>
            <ns2:Rating>
               <ns2:Region>
                  <ns2:countryRegion>US</ns2:countryRegion>
                  <ns2:country>US</ns2:country>
               </ns2:Region>
               <ns2:System>MPAA</ns2:System>
               <ns2:Value>NC-17</ns2:Value>
               <ns2:LinkToLogo>http://www.mpaa.org/_images/nc-17.gif</ns2:LinkToLogo>
            </ns2:Rating>
            <ns2:AdultContent>false</ns2:AdultContent>
         </RatingSet>
      </RightsTokenDetails>
   </RightsToken>
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E68FF05DB4024F00E0401F0A05990F88">
      <RightsTokenDetails Language="en-us" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_933448.txt" ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_933448.txt">
         <TitleDisplay60>title_2_60</TitleDisplay60>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3D04F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3CE4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3CF4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3CD4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3CC4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3D14F00E0401F0A05990F88</ArtReference>
         <Summary190>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours.</Summary190>
         <Genre>Comedy</Genre>
         <Genre>Animation</Genre>
         <Genre>Family</Genre>
         <Genre>Fantasy</Genre>
         <Genre>Adventure</Genre>
         <RunLength>PT1H43M0.000S</RunLength>
         <WorkType>Movie</WorkType>
         <RatingSet>
            <ns2:Rating>
               <ns2:Region>
                  <ns2:countryRegion>US</ns2:countryRegion>
                  <ns2:country>US</ns2:country>
               </ns2:Region>
               <ns2:System>MPAA</ns2:System>
               <ns2:Value>NC-17</ns2:Value>
               <ns2:LinkToLogo>http://www.mpaa.org/_images/nc-17.gif</ns2:LinkToLogo>
            </ns2:Rating>
            <ns2:AdultContent>false</ns2:AdultContent>
         </RatingSet>
      </RightsTokenDetails>
   </RightsToken>
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E68FF05DB3B94F00E0401F0A05990F88">
      <RightsTokenDetails Language="en-us" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_705851.txt" ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_705851.txt">
         <TitleDisplay60>title_1_60</TitleDisplay60>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B9F494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B6F494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B5F494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B8F494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60BAF494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B7F494E0401F0A05990F86</ArtReference>
         <Summary190>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours.</Summary190>
         <Genre>Comedy</Genre>
         <Genre>Animation</Genre>
         <Genre>Fantasy</Genre>
         <Genre>Adventure</Genre>
         <Genre>Family</Genre>
         <RunLength>PT1H43M0.000S</RunLength>
         <WorkType>Movie</WorkType>
         <RatingSet>
            <ns2:Rating>
               <ns2:Region>
                  <ns2:countryRegion>US</ns2:countryRegion>
                  <ns2:country>US</ns2:country>
               </ns2:Region>
               <ns2:System>MPAA</ns2:System>
               <ns2:Value>NC-17</ns2:Value>
               <ns2:LinkToLogo>http://www.mpaa.org/_images/nc-17.gif</ns2:LinkToLogo>
            </ns2:Rating>
            <ns2:AdultContent>false</ns2:AdultContent>
         </RatingSet>
      </RightsTokenDetails>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>251</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenlist</con:name>
          <con:value>[urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578]</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenObjlist</con:name>
          <con:value>[urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578:RightsTokenLocation]</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenLocation</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Response Validation for Generic" searchProperties="true" id="08db6414-f1ae-42fb-8c6d-18667497a183">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="64bcdcb5-1429-4847-bff5-7c53347c89e6">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;
String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');
def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsLockerData Get Information for Generic").getPropertyValue("RTObjType");

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName("RightsLockerDataGet_DWQ").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName("RightsLockerDataGet_DWQ").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet"); 
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "API call not authorized";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCountNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCountNotValid";
	break;

	case "INVALID_DATE_FORMAT":
	log.info "In InValid Date Format";
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID   = "urn:dece:errorid:org:dece:OnOrAfterDateFormatIsInvalid";
	//Resp_errorReason = "OnOrAfterDateFormatIsInvalid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#OnOrAfterDateFormatIsInvalid";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

//Resp_errorReason = testCase.getPropertyValue("errorReason");
//expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	//assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_40001_ViewByFilter_LastModifiedDate_Verify_RightsTokens_Display_Order_on_CreationDate_when_RT_has_Unique_Metadata_Details</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R4_ViewByFilterClass=LastModifiedDate_And_without_FilterOffset_FilterCount</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:E68FF05DB47A4F00E0401F0A05990F88</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:E68FE81ABC8C3AA6E0401F0A05997BC2</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList AccountID="urn:dece:accountid:org:dece:107006" RightsLockerID="urn:dece:rightslockerid:org:dece:7001" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken>
      <RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9CC1FA6E91E304A7E0401F0A0599277F">
         <RightsLockerID>urn:dece:rightslockerid:org:dece:7001</RightsLockerID>
         <RightsTokenData ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
            <SoldAs>
               <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
               <ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ContentID>
            </SoldAs>
            <RightsProfiles>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
            </RightsProfiles>
            <ResourceStatus>
               <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-21T01:42:39.004Z">
                  <Value>urn:dece:type:status:active</Value>
               </Current>
            </ResourceStatus>
            <LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</LicenseAcqBaseLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/aaa</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/bbb</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ccc</Location>
               <Preference>3</Preference>
            </FulfillmentManifestLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ddd</Location>
               <Preference>1</Preference>
            </FulfillmentManifestLoc>
            <PurchaseInfo>
               <NodeID>urn:dece:org:org:dece:222259</NodeID>
               <RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</RetailerTransaction>
               <PurchaseAccount>urn:dece:accountid:org:dece:107006</PurchaseAccount>
               <PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</PurchaseUser>
               <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
            </PurchaseInfo>
         </RightsTokenData>
      </RightsTokenFull>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>QAerrorID</con:name>
          <con:value>null</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights Locker Data Validation for Generic" searchProperties="true" id="2339f363-a895-4c0e-a0e6-11f668523a21">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsLocker Data GET" disabled="true" id="d2f1f1fc-3044-4270-9e81-3241e5824cc8">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

RT_Data6 = mydbRights.rightstokenMDinfoGetRow(testCase.getPropertyValue("DBrightstokenid"));
log.info RT_Data6.toString();


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));


testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsLockerDataGet Response" disabled="true" id="b70614ea-a6f0-4622-ae78-807429c68da8">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();


def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();

RTObjType = testCase.getPropertyValue("RTObjType");


switch (RTObjType) {
	
	case "RightsTokenFull":

		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

	break;

	case "RightsTokenBasic":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

}

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken."$RTObjType".@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.Value).toString();

//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..actFFWeblocSize-1 ){
	
		actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..actFFManifestSize-1 ){
	
		actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Actual Rights Purchase Info
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;

// Assert RightsToken LockerId

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;

// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;

// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile == actRTG_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR == actRTG_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload == actRTG_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream == actRTG_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="RightsLockerDataGet  DB validation" id="26d94370-c551-453a-acd8-a19ac7b271b2" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();


def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();
	
	
	
//log.info "Expected Return Object Type : [RightsTokenLocation]  - Actual Return Object Type is : [$RTObjType]"; //Updated by Aravind
//expectedRTObjType == 'RightsTokenLocation'; //	Updated by Aravind


//if (CallingTCase.getPropertyValue("ResponseType") == null)
	//expectedRTObjType == 'RightsTokenReference';

	//log.info "Expected Object Type : [$expectedRTObjType] - Actual Object Type Returned : [$RTObjType]"; //Updated by Aravind
	//assert RTObjType == expectedRTObjType;  //Updated by Aravind
	
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		log.info "Expected LockerId :" +expectRTG_Lockerid; //Updated by Aravind
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
	break;

}

// Actual RightsToken Data 

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[rtc].@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.@MediaProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.size()!= 0){
		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.Value).toString();
		}
		
//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc.size();
 		
 		if(actLicAcqSize != 0){
 			for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc[i];
			}
 		}
// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.size();
	
		if (actFFWeblocSize != 0){
			for ( int i in 0..actFFWeblocSize-1 ){
			//actRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[i-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[i-1]).toString());
			actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Location[i]).toString();
			actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Preference[i]).toString();
			}
		}
actRTG_FFWebLoc_Location.sort();

// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.size();
	
		if(actFFManifestSize != 0) { 
			for ( int i in 0..actFFManifestSize-1 ){
	
			actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Location[i]).toString();
			actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Preference[i]).toString();
			}
		}
		actRTG_FFManifestLoc_Pref.sort();

// Actual Rights Purchase Info

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.size()!= 0){
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	
		}
		
actRTG_FFManifestLoc_Location.sort()
actRTG_FFManifestLoc_Pref.sort()
actRTG_FFWebLoc_Location.sort()
actRTG_FFWebLoc_Pref.sort()

if(processFlag.toString() == 'true'){

 	log.info "validating rights token"


// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}
	log.info "Sold As :" +AssertRTData['RtSoldAs']; //Updated By Aravind
	//assert  AssertRTData['RtSoldAs']==null; // Updated By Aravind
	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile
	log.info "RightsToken Profiles: " +AssertRTData['RtProfile'] //Updated by Aravind
	//assert AssertRTData['RtProfile']==null //Updated by Aravind
	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		//assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 
	log.info "RightsToken Status: " +AssertRTData['RtStatus']; //Updated by Aravind
	//assert AssertRTData['RtStatus'] == null //Updated by Aravind
	
	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	log.info "RightsToken Purchase Info: "+AssertRTData['RtPinfo']; //Updated by Aravind
	//assert AssertRTData['RtPinfo'] == null;  //Updated by Aravind

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	//log.info "RightsLockerId: "+AssertRTData['RtlockerID']; //Updated by Aravind
	//if (AssertRTData['RtlockerID']==1){

		//log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 //assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	//}
	 
	
 }
 else{
 	
	log.info  "Invalid Rightstoken Data ......[$DBrightstokenid]";
	
	if(RT_Data3.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	log.info "RightsLockerId :"+AssertRTData['RtlockerID']; //Updated by Aravind
	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	}
	
	if(RT_Data2.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}

// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
   }
   if(RT_Data2.toString().isEmpty()){
   	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}

//  Assert Rights PurchaseInfo Location

	assert AssertRTData['RtPinfo'] == 0; //No Purchase Info Should be returned for Download Query Request. - Aravind Updated

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
	}
if(RT_Data.toString().isEmpty()){

	log.info "RightsToken DB data is not avialable";
}			
}
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="RightsLockerDataGet  DB validation_remove" id="270eea88-373d-414d-a125-07a6c99ad8f0" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();


def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
if !((rtc+1)>(RTCountSize -1))
	def DBrightstokenid2 = (Resp_RightsTokenID[rtc+1]).toString().tokenize(':').last(); //For Update/Create Date Order

	
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

// Fetch RightsToken info from RIGHTS_TOKEN table for the second RightsToken
if !((rtc+1)>(RTCountSize -1))
{
SECND_RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid2"));

testCase.setPropertyValue("SECND_DbResultRTXml",SECND_RT_Data.toString());
testCase.setPropertyValue("SECND_DbResultRT-SoldAsXml",SECND_RT_Data2.toString());
testCase.setPropertyValue("SECND_DbResultRT-PMPPXml",SECND_RT_Data3.toString());
testCase.setPropertyValue("SECND_DbResultRT-FFLocXml",SECND_RT_Data4.toString());
}

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
		if !((rtc+1)>(RTCountSize -1))
			SECND_Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();
	
	
	
log.info "Expected Return Object Type : [RightsTokenLocation]  - Actual Return Object Type is : [$RTObjType]"; //Updated by Aravind
assert RTObjType == 'RightsTokenLocation'; //	Updated by Aravind
	
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		log.info "Expected LockerId :" +expectRTG_Lockerid; //Updated by Aravind
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break;

}

//Comparing for the order of RightsToken Displayed.
		log.info "$[rtc] Rights TokenGet UPDATED DATE  : [$expectRTG_PS_UpdatedDate] - $[rtc+1] Rights TokenGet UPDATED DATE : [$SECND_expectRTG_PS_UpdatedDate]";
		log.info "$[rtc] Rights TokenGet CREATED DATE  : [$expectRTG_PS_CreationDate] - $[rtc+1] Rights TokenGet CREATED DATE : [$SECND_expectRTG_PS_CreationDate]";
		def date1=null;
		def date2=null;
		if (expectRTG_PS_UpdatedDate != null)
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_UpdatedDate);
		else
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_CreationDate);
		if !((rtc+1)>(RTCountSize -1))
		{
			if (SECND_expectRTG_PS_UpdatedDate != null)
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_UpdatedDate);
			else
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_CreationDate);
			
			assert date1.getTime() > date2.getTime();
		}

// Actual RightsToken Data 

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[rtc].@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.size()!= 0){
		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.Value).toString();
		}
		
//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc.size();
 		
 		if(actLicAcqSize != 0){
 			for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc[i];
			}
 		}
// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.size();
	
		if (actFFWeblocSize != 0){
			for ( int i in 0..actFFWeblocSize-1 ){
			//actRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[i-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[i-1]).toString());
			actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Location[i]).toString();
			actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Preference[i]).toString();
			}
		}
actRTG_FFWebLoc_Location.sort();

// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.size();
	
		if(actFFManifestSize != 0) { 
			for ( int i in 0..actFFManifestSize-1 ){
	
			actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Location[i]).toString();
			actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Preference[i]).toString();
			}
		}
		actRTG_FFManifestLoc_Pref.sort();

// Actual Rights Purchase Info

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.size()!= 0){
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	
		}
		
actRTG_FFManifestLoc_Location.sort()
actRTG_FFManifestLoc_Pref.sort()
actRTG_FFWebLoc_Location.sort()
actRTG_FFWebLoc_Pref.sort()

if(processFlag.toString() == 'true'){

 	log.info "validating rights token"


// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}
	log.info "Sold As :" +AssertRTData['RtSoldAs']; //Updated By Aravind
	assert  AssertRTData['RtSoldAs']==null; // Updated By Aravind
	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile
	log.info "RightsToken Profiles: " +AssertRTData['RtProfile'] //Updated by Aravind
	assert AssertRTData['RtProfile']==null //Updated by Aravind
	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 
	log.info "RightsToken Status: " +AssertRTData['RtStatus']; //Updated by Aravind
	assert AssertRTData['RtStatus'] == null //Updated by Aravind
	
	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	log.info "RightsToken Purchase Info: "+AssertRTData['RtPinfo']; //Updated by Aravind
	assert AssertRTData['RtPinfo'] == null;  //Updated by Aravind

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	//log.info "RightsLockerId: "+AssertRTData['RtlockerID']; //Updated by Aravind
	//if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	//}
	 
	
 }
 else{
 	
	log.info  "Invalid Rightstoken Data ......[$DBrightstokenid]";
	
	if(RT_Data3.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	log.info "RightsLockerId :"+AssertRTData['RtlockerID']; //Updated by Aravind
	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	}
	
	if(RT_Data2.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}

// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
   }
   if(RT_Data2.toString().isEmpty()){
   	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}

//  Assert Rights PurchaseInfo Location

	assert AssertRTData['RtPinfo'] == 0; //No Purchase Info Should be returned for Download Query Request. - Aravind Updated

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
	}
if(RT_Data.toString().isEmpty()){

	log.info "RightsToken DB data is not avialable";
}			
}
}
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_40001_ViewByFilter_LastModifiedDate_Verify_RightsTokens_Display_Order_on_CreationDate_when_RT_has_Unique_Metadata_Details</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R4_ViewByFilterClass=LastModifiedDate_And_without_FilterOffset_FilterCount</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:E2A6AA1293F4400EE0401F0A07995878</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:E2A699C535B85AF3E0401F0A0799357E</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>E2A6AA1293F4400EE0401F0A07995878</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>   <ResultSet fetchSize='10'>     <Row rowNumber='1'>       <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>       <ACCOUNT_OID>E2A699C535B95AF3E0401F0A0799357E</ACCOUNT_OID>       <USER_OID>E2A699C535E55AF3E0401F0A0799357E</USER_OID>       <RIGHTS_LOCKER_OID>E2A699C535C05AF3E0401F0A0799357E</RIGHTS_LOCKER_OID>       <NODE_OID>222259</NODE_OID>       <PURCHASE_NODE_ACCOUNT_OID>E2A699C535B85AF3E0401F0A0799357E</PURCHASE_NODE_ACCOUNT_OID>       <RETAILER_TRANSACTION>RetailerTransaction_1_node222333_RetailerNode</RETAILER_TRANSACTION>       <TRANSACTION_TYPE>null</TRANSACTION_TYPE>       <PURCHASE_NODE_USER_OID>E2A699C535E45AF3E0401F0A0799357E</PURCHASE_NODE_USER_OID>       <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>       <ALID>urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_831840.txt</ALID>       <CONTENT_ID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_831840.txt</CONTENT_ID>       <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>       <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>       <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>       <LICENSE_ACQ_BASE_LOC>ns3updated.google.com 	</LICENSE_ACQ_BASE_LOC>       <CREATED_DATE>2013-07-29 12:31:26.292</CREATED_DATE>       <CREATED_BY>222259</CREATED_BY>       <UPDATED_DATE>2013-07-29 12:31:29.91</UPDATED_DATE>       <UPDATED_BY>222259</UPDATED_BY>       <STATUS_ID>active</STATUS_ID>     </Row>   </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList FilterMoreAvailable="false" FilterCount="10" FilterOffset="0" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" AccountID="urn:dece:accountid:org:dece:E2A82ABE9FB73242E0401F0A05990357" RightsLockerID="urn:dece:rightslockerid:org:dece:E2A82ABE9FBF3242E0401F0A05990357" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenReference CreatedDate="2013-07-29T14:28:25.199Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A8459DB2E23958E0401F0A079954C0"/>
   <RightsTokenReference CreatedDate="2013-07-29T14:27:35.162Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A8459DB2913958E0401F0A079954C0"/>
   <RightsTokenReference CreatedDate="2013-07-29T14:26:47.623Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A8459DB21F3958E0401F0A079954C0"/>
   <RightsTokenReference CreatedDate="2013-07-29T14:25:58.172Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A83CC2CDE47ADAE0401F0A07994368"/>
   <RightsTokenReference CreatedDate="2013-07-29T14:25:07.928Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A83CC2CD9F7ADAE0401F0A07994368"/>
   <RightsTokenReference UpdatedDate="2013-07-29T14:27:50.965Z" CreatedDate="2013-07-29T14:27:38.575Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A8459DB2A23958E0401F0A079954C0"/>
   <RightsTokenReference UpdatedDate="2013-07-29T14:27:01.990Z" CreatedDate="2013-07-29T14:26:51.558Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A8459DB24A3958E0401F0A079954C0"/>
   <RightsTokenReference UpdatedDate="2013-07-29T14:26:12.199Z" CreatedDate="2013-07-29T14:26:01.769Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A83CC2CDF57ADAE0401F0A07994368"/>
   <RightsTokenReference UpdatedDate="2013-07-29T14:25:21.716Z" CreatedDate="2013-07-29T14:25:11.729Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A83CC2CDB07ADAE0401F0A07994368"/>
   <RightsTokenReference UpdatedDate="2013-07-29T14:24:22.391Z" CreatedDate="2013-07-29T14:24:12.119Z" CurrentStatus="urn:dece:type:status:active" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_460096.txt" RightsTokenID="urn:dece:rightstokenid:org:dece:E2A83CC2CD637ADAE0401F0A07994368"/>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT_StatusHistoryXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>E2A6AA129407400EE0401F0A07995878</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_831840.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2013-07-29 12:31:29.8</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASE_PROFILE_OID>E2A6AA1293F9400EE0401F0A07995878</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>pd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-29 12:31:26.194</CREATED_DATE>
      <UPDATED_DATE>2013-07-29 12:31:29.71</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASE_PROFILE_OID>E2A6AA1293FA400EE0401F0A07995878</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-29 12:31:26.194</CREATED_DATE>
      <UPDATED_DATE>2013-07-29 12:31:29.71</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASE_PROFILE_OID>E2A6AA1293FB400EE0401F0A07995878</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>hd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-29 12:31:26.194</CREATED_DATE>
      <UPDATED_DATE>2013-07-29 12:31:29.71</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>E2A6AA129409400EE0401F0A07995878</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-29 12:31:29.8</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>E2A6AA12940B400EE0401F0A07995878</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-29 12:31:29.8</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>E2A6AA12940C400EE0401F0A07995878</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-29 12:31:29.8</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>E2A6AA12940A400EE0401F0A07995878</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-29 12:31:29.8</CREATED_DATE>
    </Row>
    <Row rowNumber='5'>
      <FULFILLMENT_LOC_OID>E2A6AA129408400EE0401F0A07995878</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E2A6AA1293F4400EE0401F0A07995878</RIGHTS_TOKEN_OID>
      <TYPE>StreamWeb</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/streaminglink</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-29 12:31:29.8</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      <con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:CB65DD1FD6B01423E0401F0A2222593A4E</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:CB65DD1FD6BE1423E0401F0A2222593A4E</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>DbResultRT-StatusHistoryXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>CB65D8F790208E47E0401F0A2222593A52</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>CB65D8F790178E47E0401F0A2222593A52</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>RightsToken has been created.</DESCRIPTION>
      <CREATED_DATE>2012-10-06 14:34:27.83</CREATED_DATE>
      <CREATED_BY_NODE_OID>222259</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>CB65DD1FD6C31423E0401F0A2222593A4E</CREATED_BY_USER_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Comparing RightsTokenIDs" searchProperties="true" id="f0491e02-84a1-47a5-9f5b-5901632dada3"><con:settings/><con:testStep type="groovy" name="Comparing RightsTokenIDs" id="d9932660-b34b-45bf-98a9-378dd42d9578" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange
import groovy.lang.*;
import java.lang.*;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 
def RTokens = new ArrayList();
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
log.info "Val_RightsResXml--"+Val_RightsResXml;
def RTCount = Val_RightsResXml.children().collect{ it.name()};
log.info "RTCount=="+RTCount;
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
log.info "RTattb=="+RTattb;
def RTCountSize = RTCount.size();
log.info "RTCountSize=="+RTCountSize;

for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];

if (Val_RightsResXml.RightsToken[rtc].size()!=0){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

RTObjType = Resp_RightTokenObj[rtc].toString();
DBrightstokenid = Resp_RightsTokenID[rtc].tokenize(':').last();
RTokens += DBrightstokenid;
log.info "RTokens=="+RTokens;
log.info "DBrightstokenid : " + DBrightstokenid;

//log.info "2421234322223234324" + testCase.setPropertyValue("Accountid");
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());
}
else{
Resp_RightTokenObj += Val_RightsResXml.children().collect{ it[0].name()};
Resp_RightsTokenID += (Val_RightsResXml.RightsTokenReference[rtc]).toString();
log.info "Resp_RightsTokenID=="+Resp_RightsTokenID;
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

RTObjType = Resp_RightTokenObj[rtc].toString();
DBrightstokenid = Resp_RightsTokenID[rtc].tokenize(':').last();
RTokens += DBrightstokenid;
log.info "RTokens=="+RTokens;
log.info "DBrightstokenid : " + DBrightstokenid;
//testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());
log.info "rtc=="+rtc;
}
}

for ( int rtc in 0..RTokens.size() -1)
{
	
	if (rtc!=RTokens.size() -1)
	{
	rtc1=rtc+1;
	log.info "rtc1="+rtc1;
	//log.info RTokens[rtc] +"in decimal Format is=="+ Integer.parseInt(RTokens[rtc], 16);
	log.info "RT[$rtc]"+ RTokens[rtc]+"AND RT[$rtc1]"+ RTokens[rtc1];  
	assert RTokens[rtc] &lt; RTokens[rtc1]
	
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Comparing RightsTokenIDs on Date" id="738d566d-0bc6-4681-b679-fdadfefa3230" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected & Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml
if (CallingTCase.getPropertyValue("ResponseType") != "metadata") ||(CallingTCase.getPropertyValue("ResponseType") != "download")
{

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();
def DBrightstokenid2;
log.info "1==========="+Resp_RightsTokenID[rtc];
log.info "2============"+Val_RightsResXml.RightsToken[rtc+1].@RightsTokenID;
def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
if ((rtc+1)<=(RTCountSize -1))
{
	//def DBrightstokenid2 = (Resp_RightsTokenID[rtc+1]).toString().tokenize(':').last(); //For Update/Create Date Order
	DBrightstokenid2  = Val_RightsResXml.RightsToken[rtc+1].@RightsTokenID;
	DBrightstokenid2 = (DBrightstokenid2).toString().tokenize(':').last();
	log.info "DBrightstokenid2=="+DBrightstokenid2;
	testCase.setPropertyValue("DBrightstokenid2",DBrightstokenid2.toString());
}
	
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

// Fetch RightsToken info from RIGHTS_TOKEN table for the second RightsToken
if ((rtc+1)<=(RTCountSize -1))
{
	log.info "Fetching Data from the DataBase";
SECND_RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid2"));
log.info "SEcond RightsData==="+SECND_RT_Data ;
SECND_RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid2"));

testCase.setPropertyValue("SECND_DbResultRTXml",SECND_RT_Data.toString());
testCase.setPropertyValue("SECND_DbResultRT-SoldAsXml",SECND_RT_Data2.toString());
testCase.setPropertyValue("SECND_DbResultRT-PMPPXml",SECND_RT_Data3.toString());
testCase.setPropertyValue("SECND_DbResultRT-FFLocXml",SECND_RT_Data4.toString());
}

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
		if ((rtc+1)<=(RTCountSize -1))
			SECND_Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//if ((rtc+1)<=(RTCountSize -1))
			//SECND_Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//if ((rtc+1)<=(RTCountSize -1))
			//SECND_Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
		//if ((rtc+1)<=(RTCountSize -1))
			//SECND_Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();
	
	
	
log.info "Expected Return Object Type : [RightsTokenLocation]  - Actual Return Object Type is : [$RTObjType]"; //Updated by Aravind
//assert RTObjType == 'RightsTokenLocation'; //	Updated by Aravind
	
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		log.info "Expected LockerId :" +expectRTG_Lockerid; //Updated by Aravind
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break;

}

//Comparing for the order of RightsToken Displayed.
		log.info "[$rtc] Rights TokenGet UPDATED DATE  : [$expectRTG_PS_UpdatedDate] - [$rtc+1] Rights TokenGet UPDATED DATE : [$SECND_expectRTG_PS_UpdatedDate]";
		log.info "[$rtc] Rights TokenGet CREATED DATE  : [$expectRTG_PS_CreationDate] - [$rtc+1] Rights TokenGet CREATED DATE : [$SECND_expectRTG_PS_CreationDate]";
		def date1=null;
		def date2=null;
		if (expectRTG_PS_UpdatedDate == "null")
		{
			//date1 = expectRTG_PS_CreationDate;
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_CreationDate.toString());
			log.info "....date1=="+date1;
		}
		else
		{
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_UpdatedDate.toString());
			//date1 = expectRTG_PS_UpdatedDate;
			log.info "date1=="+date1;
		}	
		if ((rtc+1)<=(RTCountSize -1))
		{
			if (SECND_expectRTG_PS_UpdatedDate == "null")
			{
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_CreationDate.toString());
				//date2=SECND_expectRTG_PS_CreationDate;
				log.info ".....date2=="+date2;
			}
			else
			{
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_UpdatedDate.toString());
				//date2=SECND_expectRTG_PS_UpdatedDate;
				log.info "date2=="+date2;
			}
			log.info "After Condition date1=="+date1;
			log.info "After Condition date2=="+date2;
			//assert date1 > date2;
			assert date1.getTime() > date2.getTime();
		}
}
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="9a29606e-a87d-42b0-b059-ed51a942cb32"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

boolean processFlag = true;
def rightsTokensResponseOrder = new ArrayList();
def Resp_RightsTokenID;
def Resp_RightTokenObj;

def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();
rightsTokensResponseOrder = [];
def DBrightstokenid2;
def DBrightstokenid;

for ( int rtc in 0..RTCountSize -1)
{
	log.info "Val_RightsResXml==="+Val_RightsResXml;
	if (CallingTCase.getPropertyValue("ResponseType").toUpperCase() != 'reference'.toUpperCase())
	{
	log.info "RT Details==="+Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
	Resp_RightsTokenID = Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
	

	 DBrightstokenid = (Val_RightsResXml.RightsToken[rtc].@RightsTokenID).toString().tokenize(':').last();
	}
	else
	{
		log.info "RT Details==="+Val_RightsResXml.RightsTokenReference[rtc].@RightsTokenID;
		Resp_RightsTokenID = Val_RightsResXml.RightsTokenReference[rtc].@RightsTokenID;
	

		 DBrightstokenid = (Val_RightsResXml.RightsTokenReference[rtc].@RightsTokenID).toString().tokenize(':').last();
	}
	log.info "DBrightstokenid : " + DBrightstokenid;
	testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
	
	// Fetch RightsToken info from RIGHTS_TOKEN table
	RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
		
	testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
		
	}
log.info "UPDATE DATE==="+Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE

log.info "CREATED DATE==="+Val_DbResultRTXml.ResultSet.Row.CREATED_DATE
	
	if ((Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE).toString() == "null")
		rightsTokensResponseOrder  =  new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",Val_DbResultRTXml.ResultSet.Row.CREATED_DATE.toString());
	else 
		rightsTokensResponseOrder  =  new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE.toString());
	
	log.info "rightsTokensResponseOrder==="+rightsTokensResponseOrder;
	
	if ((rtc+1)&lt;=(RTCountSize -1))
	{
		if (CallingTCase.getPropertyValue("ResponseType").toUpperCase() != 'reference'.toUpperCase())
		{
			log.info "2==="+ Val_RightsResXml.RightsToken[rtc+1].@RightsTokenID;
			DBrightstokenid2 = (Val_RightsResXml.RightsToken[rtc+1].@RightsTokenID).toString().tokenize(':').last(); //For Update/Create Date Order
		}
		else
		{
			log.info "2==="+ Val_RightsResXml.RightsTokenReference[rtc+1].@RightsTokenID;
			DBrightstokenid2 = (Val_RightsResXml.RightsTokenReference[rtc+1].@RightsTokenID).toString().tokenize(':').last(); //For Update/Create Date Order
		}
		log.info "DBrightstokenid2=="+DBrightstokenid2;
		SECND_RT_Data = mydbRights.rightstokenGetRow(DBrightstokenid2);
		testCase.setPropertyValue("SECND_DbResultRTXml",SECND_RT_Data.toString());
		
		SECND_Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRTXml"));
		log.info "Updated Date ==="+SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		log.info "Created DATE==="+SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE
		
		if ((SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE).toString() == "null")
			rightsTokensResponseOrder2  =  new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE.toString());
		else 
			rightsTokensResponseOrder2  =  new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE.toString());
		
		log.info "[1] : $rightsTokensResponseOrder [2] :  $rightsTokensResponseOrder2";
		assert rightsTokensResponseOrder.getTime() > rightsTokensResponseOrder2.getTime()
	}

}
log.info "------Order of Rights Token Display is as expected---------";


	</script></con:config></con:testStep><con:properties><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsTokenList FilterMoreAvailable="false" FilterCount="3" FilterOffset="0" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" AccountID="urn:dece:accountid:org:dece:E68FE81ABC8C3AA6E0401F0A05997BC2" RightsLockerID="urn:dece:rightslockerid:org:dece:E68FE81ABC943AA6E0401F0A05997BC2" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E68FF05DB47A4F00E0401F0A05990F88">
      <RightsTokenDetails Language="en-us" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_543876.txt" ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_543876.txt">
         <TitleDisplay60>title_3_60</TitleDisplay60>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4184F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4154F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB41A4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4194F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4174F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB4164F00E0401F0A05990F88</ArtReference>
         <Summary190>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours.</Summary190>
         <Genre>Family</Genre>
         <Genre>Comedy</Genre>
         <Genre>Adventure</Genre>
         <Genre>Fantasy</Genre>
         <Genre>Animation</Genre>
         <RunLength>PT1H43M0.000S</RunLength>
         <WorkType>Movie</WorkType>
         <RatingSet>
            <ns2:Rating>
               <ns2:Region>
                  <ns2:countryRegion>US</ns2:countryRegion>
                  <ns2:country>US</ns2:country>
               </ns2:Region>
               <ns2:System>MPAA</ns2:System>
               <ns2:Value>NC-17</ns2:Value>
               <ns2:LinkToLogo>http://www.mpaa.org/_images/nc-17.gif</ns2:LinkToLogo>
            </ns2:Rating>
            <ns2:AdultContent>false</ns2:AdultContent>
         </RatingSet>
      </RightsTokenDetails>
   </RightsToken>
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E68FF05DB4024F00E0401F0A05990F88">
      <RightsTokenDetails Language="en-us" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_933448.txt" ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_933448.txt">
         <TitleDisplay60>title_2_60</TitleDisplay60>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3D04F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3CE4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3CF4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3CD4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3CC4F00E0401F0A05990F88</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FF05DB3D14F00E0401F0A05990F88</ArtReference>
         <Summary190>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours.</Summary190>
         <Genre>Comedy</Genre>
         <Genre>Animation</Genre>
         <Genre>Family</Genre>
         <Genre>Fantasy</Genre>
         <Genre>Adventure</Genre>
         <RunLength>PT1H43M0.000S</RunLength>
         <WorkType>Movie</WorkType>
         <RatingSet>
            <ns2:Rating>
               <ns2:Region>
                  <ns2:countryRegion>US</ns2:countryRegion>
                  <ns2:country>US</ns2:country>
               </ns2:Region>
               <ns2:System>MPAA</ns2:System>
               <ns2:Value>NC-17</ns2:Value>
               <ns2:LinkToLogo>http://www.mpaa.org/_images/nc-17.gif</ns2:LinkToLogo>
            </ns2:Rating>
            <ns2:AdultContent>false</ns2:AdultContent>
         </RatingSet>
      </RightsTokenDetails>
   </RightsToken>
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E68FF05DB3B94F00E0401F0A05990F88">
      <RightsTokenDetails Language="en-us" ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_705851.txt" ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_705851.txt">
         <TitleDisplay60>title_1_60</TitleDisplay60>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B9F494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B6F494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B5F494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B8F494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60BAF494E0401F0A05990F86</ArtReference>
         <ArtReference>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E68FEF4D60B7F494E0401F0A05990F86</ArtReference>
         <Summary190>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours.</Summary190>
         <Genre>Comedy</Genre>
         <Genre>Animation</Genre>
         <Genre>Fantasy</Genre>
         <Genre>Adventure</Genre>
         <Genre>Family</Genre>
         <RunLength>PT1H43M0.000S</RunLength>
         <WorkType>Movie</WorkType>
         <RatingSet>
            <ns2:Rating>
               <ns2:Region>
                  <ns2:countryRegion>US</ns2:countryRegion>
                  <ns2:country>US</ns2:country>
               </ns2:Region>
               <ns2:System>MPAA</ns2:System>
               <ns2:Value>NC-17</ns2:Value>
               <ns2:LinkToLogo>http://www.mpaa.org/_images/nc-17.gif</ns2:LinkToLogo>
            </ns2:Rating>
            <ns2:AdultContent>false</ns2:AdultContent>
         </RatingSet>
      </RightsTokenDetails>
   </RightsToken>
</RightsTokenList>]]></con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R4_ViewByFilterClass=LastModifiedDate_And_without_FilterOffset_FilterCount</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_40001_ViewByFilter_LastModifiedDate_Verify_RightsTokens_Display_Order_on_CreationDate_when_RT_has_Unique_Metadata_Details</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:E123D37D7985AC65E0401F0A05991C60</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:E123F01EF5B76B71E0401F0A07996B2B</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>E68FF05DB3B94F00E0401F0A05990F88</con:value></con:property><con:property><con:name>SECND_DbResultRTXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>E68FF05DB3B94F00E0401F0A05990F88</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>E68FE81ABC8D3AA6E0401F0A05997BC2</ACCOUNT_OID>
      <USER_OID>E68FEF28F75DDF31E0401F0A05990F24</USER_OID>
      <RIGHTS_LOCKER_OID>E68FE81ABC943AA6E0401F0A05997BC2</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>E68FE81ABC8C3AA6E0401F0A05997BC2</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>transcation</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>null</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>E68FEF28F75CDF31E0401F0A05990F24</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_705851.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_705851.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2013-09-17 07:04:59.528</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>SECND_DbResultRT-SoldAsXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>E123F01EF5BF6B71E0401F0A07996B2B</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>title_4</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_601305.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>SECND_DbResultRT-PMPPXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASE_PROFILE_OID>E123F01EF5BC6B71E0401F0A07996B2B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>pd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASE_PROFILE_OID>E123F01EF5BD6B71E0401F0A07996B2B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASE_PROFILE_OID>E123F01EF5BE6B71E0401F0A07996B2B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>hd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>SECND_DbResultRT-FFLocXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>E123F01EF5BB6B71E0401F0A07996B2B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>E123F01EF5BA6B71E0401F0A07996B2B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>E123F01EF5B96B71E0401F0A07996B2B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>E123F01EF5B86B71E0401F0A07996B2B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>DbResultRTXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>E68FF05DB3B94F00E0401F0A05990F88</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>E68FE81ABC8D3AA6E0401F0A05997BC2</ACCOUNT_OID>
      <USER_OID>E68FEF28F75DDF31E0401F0A05990F24</USER_OID>
      <RIGHTS_LOCKER_OID>E68FE81ABC943AA6E0401F0A05997BC2</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>E68FE81ABC8C3AA6E0401F0A05997BC2</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>transcation</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>null</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>E68FEF28F75CDF31E0401F0A05990F24</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_705851.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_705851.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2013-09-17 07:04:59.528</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>DbResultRT-SoldAsXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>E123F01EF5BF6B71E0401F0A07996B2B</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>title_4</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_601305.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>DbResultRT-PMPPXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASE_PROFILE_OID>E123F01EF5BC6B71E0401F0A07996B2B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>pd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASE_PROFILE_OID>E123F01EF5BD6B71E0401F0A07996B2B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASE_PROFILE_OID>E123F01EF5BE6B71E0401F0A07996B2B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>hd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>DbResultRT-FFLocXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>E123F01EF5BB6B71E0401F0A07996B2B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>E123F01EF5BA6B71E0401F0A07996B2B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>E123F01EF5B96B71E0401F0A07996B2B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>E123F01EF5B86B71E0401F0A07996B2B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E123F01EF5B76B71E0401F0A07996B2B</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2013-07-10 07:09:51.518</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>DBrightstokenid2</con:name><con:value>E123F01EF5B76B71E0401F0A07996B2B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenUpdate Request_Without_SAML" searchProperties="true" id="b3c49a03-0933-4487-ae94-d0e98b26b8b7">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="5246a1c3-4ce6-4587-8ec9-1be5edc019a8">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

/*def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightTokenUpdateRequest PUT").testRequest.setRequestHeaders(headers);*/

//SetUp test properties
//testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("SAMLassertion"));
// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
//SetUp test properties

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId"))
rightsLockerID = myAccount.accountGetRightsLockerId(accountID);

testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("RightsLockerID","");
testCase.setPropertyValue("RightsLockerID","urn:dece:rightslockerid:org:dece:"+rightsLockerID);
//testCase.setPropertyValue("RightsLockerID",CallingTCase.getPropertyValue("RightsLockerID"));
//testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
}
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanDownLoad1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RRSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("PITransactionType",CallingTCase.getPropertyValue("PITransactionType"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("StreamWebLocLocation1",CallingTCase.getPropertyValue("StreamWebLocLocation1"));
testCase.setPropertyValue("StreamWebLocPreference1",CallingTCase.getPropertyValue("StreamWebLocPreference1"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTUReq","OK");
CallingTCase.setPropertyValue("FeedRTUReq",testCase.getPropertyValue("FeedRTUReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightTokenUpdate -Request_Trimmed" disabled="true" id="e37ed2e5-976a-42bc-9984-9ec0b7209522">
        <con:settings/>
        <con:config service="RightsTokenUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightTokenUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightTokenUpdate -Request_Trimmed" mediaType="application/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9AEA51509D0FBEE4E0401F0A05992AD5" 
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd " 
xmlns:dece="http://www.decellc.org/schema/2010/10/dece" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:RightsLockerID>urn:dece:rightslockerid:org:dece:7001</dece:RightsLockerID>
 <dece:RightsTokenData 
 ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt" ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt"> 
            <dece:RightsProfiles>
             <dece:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:hd">
                    <dece:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</dece:DiscreteMediaRightsRemaining>
                    <dece:CanDownload>true</dece:CanDownload>
                    <dece:CanStream>true</dece:CanStream>
               </dece:PurchaseProfile>
             <dece:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:sd">
                    <dece:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</dece:DiscreteMediaRightsRemaining>
                    <dece:CanDownload>true</dece:CanDownload>
                    <dece:CanStream>true</dece:CanStream>
                </dece:PurchaseProfile>   
                  <dece:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:pd">
                    <dece:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</dece:DiscreteMediaRightsRemaining>
                    <dece:CanDownload>true</dece:CanDownload>
                    <dece:CanStream>true</dece:CanStream> 
                </dece:PurchaseProfile> 
              </dece:RightsProfiles>
          <dece:ResourceStatus>  
             <dece:Current CreationDate="2011-02-17T15:12:03" CreatedBy="urn:dece:org:org:dece:07909"> 
                     <dece:Value>urn:dece:type:status:active</dece:Value>
                    <dece:Description>new rights token</dece:Description>
                </dece:Current>
            </dece:ResourceStatus> 
   <dece:LicenseAcqBaseLoc>ns3.google.com</dece:LicenseAcqBaseLoc>
              <dece:FulfillmentWebLoc>
                <dece:Location>https://dl.bestbuy.com/p/aaa</dece:Location>
                <dece:Preference>1</dece:Preference>
            </dece:FulfillmentWebLoc>
            <dece:FulfillmentWebLoc>
                <dece:Location>https://dl.bestbuy.com/p/bbb</dece:Location>
                <dece:Preference>2</dece:Preference>
            </dece:FulfillmentWebLoc>
            <dece:FulfillmentManifestLoc>
                <dece:Location>https://dl.bestbuy.com/p/ccc</dece:Location>
                <dece:Preference>3</dece:Preference>
            </dece:FulfillmentManifestLoc>
            <dece:FulfillmentManifestLoc>
                <dece:Location>https://dl.bestbuy.com/p/ddd</dece:Location>
                <dece:Preference>4</dece:Preference>
            </dece:FulfillmentManifestLoc>
        <dece:PurchaseInfo>
            <dece:NodeID>urn:dece:org:org:dece:222259</dece:NodeID>
            <dece:RetailerTransaction>Transaction_node0701-to-222259</dece:RetailerTransaction>
            <dece:PurchaseAccount>urn:dece:accountid:org:dece:107006</dece:PurchaseAccount>
            <dece:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</dece:PurchaseUser>
            <dece:PurchaseTime>2010-02-01T12:27:41</dece:PurchaseTime>
        </dece:PurchaseInfo> 
    </dece:RightsTokenData>
</dece:RightsTokenFull>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:107006"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:9AEA51509D0FBEE4E0401F0A05992AD5"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="921d121a-128a-4c08-a9f0-59e4cf743fdb">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("RightTokenUpdateRequest PUT");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightTokenUpdateRequest PUT" id="8142c604-5882-4a03-8282-a12ab05260e4">
        <con:settings/>
        <con:config service="RightsTokenUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightTokenUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightTokenUpdateRequest PUT" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="If-Match" value="*" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="RecordRequestRepresentations">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<ns4:RightsTokenFull ALID="${#TestCase#ALID}" 	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" 	ContentID="${#TestCase#ContentID}" xmlns:ns4="${#Project#SchemaNameSpace}" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc} 	</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:StreamWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#StreamWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#StreamWebLocPreference1}</ns4:Preference> 	</ns4:StreamWebLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:RightsLockerID>${#TestCase#RightsLockerID}</ns4:RightsLockerID> </ns4:RightsTokenFull>]]></con:request>
            <con:assertion type="GroovyScriptAssertion" disabled="true" id="71490b8e-ae51-4517-b64a-83ce622d7a3e">
              <con:configuration>
                <scriptText>// check for the HTTP Response code 
assert messageExchange.responseHeaders["#status#"] == "HTTP/1.1 200 OK"</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#encodedRightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:E3BF51A1F64544EAE0401F0A05997030</con:value>
        </con:property>
        
        
        <con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_338618.txt</con:value></con:property>
        
        
        <con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_338618.txt</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property>
        <con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property>
        
        <con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property>
        
        
        <con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ns3updated.google.com</con:value>
        </con:property>
        
        
        <con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property>
        
        
        
        <con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:E62FEF44C9B4FE2BE0401F0A05991685</con:value></con:property>
        <con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:E62FEF44C9FAFE2BE0401F0A05991685</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_node222333_RetailerNode</con:value></con:property>
        
        
        <con:property><con:name>PITransactionType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:transaction:category1</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property>
        <con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property>
        
        
        
        
        <con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property>
        
        
        
        <con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property>
        
        
        
        
        
        <con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:</con:value></con:property><con:property><con:name>RightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:E63009CF2F05B95CE0401F0A05995625</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property>
        
        
        <con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_338618.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>StreamWebLocLocation1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://dl.bestbuy.com/p/streaminglink</con:value></con:property>
        
        
      <con:property><con:name>StreamWebLocPreference1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_40013_ViewByFilter_LastModifiedDate_Verify_invalid_format_(yyyy-MM-dd'T'hh:mm:ss.sss)</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R4_ViewByFilterClass=LastModifiedDate&amp;OnorAfter=InvalidDateFormat_And_without_FilterOffset_FilterCount</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:E63009CF2F05B95CE0401F0A05995625</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:E62FEF44C9B4FE2BE0401F0A05991685</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Update Information For Without SAML Request" searchProperties="true" id="4e8ce9c8-7c2b-4f6b-9951-5ba37a2975c2">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenUpdate Request XML" id="a77ce30a-9a74-46ce-ae2a-c41a667b461d">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request_Without_SAML").getTestStepByName("RightTokenUpdateRequest PUT").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info "RightsReqXml:" + testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="04564b37-6d6a-40d1-a98f-724069b99595">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request_Without_SAML").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request_Without_SAML").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request_Without_SAML").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

log.info RightsResHttpStatus[0];
log.info "Response Time : $RightsResTime:ms";
testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus[0] == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus[0].toString()}";
log.info "Response Time : $RightsResTime:ms";
}
else{
log.info " RightsToken Update failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
log.info "ResponseXML:" + testCase.getPropertyValue("RightsResXml");
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_40012_ViewByFilter_LastModifiedDate_Verify_invalid_format_(yyyy-MM-dd'T'hh:mm:sss)</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R4_ViewByFilterClass=LastModifiedDate&amp;OnorAfter=InvalidDateFormat_And_without_FilterOffset_FilterCount</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenFull ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_198597.txt" 	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" 	ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_198597.txt" xmlns:ns4="http://www.decellc.org/schema/2013/06/coordinator" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_198597.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3updated.google.com 	</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:StreamWebLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222333_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:E62FC234F92424E3E0401F0A059936BC</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:RightsLockerID>urn:dece:rightslockerid:org:dece:E62FB9503D066D8CE0401F0A059923A2</ns4:RightsLockerID> </ns4:RightsTokenFull>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>3243</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenUpdate Response Validation For Without SAML" searchProperties="true" id="4d506271-4d8b-4125-a05f-044cf984d42e">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenUpdate RESPONSE" id="e69b6fd3-a867-4384-8772-3e3b98ff9185">
        <con:settings/>
        <con:config><script>import groovy.*;
import groovy.xml.*;
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("errorStatusCode","nothing");
//testCase.setPropertyValue("errorReason","nothing");
//testCase.setPropertyValue("errorID","nothing");

def QAResp_ErrorID;
def ValerrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));

testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
testCase.setPropertyValue("expectErrTypeRTUpdate",CallingTCase.getPropertyValue("expectErrTypeRTUpdate"));
testCase.setPropertyValue("RTObjType",CallingTCase.getPropertyValue("RTObjType"));
//def contentProfile= CallingTCase.getPropertyValue("ContentProfile");
//
//	int lastColon = contentProfile.lastIndexOf(':');
//	int lastSlash = contentProfile.lastIndexOf('/');
//	contentProfile     = contentProfile.substring(lastColon + 1);
//log.info "contentProfile ="+contentProfile;

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request_Without_SAML").getTestStepByName("RightTokenUpdateRequest PUT").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request_Without_SAML").getTestStepByName("RightTokenUpdateRequest PUT").httpRequest.response.getResponseHeaders();
def errorRespType = testCase.getPropertyValue("expectErrTypeRTUpdate");

def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");
def Res_RTObjType = testCase.getPropertyValue("RTObjType");

log.info Res_RTObjType;
log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
log.info Resp_HTTPcontentlength[0];
log.info errorRespType;

// Error Validation Flags &amp; Values


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";


switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport'&amp;&amp; Res_RTObjType == 'RightsTokenFull'){
               
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$Res_RTObjType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$Res_RTObjType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	QAResp_ErrorID = "ForbiddenAccountNotActive"
	ValerrorID = 1;
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	case "PURCHASE_USER_NOT_BELONGS_TO_PURCAHSE_ACCOUNT":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserDoesNotBelongToPurchaseAccount";
	Resp_errorReason = "The purchasing member does not belong to the purchase account.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserDoesNotBelongToPurchaseAccount";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:MediaProfileNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;


	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
			
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID  = 1;
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;

	case "CONTENT_ID_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	
	break;          
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = ""
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;

	case "MEDIAPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:MediaProfileNotValid";
	QAResp_ErrorID = "BadRequestMediaProfileNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValid";
	break;
	
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		log.info '------------------------------------DM_REM'
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;

	case "CONTENTPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:MediaProfileNotValid";
	QAResp_ErrorID = "BadRequestMediaProfileNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	ValerrorID = 1;
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	log.info '----------FFMISSING'
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	QAResp_ErrorID = "BadRequestLicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;

	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "RIGHTSLOCKERID_DONOT_MATCH_WITH_ACCOUNTID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsLockerIDInRequestDoNotMatchAccountRightsLockerID";
	QAResp_ErrorID = "BadRequestRightsLockerIDInRequestDoNotMatchAccountRightsLockerID";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsLockerIDInRequestDoNotMatchAccountRightsLockerID";
	
	break;

	case "TRANSACTION_TYPE_ID_NOT_VALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:TransactionTypeIDNotValid";
	QAResp_ErrorID = "BadRequestTransactionTypeIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#TransactionTypeIDNotValid";
	
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;
	
	case "PURCHASE_TIME_INVALID":
	log.info '--------------PITIME'
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;;
	break;

	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;;
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestRightsSoldAsUpdationNotAllowed"
	ValerrorID = 1;				
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "SCHEMA_VALIDATION_ERROR":
	log.info 'schme-----------error'
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RESOURCE_STATUS_ELEMENT_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
	QAResp_ErrorID = "ForbiddenResourceStatusElementNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	
	case "DISCRETEMEDIA_RIGHTS_REMAINING_ELEMENT_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaRightsRemainingNotAllowed";
	QAResp_ErrorID = "BadRequestDiscreteMediaRightsRemainingNotAllowed";
	testCase.setPropertyValue("PPContentProfile",CallingTCase.getPropertyValue("PPContentProfile3"));
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaRightsRemainingNotAllowed";
	break;

	case "PURCHASE_PROFILE_HAS_DMR_ALREADY_CREATED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:PurchaseProfileHasDMRAlreadyCreated";
	QAResp_ErrorID = "BadRequestPurchaseProfileHasDMRAlreadyCreated";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseProfileHasDMRAlreadyCreated";
	break;
	
	
 }


testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;

if(ValerrorID.toString() == '1') {
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
//assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if (errorRespType.toString()== "SUCCESS"){
log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
assert Resp_HTTPcontentlength[0].toInteger() == 0; 
}
else 
{
log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
assert Resp_HTTPcontentlength[0].toInteger() > 0;
}

//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype[0];
log.info "expected " + expectHTTPcontenttype
assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
    if(Resp_ErrorID.toString() == 'urn:dece:errorid:org:dece:DiscreteMediaRightsRemainingNotAllowed'){
	log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason" +" - "+ testCase.getPropertyValue("PPContentProfile")+ "]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason +" - " + testCase.getPropertyValue("PPContentProfile");
	}
	 if(Resp_ErrorID.toString() == 'urn:dece:errorid:org:dece:PurchaseProfileHasDMRAlreadyCreated'){
	log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason" +" - "+ contentProfile + "]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason +" - " + contentProfile;
	}
	else{
	log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;
	}
// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="ValidateRightsTokenUpdate RESPONSE------" disabled="true" id="4004cede-be34-42c1-a276-cb1d83447c7a">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));

testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
testCase.setPropertyValue("expectErrTypeRTUpdate",CallingTCase.getPropertyValue("expectErrTypeRTUpdate"));
testCase.setPropertyValue("RTObjType",CallingTCase.getPropertyValue("RTObjType"));

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName("RightTokenUpdateRequest PUT").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName("RightTokenUpdateRequest PUT").httpRequest.response.getResponseHeaders();
def errorRespType = testCase.getPropertyValue("expectErrTypeRTUpdate");

def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");
def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//log.info Resp_HTTPstatus;
//log.info Resp_HTTPconnection;
//log.info Resp_HTTPcontenttype;
//log.info Resp_HTTPcontentlength;

// Error Validation Flags &amp; Values

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";


switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport'&amp;&amp; Res_RTObjType == 'RightsTokenFull'){
               
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "API call not authorized";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	//log.info "jitu";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

 }

testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;

if(ValerrorID.toString() == '1') {
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if (errorRespType.toString()== "SUCCESS"){
log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
assert Resp_HTTPcontentlength[0].toInteger() == 0; 
}
else 
{
log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
assert Resp_HTTPcontentlength[0].toInteger() > 0;
}

//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype[0];
assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        
        
        <con:property><con:name>TSuiteName</con:name><con:value>R4_ViewByFilterClass=LastModifiedDate&amp;OnorAfter=InvalidDateFormat_And_without_FilterOffset_FilterCount</con:value></con:property>
        
        
        <con:property><con:name>TCaseName</con:name><con:value>TC_DECE_40012_ViewByFilter_LastModifiedDate_Verify_invalid_format_(yyyy-MM-dd'T'hh:mm:sss)</con:value></con:property>
        
        <con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RTObjType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:E62FEF44C710FE2BE0401F0A05991685</con:value></con:property>
        
        <con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property><con:property><con:name>PPContentProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property>
        
        
        
        
      <con:property><con:name>errorReason</con:name><con:value>The purchase profile already has a discrete media right.</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>Accountid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights UPDATE  Data Validation For Without SAML Request" searchProperties="true" id="a614f155-436c-473d-9c34-39bd694b8b48">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsToken UPDATE" id="e95ee761-b579-45de-854a-6f4c239fb909">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));


// Fetch RightsToken info from RIGHTS_TOKEN table

RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsTokenUPDATE Request" id="fdf964d5-21c6-4979-b8b2-36fddd242639">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 

def actRTC_PPContentProfile  = new ArrayList();
def actRTC_PPDMR  = new ArrayList();
def actRTC_PPCanDownload  = new ArrayList();
def actRTC_PPCanStream  = new ArrayList();
def actRTC_PPDMProfile  = new ArrayList();
def actRTC_LicAcqBaseLoc = new ArrayList();
def actRTC_FFWebLoc_Location = new ArrayList();
def actRTC_FFWebLoc_Pref = new ArrayList();
def actRTC_StreamWeb_Location = new ArrayList();
def actRTC_StreamWeb_Pref = new ArrayList();
def actRTC_FFManifestLoc_Location = new ArrayList();
def actRTC_FFManifestLoc_Pref = new ArrayList();
def expectRTC_PPContentProfile  = new ArrayList();
def expectRTC_PPDMR  = new ArrayList();
def expectRTC_PPCanDownload  = new ArrayList();
def expectRTC_PPCanStream  = new ArrayList();
def expectRTC_PPDMProfile  = new ArrayList();
def expectRTC_LicAcqBaseLoc = new ArrayList();
def expectRTC_StreamWeb_Location = new ArrayList();
def expectRTC_StreamWeb_Pref = new ArrayList();
def expectRTC_FFWebLoc_Location = new ArrayList();
def expectRTC_FFWebLoc_Pref = new ArrayList();
def expectRTC_FFManifestLoc_Location = new ArrayList();
def expectRTC_FFManifestLoc_Pref = new ArrayList();

// RightsToken Update Request Information 

def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));

		expectRTC_AccountID = testCase.getPropertyValue("Accountid");
		expectRTC_ALID = Val_RightsReqXml.@ALID.toString();
		expectRTC_ContentID = Val_RightsReqXml.@ContentID.toString();
		expectRTC_SoldAsLang = Val_RightsReqXml.SoldAs.DisplayName.@Language.toString();
		expectRTC_DisplayName = Val_RightsReqXml.SoldAs.DisplayName;
		expectRTC_SoldAsContentID = Val_RightsReqXml.SoldAs.ContentID;
		expectRTC_SoldAsBUNDLE_ID = Val_RightsReqXml.SoldAs.BundleID;

		log.info expectRTC_ALID;
		log.info expectRTC_ContentID;
		
		log.info "expectRTC_SoldAsContentID"+expectRTC_SoldAsContentID;
		if (expectRTC_SoldAsContentID=="")
			expectRTC_SoldAsContentID=null;
		


// Rights Purchase Media Purchase Profiles
		expPMPPSize = Val_RightsReqXml.RightsProfiles.PurchaseProfile.size();
		log.info "expPMPPSize-"+expPMPPSize;
		if (expPMPPSize!=0)
		{
		for ( i in 0..expPMPPSize-1 ){
	
			expectRTC_PPContentProfile +=(Val_RightsReqXml.RightsProfiles.PurchaseProfile.@MediaProfile[i]).toString();
			//expectRTC_PPDMR +=(Val_RightsReqXml.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			expectRTC_PPDMProfile +=(Val_RightsReqXml.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@FulfillmentMethod[i]).toString();
			if ((Val_RightsReqXml.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			expectRTC_PPCanDownload += 'Y';
			}
			else{
			expectRTC_PPCanDownload += 'N';
			}
			
			if ((Val_RightsReqXml.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			expectRTC_PPCanStream += 'Y';
			}
			else{
			expectRTC_PPCanStream += 'N';
			}
		}

		}
// Expected Rights Status 

	/*	expectRTC_RS_CreatedBy = (Val_RightsReqXml.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsReqXml.ResourceStatus.Current.@CreationDate).toString();
		RS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		log.info RS_CreationDate;
		expectRTC_RS_CreationDate = new Date().par se("yyyy-MM-dd hh:mm:ss.SSS",RS_CreationDate.toString());
		log.info expectRTC_RS_CreationDate;
		expectRTC_RS_Value = (Val_RightsReqXml.ResourceStatus.Current.Value).toString();
*/


//  Expected Rights Licence Acq Base Location

 		expLicAcqSize = Val_RightsReqXml.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..expLicAcqSize-1 ){
		
			expectRTC_LicAcqBaseLoc += Val_RightsReqXml.LicenseAcqBaseLoc[i];
		}

// Expected Rights Fullfillment WebLoc

	expFFWeblocSize = Val_RightsReqXml.FulfillmentWebLoc.size();

		if(expFFWeblocSize!=0){	
		for ( int i in 0..expFFWeblocSize-1 ){
	
		//expectRTC_FFWebLoc_Location += (Val_RightsReqXml.FulfillmentWebLoc.Location[i]).toString();
		//expectRTC_FFWebLoc_Pref += (Val_RightsReqXml.FulfillmentWebLoc.Preference[i]).toString();

		//if(i>0&amp;&amp;((Val_RightsReqXml.FulfillmentWebLoc.Location[0]).toString()==(Val_RightsReqXml.FulfillmentWebLoc.Location[1]).toString()))
	//	{
	//	continue;
		//expectRTC_FFManifestLoc_Pref += (Val_RightsReqXml.FulfillmentManifestLoc.Preference[i]).toString();
	//	} else {
			//expectRTC_FFWebLoc_Location.put((Val_RightsReqXml.FulfillmentWebLoc.Location[i]).toString(),(Val_RightsReqXml.FulfillmentWebLoc.Preference[i]).toString());	
			expectRTC_FFWebLoc_Location.add((Val_RightsReqXml.FulfillmentWebLoc.Location[i]).toString())//,(Val_RightsReqXml.FulfillmentWebLoc.Preference[i]).toString());	
			expectRTC_FFWebLoc_Pref += (Val_RightsReqXml.FulfillmentWebLoc.Preference[i]).toString();
	//		}
			
		}
		}

		expStreamWeblocSize = Val_RightsReqXml.StreamWebLoc.size();

		if(expStreamWeblocSize!=0){	
			for ( int i in 0..expStreamWeblocSize-1 ){

				expectRTC_StreamWeb_Location.add((Val_RightsReqXml.StreamWebLoc.Location[i]).toString())//,(Val_RightsReqXml.FulfillmentWebLoc.Preference[i]).toString());	
				expectRTC_StreamWeb_Pref += (Val_RightsReqXml.StreamWebLoc.Preference[i]).toString();
			}
			
		}


// Expected Rights Fullfillment ManifestLoc

	expFFManifestSize = Val_RightsReqXml.FulfillmentManifestLoc.size();
	
		
		for ( int i in 0..expFFManifestSize-1 ){

		//if(i>0&amp;&amp;((Val_RightsReqXml.FulfillmentManifestLoc.Location[0]).toString()==(Val_RightsReqXml.FulfillmentManifestLoc.Location[1]).toString()))
		//{
		//continue;
		//expectRTC_FFManifestLoc_Pref += (Val_RightsReqXml.FulfillmentManifestLoc.Preference[i]).toString();
		//} else {
			//expectRTC_FFManifestLoc_Location.put((Val_RightsReqXml.FulfillmentManifestLoc.Location[i]).toString(),Val_RightsReqXml.FulfillmentManifestLoc.Preference[i]).toString();	
			expectRTC_FFManifestLoc_Location.add((Val_RightsReqXml.FulfillmentManifestLoc.Location[i]).toString())//,Val_RightsReqXml.FulfillmentManifestLoc.Preference[i]).toString();	
			expectRTC_FFManifestLoc_Pref += (Val_RightsReqXml.FulfillmentManifestLoc.Preference[i]).toString();
			//}
		}

		//if(expectRTC_FFManifestLoc_Location[0]==expectRTC_FFManifestLoc_Location[1]){
		//	expectRTC_FFManifestLoc_Location.remove(expectRTC_FFManifestLoc_Location[1]);
		//	expectRTC_FFManifestLoc_Pref.remove(expectRTC_FFManifestLoc_Pref[1]);
			
		//	}

// Expected Rights Purchase Info
		expectRTC_PI_NodeID = (Val_RightsReqXml.PurchaseInfo.NodeID).toString();
		expectRTC_PI_RetailerTrax = (Val_RightsReqXml.PurchaseInfo.RetailerTransaction).toString();
		expectRTC_PI_PurcaseAccount = (Val_RightsReqXml.PurchaseInfo.PurchaseAccount).toString();
		expectRTC_PI_PurchaseUser = (Val_RightsReqXml.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsReqXml.PurchaseInfo.PurchaseTime).toString();
		expectRTC_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	
		expectRTC_PI_TransactionType = (Val_RightsReqXml.PurchaseInfo.TransactionType).toString();

// Expected Rights Status History 

		log.info " Expected Rights Status History Row Count for new RTC  ;" + testCase.getPropertyValue("RTC_rcStatusHistory");
		log.info "expectRTC_PI_RetailerTrax--"+expectRTC_PI_RetailerTrax;
		if (expectRTC_PI_RetailerTrax=="")
			expectRTC_PI_RetailerTrax=null;
		log.info "expectRTC_PI_RetailerTrax--"+expectRTC_PI_RetailerTrax;


// DB Rights Token Information 

def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
log.info 'Val_DbResultRTXml----->'+Val_DbResultRTXml;
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
def Val_DbResultRTSHXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-StatusHistoryXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcStreamWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'StreamWeb'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();
def rcStreamWeblocSize = rcStreamWebloc.size();



		// Rights Token 
		actRTC_Accountid =  "urn:dece:accountid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		actRTC_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		actRTC_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		actRTC_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		actRTC_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		actRTC_SoldAs_Lang = (Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID).toString();
		actRTC_SoldAs_PRODUCT_ID = (Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID).toString();
		actRTC_SoldAs_DisplayName = (Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME).toString();
		actRTC_SoldAs_ContentID = (Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID).toString();
		actRTC_SoldAs_BUNDLE_ID = (Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID).toString();

		
		
		// Rights Purchase Media Purchase Profiles
		log.info "PMPPSize=="+PMPPSize;

		if (PMPPSize !=0)
		{
		for ( i in 0..PMPPSize-1 ){
	
		actRTC_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		//actRTC_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		actRTC_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		actRTC_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}
		}
		// Rights Status 
		log.info '----->'+Val_DbResultRTXml
		actRTC_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		actRTC_RS_CreationDate =  new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",CreationDate.toString())
		actRTC_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		actRTC_LicAcqBaseLoc += (Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i]).toString();
		}
		
		if(actRTC_LicAcqBaseLoc[0]=="null"){
		 actRTC_LicAcqBaseLoc[0]="";
			}

		// Rights Fullfillment WebLocation

		if(rcFFWeblocSize!=0){
		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//actRTC_FFWebLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString());
		actRTC_FFWebLoc_Location.add((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString())//,(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString());
		actRTC_FFWebLoc_Pref += (Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString();
		}
		}

		if(rcStreamWeblocSize!=0){
			for ( int i in 0..rcStreamWeblocSize-1 ){
				int j = rcStreamWebloc[i].toInteger();
				actRTC_StreamWeb_Location.add((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString())//,(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString());
				actRTC_StreamWeb_Pref += (Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString();
			}
			
			}

		// Rights Fullfillment Manifest Location

		if(rcFFManifestSize!=0){
		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		//actRTC_FFManifestLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString());	
		actRTC_FFManifestLoc_Location.add((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString())//,(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString());	
		actRTC_FFManifestLoc_Pref += (Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString();
		}
		}

		// Rights Purchase Infomation
				
		actRTC_PI_NodeID = "urn:dece:org:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.NODE_OID).toString();
		actRTC_PI_RetailerTrax = (Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION).toString();
		actRTC_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID).toString();
		actRTC_PI_PurchaseUser = "urn:dece:userid:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID).toString();
		actRTC_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;
		log.info '------------>'+(Val_DbResultRTXml.ResultSet.Row.TRANSACTION_TYPE).toString()
		def actRTC_PI_TransactionType;
		if(!(Val_DbResultRTXml.ResultSet.Row.TRANSACTION_TYPE).toString().equalsIgnoreCase('null'))
		{	actRTC_PI_TransactionType = "urn:dece:type:transaction:"+ (Val_DbResultRTXml.ResultSet.Row.TRANSACTION_TYPE).toString();
			} else {
				actRTC_PI_TransactionType = "";
				}
		

		// Rights Status History


// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenUpdate Accountid Expected : [$expectRTC_AccountID] - Actual Recieved: [$actRTC_Accountid]";
 		assert expectRTC_AccountID == actRTC_Accountid ;

// Assert RightsToken LockerId

		log.info "Rights TokenUpdate  Assigned Lockerid Recieved: [$actRTC_Lockerid]";
		 //assert expectRTC_RightsLockerID == actRTC_Lockerid;

// Assert RightsToken id 

		log.info " New Rights TokenUpdate Tokenid Recieved: [$actRTC_RightsTokenID]";
		

// Assert RightsToken ALID 

		log.info "Rights TokenUpdate Alid Expected : [$expectRTC_ALID] - Actual Recieved: [$actRTC_ALID]";
 		assert expectRTC_ALID.toString() == actRTC_ALID.toString();

// Assert RightsToken ContentID 

		log.info "Rights TokenUpdate ContentID Expected : [$expectRTC_ContentID] - Actual Recieved: [$actRTC_ContentID]"; 
 		assert expectRTC_ContentID.toString() == actRTC_ContentID.toString();

// Assert RightsToken SoldAS Language

		log.info "Rights TokenUpdate SoldAs Language Expected : [$expectRTC_SoldAsLang] - Actual Recieved: [$actRTC_SoldAs_Lang]";
		assert expectRTC_SoldAsLang == actRTC_SoldAs_Lang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenUpdate SoldAs DisplayName Expected : [$expectRTC_DisplayName] - Actual Recieved:[$actRTC_SoldAs_DisplayName]";
 		assert expectRTC_DisplayName == actRTC_SoldAs_DisplayName;

		if (expectRTC_SoldAsContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenUpdate SoldAs ContentID Expected : [$expectRTC_SoldAsContentID] - Actual Recieved:[$actRTC_SoldAs_ContentID]";
 		assert expectRTC_SoldAsContentID == actRTC_SoldAs_ContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenUpdate SoldAs BUNDLE_ID Expected : [$expectRTC_SoldAsBUNDLE_ID] - Actual Recieved:[$actRTC_SoldAs_BUNDLE_ID]";
		assert expectRTC_SoldAsBUNDLE_ID == actRTC_SoldAs_BUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenUpdate Purchase ContentProfile Expected : $expectRTC_PPContentProfile - Actual Recieved:$actRTC_PPContentProfile";
		assert expectRTC_PPContentProfile.sort() == actRTC_PPContentProfile.sort();
	
		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		//log.info "Rights TokenUpdate Purchase DiscreteMediaRightsRemaining Expected : $expectRTC_PPDMR - Actual Recieved:$actRTC_PPDMR";
		//assert expectRTC_PPDMR == actRTC_PPDMR;
	
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenUpdate Purchase CanDownload Expected : $expectRTC_PPCanDownload - Actual Recieved:$actRTC_PPCanDownload";
		assert expectRTC_PPCanDownload == actRTC_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenUpdate Purchase CanStream Expected : $expectRTC_PPCanStream - Actual Recieved:$actRTC_PPCanStream";
		assert expectRTC_PPCanStream == actRTC_PPCanStream;
	
// Assert Rights ResourceStatus 
	/*
		log.info "Rights TokenUpdate ResourceStatus CreatedBy Expected : [$expectRTC_RS_CreatedBy] - Actual Recieved: [$actRTC_RS_CreatedBy]";
		assert expectRTC_RS_CreatedBy == actRTC_RS_CreatedBy;
		
		log.info "Rights TokenUpdate ResourceStatus CreationDate Expected : [$expectRTC_RS_CreationDate] - Actual Recieved: [$actRTC_RS_CreationDate]";
		//assert expectRTC_RS_CreationDate == actRTC_RS_CreationDate; //  No Validation on  RS Creation Date 

		log.info "Rights TokenUpdate ResourceStatus Value Expected : [$expectRTC_RS_Value] - Actual Recieved: [$actRTC_RS_Value]";
		assert expectRTC_RS_Value ==  actRTC_RS_Value;
	*/
		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenUpdate LicenceAcqBase Location Expected : [$expectRTC_LicAcqBaseLoc] - Actual Recieved: [$actRTC_LicAcqBaseLoc]";
		assert expectRTC_LicAcqBaseLoc == actRTC_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenUpdate FF Web location Expected : [$expectRTC_FFWebLoc_Location] - Actual Recieved: [$actRTC_FFWebLoc_Location]";
		assert expectRTC_FFWebLoc_Location == actRTC_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenUpdate Web FF preference Expected : [$expectRTC_FFWebLoc_Pref] - Actual Recieved: [$actRTC_FFWebLoc_Pref]";
		assert expectRTC_FFWebLoc_Pref == actRTC_FFWebLoc_Pref;

		log.info "Rights TokenUpdate Stream Web location Expected : [$expectRTC_StreamWeb_Location] - Actual Recieved: [$actRTC_StreamWeb_Location]";
		assert expectRTC_StreamWeb_Location == actRTC_StreamWeb_Location;


		log.info "Rights TokenUpdate Stream Web preference Expected : [$expectRTC_StreamWeb_Pref] - Actual Recieved: [$actRTC_StreamWeb_Pref]";
		assert expectRTC_StreamWeb_Pref == actRTC_StreamWeb_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenUpdate FF Manifest location Expected : [$expectRTC_FFManifestLoc_Location] - Actual Recieved: [$actRTC_FFManifestLoc_Location]";
		if(rcFFManifestSize==0){
			assert actRTC_FFManifestLoc_Location.size() == 0;
			
			} else {
		assert expectRTC_FFManifestLoc_Location == actRTC_FFManifestLoc_Location;
			}

	    // Assert FF Manifest  preference

	    log.info "Rights TokenUpdate FF Manifest  preference Expected : [$expectRTC_FFManifestLoc_Pref] - Actual Recieved: [$actRTC_FFManifestLoc_Pref]";
	    if(rcFFManifestSize==0){
			assert actRTC_FFManifestLoc_Pref.size() == 0;
			
			} else {
		assert expectRTC_FFManifestLoc_Pref == actRTC_FFManifestLoc_Pref ;
			}


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenUpdate PurchaseInfo  NodeID Expected : [$expectRTC_PI_NodeID] - Actual Recieved: [$actRTC_PI_NodeID]";
		assert expectRTC_PI_NodeID == actRTC_PI_NodeID;

		log.info "Rights TokenUpdate PurchaseInfo  RetailerTrax Expected : [$expectRTC_PI_RetailerTrax] - Actual Recieved: [$actRTC_PI_RetailerTrax]";
		assert expectRTC_PI_RetailerTrax.toString() == actRTC_PI_RetailerTrax.toString();

		log.info "Rights TokenUpdate PurchaseInfo  PurcaseAccount Expected : [$expectRTC_PI_PurcaseAccount] - Actual Recieved: [$actRTC_PI_PurcaseAccount]";
		assert expectRTC_PI_PurcaseAccount == actRTC_PI_PurcaseAccount;
		
		log.info "Rights TokenUpdate PurchaseInfo  PurchaseUser Expected : [$expectRTC_PI_PurchaseUser] - Actual Recieved: [$actRTC_PI_PurchaseUser]";
		assert expectRTC_PI_PurchaseUser == actRTC_PI_PurchaseUser;

		log.info "Rights TokenUpdate PurchaseInfo  PurchaseTime Expected : [$expectRTC_PI_PurchaseTime] - Actual Recieved: [$actRTC_PI_PurchaseTime]";
		def actPurchaseTime = new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",actRTC_PI_PurchaseTime.toString());
		def expectPurchaseTime = new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",expectRTC_PI_PurchaseTime.toString());

		log.info "Expected Purchase time :" + expectPurchaseTime.getTime() + " ms || Actual PurchaseTime :" + actPurchaseTime.getTime() + " ms";
		assert expectPurchaseTime.getTime() == actPurchaseTime.getTime();

		log.info "Rights TokenUpdate PurchaseInfo  TransactionType Expected : [$expectRTC_PI_TransactionType] - Actual Recieved: [$actRTC_PI_TransactionType]";
		assert expectRTC_PI_TransactionType == actRTC_PI_TransactionType;</script></con:config>
      </con:testStep>
      <con:properties>
        
        
        
        <con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2</con:value></con:property>
        
        
        
        <con:property><con:name>DbResultRT-FFLocXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>E62FEF44C811FE2BE0401F0A05991685</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-09-12 12:33:22.67</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>E62FEF44C813FE2BE0401F0A05991685</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-09-12 12:33:22.67</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>E62FEF44C810FE2BE0401F0A05991685</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2013-09-12 12:33:22.67</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>E62FEF44C80FFE2BE0401F0A05991685</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-09-12 12:33:22.67</CREATED_DATE>
    </Row>
    <Row rowNumber='5'>
      <FULFILLMENT_LOC_OID>E62FEF44C812FE2BE0401F0A05991685</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <TYPE>StreamWeb</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/streaminglink</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-09-12 12:33:22.67</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>DbResultRT-PMPPXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASE_PROFILE_OID>E62FEF44C715FE2BE0401F0A05991685</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>pd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-09-12 12:33:11.79</CREATED_DATE>
      <UPDATED_DATE>2013-09-12 12:33:22.69</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASE_PROFILE_OID>E62FEF44C716FE2BE0401F0A05991685</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-09-12 12:33:11.79</CREATED_DATE>
      <UPDATED_DATE>2013-09-12 12:33:22.69</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASE_PROFILE_OID>E62FEF44C717FE2BE0401F0A05991685</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>hd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-09-12 12:33:11.79</CREATED_DATE>
      <UPDATED_DATE>2013-09-12 12:33:22.69</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>DbResultRT-SoldAsXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>E62FEF44C80EFE2BE0401F0A05991685</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_198597.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2013-09-12 12:33:22.67</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>DbResultRT-StatusHistoryXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>E62FEF44C719FE2BE0401F0A05991685</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>RightsToken has been created.</DESCRIPTION>
      <CREATED_DATE>2013-09-12 12:33:11.819</CREATED_DATE>
      <CREATED_BY_NODE_OID>222259</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>E62FC234F92524E3E0401F0A059936BC</CREATED_BY_USER_OID>
    </Row>
    <Row rowNumber='2'>
      <RIGHTS_STATUS_HISTORY_OID>E62FEF44C80DFE2BE0401F0A05991685</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated - without DST</DESCRIPTION>
      <CREATED_DATE>2013-09-12 12:33:22.69</CREATED_DATE>
      <CREATED_BY_NODE_OID>222259</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>null</CREATED_BY_USER_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property>
        
        
        
        <con:property><con:name>DbResultRTXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>E62FEF44C710FE2BE0401F0A05991685</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>E62FB9503CFF6D8CE0401F0A059923A2</ACCOUNT_OID>
      <USER_OID>E62FC234F92524E3E0401F0A059936BC</USER_OID>
      <RIGHTS_LOCKER_OID>E62FB9503D066D8CE0401F0A059923A2</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>E62FB9503CFE6D8CE0401F0A059923A2</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_node222333_RetailerNode</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>null</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>E62FC234F92424E3E0401F0A059936BC</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_198597.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_198597.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3updated.google.com 	</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2013-09-12 12:33:11.813</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>2013-09-12 12:33:22.719</UPDATED_DATE>
      <UPDATED_BY>222259</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property>
        
        
        
        
      <con:property><con:name>DBrightstokenid</con:name><con:value>E62FEF44C710FE2BE0401F0A05991685</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenFull ALID="urn:dece:alid:file:RIGHTS_EXAMPLE_ALIDVersion_198597.txt" 	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" 	ContentID="urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_198597.txt" xmlns:ns4="http://www.decellc.org/schema/2013/06/coordinator" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RIGHTS_EXAMPLE_CIDVersion_198597.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3updated.google.com 	</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:StreamWebLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222333_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:E62FC234F92424E3E0401F0A059936BC</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:RightsLockerID>urn:dece:rightslockerid:org:dece:E62FB9503D066D8CE0401F0A059923A2</ns4:RightsLockerID> </ns4:RightsTokenFull>]]></con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:E62FEF44C710FE2BE0401F0A05991685</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>RightsTokenFull</con:value></con:property><con:property><con:name>RTU_rcStatusHistory</con:name><con:value>5</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_40012_ViewByFilter_LastModifiedDate_Verify_invalid_format_(yyyy-MM-dd'T'hh:mm:sss)</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R4_ViewByFilterClass=LastModifiedDate&amp;OnorAfter=InvalidDateFormat_And_without_FilterOffset_FilterCount</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request without DST" searchProperties="true" id="79ea0329-a9c4-4fb4-a436-5f6a487e6a2f">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="020e3a68-c9ee-4f19-93ad-e0617cdcdac4">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

//def headers = new StringToStringMap()
//headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
//testRunner.testCase.getTestStepByName("RightsLockerDataGet_DWQ").testRequest.setRequestHeaders(headers);


// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ResponseType",CallingTCase.getPropertyValue("ResponseType"));
//Testing RightLockerDataGet Request Properties Loaded correctly.
def encodedAccountID = context.expand( '${#TestCase#encodedAccountID}' )
def responseType = context.expand( '${#TestCase#ResponseType}' )
def queryParam = CallingTCase.getPropertyValue("QueryParam");

if (responseType!=null)
 urlPathString = "rest/1/06/Account/"+encodedAccountID+"/RightsToken/List?response="+responseType;
else
 urlPathString = "rest/1/06/Account/"+encodedAccountID+"/RightsToken/List?";

if (queryParam == null)
	testCase.setPropertyValue("urlPath",urlPathString);
else
	testCase.setPropertyValue("urlPath",urlPathString+queryParam);

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="657fae78-6f74-415e-9906-45d399b57b58">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_DWQ");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
	case "8600":
		keyStorePath = "/opt/dece/certs/8600_concat.pem";
	break;
	case "DABD1A709AAD9052E0401F0A2222596E9F":
		keyStorePath = "/opt/dece/certs/iscportalcs1_concat.pem";
	break;
	case "DABD1A709AA89052E0401F0A2222596E9F":
		keyStorePath = "/opt/dece/certs/iscportal1_concat.pem";
	break;
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsLockerDataGet_DWQ" id="42be913f-5f8d-4b68-94db-b85ada2ce3bf">
        <con:settings/>
        <con:config service="RightsLockerDataGet_DownLoad_Query" methodName="RightsLockerDataGet_DWQ" resourcePath="/${#TestCase#urlPath}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsLockerDataGet_DWQ" mediaType="application/xml" accept="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVfZkqrKEn33KwzPo2GDgCJGd0cUg4qKE84vN7AoEGWSAgG//hbauu3e3fvuc1/ESrIyVw5krXrFhucybYAximIn8Muq/Fb5D0dDxuTqu1qLYekaV4eNmtFkyA9CFhSMJs8gVCmrGCdI9XFs+PFbhaHrbI1u1hhuXufaXLNNMy8Cw2wr5SWKMDFNVF7oSjnzXB+3r27fKknktwMDO7jtGx7C7Ri2daAN20SzbdwxVd5fbyivDqP3fRyHbYqCLyaCyHXhCww86pX6pPNq4rbu2L4RJxH68Gnit8rH3jRNX1L2JYhsiqFpmqIFiuiY2LH/qbyX7puRqfpWcFtLhh/4DjRc52IUoDQU7wOzDFw7iJx47/1guk7V6cJ0DWWwBuuc/0+F+uXgiu4vLX0CGWGjhvdG/W5shiwUIR+i8mKmvlX++bsK3vbOI8PHVhB5+Mv630FC/hm5QYjMGr5Hdkf39xa/Sdf7K4Jt1Ydugp0zGhVtEhoQ4fIkQpaTDR1Mms/E5Wv5yxm+dxiC/6Ykr9QzTgKb+iYzsmMjHP8/9Xqu1c3K0nAT9L5Yt/zcdtAGuNuqkLFLt8pz43Vu9advVwjPyjdQj1J/rL826qOvPjZpu9CVhybHN8ed6mrc5VpKn80S4ZhsBtNoKSojZDVaSW7QfVpVTxJsNaNjfT5ys3gytM0JE44ZZG9kHQ9OpWa2l0aoy4+aJ2UoRJl+HnWpqtXryBmOx8xmbApq5ygHtNmdsiIzmY93/Tha65IdiHzLyPlYvuzteigohlIywEnvzJRcVdBEQiNWsPDbr5ieYyjiGqD8GmTxf92gBdmIjcdCKiaFRT7PGL1rqipVZUkCSLJBqorAVsXhBYxE+3jaH52ukNIimC46QAa5NgOpTIJbTqcDJTWXS3e7VDsdUZtxaQ9s5BJ5ISvZUt6u+7Sx2oYbpkNvdVE017Ngx/ZDs3dMe3s40uZaOpqruXZQstFcoVdXmZ2R9UU7aPXxfMGWVgdR0GZKKqdXj7KS7kfb1SzcLIQUXpSpBrguqC8Uaa/15t6yDtnZHh6UoQaOV7m416TlUsuUOZiURHu0JLHNpc42hJ4Z7jx3/2S8R4zPze4y33XdZHtRDpqkdCX91NXVHStPlT6YbRa71fJorDrnEuyNwO7u0Wk4xjpI7W0rlaeb/iDYqvszHIGpIopTQNJFA03t9kHQFYHGASe7SAexGUhmJ6X6DC5VBbfbXOfOaY2NLu0a9VarvhmumpNTU1b86naQ7A57bb/ujKsD3TwvhFi4bPC5em4aTh1moTVdK714kFm9qV7aTeRsDXtV0+5T7kXoRBrfB9El37uaPYtXzTHOd45lrcT1mHN5y9XYWWi5Vpjj6jyYHiO6KSKWoTb5eRCXgK2JAHQPi4M41cRWkVRTTacbTTRAR4kTcDkw8YBZnvq9sws3LAiywWp8OH4UxpRTRaTSqULaSim1ZGAWRejpC6VzAAvRtiPRVjriFMpgulEH6Ybka9Ejyl/z2Lnm0VZEoLBb0BR6JXZBC/E41jkO5L648DvCXjtlK7Pp0fwJKUN9FHKphkeWv10FR81zokWU6IvBYDTMdvOkezyQWWXR+uDMbkvK+RgCZzSY78mnKBuTcLOJw6oPIxiroaep2WW8xYeWs/PofrVRFye0DHlm4e3SRddQtoPI1uuD3syfsLxQwomV97zqoZWuqnO9GfKm5FtynlPbaEkHIOgIs8bJzBjmuF+kw2Zq9cFxZzCjzBXEXFAG2zlMZ9PBSveqjVLjPBx69GVOcaNwnOrdlFOm0yprivPeHIeRs0ladhaNfZPZGHHzvKWXTSd0jwKTHOdcyC5tjxRrcjZDXpuUptwabj2bD2GfmlFnoPDWUO3mu4txCb0xvA3Qr9PhIbzND+p5snwaPXfSoZNuRTC+L4sDSJXLHXIqGPGfCUwhccyadVVthwULwjHy48p7sasgL+2EUBzHbJMj47aWO0qL5xWOVrg64BhGoTm63qEB3RCEhthS7iznhuILRCnwLafwVfC42yn1Z4DQa2PkmyiqnYME7hGu/MFika+y6s/I8Rv4GM0DwhNpjld4luVFXpZkSZGBLMsSxypAEORGR2pVyqMgHvvjCFgxij5zRP4TR5wh6IQOKohkcZpicpzimKTkZJyT2K2/nI0XHyWEakYF22szXKtBYccLXVQAprzATFz0Eu7Da4IofHsyNQPiq5TmBeF6zP8Y39d391QQHdMpFHARjIhIOdFvbLfRbtwj+TFihn6O+G4eJKZTnOYkr3HkwBuSz69+tUvRJ49eKUK6Y36ofhV8Mkt9jejhyTw78NHxj8sA4ZKEbbzfC3IyXk4vyfmcXEvAF0wqIuapOkU3KR3BhNChfB4ckU89TFB/xUQfqL94fsg/40viva/H5Gv2SMOUr8u/uIboCBfXEJU0fPa3d5xPLkneYpTF38kkl9xWCsR/vNDANiz0iHhCHmkQmb/K9Y2tJz8kzmJ8Ob5drAremf/QFTAgZh0ywoLo2fh3Br5z/ln4SPIDS0y6aZfE6Oc35WI2vVUMCIPEj1W5chU8z8srzjgPUfuX0m9mrszvg8pn+Ecqv9aGOplcnlF56Dr/W7nmXNsFkkss0b9ieatk5FZKnPv203z+APj9iGaZP43oz5G8/yb+XfKU06/fw/t/AQ==" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ResponseType" value="${#TestCase#ResponseType}"/>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="urlPath" value="${#TestCase#urlPath}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_40012_ViewByFilter_LastModifiedDate_Verify_invalid_format_(yyyy-MM-dd'T'hh:mm:sss)</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R4_ViewByFilterClass=LastModifiedDate&amp;OnorAfter=InvalidDateFormat_And_without_FilterOffset_FilterCount</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>token</con:value></con:property><con:property><con:name>urlPath</con:name><con:value>rest/1/06/Account/urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2/RightsToken/List?response=token&amp;FilterClass=urn%3Adece%3Atype%3Aviewfilter%3Alastmodifieddate&amp;OnOrAfter=2013-09-12T06%3A06%3A053</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsLockerData Get Information without DST" searchProperties="true" id="c6d7814f-3080-499f-a55d-e2bc3832e678">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML" id="ce84ffee-2184-41f9-b70e-e70b91b70f8b">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

//def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request without DST").getTestStepByName("RightsLockerDataGet_DWQ").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
//callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="bf5005f2-395b-4cfd-a8ea-9e61e3c6597e">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request without DST").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request without DST").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request without DST").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));; 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
//def logFile = new File(projectPath +"\\" +testSuite.project.name +"\\"+ "\\soapUI-Logs-to-file.xls")
def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//logFile.write(testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders().ETag);
logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_40012_ViewByFilter_LastModifiedDate_Verify_invalid_format_(yyyy-MM-dd'T'hh:mm:sss)</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R4_ViewByFilterClass=LastModifiedDate&amp;OnorAfter=InvalidDateFormat_And_without_FilterOffset_FilterCount</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C7D2A2C8D973ED7E0401F0A05997B5C</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:token_rejected">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2/RightsToken/List</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2647</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenlist</con:name>
          <con:value>[urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578]</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenObjlist</con:name>
          <con:value>[urn:dece:rightstokenid:org:dece:A2511971C96C4F5DE0401F0A05997578:RightsTokenLocation]</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenLocation</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Response Validation without DST" searchProperties="true" id="ed900685-3d14-41e7-8fdf-ac49edd0b4aa">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="9ce31b65-eec6-4937-82af-2120ba508da5">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;
String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');
def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsLockerData Get Information without DST").getPropertyValue("RTObjType");

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request without DST").getTestStepByName("RightsLockerDataGet_DWQ").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request without DST").getTestStepByName("RightsLockerDataGet_DWQ").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "API call not authorized";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCountNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCountNotValid";
	break;
	case "INVALID_DATE_FORMAT":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID   = "urn:dece:errorid:org:dece:OnOrAfterDateFormatIsInvalid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#OnOrAfterDateFormatIsInvalid";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_40012_ViewByFilter_LastModifiedDate_Verify_invalid_format_(yyyy-MM-dd'T'hh:mm:sss)</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R4_ViewByFilterClass=LastModifiedDate&amp;OnorAfter=InvalidDateFormat_And_without_FilterOffset_FilterCount</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:E62FEF44C710FE2BE0401F0A05991685</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:E62FB9503CFE6D8CE0401F0A059923A2</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList AccountID="urn:dece:accountid:org:dece:107006" RightsLockerID="urn:dece:rightslockerid:org:dece:7001" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken>
      <RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9CC1FA6E91E304A7E0401F0A0599277F">
         <RightsLockerID>urn:dece:rightslockerid:org:dece:7001</RightsLockerID>
         <RightsTokenData ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
            <SoldAs>
               <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
               <ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ContentID>
            </SoldAs>
            <RightsProfiles>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
            </RightsProfiles>
            <ResourceStatus>
               <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-21T01:42:39.004Z">
                  <Value>urn:dece:type:status:active</Value>
               </Current>
            </ResourceStatus>
            <LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</LicenseAcqBaseLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/aaa</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/bbb</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ccc</Location>
               <Preference>3</Preference>
            </FulfillmentManifestLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ddd</Location>
               <Preference>1</Preference>
            </FulfillmentManifestLoc>
            <PurchaseInfo>
               <NodeID>urn:dece:org:org:dece:222259</NodeID>
               <RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</RetailerTransaction>
               <PurchaseAccount>urn:dece:accountid:org:dece:107006</PurchaseAccount>
               <PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</PurchaseUser>
               <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
            </PurchaseInfo>
         </RightsTokenData>
      </RightsTokenFull>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>INVALID_DATE_FORMAT</con:value>
        </con:property>
        <con:property>
          <con:name>QAerrorID</con:name>
          <con:value>null</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights Locker Data Validation without DST" searchProperties="true" id="ea53d2cd-d424-4b45-a5f2-44fe786a9d26">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsLocker Data GET" disabled="true" id="630200f4-4fa2-47dd-8f15-cf494da4b643">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

RT_Data6 = mydbRights.rightstokenMDinfoGetRow(testCase.getPropertyValue("DBrightstokenid"));
log.info RT_Data6.toString();


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));


testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsLockerDataGet Response" disabled="true" id="b1c86ebc-c56a-446b-8f10-d3e675c89945">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();


def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();

RTObjType = testCase.getPropertyValue("RTObjType");


switch (RTObjType) {
	
	case "RightsTokenFull":

		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

	break;

	case "RightsTokenBasic":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

}

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken."$RTObjType".@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.Value).toString();

//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..actFFWeblocSize-1 ){
	
		actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..actFFManifestSize-1 ){
	
		actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Actual Rights Purchase Info
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;

// Assert RightsToken LockerId

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;

// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;

// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile == actRTG_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR == actRTG_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload == actRTG_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream == actRTG_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="RightsLockerDataGet  DB validation" id="fc7a4b9f-664f-45fd-8072-3d91f47a9905">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request without DST").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();


def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();
	
	
	
//log.info "Expected Return Object Type : [RightsTokenLocation]  - Actual Return Object Type is : [$RTObjType]"; //Updated by Aravind
expectedRTObjType == 'RightsTokenLocation'; //	Updated by Aravind


if (CallingTCase.getPropertyValue("ResponseType") == null)
	expectedRTObjType == 'RightsTokenReference';

	log.info "Expected Object Type : [$expectedRTObjType] - Actual Object Type Returned : [$RTObjType]"; //Updated by Aravind
	assert RTObjType == expectedRTObjType;  //Updated by Aravind
	
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		log.info "Expected LockerId :" +expectRTG_Lockerid; //Updated by Aravind
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
	break;

}

// Actual RightsToken Data 

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[rtc].@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.size()!= 0){
		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.Value).toString();
		}
		
//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc.size();
 		
 		if(actLicAcqSize != 0){
 			for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc[i];
			}
 		}
// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.size();
	
		if (actFFWeblocSize != 0){
			for ( int i in 0..actFFWeblocSize-1 ){
			//actRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[i-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[i-1]).toString());
			actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Location[i]).toString();
			actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Preference[i]).toString();
			}
		}
actRTG_FFWebLoc_Location.sort();

// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.size();
	
		if(actFFManifestSize != 0) { 
			for ( int i in 0..actFFManifestSize-1 ){
	
			actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Location[i]).toString();
			actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Preference[i]).toString();
			}
		}
		actRTG_FFManifestLoc_Pref.sort();

// Actual Rights Purchase Info

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.size()!= 0){
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	
		}
		
actRTG_FFManifestLoc_Location.sort()
actRTG_FFManifestLoc_Pref.sort()
actRTG_FFWebLoc_Location.sort()
actRTG_FFWebLoc_Pref.sort()

if(processFlag.toString() == 'true'){

 	log.info "validating rights token"


// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}
	log.info "Sold As :" +AssertRTData['RtSoldAs']; //Updated By Aravind
	assert  AssertRTData['RtSoldAs']==null; // Updated By Aravind
	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile
	log.info "RightsToken Profiles: " +AssertRTData['RtProfile'] //Updated by Aravind
	assert AssertRTData['RtProfile']==null //Updated by Aravind
	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 
	log.info "RightsToken Status: " +AssertRTData['RtStatus']; //Updated by Aravind
	assert AssertRTData['RtStatus'] == null //Updated by Aravind
	
	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	log.info "RightsToken Purchase Info: "+AssertRTData['RtPinfo']; //Updated by Aravind
	assert AssertRTData['RtPinfo'] == null;  //Updated by Aravind

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	//log.info "RightsLockerId: "+AssertRTData['RtlockerID']; //Updated by Aravind
	//if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	//}
	 
	
 }
 else{
 	
	log.info  "Invalid Rightstoken Data ......[$DBrightstokenid]";
	
	if(RT_Data3.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	log.info "RightsLockerId :"+AssertRTData['RtlockerID']; //Updated by Aravind
	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	}
	
	if(RT_Data2.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}

// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
   }
   if(RT_Data2.toString().isEmpty()){
   	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}

//  Assert Rights PurchaseInfo Location

	assert AssertRTData['RtPinfo'] == 0; //No Purchase Info Should be returned for Download Query Request. - Aravind Updated

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
	}
if(RT_Data.toString().isEmpty()){

	log.info "RightsToken DB data is not avialable";
}			
}
}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="RightsLockerDataGet  DB validation_remove" disabled="true" id="7fac8223-cce1-41bb-8769-4fa0b147e1d9">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();


def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
if !((rtc+1)>(RTCountSize -1))
	def DBrightstokenid2 = (Resp_RightsTokenID[rtc+1]).toString().tokenize(':').last(); //For Update/Create Date Order

	
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

// Fetch RightsToken info from RIGHTS_TOKEN table for the second RightsToken
if !((rtc+1)>(RTCountSize -1))
{
SECND_RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid2"));

testCase.setPropertyValue("SECND_DbResultRTXml",SECND_RT_Data.toString());
testCase.setPropertyValue("SECND_DbResultRT-SoldAsXml",SECND_RT_Data2.toString());
testCase.setPropertyValue("SECND_DbResultRT-PMPPXml",SECND_RT_Data3.toString());
testCase.setPropertyValue("SECND_DbResultRT-FFLocXml",SECND_RT_Data4.toString());
}

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
		if !((rtc+1)>(RTCountSize -1))
			SECND_Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();
	
	
	
log.info "Expected Return Object Type : [RightsTokenLocation]  - Actual Return Object Type is : [$RTObjType]"; //Updated by Aravind
assert RTObjType == 'RightsTokenLocation'; //	Updated by Aravind
	
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		log.info "Expected LockerId :" +expectRTG_Lockerid; //Updated by Aravind
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break;

}

//Comparing for the order of RightsToken Displayed.
		log.info "$[rtc] Rights TokenGet UPDATED DATE  : [$expectRTG_PS_UpdatedDate] - $[rtc+1] Rights TokenGet UPDATED DATE : [$SECND_expectRTG_PS_UpdatedDate]";
		log.info "$[rtc] Rights TokenGet CREATED DATE  : [$expectRTG_PS_CreationDate] - $[rtc+1] Rights TokenGet CREATED DATE : [$SECND_expectRTG_PS_CreationDate]";
		def date1=null;
		def date2=null;
		if (expectRTG_PS_UpdatedDate != null)
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_UpdatedDate);
		else
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_CreationDate);
		if !((rtc+1)>(RTCountSize -1))
		{
			if (SECND_expectRTG_PS_UpdatedDate != null)
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_UpdatedDate);
			else
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_CreationDate);
			
			assert date1.getTime() > date2.getTime();
		}

// Actual RightsToken Data 

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[rtc].@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken[rtc]."$RTObjType".SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken[rtc]."$RTObjType".RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.size()!= 0){
		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".ResourceStatus.Current.Value).toString();
		}
		
//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc.size();
 		
 		if(actLicAcqSize != 0){
 			for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken[rtc]."$RTObjType".LicenseAcqBaseLoc[i];
			}
 		}
// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.size();
	
		if (actFFWeblocSize != 0){
			for ( int i in 0..actFFWeblocSize-1 ){
			//actRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.ResultSet.Row.LOCATION[i-1]).toString(),(Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[i-1]).toString());
			actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Location[i]).toString();
			actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentWebLoc.Preference[i]).toString();
			}
		}
actRTG_FFWebLoc_Location.sort();

// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.size();
	
		if(actFFManifestSize != 0) { 
			for ( int i in 0..actFFManifestSize-1 ){
	
			actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Location[i]).toString();
			actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken[rtc]."$RTObjType".FulfillmentManifestLoc.Preference[i]).toString();
			}
		}
		actRTG_FFManifestLoc_Pref.sort();

// Actual Rights Purchase Info

		if (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.size()!= 0){
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken[rtc]."$RTObjType".PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	
		}
		
actRTG_FFManifestLoc_Location.sort()
actRTG_FFManifestLoc_Pref.sort()
actRTG_FFWebLoc_Location.sort()
actRTG_FFWebLoc_Pref.sort()

if(processFlag.toString() == 'true'){

 	log.info "validating rights token"


// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}
	log.info "Sold As :" +AssertRTData['RtSoldAs']; //Updated By Aravind
	assert  AssertRTData['RtSoldAs']==null; // Updated By Aravind
	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile
	log.info "RightsToken Profiles: " +AssertRTData['RtProfile'] //Updated by Aravind
	assert AssertRTData['RtProfile']==null //Updated by Aravind
	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 
	log.info "RightsToken Status: " +AssertRTData['RtStatus']; //Updated by Aravind
	assert AssertRTData['RtStatus'] == null //Updated by Aravind
	
	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	log.info "RightsToken Purchase Info: "+AssertRTData['RtPinfo']; //Updated by Aravind
	assert AssertRTData['RtPinfo'] == null;  //Updated by Aravind

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	//log.info "RightsLockerId: "+AssertRTData['RtlockerID']; //Updated by Aravind
	//if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	//}
	 
	
 }
 else{
 	
	log.info  "Invalid Rightstoken Data ......[$DBrightstokenid]";
	
	if(RT_Data3.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId
	log.info "RightsLockerId :"+AssertRTData['RtlockerID']; //Updated by Aravind
	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
		
	}
	
	if(RT_Data2.toString().isEmpty()){
	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}

// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}
//  Assert Rights Fulfillment WebLoc

	if (AssertRTData['FFWebLoc']==1){

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	// Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

	}

//  Assert Rights Fulfillment Manifest Location

	if (AssertRTData['FFManifestLoc']==1){

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference
actRTG_FFManifestLoc_Pref.sort();
	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;
	}

//  Assert Rights PurchaseInfo Location

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
   }
   if(RT_Data2.toString().isEmpty()){
   	// Assert RightsToken Information DB and RightsTokenGet Response.

	if (AssertRTData['Rtatrb']==1){
			
// Assert RightsToken Account ID 
		
		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;
		
// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;
	}

	if (AssertRTData['RtSoldAs']==1){
		
// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID.toString()!= 'null'){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
	}
// Assert RightsToken Purchase Profile

	if (AssertRTData['RtProfile']==1){

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile.sort() == actRTG_PPContentProfile.sort();

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR.sort() == actRTG_PPDMR.sort();
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload.sort() == actRTG_PPCanDownload.sort();
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream.sort() == actRTG_PPCanStream.sort();
	}
// Assert Rights ResourceStatus 

	if (AssertRTData['RtStatus']==1){

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;
	}
		
//  Assert Rights Licence Acq Base Location

	if (AssertRTData['LicAcqBLoc']==1){

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

	}

//  Assert Rights PurchaseInfo Location

	assert AssertRTData['RtPinfo'] == 0; //No Purchase Info Should be returned for Download Query Request. - Aravind Updated

	if (AssertRTData['RtPinfo']==1){
		
		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();
	}
		
// Assert RightsToken LockerId

	if (AssertRTData['RtlockerID']==1){

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;
	}
	}
if(RT_Data.toString().isEmpty()){

	log.info "RightsToken DB data is not avialable";
}			
}
}
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_30001 - RightsLockerDataGet_byDownloadQuery - PERM - SecurityRoleValid - Invocation with PORTAL</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R3_PatchChanges_PORTAL[:CS]_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:DAB99C9668D9B262E0401F0A05996C5F</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:DAB99AF119B4E024E0401F0A05996C61</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>DAB99C9668D9B262E0401F0A05996C5F</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>DAB99AF119B9E024E0401F0A05996C61</ACCOUNT_OID>
      <USER_OID>D1492F608A054E026BAF0635F8171235</USER_OID>
      <RIGHTS_LOCKER_OID>DAB99AF119C0E024E0401F0A05996C61</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>DAB99AF119B4E024E0401F0A05996C61</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>transcation</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>null</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>DAB99AF119C3E024E0401F0A05996C61</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2013-04-19 15:46:21.851</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value>&lt;RightsTokenList FilterMoreAvailable="false" FilterCount="1" FilterOffset="0" FilterEntryPoint="0" FilterClass="urn:dece:type:viewfilter:title" AccountID="urn:dece:accountid:org:dece:DB2ED88BC30AA42EE0401F0A05997C92" RightsLockerID="urn:dece:rightslockerid:org:dece:DB2ED88BC313A42EE0401F0A05997C92" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   &lt;RightsTokenReference CreatedDate="2013-04-25T13:51:37.698Z">urn:dece:rightstokenid:org:dece:DB304513632F01F8E0401F0A2222591708&lt;/RightsTokenReference>
&lt;/RightsTokenList></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT_StatusHistoryXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>DAB99C9668E1B262E0401F0A05996C5F</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2013-04-19 15:46:21.456</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASE_PROFILE_OID>DAB99C9668DEB262E0401F0A05996C5F</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>pd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-04-19 15:46:21.456</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASE_PROFILE_OID>DAB99C9668DFB262E0401F0A05996C5F</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-04-19 15:46:21.456</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASE_PROFILE_OID>DAB99C9668E0B262E0401F0A05996C5F</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>hd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2013-04-19 15:46:21.456</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>DAB99C9668DAB262E0401F0A05996C5F</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-04-19 15:46:21.456</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>DAB99C9668DBB262E0401F0A05996C5F</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-04-19 15:46:21.456</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>DAB99C9668DDB262E0401F0A05996C5F</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2013-04-19 15:46:21.456</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>DAB99C9668DCB262E0401F0A05996C5F</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>DAB99C9668D9B262E0401F0A05996C5F</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2013-04-19 15:46:21.456</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      <con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:CB65DD1FD6B01423E0401F0A2222593A4E</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:CB65DD1FD6BE1423E0401F0A2222593A4E</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>DbResultRT-StatusHistoryXml</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>CB65D8F790208E47E0401F0A2222593A52</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>CB65D8F790178E47E0401F0A2222593A52</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>RightsToken has been created.</DESCRIPTION>
      <CREATED_DATE>2012-10-06 14:34:27.83</CREATED_DATE>
      <CREATED_BY_NODE_OID>222259</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>CB65DD1FD6C31423E0401F0A2222593A4E</CREATED_BY_USER_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Comparing RightsTokenIDs without DST" searchProperties="true" id="acd59182-95af-48db-93af-4d4d5a7c7050"><con:settings/><con:testStep type="groovy" name="Comparing RightsTokenIDs" disabled="true" id="c3cbd454-365e-4951-843b-7a877374fd12"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange
import groovy.lang.*;
import java.lang.*;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request Generic").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 
def RTokens = new ArrayList();
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
log.info "Val_RightsResXml--"+Val_RightsResXml;
def RTCount = Val_RightsResXml.children().collect{ it.name()};
log.info "RTCount=="+RTCount;
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
log.info "RTattb=="+RTattb;
def RTCountSize = RTCount.size();
log.info "RTCountSize=="+RTCountSize;

for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];

if (Val_RightsResXml.RightsToken[rtc].size()!=0){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

RTObjType = Resp_RightTokenObj[rtc].toString();
DBrightstokenid = Resp_RightsTokenID[rtc].tokenize(':').last();
RTokens += DBrightstokenid;
log.info "RTokens=="+RTokens;
log.info "DBrightstokenid : " + DBrightstokenid;

//log.info "2421234322223234324" + testCase.setPropertyValue("Accountid");
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());
}
else{
Resp_RightTokenObj += Val_RightsResXml.children().collect{ it[0].name()};
Resp_RightsTokenID += (Val_RightsResXml.RightsTokenReference[rtc]).toString();
log.info "Resp_RightsTokenID=="+Resp_RightsTokenID;
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

RTObjType = Resp_RightTokenObj[rtc].toString();
DBrightstokenid = Resp_RightsTokenID[rtc].tokenize(':').last();
RTokens += DBrightstokenid;
log.info "RTokens=="+RTokens;
log.info "DBrightstokenid : " + DBrightstokenid;
//testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());
log.info "rtc=="+rtc;
}
}

for ( int rtc in 0..RTokens.size() -1)
{
	
	if (rtc!=RTokens.size() -1)
	{
	rtc1=rtc+1;
	log.info "rtc1="+rtc1;
	//log.info RTokens[rtc] +"in decimal Format is=="+ Integer.parseInt(RTokens[rtc], 16);
	log.info "RT[$rtc]"+ RTokens[rtc]+"AND RT[$rtc1]"+ RTokens[rtc1];  
	assert RTokens[rtc] &lt; RTokens[rtc1]
	
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Comparing RightsTokenIDs on Date" id="e213a0fe-7c31-4114-9290-c1f890a2f3b1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsLockerDataGet Request without DST").getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();

testCase.setPropertyValue("RightsResXml",RightsResXml);


// Assert RightsToken Information Expected &amp; Actual 

def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();
def AssertRTData = new LinkedHashMap();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
//def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
//getRequestContentAsXml

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();


for ( int rtc in 0..RTCountSize -1){
//for ( int rtc in 0..5){

boolean processFlag = true;
expectRTG_PPContentProfile = [];
expectRTG_PPDMR = [];
expectRTG_PPCanDownload = []; 
expectRTG_PPCanStream = [];
expectRTG_PPDMProfile = []; 
expectRTG_LicAcqBaseLoc = [];
expectRTG_FFWebLoc_Location = []; 
expectRTG_FFWebLoc_Pref = []; 
expectRTG_FFManifestLoc_Location = [];
expectRTG_FFManifestLoc_Pref = [];
actRTG_PPContentProfile = []; 
actRTG_PPDMR = []; 
actRTG_PPCanDownload = [];
actRTG_PPCanStream = [];
actRTG_PPDMProfile = [];
actRTG_LicAcqBaseLoc = [];
actRTG_FFWebLoc_Location = []; 
actRTG_FFWebLoc_Pref = []; 
actRTG_FFManifestLoc_Location = [];
actRTG_FFManifestLoc_Pref = [];


//Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].attributes().values();
Resp_RightsTokenID += Val_RightsResXml.RightsToken[rtc].@RightsTokenID;
Resp_RightTokenObj += Val_RightsResXml.RightsToken[rtc].children().collect{ it[0].name()};
log.info "RightsToken["+rtc+"] - " + Resp_RightsTokenID[rtc] + " - " + Resp_RightTokenObj[rtc];
RightLockerRTlist[ Resp_RightsTokenID[rtc]] = Resp_RightTokenObj[rtc];

def RTObjType = Resp_RightTokenObj[rtc].toString();


def DBrightstokenid = (Resp_RightsTokenID[rtc]).toString().tokenize(':').last();
if !((rtc+1)>(RTCountSize -1))
	def DBrightstokenid2 = (Resp_RightsTokenID[rtc+1]).toString().tokenize(':').last(); //For Update/Create Date Order

	
log.info "DBrightstokenid : " + DBrightstokenid;
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("DBrightstokenid",DBrightstokenid.toString());
testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[rtc].toString());

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

// Fetch RightsToken info from RIGHTS_TOKEN table for the second RightsToken
if !((rtc+1)>(RTCountSize -1))
{
SECND_RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid2"));
SECND_RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid2"));

testCase.setPropertyValue("SECND_DbResultRTXml",SECND_RT_Data.toString());
testCase.setPropertyValue("SECND_DbResultRT-SoldAsXml",SECND_RT_Data2.toString());
testCase.setPropertyValue("SECND_DbResultRT-PMPPXml",SECND_RT_Data3.toString());
testCase.setPropertyValue("SECND_DbResultRT-FFLocXml",SECND_RT_Data4.toString());
}

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());

		//Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

	
	if(RT_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultRTXml]";
	}
	else{
		Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
		if !((rtc+1)>(RTCountSize -1))
			SECND_Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRTXml"));
	}

	if(RT_Data2.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-SoldAsXml]";
	}
	else{
		Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-SoldAsXml"));
	}

	if(RT_Data3.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-PMPPXml]";
	}
	else{
		Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-PMPPXml"));
	}

	if(RT_Data4.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultRT-FFLocXml]";
	}
	else{
		Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
		//if !((rtc+1)>(RTCountSize -1))
			//SECND_Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("SECND_DbResultRT-FFLocXml"));
	}
	
 
log.info "processFlag : [$processFlag]";

 
	def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
	def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
	//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
	//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

	def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
	def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
	def rcFFWeblocSize = rcFFWebloc.size();
	def rcFFManifestSize = rcFFManifest.size();
	
	
	
log.info "Expected Return Object Type : [RightsTokenLocation]  - Actual Return Object Type is : [$RTObjType]"; //Updated by Aravind
assert RTObjType == 'RightsTokenLocation'; //	Updated by Aravind
	
switch (RTObjType) {
	
	case "RightsTokenFull":	
			
		AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1,'RtPinfo':1,'RtlockerID':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		//log.info expectRTG_SoldAs_PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());	
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;


		//AssertRTData = ['expectRTG_Accountid','expectRTG_Lockerid','expectRTG_RightsTokenID','expectRTG_ALID','expectRTG_ContentID','expectRTG_SoldAs_Lang','expectRTG_SoldAs_PRODUCT_ID','expectRTG_SoldAs_DisplayName','expectRTG_SoldAs_ContentID','expectRTG_SoldAs_BUNDLE_ID','expectRTG_PPContentProfile','expectRTG_PPDMR','expectRTG_PPCanDownload','expectRTG_PPCanStream','expectRTG_RS_CreatedBy','expectRTG_PS_CreationDate','expectRTG_RS_Value','expectRTG_LicAcqBaseLoc','expectRTG_FFWebLoc_Location','expectRTG_FFWebLoc_Pref','expectRTG_FFManifestLoc_Location','expectRTG_FFManifestLoc_Pref','expectRTG_PI_NodeID','expectRTG_PI_RetailerTrax','expectRTG_PI_PurcaseAccount','expectRTG_PI_PurchaseUser','expectRTG_PI_PurchaseTime'];		
		
	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
	break;

	case "RightsTokenBasic":

	AssertRTData = ['Rtatrb':1, 'RtSoldAs':1, 'RtProfile':1,'RtStatus':1,'LicAcqBLoc':0,'FFWebLoc':0,'FFManifestLoc':0,'RtPinfo':0,'RtlockerID':0]
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break; 

		case "RightsTokenLocation":	
			
		AssertRTData = ['Rtatrb':1,'LicAcqBLoc':1,'FFWebLoc':1,'FFManifestLoc':1]

		// Rights Token attitbutes 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");	
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// RightsToken Locker ID

		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		log.info "Expected LockerId :" +expectRTG_Lockerid; //Updated by Aravind
	
		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		//expectRTG_FFWebLoc_Location.put((Val_DbResultFFLocXml.FulfillmentWebLoc.Location[i]).toString(),(Val_DbResultFFLocXml.FulfillmentWebLoc.Preference[i]).toString());
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}
		expectRTG_FFWebLoc_Pref.sort();

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}
		//expectRTG_FFManifestLoc_Pref.sort();
		
		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		expectRTG_PS_UpdatedDate=Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
		
		SECND_expectRTG_PS_CreationDate = SECND_Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		SECND_expectRTG_PS_UpdatedDate=SECND_Val_DbResultRTXml.ResultSet.Row.UPDATED_DATE;
	break;

}

//Comparing for the order of RightsToken Displayed.
		log.info "$[rtc] Rights TokenGet UPDATED DATE  : [$expectRTG_PS_UpdatedDate] - $[rtc+1] Rights TokenGet UPDATED DATE : [$SECND_expectRTG_PS_UpdatedDate]";
		log.info "$[rtc] Rights TokenGet CREATED DATE  : [$expectRTG_PS_CreationDate] - $[rtc+1] Rights TokenGet CREATED DATE : [$SECND_expectRTG_PS_CreationDate]";
		def date1=null;
		def date2=null;
		if (expectRTG_PS_UpdatedDate != null)
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_UpdatedDate);
		else
			date1 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PS_CreationDate);
		if !((rtc+1)>(RTCountSize -1))
		{
			if (SECND_expectRTG_PS_UpdatedDate != null)
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_UpdatedDate);
			else
				date2 = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",SECND_expectRTG_PS_CreationDate);
			
			assert date1.getTime() > date2.getTime();
		}
}</script></con:config></con:testStep><con:properties><con:property><con:name>RightsResXml</con:name><con:value>&lt;RightsTokenList AccountID="urn:dece:accountid:org:dece:DFE877E40E32A422E0401F0A05995B8E" RightsLockerID="urn:dece:rightslockerid:org:dece:DFE877E40E3AA422E0401F0A05995B8E" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R3_Patch_Changes_OrderValidation</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_30003_RightsLockerDataGet_RTL_FUNC_byAllResponseTypes_Verify_the_Order_of_RightsTokens_Displayed_with_ViewByFilter</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:DAF3965617C91626E0401F0A222259739A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:DF96C7CBB692BE94E0401F0A22225903E5</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>DF96C7CBB692BE94E0401F0A22225903E5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Pem" searchProperties="true" id="59590f35-3238-4b6a-97f2-075f1e97a112"><con:settings/><con:testStep type="groovy" name="Set Pem" id="5cb32a64-8ff2-4208-bba8-6a0cb92d3ab9"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");
log.info "nodeId: "+nodeId;
String certPath ;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
{
  log.info "it's Windows";
  certPath = testProject.getPropertyValue("certsPath_Windows");
} 
else 
{
  log.info "it's not Windows"
  certPath = testProject.getPropertyValue("certsPath_Linux");
}

log.info "certPath====="+certPath;
File f1;
if(nodeId=="loadtest:retailer"){
                                f1 = new File(certPath+"loadtest_retailer_concat.pem");
                }else{
                                f1 = new File(certPath+nodeId + "_concat.pem");
                }

File f2 = new File(certPath+nodeId + ".jks");
File f3 = new File(certPath+"truststore-"+nodeId + ".jks");
boolean imFine = true;
if(f1.exists()) 
{
                if(nodeId=="loadtest:retailer"){
                                keyStorePath = certPath+"loadtest_retailer_concat.pem";
                }else{
                                keyStorePath = certPath+nodeId + "_concat.pem";
                }
                pwd = "123"       
}
else if(f2.exists())
{
               keyStorePath = certPath+nodeId + ".jks";
                pwd = "abcd1234"           
}
else if(f3.exists())
{
               keyStorePath = certPath+"truststore-"+nodeId + ".jks";
                pwd = "abcd1234"           
}
else
{
               log.info "Error!";
               imFine = false;
}

/*switch (nodeId) {
                case "sriniretailer":
                                keyStorePath = certPath+"\\"+nodeId + ".jks";
                                pwd = "abcd1234"
                break;
default:
keyStorePath = certPath+"\\"+nodeId + "_concat.pem";
pwd = "123"
break;
}
*/

if(imFine)
{
                log.info "keyStorePath: "+keyStorePath;
                def callTSname = testCase.getPropertyValue("sName");
                def callTCname = testCase.getPropertyValue("tName");
                
                def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
                
                callTC.setPropertyValue("keyStorePath","$keyStorePath");
                
                
                SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
                SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
                log.info 'pwd='+pwd
}

assert imFine == true;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenCreation_with_Unique_MD_Details</con:value></con:property><con:property><con:name>sName</con:name><con:value>Metadata_Creation</con:value></con:property></con:properties><con:reportParameters/></con:testCase></con:testSuite><con:testSuite name="Test Cases Containing APIs" id="5516c42b-aa63-4de0-b6f4-4e803454a68d" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="8511ccb3-b081-4fc0-a24a-7b878f1a852e">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1305f05e-14e4-4f54-95a3-82f0650f48b6">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="f31add99-69ce-41c4-838f-f85d756d83b3">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="4c7cfa53-0d2b-42a3-944c-e574af2fa2c2">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("STS - POST");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - POST" id="53012571-9141-4a84-b0f0-2521d5a227cb">
        <con:settings/>
        <con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="9cd3d5fe-33d3-4635-9825-d6cd3ffc3446">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

testCase.setPropertyValue("status", status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="cefc1922-aac7-4a47-8e7d-ef013efa3e35">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTS");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/06/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="29d51e0c-839b-47e2-86a9-d80354d89821">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="8dbaaa0f-70cb-4d1f-abc0-1b58c7fa1b82">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>576</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property>
        
        
        
        
        <con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property>
        
        
        <con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property>
        
        
        <con:property><con:name>status</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property>
        
        
      <con:property><con:name>username</con:name><con:value>jbaisakh</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" id="c92b31e5-8b92-4255-8a21-5ef97d711e0b">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="19986f13-0ff7-40b1-a725-e86c74e57c4f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="04c11a85-f303-4326-855a-f7831d04f0a0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="6971d33b-0163-4ca3-bbd7-b73ef1eb2267">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" id="afd049be-9a92-4d2c-b3d2-40224da6eeee">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="c87bc3c8-3990-4df9-92d9-b88393b26505">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="941eca40-2218-4a59-bf34-6f5a29e5c760">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="e7cd40fd-95af-4bd4-bac7-4f630ba184de">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="ff957223-19dc-47ef-a375-0c5317be6c48">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/0/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="828e81d4-47a5-4044-afc0-12482d9b54c9">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="3d831f6a-b72f-427f-a9f8-792718a102b6">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="ccec9a9a-e566-4a97-be0c-5ff3405565ca">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4310</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=ISO-8859-1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Authorization Information Extraction via STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16" IssueInstant="2012-09-25T09:52:58.396Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>qO7NYs34UgZBKxvRKuOVYhoWvo4=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
rzwLSV8D6yIiz5G4JYB+XkqHZmUaeOpRAgFEUdrAYoqgjhpbD6buPDiOZ2lEwTkvLTDI+E+nhn1O
+tUuFLtYOtOdQl6KsX5q52rKAYQRqhp7sIQb8zb2JlV2tSr8vFeDaLLNP2vHblxxkSDAw/ttPvp5
dZi8yfy++1w2GicEu6U=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_E58ABF195A4B2E27A258C65934287D74" NotOnOrAfter="2012-09-25T12:52:58.396Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/222259"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2012-09-25T09:52:48.396Z" NotOnOrAfter="2013-09-25T09:52:58.396Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:222259</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2012-09-25T09:52:58.396Z" SessionIndex="_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4d8ff156-a5e0-40fe-8a0c-f3d525023c4e">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="55db7b39-8c61-4f27-be04-bdf972d33ba8">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("returnXMLResult",null);
testCase.setPropertyValue("XMLbody",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="96d7fcc3-6d17-425c-b5d6-e39b5b596bdf">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
testCase.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (testCase.getPropertyValue("returnXMLResult") == null || testCase.getPropertyValue("returnXMLResult") == "") {
		testCase.setPropertyValue("returnXMLResult","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="dd8fe19b-b228-4da4-9b5a-ed8830add6ca">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("GET - PolicyGet for Account");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GET - PolicyGet for Account" id="b517eed5-ab73-4e08-9ae4-633363137ea6">
        <con:settings/>
        <con:config service="DEC Policy PolicyGet API" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GET - PolicyGet for Account" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
  <con:entry key="USER" value="${#TestCase#encodedAssertionUserIdFULL}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="ebba3b0b-c71b-4d8b-ab5c-f5da88dec96a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('GET - PolicyGet for Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value;
			break;
		case "#status#": 
			status = value; 
			break;
		case "Connection": 
			connection = value; 
			break;
		case "Content-Type": 
			contentType = value; 
			break;
		case "Content-Length": 
			contentLength = value; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="2d8f2cce-ff09-4ed5-a64d-c9e837be0dce">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def XMLbody = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists == " + testCase.getPropertyValue("policyExists");
log.info "xmlPolicyClass - $xmlPolicyClass";</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="46258502-8c60-428f-a747-c0c8cb05434a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));

if (testCase.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",testCase.getPropertyValue("XMLbody"));
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdZc6pME773V1ieS8uwKG6VpGpYgwoKgtsdDiOgCMoi6K//BozG5OTknPe7SJlpenm6+6HpeY6tvU/3QRyjKPHCoCrzL7WOtd6sezZqdJptstHaWExj3aSZBkl3UZsh6d66Q9WqchynSA7ixAqSlxpNUlSDbDXojkG1+iTVZzpP7Q6zqlVnKIqxZ6zyRNaq+d4P4n4Z9aWWRkE/tGIv7gfWHsX9BPanQBn1sWbfukGqvT5fQZYBo1c3SQ59goBPNoLI9+ETDPfEM/FJ59mO+1PPCawkjdB7TDt+qb3bZln2lDWfwsghaJIkCbJHYB079pxftdfKzRjZcrAJr2fOCsLAg5bvXawClIISN7SrwHfCyEvc/R9cUwRFFq4bKIcNSLWCXzXiI0CJ7h89fQIZxVYjdi3q5kxHGxShAKKqqcsvtV//1MCrqRFZQbwJo3385fzfEKHghPzwgOxGfEvsBu7fPX5TrddnBPtyAP009k5ILVhysCCKq5MIbbx85MWYe3ZcLbtfzeMbwRD8Lx15Jh5xYtjEN5XhPQfFyf/TrsdWXb3MLD9Fr/L6DTo6O1z1DHZXdwi4IerkZWvbPfhSQnhUvoK6d/r9/JWnd1q9Gw2n6XzMbFx+JdPoOOqM813mUG9ZZjorI+DPXgoPQj1oB+qsfRmZF9RUg64zV8xTaz/tYngze9TapoKaIKKi7zi6x+xy3hypGbHLbNKmx3rX1hSFzNdbPTDV02nuxCdFy3vr8zF6c62WYrO0u8yPp7qYdXeGC6UVgcRThRlqMNnJ280mUDp78WzL8ctHTo85FHkN0blMsvh/wZA93kqs+4ErBsUGv50JelVkmU8vHAfOUwdkMgsc/LcFKuvsju7Ok3oZyQJNEwHPsf5WGClgJwHKFFhX4WYzJecuYMA66gwbGhXgr1hFFzI+W/IzTXsTMtewpdl5Lfnp6iKoCohLY85VBF2Y8bohKAoIr7Jc4ddSvlWmSiZrS76CHfBCfrjYUi9BUu5BWmaUKUMvp0y6WsywXDyP9uppbQi+wikSNz1KU3nd5DVhAPTlHNJiim0vo/0hrCxN9sFocEBbgMSMxDHBRTF2mWKYtMrrVikzPssUWRooWpxxWpmVVBGywcy8fNSCYxXO3gu5YIDJtRbQ4ESVXC0GsTVnAkUHGe+UxkMhs8c3IIpGZhXuWquRkOmCbqqiosuZAEoZL2R+vKZVdy25J9jU8oEBto+N4TRhLgb4eaCf4Jk5VixJBOv9jIJN3YUe41mLMHNW3YzXloNhuJKxGxVoAstqAAMiQZEarj8LRuyMGR+8Hu2h0UYM98iNKgoVDnenS052vebYmahzht/sOhPJmzQt2yVkH9Lb5g7IMrKHlKtZtr4kdD7wLu3x0FwgL1peEpXRqLbXZSr6PDUXfOh37LfF0hzW8yXUjPFkas4nlzxXj9vuxU/exuxbNB0ovDNWEZrEsE6QlsgaXZ7hlm9bzKeNTiKmAhyFBUDaOo7gYQKzb9srCd90RcDkBQqXSdyck6ZAkuqCzPKathFdagKlWWpSqiILto/LdF4udL+y4lged4q05qvDkhbJlQHs0pnWEkRHM5n6YIFWmuobswRkh9kmoChSOmhvGyVzoFIwwJazKYvfIraSysC0xocBmQ9nbZI6arY/mPaA2cyn9C4fu87qvHNWeKaslg+vztIA/sx44JiMKTavaIagK6B7fd9yRTabug/3+WG9hzlv4J6VxqHBCrqokWbO82B4lcUGoPN4eRG2CieU9hWQKxamxWm9cONloHpjQ0gxadMHumzXNPlXjhUUq3zm2JEDGvjKMeHKMQFsjnW5y1Mx0+YO8TxzWEk4ap3ZaNA7kNpitKuwdZFwEs9vjYNuZgzrc+qcddytNp/3ZN7l6sFm6TbXCUtaF6ihwa4jefqOD9ot/6yMFI0xPcI/k1t0zOJRRZWpQGgmF5HoRWmd3a+8/eXSbNHmfjJNT7JpDWPq7K6P8162nby1CSKSzsylszpp4iKEy+t35OuQvAuvY5R4HLCfJvBt9Zqm6y2Cye1YfIdlvirij6OV/LzGFRLPbmxK1f6h2AXjBAVJ7bWwKla4fooXPc/u4y/n9QwojhT4do8USKpL06JAtkhKJAHZ6fWaPCPcdr0rii8QuTDYeEWsYpm9fqx/Bgj3/TWyIhTVfvBU1KkqBzrePsIgRkb4UmuzLYYVWaonNMW2QINWj2RoukW3MVQOALzqqmEyDsYR2CQoeliQu18XZB1B7+ChYot+3yXiBBfiaJ3SxKeeTtZTgFK8ZkfFptunW12mLABhp/sDxA/wdIsOYZw8HdxDucz8MY2vz24ZYx3bKxTiAjSLcLfQNyt964b4+8ya5JfMbu5BanvFzoLLl0QevCL5/OiDDQUN7lTALe/eMN9V/9m097sp8QMi4msx7pHsk/cQ93Yxwbs2XsfK+0iMm3a0no5P6emUlm3qFKtmhN0TFEESUwRTvC6ejXCHAuLugfiXRf2O+Uvcu/wzujRxg2mC3/I9ZlS1PP79kvbJGhcgQXnynYzz8bWsCP7jzQ32YaGHxRP8k4WR/VH3b3w9xMGQiwnlBU5xKjbs8+f2vr8JfRhirx4eUmH06Ps7++9ifxbey3WHkmBWrNME/flJtZg+LzULwjANEpmvlYLHiVhiTs4H1P9Q+s1NueK+31ny+I93loUymkIX7a3aXdf7u3LDKxsPEbaKvRLLSy3Ht28cPHAeJvA7wG+HMC+KPw3hz5m8/ib+XfJQ06/Mfv0f</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:EnableManageUserConsent</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:UserNotActive">
      <Reason Language="en">The identified user is not active.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA1C0ED690DFF822FE0401F0A2222593D5E/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AA1C0ED690E01822FE0401F0A2222593D5E/Policy/urn%3Adece%3Atype%3Apolicy%3AEnableManageUserConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#UserNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 403 Forbidden</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>826</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c46e28d7-48c5-4c51-aa7e-36db207cac9c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e63eaee6-9154-4ea8-acbd-929019552197">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");
testCase.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("streamhandleFULL",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyAuthority",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus",null);
testCase.setPropertyValue("policyResourceXML",null);
testCase.setPropertyValue("expectErrTypePolicyCreate",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="5b138f5c-3c37-4821-8737-f745145e5620">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
testCase.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
testCase.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));



if (testCase.getPropertyValue("expectErrTypePolicyCreate") == null || testCase.getPropertyValue("expectErrTypePolicyCreate") == "") {
		testCase.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
		testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}

switch (testCase.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		testCase.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="d98e428c-06b3-4e1a-82b0-a4d92693d553">
        <con:settings/>
        <con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["us:mpaa:G", "us:mpaa:pg", "us:mpaa:pg-13","us:mpaa:r", "us:mpaa:nc-17", "us:mpaa:NR",
	"us:mpaa:m", "us:mpaa:GP", "us:mpaa:SMA","us:mpaa:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:g","US:MPAA:pg","US:MPAA:pg-13","US:MPAA:r","US:MPAA:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-Y7-fv","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvmovieRatingsUK = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18",];
chvrsRatingCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r","ca:chvrs:e"]
tvRatingCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+","ca:cbsc:e"]

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {

	case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r":
	case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
	case "${urnRating}ca:cbsc:18+":
	case "${urnRating}ca:cbsc:e":
		for (rating in tvRatingCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;



     case "${urnRating}US:MPAA:g":
	case "${urnRating}US:MPAA:m":
	case "${urnRating}US:MPAA:nc-17":
	case "${urnRating}US:MPAA:r":
	case "${urnRating}US:MPAA:pg-13":
	case "${urnRating}US:MPAA:pg":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	case "${urnRating}us:tvpg:tv-Y7-fv":
	case "${urnRating}us:tvpg:tv-g":case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	//case "${urnRating}gb:bbfc:12a":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsUK) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	default:
		//resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="377788ca-28e9-4f9d-b469-9599342ab687">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - PolicyCreate Account");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - PolicyCreate Account" id="a912c47f-71a5-4214-b082-c97c6f376743">
        <con:settings/>
        <con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="4fde9c4f-f665-4a49-8374-d1dd21ad4ff4">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value;
			break;
		case "#status#": 
			status = value; 
			break;
		case "Connection": 
			connection = value; 
			break;
		case "Content-Type": 
			contentType = value; 
			break;
		case "Content-Length": 
			contentLength = value; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the response headers and body" id="27576efc-8315-4b42-9cb8-32bd20eae6b2">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def acct      = testCase.getPropertyValue("nodeaccountid");

def sh            = testCase.getPropertyValue("streamhandleFULL");
def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = testCase.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = testCase.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");
assert testCase.getPropertyValue("httpStatus") == expectHTTPstatus;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>753</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 403 Forbidden</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyAuthority</con:name>
          <con:value>urn:dece:role:type:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:EnableManageUserConsent</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:UserNotActive">
      <Reason Language="en">The identified user is not active.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA1C0ED690DFF822FE0401F0A2222593D5E/Policy/urn%3Adece%3Atype%3Apolicy%3AEnableManageUserConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#UserNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyResourceXML</con:name>
          <con:value>&lt;dece:Resource>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E&lt;/dece:Resource></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0d9952cf-e575-4659-8dcd-89a758ac4358">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="cd5a2db1-7738-40a9-befc-b8da11c07947">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="86385332-c1ea-4f35-b7fa-69974936f640">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="d06fb111-0dc7-4053-9c60-5ded78579ec4">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("DELETE - PolicyDelete");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DELETE - PolicyDelete" id="fc631bf5-61ee-4afe-9d36-ba24e42143b1">
        <con:settings/>
        <con:config service="DECE Policy PolicyDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="914_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="b5c1ca90-cd7e-4d65-a9cc-208a0f68503f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="721c8651-dd20-4a15-b427-ca70e5840961">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="f44207c8-fb46-4978-a150-d9932d178caa">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_04600 - StreamCreate - DLPCS - Policy - Can create stream when ShareMediaHistory policy is absent</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0914</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">d8a2af59-94ce-4d58-a97b-8920da8cf22a</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ShareMediaHistory</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e525d6ba-d996-49cb-a7a6-8a8ede07b272">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="56f95ae0-97cc-4326-b4bc-ae12b0ca6d47">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("returnXMLResult",null);
testCase.setPropertyValue("XMLbody",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="852ec8fc-6ebb-4b7d-8dd4-9f3faf648b28">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));


if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (testCase.getPropertyValue("returnXMLResult") == null || testCase.getPropertyValue("returnXMLResult") == "") {
		testCase.setPropertyValue("returnXMLResult","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="a052f683-4d5d-4207-b134-c6e4173caf1d">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("GET - PolicyGet I");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GET - PolicyGet I" id="820d14ca-408a-47cd-9e16-4d30246da8ec">
        <con:settings/>
        <con:config service="DEC Policy PolicyGet API" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GET - PolicyGet I" mediaType="application/xml" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
  <con:entry key="USER" value="${#TestCase#encodedAssertionUserIdFULL}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="7dd12ab5-bbc0-4139-91e8-d5042277e319">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('GET - PolicyGet I');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="465f3659-9295-4859-8d68-cdda68deef96">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists == " + testCase.getPropertyValue("policyExists");
log.info "xmlPolicyClass - $xmlPolicyClass";</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="10f67fa4-3839-43d3-81b6-abd3bc64918b">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));

if (testCase.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",testCase.getPropertyValue("XMLbody"));
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D7A787BD71CCC1DEE0401F0A2222597A3A</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D7A7886B18A94D4EE0401F0A2222597A38</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD7A787BD71CCC1DEE0401F0A2222597A3A/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AD7A7886B18A94D4EE0401F0A2222597A38/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 404 Not Found</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>848</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD7A787BD71CCC1DEE0401F0A2222597A3A</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD7A7886B18A94D4EE0401F0A2222597A38</con:value></con:property><con:property><con:name>encodedpolicyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="62fb4d82-d5bf-44cc-839b-f3e612a9ea4b">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c8617094-cdb6-4997-b5b4-e57a6dc7c8b5">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="21905395-de4a-46b3-96f4-73f540b0e249">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="61c65ca5-a5f1-4113-926e-7b1984a817df">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("DELETE - PolicyDelete");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DELETE - PolicyDelete" id="3b6734a0-ca47-42df-a055-e0b83278649a">
        <con:settings/>
        <con:config service="DECE Policy PolicyDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="f380d69b-e3ba-4a15-8a80-87fe0b7a3a8a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="28793577-3396-472d-9f9c-eb4258686fc9">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="fd1cbcd9-5c4d-4ddf-b0a9-47ba2a1eafde">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyInfoInURLNotValid">
      <Reason Language="en">The policy Information in the URL is not valid</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E/User/urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#Policy:PolicyInfoInURLNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 400 Bad Request</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>857</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f51cfe47-bf16-4179-a10e-02e6a48c02cb">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="0dbfeb4f-b8ec-48d1-90c3-d9c9f4a57389">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");
testCase.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("streamhandleFULL",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyAuthority",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus",null);
testCase.setPropertyValue("policyResourceXML",null);
testCase.setPropertyValue("expectErrTypePolicyCreate",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="492f1b0b-d8c9-4142-9ca6-04ac87a8e0b0">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
testCase.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
testCase.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));



if (testCase.getPropertyValue("expectErrTypePolicyCreate") == null || testCase.getPropertyValue("expectErrTypePolicyCreate") == "") {
		testCase.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
		testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}

switch (testCase.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		testCase.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="3bc99cc7-0395-4af7-9179-351f27304f85">
        <con:settings/>
        <con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];
chvrsRatingCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r","ca:chvrs:e"]
tvRatingCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+","ca:cbsc:e"]
RatingIR = [/*"ie:ifco:e",*/"ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
RatingAU = [/*"au:ncs:e",*/"au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
RatingNZ = [/*"nz:oflc:e",*/"nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:r13","nz:oflc:r15","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
RatingFR = ["fr:moc:u","fr:moc:10","fr:moc:12","fr:moc:16","fr:moc:18"];
RatingDE = ["de:fsk:0","de:fsk:6","de:fsk:12","de:fsk:16","de:fsk:18"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {

	case "${urnRating}fr:moc:u":
	case "${urnRating}fr:moc:10":
	case "${urnRating}fr:moc:12":
	case "${urnRating}fr:moc:16":
	case "${urnRating}fr:moc:18":
		for (rating in RatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	case "${urnRating}de:fsk:0":
	case "${urnRating}de:fsk:6":
	case "${urnRating}de:fsk:12":
	case "${urnRating}de:fsk:16":
	case "${urnRating}de:fsk:18":
		for (rating in RatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	/*case "${urnRating}ie:ifco:e":*/
	case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
		for (rating in RatingIR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
			
	/*case "${urnRating}au:ncs:e":*/
	case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
		for (rating in RatingAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
			
	/*case "${urnRating}nz:oflc:e":*/
	case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:r16":
	case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
		for (rating in RatingNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r":
	case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
	case "${urnRating}ca:cbsc:18+":
	case "${urnRating}ca:cbsc:e":
		for (rating in tvRatingCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	case "${urnRating}US:MPAA:G":
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		//resourceXml = "<dece:Resource>$resource</dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="969f5412-dbf6-4a58-9d17-f435e947ff8a">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - PolicyCreate");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "/opt/dece/certs/222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "/opt/dece/certs/0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "/opt/dece/certs/0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "/opt/dece/certs/0702_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - PolicyCreate" id="28a90a9d-5d73-4cfe-9c67-11c64e0db6fd">
        <con:settings/>
        <con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
  <con:entry key="USER" value="${#TestCase#encodedAssertionUserIdFULL}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="14d5fbc5-ecf1-45c4-9e59-c5930395413e">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the response headers and body" id="d995fb5a-092e-473e-9315-a170c33e7e33">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url       = testProject.getPropertyValue("targetHost");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnstream = testProject.getPropertyValue("urnstream");
def acct      = testCase.getPropertyValue("nodeaccountid");

def sh            = testCase.getPropertyValue("streamhandleFULL");
def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = testCase.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = testCase.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");
assert testCase.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D7A787BD71CCC1DEE0401F0A2222597A3A</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D7A7886B18A94D4EE0401F0A2222597A38</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD7A787BD71CCC1DEE0401F0A2222597A3A/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AD7A7886B18A94D4EE0401F0A2222597A38/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyAuthority</con:name>
          <con:value>urn:dece:role:type:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:D7A7886B18A94D4EE0401F0A2222597A38</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:D7A7886B18A94D4EE0401F0A2222597A38</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:nz:oflc:r18</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResourceXML</con:name>
          <con:value><![CDATA[<dece:Resource>urn:dece:type:rating:nz:oflc:g</dece:Resource>
<dece:Resource>urn:dece:type:rating:nz:oflc:pg</dece:Resource>
<dece:Resource>urn:dece:type:rating:nz:oflc:m</dece:Resource>
<dece:Resource>urn:dece:type:rating:nz:oflc:r13</dece:Resource>
<dece:Resource>urn:dece:type:rating:nz:oflc:r15</dece:Resource>
<dece:Resource>urn:dece:type:rating:nz:oflc:r16</dece:Resource>
<dece:Resource>urn:dece:type:rating:nz:oflc:r18</dece:Resource>
]]></con:value>
        </con:property>
      <con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD7A787BD71CCC1DEE0401F0A2222597A3A</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD7A7886B18A94D4EE0401F0A2222597A38</con:value></con:property><con:property><con:name>encodedpolicyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="Test Configuration/Setup" id="c081ed3b-993b-435f-8c64-64167b5e50d4" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" id="e9e44b14-9fb2-47ad-b6e5-a4d7c05c91bf">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Properties" id="d26dc8c9-0ac8-4cdc-85aa-646afc3281c9">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("username",null);
testCase.setPropertyValue("password",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("nodeaccountid",null);
testCase.setPropertyValue("nodeuserid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("userrowoid",null);
testCase.setPropertyValue("accountrowoid",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assert",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="4f10c73f-8215-4abd-8e10-3e972f1cfdaf">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS" id="494f7b61-921c-42c0-b5ec-faafa25ed8c6">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Disable QC Uploading" id="1112f912-b2a2-4f98-a62d-61c9396e1058">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS GET" id="3985a1ef-aaed-4588-b8ce-9a46f782eaf8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information" id="bae4df8b-63e0-4293-800b-60416ebc6a9b">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID, b.ROW_OID, c.ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid</con:query>
          <con:assertion type="XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>uname</con:name>
              <con:value>${#TestCase#username}</con:value>
            </con:property>
            <con:property>
              <con:name>nodeid</con:name>
              <con:value>${#TestCase#nodeid}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TestCase-Level Property Transfer" id="fd094d05-95cb-4f40-b4df-370056ae1eb8">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false">
            <con:name>accountoid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath>
            <con:targetType>accountoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false">
            <con:name>useroid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath>
            <con:targetType>useroid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false">
            <con:name>userrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[1]</con:sourcePath>
            <con:targetType>userrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
            <con:name>acctrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[2]</con:sourcePath>
            <con:targetType>accountrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Setup base node-level information based on calling Node type" id="bdf8ff72-fceb-486a-be84-5f6c9f97335b">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def baseNodeType = testCase.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
testCase.setPropertyValue("cid",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("alid",testProject.getPropertyValue("alid"));
//testCase.setPropertyValue("deceorgid",testProject.getPropertyValue("deceorgid"));

//if (testProject.getPropertyValue("targetPort") == "443") {
//	testCase.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost"));
//	testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost"));
//} else {
//	testCase.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost") + ":" + testProject.getPropertyValue("targetPort"));
//	testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost") + ":" + testProject.getPropertyValue("targetPort"));
//}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
testCase.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testCase.setPropertyValue("SAMLassertion",testCase.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testCase.setPropertyValue("nodeaccountid",testCase.getPropertyValue("assertionAccountId"));
testCase.setPropertyValue("nodeuserid",testCase.getPropertyValue("assertionUserId"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Promote variables to calling TestCase" id="4bfc67d5-ce76-407d-9cf5-128a9095b15e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def toTCName = testCase.getPropertyValue("tName");
def toTSName = testCase.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = testCase.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodetype":
			case "expectErrTypeSTS":
			case "expectErrTypeSTSGet":
			case "username":
			case "password":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,testCase.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertCommon</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value>_cde5a5dd-86e3-4e48-ae03-9d64dfc54a16</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVfbkqLKEn33Kwzn0bC5KN5iuiOKa6OignjBlxMIJaAISIGgX78LHG3t6Znd+zx02JVUZq3MXCSrfiLz4NN9gBCMEy8MqjL/WvufZUPGZGy70W3DZqMFW92GCclmo2e3W/bWYlom1a5VZYRSKAcoMYPktUaTFN0gew2a0clen6H7TPel2Wuva9UFjBEOjbe8kLVqfvAD1C+Pfa2lcdAPTeShfmAeIOonVn8GlFEf7+ybN0y1t59XlOWB8ZubJFGfIKwXG1rQ960XKzwQP4mnPT9t1J95TmAmaQx/nWmj19ov3yzLXrLmSxg7BE2SJEH2CLzHRp7zo/ZWuTlDWw624XXNmUEYeJbpexezAKXAxA3tKvCdMPYS9/CH0BRBkUXoBsythkW1gh814uOAEt03Iz2BjJHZQK5J3YJpcAtjGFiwOtfk19qP73Xw6qvHZoC2YXxAn9b/DRIMTtAPI2g30C2zG7rvR/yiXG8/odWXA8tPkXeC44ImkWlBVJ3GcOvlIw9h8tmoWra/mqMbw6D1X1ryk3jEiWETX1SG9xyIkv+nX4+9ukZZmH4K346TzthAzdbcWbPD/KQN08nCcMPlKWy9lhAeN19B3Vv9a/2ZqHde/XKKL9lotujy7bPsXRipNTDY+mp/fF8f5iacRBpwRGFux8AIj87OjTZ8e5NOeW+ypn0h0/enkc7LdaEeuAE1qdSTeSqOEmOSTGzVbw/RijkydDwEhqod3aiDZHXTvWzogb+gk1ncPYmQN0ej8ZQ+vW/8PN/PeJARSTI9RUzFXnvd8/Zcr1MZLXmWkLbnrx85PeZQ5DWE5zLJ4v8VQ/Z4MzHvC66YFFv8eibwTZFlPr1wHDjPHJDJLHDw3w6MWWd/dPee1MtIFqiqCHiO9XfCSAF7CVBzgXUVbrFQcu4CBqwzXmBHvQL8NatoQsZnBr9Q1Xchc3VbWpw3kp+uL8JYAah05lxF0IQFr+mCooDwassVfiPlO2WmZLJq8BUcgBfy6GJLvQRKuWfRMqPMGNqYMel6tcB28Tw6jE8bXfAVTpG42VGayZsmrwoDoBlLixZT7HsZHaKwYszZB6dBBHcAihmJzwQXRd9nij6nx7xmljb92abI0kBRUcapZVZSRcgGi/nloxYcq3D2QcgFHUyvtbB0ThyT69UAmUsmUDSQ8U7pPBQye3IDoqhkVuGutRoJmSZo87GoaHImgNLGC5mPNvTY3UjuyWqq+UAHu8fGcKqwFAP8PNBO1pk5VkxJBJvDgrKammt5jGeuwsxZdzNeNQbDcC3jMGOgCiyrAgyIBEVquP4sGLELZhJ5PdqDo60YHqAbVxQqHO5Pl5zses2JMx0vGX6770wlb9o0bZeQfYveNfdAlqE9pFzVtDWD0PjAu7Qnw/kKerFxScaMSrW9LlPRlul8xYd+x35fGfNhPTcsVZ9MZ/Pl9JLn4+Oue/GT9wn7Hs8GCu9MxhBOkVUnSFNk9S7PcMb7DvNpq5GQqQBHYQGQdo4jeJjA7PvuSsJ3TREweYHCZRK35KQZkKS6ILO8qm5Fl5pa0iKdU2NFFmwfl+lsrDS/suZYHneKNJfryKBFcq0DuwymtgTRUedMfbCCa3Xs64sEZNFiG1AUKUXq+1bJHEspGGDL2YzFbxFbSWUwNyfRgMyHizZJHVXbH8x6YN7MZ/Q+n7jO+rx31nvcFOPh1TF04C/0B47JmGLLiqoLmgK61/ctV+R5U/OtQx5tDlbO67hnpXOos4ImquQ853kwvNqQDugcGRdhp3BC6V8BuWJiWpw2KxcZwdib6EKKSZs+0GW3ocl/5VhBscozx44cUMFnjglXjglge6zLXZ5CTJuL0DJzWEk4qp3FaNCLSHU12lfYukg4iee3JkE304f1JXXOOu5OXS57Mu9y9WBruM1NwpLmxVLhYN+RPG3PB+2Wf1ZGisrMPcI/kzt4zNCoMpapQGgmF5HoxWmdPay9w+XSbNHzw3SWnuS5OUTU2d0cl71sN31vE0QsnZlLZ31SxVVoGdfvyOcheTdexyjxOGCfJvBNe83SzQ5ayW1ZfIdlvirij6OZ/F3HFRbPbmzLrf2oEIMogUFSeyu8Cg3XT7HS8+w+/nJe14DiSIFv90iBpLo0LQpki6REEpCdXq/JM8JN7F1RfILIhcHWK84q5Oz1Y/13gNahj2Bgw7hxClPLhaj2l4hFvapyoGEVEgYI6iGWywLTBaxI9RjQYmmB7gCa6XJtpoeb1O3wnVatOg6TSTCJwTaB8ZNUpugnqaxBy4s8WOjpQlQgrCpQgktyNE9p4lMvJ/MlgClW3HEhevt0q8sQyDtEPiwAE4fQTn34ErlRWSACXX/phmmh0loUsFQ7f8zv87NbKfAe2ys2oCIZFuJ2wi9Ef+uWyW8ZN7+8HNzCg9T2ClGD65rEnnVF8vzogy4FT+5cKVK6Yb5v/Wx4Ckt8zuh+kn3yrDvj73ciLKmx6Hq7NeRovhxf0tMpLVvQKQRljMMTFEHSxAxaKVaFZz3cw4C4hyC+JcjvqD+dfLc/40sTN5gl+G0+YMJUy+U3bmMziIrbmIwJn3/3qvd0JK5bAvPkKxvn40tbgfiv9zqrbxX7sHmKf7Iwtj/a9UWsh3NwnsX48gKnWBXy+/wHVlghDuvhERbGj8G/CvDV4c/Ge5HvWBLMpk2awD8/qRaz6bVmWlaYBonM10rD47wscSbnCPY/Nv0WphTAv240OfrjjWaljGZ4ch3M2n2v9++bG15JFwtiL+SVWF5rOb6c48MD52E+/wL45YjmRfFvI/o5k7ffzL9bHmr6+X14+wc=</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Get SAML Assertion - STS</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>jbaisakh</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" disabled="true" id="32a5a70e-4179-4cba-a574-2e4e55f3a707">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="faea5152-6e85-49b3-9870-c39f7b846bbc">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("streamhandle",null);
testCase.setPropertyValue("dbxmlresponse",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectTransactionid",null);
testCase.setPropertyValue("expectNickname",null);
testCase.setPropertyValue("expectJDBCSQL",null);
testCase.setPropertyValue("expectDBCreatedBy",null);
testCase.setPropertyValue("expectDBDeletedBy",null);
testCase.setPropertyValue("expectDBCreateUser",null);
testCase.setPropertyValue("expectDBDeleteUser",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="32450254-fc1c-4dc8-9a7f-d6c8a525897e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
testCase.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
testCase.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
testCase.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
testCase.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
testCase.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
testCase.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
testCase.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
testCase.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
testCase.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
testCase.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));

if (testCase.getPropertyValue("expectDBStatus") == "" || testCase.getPropertyValue("expectDBStatus") == null) {
		testCase.setPropertyValue("expectDBStatus","deleted");
}
if (testCase.getPropertyValue("expectDBCreatedByNodeType") == "" || testCase.getPropertyValue("expectDBCreatedByNodeType") == null) {
		testCase.setPropertyValue("expectDBCreatedByNodeType",testCase.getPropertyValue("nodetype"));
}
if (testCase.getPropertyValue("expectDBDeleteUser") == "" || testCase.getPropertyValue("expectDBDeleteUser") == null) {
		testCase.setPropertyValue("expectDBDeleteUser",testCase.getPropertyValue("useroid"));
}
if (testCase.getPropertyValue("expectDBCreateUser") == "" || testCase.getPropertyValue("expectDBCreateUser") == null) {
		testCase.setPropertyValue("expectDBCreateUser",testCase.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA row" id="8b2331c9-70ea-44de-8277-497aa9c5a33c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA where STREAM_HANDLE_OID = :sh</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="5a80670b-df76-4b58-9f79-8ca62224b43f">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data" id="d40bc4bb-081f-49e8-8d08-b9eba982189e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def urnnode   = testProject.getPropertyValue("urnNode");
def acct      = testCase.getPropertyValue("nodeaccountid");

String XMLbody = testCase.getPropertyValue("dbxmlresponse");
String expectStreamHandle = testCase.getPropertyValue("streamhandle");
String expectAccountOID   = testCase.getPropertyValue("accountoid");
String expectRightsToken  = testCase.getPropertyValue("rightstokenid");
String expectUserOID      = testCase.getPropertyValue("expectDBCreateUser");
String expectStatus       = testCase.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = testCase.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + testCase.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = testCase.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_DATE/>
            <UPDATED_BY/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>975DA31F89B0B21EE0401F0A059979D9</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>975DA31F899FB21EE0401F0A059979D9</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>0900</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>2010-12-15 11:29:52.337</EXPIRATION_DATE>             <CLOSED_DATE>2010-12-14 11:29:53.657</CLOSED_DATE>             <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:0910</CLOSED_BY_ORG_ID>             <CREATED_DATE>2010-12-14 11:29:52.335</CREATED_DATE>             <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>*</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>${#TestCase#expectDBStatus}</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" disabled="true" id="f50460cd-ccc2-4a7c-8534-d650132355b2">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="faa13ff8-e3a3-4d52-b061-49747e1f50fd">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("streamhandle",null);
testCase.setPropertyValue("dbxmlresponse",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectTransactionid",null);
testCase.setPropertyValue("expectNickname",null);
testCase.setPropertyValue("expectJDBCSQL",null);
testCase.setPropertyValue("expectDBCreatedBy",null);
testCase.setPropertyValue("expectDBDeletedBy",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectDBCreateUser",null);
testCase.setPropertyValue("expectDBDeleteUser",null);
testCase.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="6c385d68-fc6f-46bb-a5d4-2c4315b0f30e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
testCase.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
testCase.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
testCase.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
testCase.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
testCase.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
testCase.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
testCase.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
testCase.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
testCase.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
testCase.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));


if (testCase.getPropertyValue("expectDBStatus") == "" || testCase.getPropertyValue("expectDBStatus") == null) {
		testCase.setPropertyValue("expectDBStatus","deleted");
}
if (testCase.getPropertyValue("expectDBCreatedByNodeType") == "" || testCase.getPropertyValue("expectDBCreatedByNodeType") == null) {
		testCase.setPropertyValue("expectDBCreatedByNodeType",testCase.getPropertyValue("nodetype"));
}
if (testCase.getPropertyValue("expectDBDeleteUser") == "" || testCase.getPropertyValue("expectDBDeleteUser") == null) {
		testCase.setPropertyValue("expectDBDeleteUser",testCase.getPropertyValue("useroid"));
}
if (testCase.getPropertyValue("expectDBCreateUser") == "" || testCase.getPropertyValue("expectDBCreateUser") == null) {
		testCase.setPropertyValue("expectDBCreateUser",testCase.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row" id="3a40cd0d-c07b-4447-ae93-44b8d6cd8b54">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>${#TestCase#expectDBStatus}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="ad8ab763-9eed-48f1-8c79-41fdd2a82115">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data" id="04ec2ce9-8bb5-4ebd-9d0d-d6c110df9563">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def urnnode   = testProject.getPropertyValue("urnNode");
def acct      = testCase.getPropertyValue("nodeaccountid");

String XMLbody = testCase.getPropertyValue("dbxmlresponse");
String expectStreamHandle = testCase.getPropertyValue("streamhandle");
String expectAccountOID   = testCase.getPropertyValue("accountoid");
String expectRightsToken  = testCase.getPropertyValue("rightstokenid");
String expectUserOID      = testCase.getPropertyValue("expectDBCreateUser");
String expectStatus       = testCase.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = testCase.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + testCase.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = testCase.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == 1;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectStatus[$expectStatus]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HISTORY_OID>978DCC35FCDE7C08E0401F0A05996438</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY/>
            <UPDATED_DATE/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="06e4586c-8dcd-4840-86a1-cc9fae404380">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property" id="c467bd1c-74db-4005-9aa2-019aec232c84">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			/*nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "ErrorResponse";			
			if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			propertyValue = nodeRole;*/		
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="2c928e07-d192-4c60-9c3b-aa17e0bf6b7e">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases" id="8af91d1f-76e8-44f5-9ec5-715e4419f70d">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = newTestCaseName.replace("_PERM_", "_FUNC_");		
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="ddd40203-ffce-4635-9e6b-0a12d304d949">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="fae500c5-a256-43ae-bfe0-f313a5fa719a">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Dynamic LASP Test Cases"; 
//def oldString = """deleteTC.setPropertyValue("CallingTestSuiteName", testSuite.name);"""
//def newString = oldString + '\n' + """deleteTC.setPropertyValue("RequestorUUID", requestorUUID);"""

def oldString = """- LLASP -""";
def newString = """- DLASP -""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				stepScript = testStepList[j].getScript();
				stepScript = stepScript.replace(oldString, newString);
				targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="b1bf89ec-079a-457e-bbb4-3265c7dd8e9e">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3d4b5846-7bc5-420a-949e-eea7b72ca69d">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="ac7e7e1e-6ab6-4c3d-9a45-5343229a4ec7">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="4ff9ab47-0650-4836-b91f-9bc49f4f1a29">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="512b13be-962d-46ad-ab29-eaf0c8d50b71">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="fd3be029-83fa-4e2f-9c46-2fabaf374bcb">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="5a864276-732b-42b1-9eb4-b7c63382cc80">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="9bd7fd68-270a-415f-826a-48244400ab22" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="df12ae76-583c-4a29-87fb-e04f608425ef" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D7A7886B18A94D4EE0401F0A2222597A38</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D7A787BD71CCC1DEE0401F0A2222597A3A</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10062 - RightsLockerDataGet_Download - Policy - ParentalControl:RatingPolicy - NEWZEALAND - FILMTV - OFLC - R18 rating - Full User</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>RightsLockerDataGet_Download_Policy_RTL_For_Geo_IE,AU_NZ</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish LockerViewAll" searchProperties="true" id="375c5200-fd12-4897-ae43-0a4a82e887e8">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="cb46793e-d1de-4ee5-a2e6-375054bf7c49">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass", "urn:dece:type:policy:LockerViewAllConsent");
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="0aa63f00-d495-42a0-aa37-0a1035cf25ed">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyResource") == null || testCase.getPropertyValue("policyResource") == "") {
	testCase.setPropertyValue("policyResource","urn:dece:rightslockerid:org:dece:0900");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}
if (testCase.getPropertyValue("policyRequestEntity") == null || testCase.getPropertyValue("policyRequestEntity") == "") {
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for LockerViewAll" id="9769dcbd-8917-4315-8301-8febd570a1f6">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate LockerViewAll if necessary" disabled="true" id="18762776-2294-49a6-840d-2d4d9f59d850">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def exists = testCase.getPropertyValue("policyExists");

if (exists != "true") {
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:LockerViewAllConsent</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:G</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>RightsTokenCreate_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10018 - RightsTokenCreate - Policy - AllowAdult - US - MPAA - Can create RightsToken that IS_ADULT = 'n' with policy and NC-17 rating</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="7ef71eeb-184b-4e57-b0bc-acd55e15754f">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="c4db63a0-11bf-4d60-a970-251651d681a8">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="54698d5e-45d6-4639-b400-b910e322afea">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.getPropertyValue("policyCreator") == testCase.getPropertyValue("assertionUserIdFULL");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="4561df34-6793-4d26-aee8-220eac7ad629">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="e3475208-10d9-43d8-868b-5b595435ae7e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="4b9eacf4-0e9a-4116-9455-9a96abd9c450">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));
//testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:D7A787BD71CCC1DEE0401F0A2222597A3A</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D7A7886B18A94D4EE0401F0A2222597A38</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD7A787BD71CCC1DEE0401F0A2222597A3A/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AD7A7886B18A94D4EE0401F0A2222597A38/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:D7A7886B18A94D4EE0401F0A2222597A38</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:nz:oflc:r18</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>RightsLockerDataGet_Download_Policy_RTL_For_Geo_IE,AU_NZ</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10062 - RightsLockerDataGet_Download - Policy - ParentalControl:RatingPolicy - NEWZEALAND - FILMTV - OFLC - R18 rating - Full User</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="710eb9d7-8afe-49de-804d-d5981c6415f0">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b58c912f-ccc1-4f1d-b028-98fbaa096a71">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="f787d440-a6ec-46b7-8087-6cf80f56a7ba">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.getPropertyValue("policyCreator") == testCase.getPropertyValue("assertionUserIdFULL");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for Policy" id="8795d4c6-4e9b-4099-b88d-7e7cfd9ccdd8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="557a4416-9350-4371-8b35-486b81c98cbc">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", testCase.getPropertyValue("policyClass"));

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for Policy" id="091092df-d01b-4cc2-8379-49c1a67f71db">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));
//testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:CEE8C5AA32012FB9E0401F0A059914BC</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:CEE8C5AA320F2FB9E0401F0A059914BC</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The supplied policy was not found.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn:dece:accountid:org:dece:CEE8C5AA32012FB9E0401F0A059914BC/User/urn:dece:userid:org:dece:CEE8C5AA320F2FB9E0401F0A059914BC/Policy/urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:CEE8C5AA320F2FB9E0401F0A059914BC</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:CEE8C5AA320F2FB9E0401F0A059914BC</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>RightsLockerDataGet_byDownload_Query_Invocation_ByPermission_TestCases_with_LockerViewAllConsents</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_30014 - RightsLockerDataGet - PERM - SecurityRoleValid - Invocation with Device Portal</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="29738d0c-ac34-4b40-8d46-6b287d170fff">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="06b1af69-439f-456a-9f0e-c9eb05c4cbcc">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="1076ccbb-2ec4-4fbb-bda1-4951fe97edcf">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="40446c0f-9645-407f-805a-81219ff2c540" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="ed2f120b-f45b-49c3-b6f2-4dc29ca7cc92" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="07aa89d1-72d7-4bc2-b0ea-9b4d427abeda" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="0be1fc49-6d84-43be-a7a7-a3295cd532a1" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="c959b9a4-4b34-422f-a386-ae49b0ea7e95" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="5f0830d8-adb6-499e-946b-4f29181a4aa3" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:NoPolicyEnforcement" id="624ce0c7-bca6-4b05-9230-333e4018d396" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:NoPolicyEnforcement" id="27f603dd-abc6-4859-8e1f-9f4d996e906e" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="DeletePolicies" id="3f2a66b0-ecbb-4a1d-9083-7869fddb584d"><con:settings/><con:config><script>import dbUtils.dbPolicy;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,testProject.getPropertyValue("targetDECEDB"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(303,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties>
        
        <con:property><con:name>assert</con:name><con:value>nVdbc6pKE333V1juR8tw8W4lqRouIioqiNeXr3AYAeWiDAj668+A0Wh2ss8+30PKTDPds7p70ax5xYbnsh2AMQojJ/CLsvBW+l+zXW3Uto1mpd3YtCq1OmIrbdSAFZap0bDOVKub1qZUlDGOkezjyPCjtxJLM9UKXa0wjM5UO/Vmp954adTYdak4RyEmocmWF7pUTD3Xx5382LdSHPqdwMAO7viGh3Angp0pUIYdsrNj3DCV3l+vKPMDw3c7ig4dioIvJoLIdeELDDzqlXra82riztSxfCOKQ/RxponfSh++SZK8JNWXILQolqZpim5TZI+JHetX6b1wc0am7G+D65o3/MB3oOE6FyMDpaDIDswicK0gdCLb+yE0QzF0FrqCUliBTM3/VaI+D8jR/WWkJ5AhNirYNphbMA1tUYh8iIozTX4r/fq7Dl599dDw8TYIPfxl/d8gIf+E3OCAzAq+ZXZD9/cRvynX+yuCHdmHboydExplNDkYEOHiJERbJx06mJDPxMW8/cUU3xiG4H9pySv1iJPApr6pjOBYCEf/T78ee3WNMjfcGL1TAzZVdXUF1uOxfjqt94d+gFcqtLfiWw7hcfMV1L3VH+uvRL3z6sOpB1Pfc0/8kmGbwJ4K1FHfnCSJr0bSusz1rbXTaIQ8MDyVn63U4dxp0ErVT6g4xOp4uOuq43KzPNr0KPvSLihxuBcsN3L1YEhdoNL1wiEFKNXdg/GipnK6uwiS+cgf23P/kMpNUDMSF/sp52GBtsaIgvF0fJBSutcXCvKSSdWqMobTJHUkd+bQ9NtnTo85ZHkN0DlPMvt/WafbghEZ9wWfTYoteT0j9K7IshBfeB6cpxZIZA5Y5G8HRpy1P9p7R2onNAdUtQsEnnN34lABewkwM5GzFX4+V1L+AvqcNZoTR70A3DWnaGIiJCthrqo9MbF1U5qfN5Ibry/iSAE4d+ZtRdTEuaDpoqKA4GpLFWEjpTtlqiSyuhIKJIAgpoeLKbUjJKUOZOW6Mq2zq2k9Xi/nxN49D73RaaOLrsIrEj89SlN5UxVUsQ+01QKy3Zj4XobeISisZtyDU/+AdgB1E5qcCS6Kvk8UfcaOBM3IbfqzTZGlvqLihFfzrKSCmPTns8tnLXhO4U1PTEUdTK61gDrfHdHrZR8bi7qvaCARrNx5ICbm+AZEUemkwF9rNRQTTdRmo66iyYkIcpsgEjps2JG9kewTrKppXwe7x8bwqrjo+uS5r53guX4sGFIXbLw5A6uaDZ26YyyDxFq3EkFd9QfBWiZhRkAVOU4FBBANstRI/Tkw5Ob18cFpsw4abruBh+ywoDDBYH+6pHTLqY6tyWhRF7b75kRyJlXDtCnZheyuugeyjMwBY6uGqa0oTfCdS2M8mC2RE64u0aiuMg2nVS9oi3i2FAK3afaWq9mgnK6gqo8n09licknT0XHXurhRb8z1wmlfEazxCKEJhmWKNrqc3hLq/Kq3I3zaajSqF4ClcABIO8sSHUJgrre7krCnKSIhL1D4ROIXvDQFklQWZU5Q1W3XZiZQmsczZqTIoumSMp1XS80trHlOIJ2ijcX6sGK79FoHZh5MrYldS53Vy/0lWqsjV59HIDnMtz7D0NJB7W2VxIJKxgBTTqYceYu4QiyDmTE+9Ol0MG/QzFE13f60DWbVdMru07Ftrc97a70nTVk9vDorHbhz/YFjMqHYoqDqoqaA1vV9SxV5VtVc6KWHjQdTQSc9y50DnRO1rkrPUkEAg6sN64BN8eoi7hRezP0LIFUMQovTZmnjlT9yxroYE9LGD3TZbVj6XzmWUazwzLEjD1TwlWPilWMi2B7LcktgcL3BH/AisThJPKrN+bDfPtDqcrgvcOUuZUWOWxv7rUQflBfMOWnaO3WxaMuCzZf97cqubiKONi5QRf19U3K0veA3au5ZGSpqfeZQ7pneoWOCh4WRzPhiNbp0qXYYlzlv7XiXS7XGzrzJND7JM2OAmbO9OS7ayW7Sa1BUKJ3rl+b6pHaXAVxdvyNfh+TdeB2j1OOAfZrAN+01jTc7BKPbMvsOy0KxSz6ORvRnHZdZHLOyzbd2DpkYxBHyo9J75pVpuE5MlJ5jdsiX87oWmqDZajU4pgXaNaEminSNZro0oJvtdhNUWzexd0XxBSIf+FsnOyuTs9eP9Z8BQq+DkW+isHIKYmgjXPpDxKxeRdnXiAoJfIz0gMjlBsexnCgCHnSbLMsLTK0rtvgaTddArVZvC6XiKIjG/jgE2wiFz1K58SSVNQSdg4MyPZ2JCkxUBY5ISY7GKY5c5uVkvPgoJoo7zERvh6216hR2vIOLMsCUF5ixi14O9iEvEIWvv2zFgDi3ZgXM1c6P+X19disF2WM62QacJcMh0k70jeiv3TL5OeP2Y8a38CA2nUzUkLpGoQOvSJ4ffdIl48mdK1lKN8z3rV8NT2GprxndTzJPDrwz/n4nIpKaiK73W0OOxsvxJT6d4rwFzUxQhiQ8xVB0g5oiGBNVeNaDPfKpewjqrwT5HfWXk+/2Z3xxZPvTiLzNHiFMMV/+xW1sinB2G5MJ4dO/veo9HUnqFqE0+s7Gu+TSliH+470OdmC2j5gn5CcJQvOzXd/EejiH5JmNL8e3slUmv88/sAIGJKxDRlgQPgb/LsB3hz8b70W+Y4kImzZxhH5+Usxm01vJgDCI/UjOZgAxPM7LHGd0PqDO56bfwuQC+ONGk+IfbzRLZTglk8szSve9zr9vrjg5XSAiXtjJsbyVUnI5J4f71sN8/gD424huckKT4XmeEb6OaHAv4FMm77+Zf7c81PTr+/D+Dw==</con:value></con:property>
        <con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:D7A787BD71CCC1DEE0401F0A2222597A3A</con:value></con:property><con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:D7A7886B18A94D4EE0401F0A2222597A38</con:value>
        </con:property>
        
        <con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        <con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        
        <con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The supplied policy was not found.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E/User/urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E/Policy/urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property>
        
        
        <con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property>
        <con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property>
        
        
      <con:property><con:name>sName</con:name><con:value>RightsLockerDataGet_Download_Policy_RTL_For_Geo_IE,AU_NZ</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10062 - RightsLockerDataGet_Download - Policy - ParentalControl:RatingPolicy - NEWZEALAND - FILMTV - OFLC - R18 rating - Full User</con:value></con:property><con:property><con:name>useroid</con:name><con:value>06436A4B753AFB1CC86BEEA91FEEB9A5</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsToken-Generation" searchProperties="true" id="fd64b777-934d-4724-bc07-fb80a72394e3"><con:settings/><con:testStep type="groovy" name="Feed Rights Token Data" id="7ccc517a-d54c-47e8-b39c-3349ed9ca992"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

//RightsToken Request and properties
TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("nodeid",RTCRequest.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",RTCRequest.getPropertyValue("assert"));

testCase.setPropertyValue("AccountID",RTCRequest.getPropertyValue("assertionAccountIdFULL"));
//testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ALID",RTCRequest.getPropertyValue("ALID"));

//testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("ContentID",RTCRequest.getPropertyValue("ContentID"));

testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("PIRetailerTransx","transcation");
testCase.setPropertyValue("PIPurchaseAccount",RTCRequest.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("PIPurchaseUser",RTCRequest.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("VCAllowedUser","urn:dece:userid:org:dece:12222599");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Rights Token Create API" id="7bc2e4b6-890b-46d3-a61e-4e3268867b3e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get Rights Token Data" id="590ad646-43e7-4ba6-89fe-d49d1b9f142b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Create Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

log.info RTCRequest.getPropertyValue("TCaseName");

def runnerRTC = RTCRequest.run( null , false )

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTestCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

log.info "new generated rights token is "+testCase.getPropertyValue("rightstokenid");

//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));




//assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Response" id="463c5203-af5d-49ae-9dcc-88744e66fe31">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

RTCRequest.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
RTCRequest.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
RTCRequest.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
RTCRequest.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
RTCRequest.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify the RightsTokenGet Response" disabled="true" id="4f92ff82-2453-423b-b91f-c333fb6bac8f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify theRightsTokenGet Response against DB Result" disabled="true" id="f27149ab-13a6-474e-a26f-742e1812ebd3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights GET  Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:DF96BF5CDB9CAF18E0401F0A222259719B</con:value></con:property><con:property><con:name>ALID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>ContentID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>DBA4458A9B1310C1E0401F0A05995B2F</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:DF96BF5CDB9CAF18E0401F0A222259719B</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:DF96BF5CDBADAF18E0401F0A222259719B</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="" ContentID=""> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:DF96BF5CDB9CAF18E0401F0A222259719B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:DF96BF5CDBADAF18E0401F0A222259719B</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>3178</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF96BF5CDB9CAF18E0401F0A222259719B/RightsToken</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:DBA4458A9B1310C1E0401F0A05995B2F</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10004_RightsLockerDataGet_RTL_FUNC_byDownloadQuery_with_Inactive_NodeID</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R1_RightsLockerDataGet_byDownLoad_Query_RTL_TestCases</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties><con:reportParameters/></con:testCase></con:testSuite><con:testSuite name="Setup" id="657517b1-5af8-48be-b7fb-59bcf35a5d04" disabled="true"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="f6a5b8ed-d77f-443b-8cab-8b8cc8fcfdfc"><con:settings/><con:testStep type="datagen" name="AccName" id="b4e9248e-f575-414d-8e0b-11315c1b5469"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Rights_Account_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="54480115-3b76-40a9-97bf-47eea050c494"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" id="8be99104-7dad-420f-87ca-6269fbd20258"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="4e466719-ddec-4e27-ad5b-49b42646d534"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#Project#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>222259</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete" searchProperties="true" id="58648e71-e901-465c-86d9-c0b25efd3dfe"><con:settings/><con:testStep type="jdbc" name="Delete_Account" id="02f1e8cd-21ff-4af2-9522-b887763960e1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
accountid ACCOUNT.ACCOUNT_OID%TYPE;
newsfeedid NEWSFEED_EVENT.NEWSFEED_EVENT_OID%TYPE;
BEGIN
select ACCOUNT_OID into accountid from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}';
--select NEWSFEED_EVENT_OID into newsfeedid from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from RIGHTS_LOCKER where ACCOUNT_OID = accountid;
delete from NODE_ACCOUNT where ACCOUNT_OID = accountid;
delete from DRM_DOMAIN where ACCOUNT_OID = accountid;
delete from ACCOUNT_STATUS_HISTORY where ACCOUNT_OID = accountid;
--delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID = newsfeedid;
--delete from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from ACCOUNT where ACCOUNT_OID = accountid;
END;</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ACCID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="7d8a5ad9-21a5-4d4d-bd60-cc1910df1f8d"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="963b6c03-46de-49df-bb5b-8519b18d945e"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn:dece:accountid:org:dece:[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="bcd78b63-ea1c-48bd-bc5b-a684d4a59ede"><con:settings/><con:testStep type="datagen" name="UserName" id="f8eb4332-5fb1-4403-b845-4ea8e460025b"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Rights_LockerDataGet_Download_user_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="998e6ece-9bb5-4d3c-9240-d648b0f5d24f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="4d265279-4bf3-476a-bb0b-5fac8478df5e"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="8c225fbb-b7f1-44cf-b5fb-f35c7bdadca9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="2d3be07b-16a0-4000-9574-cff314fcf4dd"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="9499507f-17ba-4ff4-ab6b-5ba1e8cef897"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" id="464c2461-2f31-4aff-95d0-c2c7813080a4"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="4c8f757d-df27-4bb3-adfb-0580134ebcdd"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="STS_Creation_Using_PORTAL_PORTALCS_Nodes" disabled="true" id="1bd886d5-74dc-4d03-8183-2657d18d598a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000 - STS" searchProperties="true" id="2dde29d2-2d40-4a80-a822-ef2f4eab8e4f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="05802aeb-28e2-44f9-ad22-11ee9e40188c"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = context.expand( '${#Project#UserName}' );
def node_OID = context.expand( '${#Project#PORTALCS_NODE_OID}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username",userName);

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="3af31112-e592-40a9-9d4a-1bac25e4e90f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Core Identity Information Extraction")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST" id="23f25f23-3fbf-4bba-9653-31b55447d062"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="024e6d09-d3c7-4a61-ac30-5f03a26d50af"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testProject.getPropertyValue("PORTALCS_NODE_OID");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {

	case "DABD1A709AAD9052E0401F0A2222596E9F":
	keyStorePath = "/opt/dece/certs/iscportalcs1_concat.pem";
	break;
	case "222259":
	keyStorePath = "C:\\DECE\\certs\\" + nodeId + "_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS1" disabled="true" id="8a3995ef-ec2a-4e38-9e89-d3ed6e509590"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS1" mediaType="application/xml" postQueryString="false" id="2d23fd7d-42c2-4066-a537-e17979f93163" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500501;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" disabled="true" id="eba45dfe-8d13-461e-8c29-a972568f6b6b"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="222233_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500500;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body" disabled="true" id="9b0049dc-7704-4ee6-8a9f-24770e91a62c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

//testProject.setPropertyValue("SAML",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="3d1463be-cdd0-4cf7-b62b-eb9b62109ce2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties" id="2dc942fc-5405-43d8-be1f-5717b0bc4d53"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));

def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));

def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));

def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" disabled="true" id="9748399c-6f75-4f38-a3d2-5ebdc397996b"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" disabled="true" id="71e715ac-5ae3-40f9-9b4d-96228590e647"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>https://qa.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20111024/html</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" disabled="true" id="9e404a6e-f837-423f-a1e2-2bf81dc0f87f"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="b698f414-9265-434d-873a-b75306a39b99"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" disabled="true" id="f9d6683b-4a12-47d5-bb0c-1177b7d8e6cb"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true" id="510c0eed-56eb-48ab-aede-c25857566647"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_cb36137e-fbb8-46b5-b46b-2e6afba4f950</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>DB7DF7741842F92FE0401F0A05990A48</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:DB7DF7741842F92FE0401F0A05990A48</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>DB7DF7741851F92FE0401F0A05990A48</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:DB7DF7741851F92FE0401F0A05990A48</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_cb36137e-fbb8-46b5-b46b-2e6afba4f950</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DABD1A709AAD9052E0401F0A2222596E9F</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>Rights_LockerDataGet_Download_user_20130501_011226</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_30001 - RightsLockerDataGet_byDownloadQuery - PERM - SecurityRoleValid - Invocation with PORTAL</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R3_PatchChanges_PORTAL[:CS]_Nodes</con:value></con:property><con:property><con:name>country</con:name><con:value>US</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="E2E_TestCases" disabled="true" id="5bd925c1-4e6d-4e7b-97ae-e13660752d8a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_AccptTest_00001_AccountCreate_API_Invocation_from_Retailer" searchProperties="true" id="c8d0b484-314c-4d26-b27c-071dcb386b60"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="calltestcase" name="Node_Setup" disabled="true" id="90f42385-a1f6-416d-863e-3e77f5f97c88"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8be99104-7dad-420f-87ca-6269fbd20258</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>${#Project#Node_OID}</con:value></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Delete_Account" disabled="true" id="d389036b-5ee8-446b-88b0-6e4e6cee48be"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1d4b02bc-3490-4488-89de-0e90175fb915</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>ACCID</con:name><con:value>${#TestCase#ACCID}</con:value></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="AccName" id="f17a603a-eaf4-4e89-ba2f-90a3c6b806d1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>f6a5b8ed-d77f-443b-8cab-8b8cc8fcfdfc</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="0584e89b-f129-4635-af1b-5b3fab5aa798"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("nodeIdRET"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("Account_Create");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);



</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="ad4ba550-8d40-47b8-8c38-d0c9853ae15e"><con:settings/><con:config service="Account_Create" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#SchemaNameSpace}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>${#TestSuite#country}</Country>
</Account>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="fcefbd21-ab18-4269-94cc-b949c7750741"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="21630e0e-ef63-4eed-bb5d-36fcd2108063"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def acct      = testCase.getPropertyValue("nodeaccountid");
//def urnnode   = testProject.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = testCase.getPropertyValue("streamhandleFULL");
//def nodeid        = testCase.getPropertyValue("nodeid");
//def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = testCase.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	log.info "urlStr=="+urlStr;
	
	def decodedAccountID = URLDecoder.decode(urlStr,"UTF-8");
	log.info "decodedAccountID=="+decodedAccountID;

	//assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	assert decodedAccountID.matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	/*int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);*/

	int lastColon = decodedAccountID.lastIndexOf(':');
	int lastSlash = decodedAccountID.lastIndexOf('/');
	accountid     = decodedAccountID.substring(lastColon + 1);
	
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	testProject.setPropertyValue("NODEACCID",accountid);
		def encodedNodeAccID = "urn:dece:accountid:org:dece:"+accountid;
		log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
		if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
			testProject.setPropertyValue("encodedNodeAccID",URLEncoder.encode(encodedNodeAccID,"UTF-8"));
		else
			testProject.setPropertyValue("encodedNodeAccID",encodedNodeAccID);
						
	//testCase.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>20</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3f3e8c09-0ec0-4582-9364-7ee82f493271</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad4ba550-8d40-47b8-8c38-d0c9853ae15e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_AccptTest_00002_FirstUserCreate_API_Invocation_from_Retailer" searchProperties="true" id="152080cf-2dee-416d-9312-48f2c18fd5bc"><con:settings/><con:testStep type="calltestcase" name="Node_Setup" disabled="true" id="b1000545-3581-49ad-ab2e-1584b88c98e4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bc012d79-dd57-410b-9631-d117e1da33f3</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name><con:value>${#TestSuite#Node_Value}</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value/></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="0b39daa7-1ff0-4d20-bc33-87d0fb8946a9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bcd78b63-ea1c-48bd-bc5b-a684d4a59ede</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="b2fc178a-2f52-439c-b00f-068003942939"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("nodeIdRET"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);



</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="103804c2-a3f4-45e9-b327-0587ee026ad0"><con:settings/><con:config service="UserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Gupta</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>aravind.racharla@compugain.com</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>ikalyan@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
       <DateOfBirth MeetsAgeOfMajority="true">1988-02-25</DateOfBirth>
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#encodedNodeAccID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="User_Create1" disabled="true" id="c839607b-dcb7-4851-a9c3-10fb7b501402"><con:settings/><con:config service="UserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create1" mediaType="application/xml" postQueryString="false" id="44df2979-a9a7-4c26-962f-b889885a458f" sslKeystore="222259_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Gupta</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>aravind.racharla@compugain.com</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>ikalyan@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
       <DateOfBirth MeetsAgeOfMajority="true">1988-02-25</DateOfBirth>
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="0f522c6b-e6ce-41d7-b550-e521301023d8"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="78a0dfa6-e124-409c-bd9c-ad474df71ddb"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def acct      = testCase.getPropertyValue("nodeaccountid");
//def urnnode   = testProject.getPropertyValue("urnNode");

//def sh            = testCase.getPropertyValue("streamhandleFULL");
//def nodeid        = testCase.getPropertyValue("nodeid");
//def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = testCase.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	log.info "urlStr=="+urlStr;
	
	def decodedUserID = URLDecoder.decode(urlStr,"UTF-8");
	log.info "decodedUserID=="+decodedUserID;	

	//assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	assert decodedUserID.matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	/*int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);*/

	int lastColon = decodedUserID.lastIndexOf(':');
	int lastSlash = decodedUserID.lastIndexOf('/');
	userid     = decodedUserID.substring(lastColon + 1);

//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	testProject.setPropertyValue("NODEUSERID",userid);
	//testCase.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77/User/urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000 - STS" searchProperties="true" id="5e6aca57-6432-4d91-9c53-430e0eb713bd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9cfbec82-c57c-4b35-90a5-b2a2d7312c92"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = context.expand( '${#Project#UserName}' );
def node_OID = context.expand( '${#Project#nodeIdRET}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username",userName);

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);

testProject.setPropertyValue("thirdPartyAudienceList","urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdRET:CS"))
testProject.setPropertyValue("audienceList",testProject.getPropertyValue("thirdPartyAudienceList"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST" id="866211af-f5c7-4ed1-b115-1ff64e7142a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="18461efd-4cb0-4cd5-a59c-86e9e879d7f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountestCaseonsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="39cf70b7-d562-4be4-ae13-230598d33b29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId"))
rightsLockerID = myAccount.accountGetRightsLockerId(accountID).toString();
log.info "accountID==="+accountID;
log.info "rightsLockerID==="+rightsLockerID;

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId"))
log.info "userID==="+userID;

testProject.setPropertyValue("accountOID",accountID);
testProject.setPropertyValue("rightsLockerID",rightsLockerID);
testProject.setPropertyValue("userOID",userID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties" id="07d0c5ae-6ba8-458a-8402-59dce10e4c9e"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));
else	
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",encodedAssertionAccountIdFULL);

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));
else
	testProject.setPropertyValue("encodedAssertionUserIdFULL",encodedAssertionUserIdFULL);


def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
else
	testProject.setPropertyValue("encodedTermsofUse",encodedTermsofUse);
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
else
	testProject.setPropertyValue("encodedULC",encodedULC);
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMUC",encodedMUC);
	
def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMAC",encodedMAC);
	
def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedUDUC",encodedUDUC);</script></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Version" id="7d16f567-aeba-47ef-8acf-8b38c4ec8873" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def tOUUrl;
def dBHost = context.expand( '${#Project#targetDECEDB}' )
def targetPort = context.expand( '${#Project#AppPort}' )
def versionMinor = context.expand( '${#Project#versionMinor}' )

String country = context.expand( '${#TestSuite#country}' );

def a = new dbUtils.dbUtils(log,dBHost);

String sql = """select consent_version from CONSENT
              where
              consent_urn = 'urn:dece:type:policy:TermsOfUse'
              and
              COUNTRY = '$country'""";

log.info sql;

results = a.SelectFromDB(sql,dBHost);

assert results.length() > 0;
log.info "results" + results;

def myXML = new XmlSlurper().parseText(results);   

log.info "consent_Version==="+myXML.ResultSet.Row.CONSENT_VERSION.text();
                
def consent_Version = myXML.ResultSet.Row.CONSENT_VERSION.text();

if (versionMinor == "06") 
	tOUUrl = context.expand( '${#Project#TOUUrl_06}')
else
	tOUUrl = context.expand( '${#Project#TOUUrl_07}')	

testProject.setPropertyValue("TOUVersion",'https://'+ tOUUrl + ':' + targetPort + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');
log.info "TOU_Resource==="+testProject.getPropertyValue("TOUVersion");</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="b9f73836-8163-4e58-8a28-3ad1ad4ca3c8"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#TOUVersion}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="cd2c54f9-bde4-4492-a21f-d58f97a82f00"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="0c0b9c8b-b729-45ed-9ba1-f5922ab3a273"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="222259_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="270c3b4a-2d00-45df-8e5d-9bea6a1f3ab5"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true" id="cea37613-2df2-4f0e-9508-c950f2458995"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdc9o6EH3Pr/C4jx0jfwLxBGYcm6RuSJpiIElfOkIWoMaWiSUbkl9fycQECMmld4YZRuvV7tndoyOdMZgmpusxhnNOMqqEQUf9jWKE0HRiaROjaWk2Mm2tfdqGWtO2LfHNmZgmUpWQsQKHlHFIeUc1dcPWdEczT4eG6dqWazoN23R+qcoY50yEFi4NXVVWaUKZW6XtqEVO3QwywlwKU8xcjtzIu+67wtOFNSa1e7ZGWSXMu3POFy4AqBFjhJMENVCWgjOw43MWMzciMwp5kePXnDHrqK97l8tlY2k1snwGTF3XgX4KhE/MyOyL2j2pN+M4pNNsvfYhzShBMCEvUIK6xnyexYqXzLKc8Hn6QWgDGLoMreEV0pBh0y8qeEtQoTsy0g7InEGNzaFRBxvgKc4xRVgZDcKO+uW4Ca73DnNI2TTLU7a3/jdImJY4yRY41lhdWY3u+IgH2tU9w8gNKUoKRkp8I2mygAgz5TbHU7LqEybIFzOlGr+yYuJHapZh9C9jOQPbWAV0cKA7AZlhxv/PzLbntY4yhkmBu2gIv9nW/f3jYATJRWw8+JaVfytnTyO7U0HYdl6D2oz7db1P1g23Xjfd9s3n9ApM76+++eyqfx0Nfxa27emjVbEMf/3wn78HCbXBZRCaetS7GbJWq4znj98Dve33+Wo6zk1wdzf7WY4X2cnL4+hy1FxEKx5g+2sZ9obNh4H/2A/8u1Pi3YOorY+z696YJuAuXa4ml3PWsnqXDy+PlKf347Topc6gNX3xrGV50mN2Ohnc3kRfkz/zp/GVfj7qvNW0XcOusZaEqJj8wYjXS0mPMFAuxLwg/1xepIXE2rRydRdSoxjHlKtduUtKi1sIASKxK4a5Xl94bc9u2s2WbRmO79k93daNC93TndNTK2g5tQatUexB9DM6JTKXVNk1fz4HiFKXYRrjXCuzAs0xUz+JGEAOlZAOxOHIKMPDTKh40NYt6/zCaDd7lum3Asc2e1ZLkN+wW55jXajKTcZ/0B+5N+U431VwZ0fBBxiRBcFS5iXPmSA646IlT7AseGI0StiguBAXQS612DXttgMYSRcJloBBmsVFghuL+aJqEGDrf1ODiFXWQW9Ynb8Py9v/VndC+MREOjBZyzkW08QHriKjLuTjgtvbBdfhvSIm8piJtvKcoDWS3U9vbJE02VBFVPTbj34bNe6N+9Hb3+8En4AC+/3YJIpLspW2vlPFNSFEpFtP8wk2nhpFWRbV/CRHQC7CAwPoLRBhVAiVex5mj5iCTQhw1CWzQb2XeWPfxVfwOY045DgVbFOq5REvjAgz+cIIxWlZHft82Ukp+sbxih+y+Yl4iEjEn75VkIuknzDfir9llsdv4zoQayuPqFM8KzihM7mS18nzB6RAmQhLhP5l+XbwQwEOJd81bpq8wcIFmyYFxx9/UaSwdVSIUFZQHgZqZdgW2wonf15g983pXZhK0F9v6BX78Ia+v+5HQvZSqG58yX87a6SiC8KqfAhUWDrqSjw4RXI62xL3V4AH9N12hL6f+56/p++tTQN3Kum+M7+3bPV0/zx0/wI=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_cdcccfb3-b163-4c24-898a-6443cdc5b22c</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_cdcccfb3-b163-4c24-898a-6443cdc5b22c</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>Rights_LockerDataGet_Download_user_20140529_084323</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95d7b470-1723-4b33-882e-4235cf191367</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of TC_DECE_01000 - STS" searchProperties="true" id="81c4c352-96d3-478e-86f3-fbf9e6459b75"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="87bff3b6-7b85-41f1-a81f-12211ef4c2ef"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = context.expand( '${#Project#UserName}' );
def node_OID = context.expand( '${#Project#nodeIdRET}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username",userName);

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);

testProject.setPropertyValue("thirdPartyAudienceList","urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdRET:CS"))
testProject.setPropertyValue("audienceList",testProject.getPropertyValue("thirdPartyAudienceList"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST" id="6c483db0-b533-4c40-8f05-dbe473a78bef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="33c1c917-f1b7-422c-8c69-60462259484f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountestCaseonsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="2b31c51d-3d2e-46b5-82e4-688b9b61ae38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId"))
rightsLockerID = myAccount.accountGetRightsLockerId(accountID).toString();
log.info "accountID==="+accountID;
log.info "rightsLockerID==="+rightsLockerID;

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId"))
log.info "userID==="+userID;

testProject.setPropertyValue("accountOID",accountID);
testProject.setPropertyValue("rightsLockerID",rightsLockerID);
testProject.setPropertyValue("userOID",userID);

</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties" disabled="true" id="8aab321e-ed34-46c4-a797-4e5ba4fe2083"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));
else	
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",encodedAssertionAccountIdFULL);

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));
else
	testProject.setPropertyValue("encodedAssertionUserIdFULL",encodedAssertionUserIdFULL);


def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
else
	testProject.setPropertyValue("encodedTermsofUse",encodedTermsofUse);
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
else
	testProject.setPropertyValue("encodedULC",encodedULC);
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMUC",encodedMUC);
	
def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMAC",encodedMAC);
	
def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedUDUC",encodedUDUC);</script></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Version" disabled="true" id="7e8a5885-8c96-4ad2-86f8-20c1f8571191"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def tOUUrl;
def dBHost = context.expand( '${#Project#targetDECEDB}' )
def targetPort = context.expand( '${#Project#AppPort}' )
def versionMinor = context.expand( '${#Project#versionMinor}' )

String country = context.expand( '${#TestSuite#country}' );

def a = new dbUtils.dbUtils(log,dBHost);

String sql = """select consent_version from CONSENT
              where
              consent_urn = 'urn:dece:type:policy:TermsOfUse'
              and
              COUNTRY = '$country'""";

log.info sql;

results = a.SelectFromDB(sql,dBHost);

assert results.length() > 0;
log.info "results" + results;

def myXML = new XmlSlurper().parseText(results);   

log.info "consent_Version==="+myXML.ResultSet.Row.CONSENT_VERSION.text();
                
def consent_Version = myXML.ResultSet.Row.CONSENT_VERSION.text();

if (versionMinor == "06") 
	tOUUrl = context.expand( '${#Project#TOUUrl_06}')
else
	tOUUrl = context.expand( '${#Project#TOUUrl_07}')	

testProject.setPropertyValue("TOUVersion",'https://'+ tOUUrl + ':' + targetPort + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');
log.info "TOU_Resource==="+testProject.getPropertyValue("TOUVersion");</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" disabled="true" id="89812786-d065-4f6b-921e-c63e93015476"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#TOUVersion}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" disabled="true" id="9c3f8728-8e25-410a-8bae-3224fe60b0fb"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="fee17b1b-ead7-4fab-b7d0-fd9a551a69c3"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="222259_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" disabled="true" id="70022f36-3e44-4c22-9224-3a90e979dad1"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true" id="97ba05a8-3706-48c0-a35c-bb77c91fcf82"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZbU+JKEH7fX5GKj1bIlYspoCoEXHFBXW4efbGGSQPjSSYxM0Hw1+9MMAiIHvZUWVLT6en++jJfd52hKLRcjzFIOYmp0m031CeEKmBMy1irVdBMc2q1ilZDIP4BKls1MOxpxVSVLmMZdCnjiPKGahmmoxllzboYmZbr2K5VK1mO8agqE0iZMC1USoaqrKKQMjd321CzlLoxYoS5FEXAXI7dodfvuULTRQUmtVnfoMwdps0F54mr67gUAIYwxCUcR3pd39OpB8wdkjlFPEvh3WfAGur73dfX19KrXYrTuW4ZhqEbF7rQCRiZn6nNH8VlCLp0Fm/OPqIxJRiF5A1JUH3gizhQvHAep4Qvoi9Mm7ppSNMarLCGTYeeqfqHgxzdiZb2QKYMaWyBzMLYAGaQAsWgjAfdhnp2WgU3d0cpomwWpxE7OP8dJKBLCOMEAo0VkRXoTrd4JF3NOmC3S3GYMbKEG9kmCcLAlLsUZmTVI0w0X8CUvPzKiok/UnQZ4L8pS13fxSqg60ey0yZzYPz/1Gy3XhsrExRm0HxMy3xmPF+3ba8/vnl8GOGHsbXkb8aCNXIIu8obUNtyv58Pm3XbW++XHpNR66f5i/Zr9nll5PdMbjk3Rt+5b7WQDrpZnfR++/OJ06HYCirnvfNgEiymNLmdzvDomq5N7+L6sVNtv7XG+EdCrHlrfHcV/bz0F8+/OzQB32Qrwuy3Aazt+7ur8dqLLsbZuV5dX/Pz+062Wsysqe9NXvjAuPKer69WSXV+Y/3q/Si3HqJl962SzpPMuZ/2r+3XxkdMuzHsCwtKGGbTZ8C8OMr26LaVS1EvxL+nFykhgTbLVd1EchTjQLnalLcktbiZICASuKKYm/OlV/OcilOpOrZZ9j2nYziGeWl4Rvniwm5XywUHbVAcQPRjOiPSl2TZTf98DxBHLgMaQKot4wwvgKnfWGwjjpQuHYjHEVMGo1iweNsW8KyaKYEaRsXyHd9vG7ZndCoV67LVVpWbmN/S29SbcUj3Gby8x+ADwCQhIGle9jkTjc64SMkLWmY8NEtLVKKQiUGQSi52LadW1hmJkhAkYD2KgyyEUrJI8gTpbPNraQizXDrojPL392V4h9+KTAidgEgFJmNpgagmHBlFZhHI1wHXdgMuzHtZQOQzE2nlKcEbJPufPrpFtsm2VURET/7wySxwb9VPvv75pv4NKP0wH1tHwZLsuC1mqhgTgkSaRTVfUOmllC2XWV6/qiTIVJjXTd2o6kPAmWC59Sj+F6i+NaGfNGS2qA88b+X7+DK+oEOOOESi25T8eMKGMQQmN4yueC2rU9eXPZcibxxW/JjMD8UiIhF/u6tgF0s9Ib4TP69xGnyU64itHT8iTrFWcELn8iTHyfqLpsCxMEsE/8XprvFjBo453xduk7zFwkU3TTMOX39RJLE1VIRxnFHelQQiBLtkm+Pk6wTcD6VPZnJCf5/QK/blhP6n3xsK2ouQutUl/62skbxdMKhyEcixNNSVWDiFczrfIfd3gEf43SkLfm/5nn/A79VtAvciaX4Sf5bs5PTwPTT/AA==</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>Rights_LockerDataGet_Download_user_20140529_084323</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95d7b470-1723-4b33-882e-4235cf191367</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>TCaseName</con:name><con:value>RightsTokenCreation_with_Unique_MD_Details</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Metadata_Creation</con:value></con:property><con:property><con:name>country</con:name><con:value>US</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite Utility Test Cases" disabled="true" id="ef4bf66d-3fcb-4f06-a1cb-96468ce572c0"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e057955e-9796-4c25-b20a-21293acd2005"><con:settings/><con:testStep type="groovy" name="Establish Test Case properties" id="b4c3801e-b710-4210-9ea1-2c028b824af4"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("expectErrType",null);
testCase.setPropertyValue("XMLbody", null);
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);
testCase.setPropertyValue("assertionUUID",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="a33ea6fb-31d9-4310-bf6a-484345f4ab4f"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4cb04cbf-f2b0-4a7c-8530-65fefbc592a9"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('POST - STS');

def expXML = tStep.httpRequest.response.getResponseContent();


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody",expXML);
testCase.setPropertyValue("status",status);
//testCase.setPropertyValue("connection",connection);
testCase.setPropertyValue("contentType",contentType);
testCase.setPropertyValue("contentLength",contentLength);
testCase.setPropertyValue("contentLocation",contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="e44da391-ac29-4ab0-a701-38466c4b4436"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
def url           = testProject.getPropertyValue("Provision_HostName");
def urnacct       = testProject.getPropertyValue("urnaccount");
def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
//boolean doContentLocaton  = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/rest/1/06/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/06/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="9c2fa7ad-9cb5-420c-8356-54ec324bf0f7"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:properties><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_3baa8ff4-f122-4b18-948d-bde8505caca6</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Retailer_Work_Flow</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01000 - STS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2364a641-cf5c-416e-811a-acadb9be8f75"><con:settings/><con:testStep type="groovy" name="Establish Test Case properties" id="5fc8fcfd-b70d-4f7c-81bf-af8dcadb2e35"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("expectErrType",null);
testCase.setPropertyValue("XMLbody", null);
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertionUUID",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="2c1e76f3-92eb-47f2-b3c4-8cc875596c4e"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="7e2badc6-03e2-428a-9ea2-a81c97f8fedd"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
//testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
//testCase.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="a122c397-2878-4cba-85ba-e1e3c64fefe6"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="bhavins code" disabled="true" id="5668827b-6d62-4ea2-aae2-2b29a87dd143"><con:settings/><con:config><script>def XMLbody = testCase.getPropertyValue("XMLbody");

List lines = XMLbody.readLines();
List newList;
//String XMLassertion = "";
StringBuffer XMLassertion = new StringBuffer();
Integer startLine;
Integer endLine;

for(i = 0; i &lt;= lines.size; i++)
{              
     line = lines[i];
          try {
                                if(line.trim()[0..16] == "&lt;saml2:Assertion ")
                                {
                                                startLine = i;
                                                //log.info startLine;
                                }
                                else if(line.trim()[0..17] == "&lt;/saml2:Assertion>")
                                {
                                                endLine = i;
                                                //log.info endLine;
                                }              
          }
          catch(Throwable e){
                                //Do Something
          }              
}
for(j = startLine; j &lt;= endLine; j++){
	XMLassertion.append(lines[j]);
}

this.log.info XMLassertion;

testCase.setPropertyValue("XMLassertion",XMLassertion.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Extract out &lt;Assertion> XML block" disabled="true" id="679df580-6b11-49d4-8354-c6b7e58e5e88"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbody.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbody.indexOf("&lt;/saml2:Assertion>");

testCase.setPropertyValue("XMLassertion",XMLbody.substring(startAssert, endAssert + 18).toString().trim());


this.log.info testCase.getPropertyValue("XMLassertion");</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="48bbc0c2-c849-4a3c-9f5c-c3277f2053fb"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);

testProject.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="d66bc31a-b51b-4e9f-8fc3-14f524e1f1d2"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value>http://c.decellc.com/Pdb0CZGBUrsvWFkIuYgs3qsXOaI=NILp5IJSyPaupxlJH92/ICZ5XkLovBzBB73wfUAIErYCKQEg5pr69oEAm3JpY5vh6OAzp0c3eEAj pligdNHt+af7dbgRIKbCXYjZ6g/jnGhmtEMIur9d/kRcSdiJzYxxsLIq4xVdOiQEQcAkD1DQ/ArW GbulJlyxMr0N9E9UszU=MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85 RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5 AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=94B6AE0F85AFC20DE0401F0A222259081Furn:dece:org:org:dece:80080010https://qa.q.uvvu.com:7002/dece/SecurityToken/Assertion/eed91199-941b-4565-b26d-e9063f83fd50urn:oasis:names:tc:SAML:2.0:ac:classes:Passwordurn:dece:org:neustar:coordinator94B6AE0F85ADC20DE0401F0A222259081F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>TestSuite Utility Test Cases</con:value></con:property><con:property><con:name>status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Generic STS GET</con:value></con:property><con:property><con:name>XMLassertion</con:name><con:value><![CDATA[<saml2:Assertion ID="92d22367-197d-4773-9057-74c89ccfda3c" IssueInstant="2010-11-15T19:46:20.197Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">        <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>        <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">           <ds:SignedInfo>              <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>              <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>              <ds:Reference URI="#92d22367-197d-4773-9057-74c89ccfda3c">                 <ds:Transforms>                    <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>                    <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">                       <ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>                    </ds:Transform>                 </ds:Transforms>                 <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>                 <ds:DigestValue>NtffQXv952YAnSnOQOJsjwSVhiQ=</ds:DigestValue>              </ds:Reference>           </ds:SignedInfo>           <ds:SignatureValue>L4l13e+/2KysklswaFIS5jY23RXvukUwbkoRxnf7VV6wThY1WiwZ+D5vEDVwQXXN4dDvYfEKHzfX 7HAq7IzxtAq4MuaWPysx0W7MGQ/uyRnRxb6bRQksqLjOwKsDA9H+cRG3hlgYkIfIz1AsjbZz6rOn Spq5Md0E/NIGNK+N3MI=</ds:SignatureValue>           <ds:KeyInfo>              <ds:X509Data>                 <ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85 RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5 AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate>              </ds:X509Data>           </ds:KeyInfo>        </ds:Signature>        <saml2:Subject>           <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">94B6AE0F85AFC20DE0401F0A222259081F</saml2:NameID>           <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">              <saml2:SubjectConfirmationData InResponseTo="C1BC299971F8420086E881CD885E93FF" NotOnOrAfter="2010-11-16T19:46:20.197Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/>           </saml2:SubjectConfirmation>        </saml2:Subject>        <saml2:Conditions NotBefore="2010-11-15T19:46:10.197Z" NotOnOrAfter="2011-11-15T19:46:20.197Z">           <saml2:AudienceRestriction>              <saml2:Audience>urn:dece:org:org:dece:80080010</saml2:Audience>           </saml2:AudienceRestriction>        </saml2:Conditions>        <saml2:Advice>           <saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/dece/SecurityToken/Assertion/92d22367-197d-4773-9057-74c89ccfda3c</saml2:AssertionURIRef>        </saml2:Advice>        <saml2:AuthnStatement AuthnInstant="2010-11-15T19:46:20.197Z">           <saml2:AuthnContext>              <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>              <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>           </saml2:AuthnContext>        </saml2:AuthnStatement>        <saml2:AttributeStatement>           <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">              <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">94B6AE0F85ADC20DE0401F0A222259081F</saml2:AttributeValue>           </saml2:Attribute>        </saml2:AttributeStatement>     </saml2:Assertion>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Core Identity Information Extraction" searchProperties="true" disabled="true" id="a8c663ad-9ba5-4a72-9b85-0b8c865bb8e0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="634d76f8-24e9-4df0-9513-b229c1a79939"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("nodeaccountid",null);
testCase.setPropertyValue("nodeuserid",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="4436e108-6304-45a1-9a23-b98616653324"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));


</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information" id="382e2c61-cb2b-441a-8e7e-4a91ea4a50c4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid
   
   


</con:query><con:assertion type="XPath Match"><con:configuration><path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:properties><con:property><con:name>uname</con:name><con:value>${#TestCase#username}</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>${#TestCase#nodeid}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="0f68394c-747c-41a9-9e81-bdc98ed0477e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>accountoid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath><con:targetType>accountoid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false"><con:name>useroid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath><con:targetType>useroid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>nodeaccountid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_ACCOUNT_ID[1]</con:sourcePath><con:targetType>nodeaccountid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>nodeuserid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_USER_ID[1]</con:sourcePath><con:targetType>nodeuserid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase" id="2ae3d52e-a01a-40c3-921a-3b3aab11cf87"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def toTCName = testCase.getPropertyValue("tName");
def toTSName = testCase.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = testCase.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodeid":
			case "username":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,testCase.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_01000 - STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS_Creation_Coordinator_Nodes</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>Rights_TokenCreate_User_20130920_122037</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="36cbfa8f-4656-43dc-a01a-ab70690bb11a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="1b5e347c-7bbb-4e9f-9faf-12f7b64ce18b">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="16daf24a-b15d-4cca-be3f-4ff11dd07ed1">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

testCase.setPropertyValue("audienceList",testProject.getPropertyValue('audienceList'));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="3e497756-5d15-4868-9349-c9984b25a02d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="URL_Builder_with_AudienceList" id="3ef511f0-2e64-43e7-b9b1-fa3933fda1b8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def urlParam;

log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+(testCase.getPropertyValue("audienceList").replaceAll(":","%3A"));
//def urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");
else
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");

log.info "urlParam=="+urlParam;
testCase.setPropertyValue("tokentype",urlParam);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="b64298e5-202e-41a2-bb8b-1be5ae449a7a"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" id="cfaadafb-1927-4563-8394-72a5a1127f24" accept="" sslKeystore="RET_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:restRequest></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="31ca3839-0f3e-412a-b978-6cb502788fd0">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert+1, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="d15023b6-a6c3-4b3b-b800-2fca91b0a2a8">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="815bfa11-f27e-454f-a403-f8722fe34491">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="5ecfc409-cca5-456f-8a2f-0b724c1b79dc">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Copy of TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>E2E_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword&amp;audience=urn:dece:org:org:dece:RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_LockerDataGet_Download_user_20140529_084323</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/plain; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>20</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value>HTTP/1.1 201 Created
Date: Thu, 29 May 2014 12:43:28 GMT
Server: Apache
x-Transaction-Info: t=1401367408 U4crcAofmIgAADDx9YwAAAAd urn:dece:org:org:dece:RET 10.31.153.241
Cache-Control: no-cache, no-store
Location: https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_aa6e0b5c-86af-4886-8ae6-8ea528e03b61
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/plain; charset=UTF-8

</con:value>
        </con:property>
      <con:property><con:name>expectErrTypeSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generic STS GET" searchProperties="true" id="8d82c6b4-4924-4f3d-a167-f9b51c265710">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e59c314c-b9a5-4c76-85a8-09efe35d10fc">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="12705015-4924-43b7-ac3d-3e89ac2e6d60">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="8fb57b10-10d7-4812-9133-4a8375a5eefa">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="STS - GET" id="14d58adc-14a8-4e3a-913f-3523be46923c">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="0bf25ba5-b844-4639-a73e-15274a7089e0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="fb38b3e6-0900-43f6-8706-69957cd44d1c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="9743f9f7-4369-4c92-9e58-10e4a34feede">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="9245d782-9c52-437d-accc-28db52db6d4d">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="43bb4ddf-50ac-496a-9f74-8103474d909f">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="0b046d6d-b16f-4e0b-b969-d9a92578f4a9">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZbU+JKEH7fX5GKj1bIlYspoCoEXHFBXW4efbGGSQPjSSYxM0Hw1+9MMAiIHvZUWVLT6en++jJfd52hKLRcjzFIOYmp0m031CeEKmBMy1irVdBMc2q1ilZDIP4BKls1MOxpxVSVLmMZdCnjiPKGahmmoxllzboYmZbr2K5VK1mO8agqE0iZMC1USoaqrKKQMjd321CzlLoxYoS5FEXAXI7dodfvuULTRQUmtVnfoMwdps0F54mr67gUAIYwxCUcR3pd39OpB8wdkjlFPEvh3WfAGur73dfX19KrXYrTuW4ZhqEbF7rQCRiZn6nNH8VlCLp0Fm/OPqIxJRiF5A1JUH3gizhQvHAep4Qvoi9Mm7ppSNMarLCGTYeeqfqHgxzdiZb2QKYMaWyBzMLYAGaQAsWgjAfdhnp2WgU3d0cpomwWpxE7OP8dJKBLCOMEAo0VkRXoTrd4JF3NOmC3S3GYMbKEG9kmCcLAlLsUZmTVI0w0X8CUvPzKiok/UnQZ4L8pS13fxSqg60ey0yZzYPz/1Gy3XhsrExRm0HxMy3xmPF+3ba8/vnl8GOGHsbXkb8aCNXIIu8obUNtyv58Pm3XbW++XHpNR66f5i/Zr9nll5PdMbjk3Rt+5b7WQDrpZnfR++/OJ06HYCirnvfNgEiymNLmdzvDomq5N7+L6sVNtv7XG+EdCrHlrfHcV/bz0F8+/OzQB32Qrwuy3Aazt+7ur8dqLLsbZuV5dX/Pz+062Wsysqe9NXvjAuPKer69WSXV+Y/3q/Si3HqJl962SzpPMuZ/2r+3XxkdMuzHsCwtKGGbTZ8C8OMr26LaVS1EvxL+nFykhgTbLVd1EchTjQLnalLcktbiZICASuKKYm/OlV/OcilOpOrZZ9j2nYziGeWl4Rvniwm5XywUHbVAcQPRjOiPSl2TZTf98DxBHLgMaQKot4wwvgKnfWGwjjpQuHYjHEVMGo1iweNsW8KyaKYEaRsXyHd9vG7ZndCoV67LVVpWbmN/S29SbcUj3Gby8x+ADwCQhIGle9jkTjc64SMkLWmY8NEtLVKKQiUGQSi52LadW1hmJkhAkYD2KgyyEUrJI8gTpbPNraQizXDrojPL392V4h9+KTAidgEgFJmNpgagmHBlFZhHI1wHXdgMuzHtZQOQzE2nlKcEbJPufPrpFtsm2VURET/7wySxwb9VPvv75pv4NKP0wH1tHwZLsuC1mqhgTgkSaRTVfUOmllC2XWV6/qiTIVJjXTd2o6kPAmWC59Sj+F6i+NaGfNGS2qA88b+X7+DK+oEOOOESi25T8eMKGMQQmN4yueC2rU9eXPZcibxxW/JjMD8UiIhF/u6tgF0s9Ib4TP69xGnyU64itHT8iTrFWcELn8iTHyfqLpsCxMEsE/8XprvFjBo453xduk7zFwkU3TTMOX39RJLE1VIRxnFHelQQiBLtkm+Pk6wTcD6VPZnJCf5/QK/blhP6n3xsK2ouQutUl/62skbxdMKhyEcixNNSVWDiFczrfIfd3gEf43SkLfm/5nn/A79VtAvciaX4Sf5bs5PTwPTT/AA==</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FA8A46445431BCACE0401F0A05993D77</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FA8A464674315CA4E0401F0A05993D75</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1214</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>E2E_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Copy of TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_aa6e0b5c-86af-4886-8ae6-8ea528e03b61" IssueInstant="2014-05-29T12:43:28.240Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_aa6e0b5c-86af-4886-8ae6-8ea528e03b61">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>Zr5tf0jJD3AMUNZYTcYU2vtz0hs=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
ZpTBG1KnM83+6TCL1t24N0M4WBBa/e/17VLQCgV4Enc2d6+L+dVdhbnpObfcTJny1A9JZE7DzBUc
pi2gBUPHmGFChjQEnpeC1sxis3zRey3WPHUyAm9Uu+/7yJt+WEuxhf2bCAVqtR0HAjJHxp7gN2KL
5BYmvIz6rgpu4WbMJ3w=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_D3401281A4E00062C4CCD03A0E662FBD" NotOnOrAfter="2014-05-29T15:43:28.240Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-05-29T12:43:18.240Z" NotOnOrAfter="2014-05-29T18:43:28.240Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-05-29T12:43:28.240Z" SessionIndex="_aa6e0b5c-86af-4886-8ae6-8ea528e03b61"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API DHost" searchProperties="true" id="be2e9537-6580-4bf6-b169-7aa7a773135f">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6716fcb1-0bab-449f-887e-d32dc2890917">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1dc1bbc3-3ee9-48d6-9846-bbf943f04168">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

testCase.setPropertyValue("audienceList",testProject.getPropertyValue('audienceList'));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="5837526f-76b0-4f15-8d08-c93d03fff726">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="URL_Builder_with_AudienceList" id="b9bdc0a5-917e-4b33-8748-95c1606d61d1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+(testCase.getPropertyValue("audienceList").replaceAll(":","%3A"));
//def urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");
else
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");

log.info "urlParam=="+urlParam;
testCase.setPropertyValue("tokentype",urlParam);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="2f3372a6-1d35-4f75-b3b7-6f5ef8969b28"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" id="cfaadafb-1927-4563-8394-72a5a1127f24" accept="" sslKeystore="DEV_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:restRequest></con:config></con:testStep>
      <con:testStep type="restrequest" name="STS - POST1" disabled="true" id="daa831ed-2f74-4b58-a833-d9bea71b4dbb">
        <con:settings/>
        <con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST1" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="516b3eaa-4a4d-4e83-a7ed-2f8a697a9629">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert+1, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="fbb1f51f-135e-4fa4-8fb4-47d5eca9ff7c">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="b99e6b88-4fc1-4749-a9ae-56ea0b749a20">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="b2268f70-2c85-4599-bff1-b95510ec01b9">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS_Creation_Device_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_8a913067-a4b8-487b-bfd8-4ab5fe2bc22e</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword&amp;audience=urn:dece:org:org:dece:COO</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenCreate_User_20131028_075250</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/plain; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_8a913067-a4b8-487b-bfd8-4ab5fe2bc22e</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value>HTTP/1.1 201 Created
Date: Tue, 13 Aug 2013 13:12:47 GMT
Server: Apache
x-Transaction-Info: t=1376399567 UgowzwofmIgAAGVfJDwAAAAp urn:dece:org:org:dece:222259 10.31.153.241
Cache-Control: no-cache, no-store
Location: https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cc15420e-dbff-466f-9e67-6cfc22af731e
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/plain; charset=UTF-8

</con:value>
        </con:property>
      <con:property><con:name>expectErrTypeSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:COO</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DEV_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generic STS GET DHost" searchProperties="true" id="995b3d3d-97ff-4546-8243-61a380fb14dc">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="f8f4d635-3567-418a-926d-2985caf8d07e">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="eae02188-379e-45c2-b3e2-cea6d554128b">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="af678ead-a6e1-43c3-9a3b-015c3dc8d0c3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" disabled="true" id="f58da74b-c61a-46de-af3b-32deb6740601">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="df453b82-244d-4bcc-bee6-297ba5d9de99">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="DEV_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="ed1598a9-76f5-4749-be0f-a8b8d5fa485f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="baec289d-2d3f-42bc-a504-68313e63b24b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="ba8fdffa-b353-42a9-8f7a-63e489178eba">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="83ec0c45-95ba-472d-9541-42128699b498">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="a667c591-b424-48db-b7fb-06f423313788">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="c14e131e-05c7-41bc-b83f-c55724ab6e07">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZtU+o6EP5+fkWnfnRK+kKhdIQZLHhFqaiA4/HLnTQNEG3T0qSA/vqTFIuA4OXcT5DtZvfZlzy7FwzGkem2GcMZJwlVep2m+q8DG4al1+oarAaOVnXqgRZMQvEPBvYEmwEyTawqPcZy3KOMQ8qbqqkblmbomumMDMO1LddsVEyn+qIqTzhjwrRQqeiqsoojytzCbVPNM+omkBHmUhhj5nLkDtt+3xWaLiwxqa2LNcrCYdaacZ66AKBKiBGOIlRBSQwuwI7ORcjcIZlSyPMMf/oMWVP9vLtcLitLq5JkU2Dqug70BhA6ISPTM7X1q7yMwx6dJOuzB2lCCYIR+YASlI/5LAmVdjRNMsJn8RHTBjB0aVrDK6Qho0rPVPDloEB3oqUdkBmDGptBozT2iCc4wxRhZfzYa6pnp1VwfXeUQcomSRazvfPfQcJ0gaMkxaHGyshKdKdbPJCu1gVGbo+iKGdkge9km6QQYabcZ3hCVn3CRPOFTCnKr6xY2WEY/U1JLsA2TgEbHMhMh0wx4/+nXtu1Wlt5glGOW7dvKOv2bx2DzHw/PQ+AH729PuTDNGDNAsK28hrUptSf5/1G3fTV5yXfDjuLj0bt6d729XNgvlALgCvvAZ8PMhI4fH79Es7RkzV+qY6vw9+/7dulHTj3NB1OvWvn3B9Z8L7zYo9H7Sz+dQMmVjy9iZjHnhvTZ/v1n+nICYL4puqD6sPg9Y7ZtYjkzuzeezOerXePfPjnfve6tloli+jVYcPoUTcXYJRFya8+iWrpfNyGDR2M+mOyMsbNr5i2Y9gVlnQwzINXjHh5lK3R6yhXol6Q/0wtUkJCbVKouqnkJ8Yx5WpL3pK04uaCfEjoimKuz92G513WupdGR7+yazWjq1d140pv63ajUW032iX/rFHsQfQSOiHSl2TYdf/8DBDFLsM0xJm2SHI0w0z9wWIHcqj06KN4GAlleJQIBvdsTzedK0uv1gzTadgN+8rumFa93jZq3qXXUZW7hA/oIGtPOM522bu6w96PGJGUYEnxss+ZaHTGRUrmcJHzyKgsYIXiXAyBTPKwa1YdGzASpxGWgEGchHmEK+ksLRIE2PrX1CBihbTTfSre39Hw9r+VmRA6IZEKTMZyiUU18YExZJSBHA+4vh1wab6dh0Q+M5FWnhG0RrL76atbZJtsWsUbDErIG83TbopcfL8JfsAD9lOxcRQuyJbbcpSK6SD4o1UWcg4r80q+WORF6eqSGzNhHhhAr4MhRrkguPdR8oYp2JgAJ82WDeo9zxv5Lr6cz+iQQ45j0WhKcTxhsRhiJheLnngoq1O3lh2XIm8cr/ghmReJ/UMi/nFFQS6SekJ8L36WSRZ+leuArS0/Ik6xTXBCp/IkJ8n7kaZAiTBLBPUl2bbxQwYOOd8VbpK8wcJFNwU5x8e/KJLTmipEKMkp70nuEIJtni1w8vcUu19K38wUXP45nFfs6HB+9vtDwXgxVDe65L+VNVK0CxJrqdAvsDTVldgzhXM63eL1T4Dfqd3RPcuxOk63u0ft+iaBO5G0vom/S7Zyuv8eWn8A</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_8a913067-a4b8-487b-bfd8-4ab5fe2bc22e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCB680C383D8EEE0401F0A05994A90</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E9CCB6EB1D0F5661E0401F0A05994A9A</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_8a913067-a4b8-487b-bfd8-4ab5fe2bc22e</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2977</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS_Creation_Device_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:E9CCB680C383D8EEE0401F0A05994A90</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E9CCB6EB1D0F5661E0401F0A05994A9A</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_8a913067-a4b8-487b-bfd8-4ab5fe2bc22e" IssueInstant="2013-10-28T11:53:29.284Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_8a913067-a4b8-487b-bfd8-4ab5fe2bc22e">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>KkcrELK81ihMMp+b/MlkjQuSpbs=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
M5dDvz96VP5M0+/2Zn3//FCQe+Orib8tqHZdqcV3UZ4UHdYY5Kw5b8PnpSgCH8+MT3aPDZ5UTArm
J/f3mgJlsCsX9gX5jGgT8bbmJ4M/4QOjNs56liu8hPCk1X3yCizM+MEH6xxovlj8sSlR02v/Trlo
Lil6pqUAa90/TLUix1U=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:E9CCB6EB1D0F5661E0401F0A05994A9A</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C5C028F30461289595F5D2377A16CBCD" NotOnOrAfter="2013-10-28T14:53:29.284Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/DEV"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-10-28T11:53:19.284Z" NotOnOrAfter="2013-10-28T17:53:29.284Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:COO</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DEV</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_8a913067-a4b8-487b-bfd8-4ab5fe2bc22e</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-10-28T11:53:29.284Z" SessionIndex="_8a913067-a4b8-487b-bfd8-4ab5fe2bc22e"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:E9CCB680C383D8EEE0401F0A05994A90</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DEV_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="COMPLEMENT" username="schfau1" password="Password1" domain="DECE">https://qa.d.uvvu.com:7001</con:endpoint></con:endpointStrategy><con:requirements/>
  <con:properties>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <con:property><con:name>AccountDisplayName</con:name><con:value>Rights_Account_20140529_084644</con:value></con:property><con:property><con:name>AccountID</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value>FA8A46445432BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:TRIB:112667</con:value></con:property>
    
    
    
    
    
    
    
    
    
  <con:property><con:name>alid_bkp</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value></con:property><con:property><con:name>AppHost</con:name><con:value>https://qa.p.uvvu.com</con:value></con:property><con:property><con:name>AppHostq</con:name><con:value>https://qa.q.uvvu.com</con:value></con:property><con:property><con:name>AppPort</con:name><con:value>7001</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVZbU+JKEH7fX5GKj1bIlYspoCoEXHFBXW4efbGGSQPjSSYxM0Hw1+9MMAiIHvZUWVLT6en++jJfd52hKLRcjzFIOYmp0m031CeEKmBMy1irVdBMc2q1ilZDIP4BKls1MOxpxVSVLmMZdCnjiPKGahmmoxllzboYmZbr2K5VK1mO8agqE0iZMC1USoaqrKKQMjd321CzlLoxYoS5FEXAXI7dodfvuULTRQUmtVnfoMwdps0F54mr67gUAIYwxCUcR3pd39OpB8wdkjlFPEvh3WfAGur73dfX19KrXYrTuW4ZhqEbF7rQCRiZn6nNH8VlCLp0Fm/OPqIxJRiF5A1JUH3gizhQvHAep4Qvoi9Mm7ppSNMarLCGTYeeqfqHgxzdiZb2QKYMaWyBzMLYAGaQAsWgjAfdhnp2WgU3d0cpomwWpxE7OP8dJKBLCOMEAo0VkRXoTrd4JF3NOmC3S3GYMbKEG9kmCcLAlLsUZmTVI0w0X8CUvPzKiok/UnQZ4L8pS13fxSqg60ey0yZzYPz/1Gy3XhsrExRm0HxMy3xmPF+3ba8/vnl8GOGHsbXkb8aCNXIIu8obUNtyv58Pm3XbW++XHpNR66f5i/Zr9nll5PdMbjk3Rt+5b7WQDrpZnfR++/OJ06HYCirnvfNgEiymNLmdzvDomq5N7+L6sVNtv7XG+EdCrHlrfHcV/bz0F8+/OzQB32Qrwuy3Aazt+7ur8dqLLsbZuV5dX/Pz+062Wsysqe9NXvjAuPKer69WSXV+Y/3q/Si3HqJl962SzpPMuZ/2r+3XxkdMuzHsCwtKGGbTZ8C8OMr26LaVS1EvxL+nFykhgTbLVd1EchTjQLnalLcktbiZICASuKKYm/OlV/OcilOpOrZZ9j2nYziGeWl4Rvniwm5XywUHbVAcQPRjOiPSl2TZTf98DxBHLgMaQKot4wwvgKnfWGwjjpQuHYjHEVMGo1iweNsW8KyaKYEaRsXyHd9vG7ZndCoV67LVVpWbmN/S29SbcUj3Gby8x+ADwCQhIGle9jkTjc64SMkLWmY8NEtLVKKQiUGQSi52LadW1hmJkhAkYD2KgyyEUrJI8gTpbPNraQizXDrojPL392V4h9+KTAidgEgFJmNpgagmHBlFZhHI1wHXdgMuzHtZQOQzE2nlKcEbJPufPrpFtsm2VURET/7wySxwb9VPvv75pv4NKP0wH1tHwZLsuC1mqhgTgkSaRTVfUOmllC2XWV6/qiTIVJjXTd2o6kPAmWC59Sj+F6i+NaGfNGS2qA88b+X7+DK+oEOOOESi25T8eMKGMQQmN4yueC2rU9eXPZcibxxW/JjMD8UiIhF/u6tgF0s9Ib4TP69xGnyU64itHT8iTrFWcELn8iTHyfqLpsCxMEsE/8XprvFjBo453xduk7zFwkU3TTMOX39RJLE1VIRxnFHelQQiBLtkm+Pk6wTcD6VPZnJCf5/QK/blhP6n3xsK2ouQutUl/62skbxdMKhyEcixNNSVWDiFczrfIfd3gEf43SkLfm/5nn/A79VtAvciaX4Sf5bs5PTwPTT/AA==</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_aa6e0b5c-86af-4886-8ae6-8ea528e03b61</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_368c2277-42a9-4cee-aa5c-8a5f6d8cf889</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:\DECE\certs\ISC_R1Certs\</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AL_WEB_PORTAL_NUMBERS_934823.txt</con:value></con:property><con:property><con:name>cid_bkp</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>DEVDECESR5</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEVDECESR5</con:value></con:property><con:property><con:name>delayTime</con:name><con:value>15000</con:value></con:property><con:property><con:name>DeviceHost</con:name><con:value>https://qa.d.uvvu.com</con:value></con:property><con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>encodedMAC</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>encodedMUC</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>encodedNodeAccID</con:name><con:value>urn:dece:accountid:org:dece:FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>encodedTermsofUse</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>encodedUDUC</con:name><con:value>urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>encodedULC</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>encodeURN</con:name><con:value>NO</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:DEVDECESR5/DEVDECESR5@10.31.153.15:2115/decdev1.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>FA8A46445431BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>NodeID</con:name><con:value>222259</con:value></con:property><con:property><con:name>nodeIdACCESS</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdACCESS:CS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON:CS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCOO</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCOO:CS</con:name><con:value>coordcs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECE:CS</con:name><con:value>dececs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV:CS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP:CS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP:CS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP:CS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdPORTAL</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdPORTAL:CS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRET</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRET:CS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>FA8A464674315CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>222259</con:value></con:property><con:property><con:name>ParamRTCReq</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>ParamRTU_withStreamWebLoc</con:name><con:value><![CDATA[<ns4:RightsTokenFull ALID="${#TestCase#ALID}" 	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" 	ContentID="${#TestCase#ContentID}" xmlns:ns4="${#Project#SchemaNameSpace}" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc} 	</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:StreamWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#StreamWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#StreamWebLocPreference1}</ns4:Preference> 	</ns4:StreamWebLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:RightsLockerID>${#TestCase#RightsLockerID}</ns4:RightsLockerID> </ns4:RightsTokenFull>]]></con:value></con:property><con:property><con:name>PORTALCS_NODE_OID</con:name><con:value>DABD1A709AAD9052E0401F0A2222596E9F</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>******</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_ReExport</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>high</con:value></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_9.3</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\RightsLockerDataGet_By_Download</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>RightsLockerDataGet_By_Download</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>jitendra</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>FA8A46445439BCACE0401F0A05993D77</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+JKEH7fX5GKj1bIlYspoCoEXHFBXW4efbGGSQPjSSYxM0Hw1+9MMAiIHvZUWVLT6en++jJfd52hKLRcjzFIOYmp0m031CeEKmBMy1irVdBMc2q1ilZDIP4BKls1MOxpxVSVLmMZdCnjiPKGahmmoxllzboYmZbr2K5VK1mO8agqE0iZMC1USoaqrKKQMjd321CzlLoxYoS5FEXAXI7dodfvuULTRQUmtVnfoMwdps0F54mr67gUAIYwxCUcR3pd39OpB8wdkjlFPEvh3WfAGur73dfX19KrXYrTuW4ZhqEbF7rQCRiZn6nNH8VlCLp0Fm/OPqIxJRiF5A1JUH3gizhQvHAep4Qvoi9Mm7ppSNMarLCGTYeeqfqHgxzdiZb2QKYMaWyBzMLYAGaQAsWgjAfdhnp2WgU3d0cpomwWpxE7OP8dJKBLCOMEAo0VkRXoTrd4JF3NOmC3S3GYMbKEG9kmCcLAlLsUZmTVI0w0X8CUvPzKiok/UnQZ4L8pS13fxSqg60ey0yZzYPz/1Gy3XhsrExRm0HxMy3xmPF+3ba8/vnl8GOGHsbXkb8aCNXIIu8obUNtyv58Pm3XbW++XHpNR66f5i/Zr9nll5PdMbjk3Rt+5b7WQDrpZnfR++/OJ06HYCirnvfNgEiymNLmdzvDomq5N7+L6sVNtv7XG+EdCrHlrfHcV/bz0F8+/OzQB32Qrwuy3Aazt+7ur8dqLLsbZuV5dX/Pz+062Wsysqe9NXvjAuPKer69WSXV+Y/3q/Si3HqJl962SzpPMuZ/2r+3XxkdMuzHsCwtKGGbTZ8C8OMr26LaVS1EvxL+nFykhgTbLVd1EchTjQLnalLcktbiZICASuKKYm/OlV/OcilOpOrZZ9j2nYziGeWl4Rvniwm5XywUHbVAcQPRjOiPSl2TZTf98DxBHLgMaQKot4wwvgKnfWGwjjpQuHYjHEVMGo1iweNsW8KyaKYEaRsXyHd9vG7ZndCoV67LVVpWbmN/S29SbcUj3Gby8x+ADwCQhIGle9jkTjc64SMkLWmY8NEtLVKKQiUGQSi52LadW1hmJkhAkYD2KgyyEUrJI8gTpbPNraQizXDrojPL392V4h9+KTAidgEgFJmNpgagmHBlFZhHI1wHXdgMuzHtZQOQzE2nlKcEbJPufPrpFtsm2VURET/7wySxwb9VPvv75pv4NKP0wH1tHwZLsuC1mqhgTgkSaRTVfUOmllC2XWV6/qiTIVJjXTd2o6kPAmWC59Sj+F6i+NaGfNGS2qA88b+X7+DK+oEOOOESi25T8eMKGMQQmN4yueC2rU9eXPZcibxxW/JjMD8UiIhF/u6tgF0s9Ib4TP69xGnyU64itHT8iTrFWcELn8iTHyfqLpsCxMEsE/8XprvFjBo453xduk7zFwkU3TTMOX39RJLE1VIRxnFHelQQiBLtkm+Pk6wTcD6VPZnJCf5/QK/blhP6n3xsK2ouQutUl/62skbxdMKhyEcixNNSVWDiFczrfIfd3gEf43SkLfm/5nn/A79VtAvciaX4Sf5bs5PTwPTT/AA==</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>targetDECEDB</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>null:null</con:value></con:property><con:property><con:name>thirdPartyAudienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>TOUUrl_06</con:name><con:value>qa.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl_07</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>TOUVersion</con:name><con:value>https://qa.c.uvvu.com:7002/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>UserName</con:name><con:value>Rights_LockerDataGet_Download_user_20140529_084323</con:value></con:property><con:property><con:name>useroid</con:name><con:value>FA8A464674325CA4E0401F0A05993D75</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>07</con:value></con:property></con:properties>
  <con:wssContainer>
    
    
    
    
    
  <con:crypto><con:source>/opt/dece/soapUIProjects/View_Filter/222259_concat.pem</con:source><con:password>123</con:password><con:type>KEYSTORE</con:type></con:crypto><con:crypto><con:source>/opt/dece/certs/IOT_SoapUI_contentprovider.pem</con:source><con:password>123</con:password><con:type>KEYSTORE</con:type></con:crypto><con:crypto><con:source>/opt/dece/certs/IOT_SoapUI_retailer.pem</con:source><con:password>123</con:password><con:type>KEYSTORE</con:type></con:crypto></con:wssContainer>
  <con:databaseConnectionContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>