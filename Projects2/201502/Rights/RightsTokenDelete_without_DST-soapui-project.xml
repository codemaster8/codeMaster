<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="RightsTokenDelete_without_DST_R6_coord-192_R201502" resourceRoot="" soapui-version="4.6.1" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config">
  <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="RightsTokenDelete_RTL_TestCases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Rights_API\Execution_Reports\R3_Reports\Build_1_0_6_1_Patch2_5\RTDelete"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="RightsTokenDelete_RTL_TestCases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="D:\Execution_Report_R3_Builds\Build_R3_2\OnlyP1\RightsTokenDelete_R3"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop</con:setting></con:settings>
  <con:requirements/>
  <con:properties>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <con:property><con:name>AccountDisplayName</con:name><con:value>accname_20150422_072442</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>144F0E592D2F0AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>alid_bkp</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>AppHost</con:name><con:value>https://qa.p.uvvu.com</con:value></con:property><con:property><con:name>AppHostq</con:name><con:value>https://qa.q.uvvu.com</con:value></con:property><con:property><con:name>AppPort</con:name><con:value>7001</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_c198d75c-cba7-46b1-833b-60e87e7ac2ed</con:value></con:property><con:property><con:name>assertId_2</con:name><con:value>_439b3117-7366-4180-be36-bcb0e50e38f7</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>144F0E592D2E0AE1E05305991F0A7E43</con:value></con:property>
    
    
    
    
    
  <con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>assertionAccountIdFULL_2</con:name><con:value>urn:dece:accountid:org:dece:10246907C0450F53E05305991F0A79C3</con:value></con:property><con:property><con:name>assertionAccountId_2</con:name><con:value>10246907C0450F53E05305991F0A79C3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>144F3A4557B178C4E05305991F0A0AA6</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</con:value></con:property><con:property><con:name>assertionUserIdFULL_2</con:name><con:value>urn:dece:userid:org:dece:1024690FBEB51B7FE05307991F0AABB9</con:value></con:property><con:property><con:name>assertionUserId_2</con:name><con:value>1024690FBEB51B7FE05307991F0AABB9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_69d2ec4b-e824-48ce-937e-28c7e4972087</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert_2</con:name><con:value>nVbbcuI4EP0VyvM4ZXzDGFyBKgK4FiaEDGSY7LxsCbkBbWzZSDKXfP1KBjyYkCy7Ty61W92nu4+OdMdRHNl+h3NggiS0sosjyv3c2tIyRv0EccJ9imLgvsD+tDN68O2q6aPTFq0y6LW0v2pOc+5Ylqd7Tr2u16yGqc/BqetzPDfBNcFpLDzpynkGA8oFoqKl2abl6qat241ny/Rtzzedqlu3f2mVGTAuY0uXqqkdQe14S1sJkfqGsd1uq1unmrClYZumZbyMHqZ4BTHS2neHivJErH30x9UQMEQRruIkNu6Mks9dyP0pWVIkMgbHXOFHuUzDbBrSJ+Rk+UUr9kI4oIskX3YRTSjBKCJvSPVnBGKVhJVOtEwYEav4wyIsUwXWYYd1bNXoF80oQ7sxUAkh40jnK2QdY01gAQwohsqPyaClfbltavnWZ4YoXyQs5uXlf8MDdANRkkKo81NZR2i3B7zSqfYdYH9AcZRxsoFHRdYUYeDHaQK+PVTlicGC7B4IlwTdcYXOOId3sTx0o0eWwMX/GdDZcA5BZijKoP3te7CKxT6izacasWpokfa7X1nycz8atXIA5865oRjtYXlByoJEhx2jAc/wfAJ/DsXzfPkyMYd48hI1Y8f9sQ7cLOvxwGvWxgu0nS63WKTz2Agt4dCvm8H6x/ixGaytXn84DEXiDZO+U0+70c9eYzaboWEn8OZPm+Wvt/741/c9f9ri9cveQ+iVfeu449EYD6LhZEQfU26jsFEfB29/BM891q3R4JuXzfAb470e77zOrHWfrfn3VlHOGf6y7XTmp9n8b8DitFQ0GPQqgZwSEp+LmbKQUF/krn6qxIcLoEJrq11KO/xMyh0JfTnDw9oy7Vq9aQb3/XvXuveCvuk6ptdsWoHZ6dzfN08ic0BxAbGb0AVRuZTkHmjzOUAc+xxoCEzfJJlUOq59ErGHBKoM6EQegoRyeE6kPFtrO4vf6KtFa7vN+tWWf9Kw6SYNrfKYiDEds85CACtrslPS5AlgkhJQwq14zSWxuZC9WKNNJiKrukFVCpmUdqZU1rdrDdfgJE4jUEiNOAmzCKrpKs07Y/DD19YR5rkVJwkLfXw4ch8Wd/nv1AfpExLlwFVB9yBnCe9umLrvnqp5V3X96k10Ct/JQqJOl2yqYAQfkJR//eaKIklBlFNZJ9yF+6WhFNq4rKrIFm4ILihfXNxSz6UCtE+DWaPqupptNlk+Ck8pHZPhDdUPw7SNKeBMatT+OXkFahRRjJsuhAL4RfLCXoaYiRWdCiQgltyp5MsbXgBT4OoFMJCk3936vCillK0TsBPXbN1Ivl4U4k8fONjHyk+an+RnK6f4e2JXYp3lkXXKB4AgdKlW6jLYf0YOImUsYefBrwW4lrxsLJpcYBGSUPNMwMd/KkqfWhrCOMmoGPS03HCumTlOsU/B/+30Lkwuy8U7jfz7Q00nOQUwyNcdJ3l8dd366gjQ5ZnuHpNekV6va9ZcM3CdXHrdg/R6za5TNKWErv3O/N5y1qdLjrf/AQ==</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>cid_bkp</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinator_Schema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>144F0E592E130AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>DeviceHost</con:name><con:value>https://qa.p.uvvu.com</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa1.d.uvvu.com</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</con:value></con:property><con:property><con:name>encodedMAC</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>encodedMUC</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>encodedNodeAccID</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>encodedTermsofUse</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>encodedUDUC</con:name><con:value>urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>encodedULC</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>encodeURN</con:name><con:value>NO</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>ETag</con:name><con:value>*</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>144F0E592D2E0AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>NodeID</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdACCESS</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdACCESS:CS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCON:CS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCOO</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCOO:CS</con:name><con:value>coordcs</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECE:CS</con:name><con:value>dececs</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEV:CS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASP:CS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSP:CS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASP:CS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdPORTAL</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdPORTAL:CS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRET</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRET2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRET:CS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>144F3A4557B178C4E05305991F0A0AA6</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>222259</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>ParamRTCReq</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}">         <ns4:SoldAs>                     <ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName>                      <ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID>         </ns4:SoldAs>   <ns4:RightsProfiles>                       <ns4:PurchaseProfile  MediaProfile="${#TestCase#PPContentProfile2}">                                         <ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload>                                         <ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream>                           </ns4:PurchaseProfile>                                                                </ns4:RightsProfiles>      <ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc>         <ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}"  xsi:type="ns4:ResourceLocation-type">                               <ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location>                            <ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentWebLoc  MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type">                          <ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location>                            <ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentManifestLoc  MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type">                           <ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location>                 <ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile2}" xsi:type="ns4:ResourceLocation-type">                                <ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location>                 <ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:PurchaseInfo>                       <ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID>                   <ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction>                       <ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount>                       <ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser>                             <ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime>            <ns4:TransactionType>urn:dece:type:transaction:category1</ns4:TransactionType></ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>PORTALCS_NODE_OID</con:name><con:value>DABD1A709AAD9052E0401F0A2222596E9F</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>j1tendra12121</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ReExport</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>high</con:value></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_9.3</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\RightsTokenDelete</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>RightsTokenDelete</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>jitendra</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>144F0E592D360AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>278</con:value></con:property><con:property><con:name>RightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>../../GlobalScripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>../../GlobalScripts</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetDECEDB</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>thirdPartyAudienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl_06</con:name><con:value>qa.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl_07</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>TOUVersion</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>RLDGbyList_firstuser20150422_1429701882971</con:value></con:property><con:property><con:name>useroid</con:name><con:value>144F3A4557B278C4E05305991F0A0AA6</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionUrlEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property></con:properties>
  <con:wssContainer>
    
    
    
    
  <con:crypto><con:source>C:/certs/RET_2_concat.pem</con:source><con:password>123</con:password><con:type>KEYSTORE</con:type></con:crypto></con:wssContainer>
  <con:databaseConnectionContainer/>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDelete" type="rest" id="eee8454c-8c23-4889-b7d0-69c6f32915dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="RightTokenDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="aa78937e-0efa-43e6-88a0-5e54309e42bb">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>AccountID</con:name>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>RightsTokenID</con:name>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="RightsTokenDelete" method="DELETE" id="5b57dd6d-d1e0-4f2a-916a-63486920424b">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 401 403 404 500</con:status>
          <con:params/>
          <con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="RightsTokenDeleteRequest222259_V7.8" mediaType="application/xml" sslKeystore="222259_concat.pem" accept="application/xml" id="d7c69914-77db-435e-a363-db43b1115526">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdLd6rKEp77K1zuocvwMMToSnJWAy1BBQXB1wyhBRRBaRDk159Go1uzs1/33sEdZMUu6vFV1dfd1S//5NugekAx9qPwtcY80LUqCu3I8UP3tWYa3cZz7Z+3ygu2tgHbARijOCGaVVl8ra2WS8dp0UwD216DoVvtdrtWlTFOkRzixAqT1xpLM3SDYRs0a7B0p9nuMM2Hdqu9qFUnl5BsGZKACHHnFOS1lsZhJ7KwjzuhtUW4k9idMVAGHaLZsS4Iam8fmE4BY+rtxcGdse+GVpLG6MOhg19rXpLsOhSVZdlD1nyIYpdiaZqm6DZFdBzsu99qJL8PY+TI4So6rwUrjELftgK/sMqICkq8yKmCwI1iP/G2P3HNUAxdum6g3G7YzGP4rUZ9D3BC94ee7kDG2Gpgz2IuznS0QjHpFKqauvxa+/ZVM86aRmyFeBXFW/xp/XcAUHhAQbRDTgNf8rhg+XOPXxTn7QXZHTm0gxT7B6SWHd9ZNsLVUYxWfj7wMeGRg6unbldzfCELsv+mAS/ULU4Cm/qiMqLvIpz8J9257czZy8QKUvTmbhwjzY4t6WgihysYiz22otx7sujH1xOEW+UzqGtjP9afaXll0YeRwpmwvxiu45ZrQ1iooYj4oj+YND2TXgXGALaG2/27UzzRy8B+NnfjXF62ZpJbVxA3nR705CnJemCzVx+H/cq0CMwwt5sUdxxveefQlkQXPg+Y9+HOelrFZnvATOdRbLoF5mztwFFLIz7uR6akz/hZqzcZsgN1YVpOP+bzysRi+qPBfreq+xCPE5BPldfvOd3mUObVR8dTkuXvGUe3RSuxrguh3PQrshkT9KbIspgWggCOYxdkMg9c8rcGKu9u9t7Gl9oZzQNN6wJR4IM1HChgIwHGhLynCJOJkgsF6PGuOiGGRgUEC17RYSZmc3Giae8w8wxHmhyXUpAuCqgqAJ+MBU+BOpyIugEVBURnWa6ISylfK2Mlk7W5WCEORJjvCkdqJ0jKfZuVOWXMsfMxly5mEyLvHgdb9bA0YKAIiiSM99JYXjZFDfaAPp/abDcltsVgu4sqc5O/Mert0BqgbkaTmKBQjE2mGCarirp1khn3MkWWeoqGM0E7ZSVVYNabmMX3Wgi8IjhbmEMDjM61sA2hq9KLWQ9bUy5UdJCJ7sm4DzNneAGiaHRWEc61GsBMh7qpdhVdziA4yUSYBXjJqt5S8g52U8t7BljfNkbQ4LQbku+hfrCP3L5iSV2w3E4Yu6l7ts/51izK3MVzJmrzXj9ayMSNCjTI8xoggGhQpkbqz4MBP+GGO7/N+miw6kZb5MUVhYn6m0OR089+c+iO1CknrjatkeSPmpbjUXJgs+vmBsgycvqMp1mOPqd0MfSLp2HfnCE/nheJymnMk//MVfRpas7EKGg577O52a/nc1szhqOxOR0Vea7u189FkLwP+fd43FNEd6giNMJ2naKtLm88i5wwf18TPq10GnEV4Co8ANLadaFPCMy/r88kfNcVSMgLFCGThKkgjYEk1aHMi5q26nrMyJYmqcmoigydgJTpOJ/pQWUh8CLpFG1NF7s526UXBnBOzrRH2HU1k6v3ZmihqYExSUC2m6xChqGlnfa+UjLXVkoGOHI25sku4iupDExruOvReX/yRDN7zQl64zYwm/mY3eRDz10cN+5iQ5oyv9k6cwMEE+OGYzKh2LSiGVBXwPN5v+WKbDb1wN7mu+XWzkWD9OxkHBk81LsabeaiCPpnGTYAm+N5AdeKAE/2FZArFqHFYTnz8DxU/aEBU0La9IYu6yVL/5ZjJcUq9xzbC0ADnzkGzxyDYLWvy88ig7knYYenmctLcK+1JoNee0drs8Gmwte7lJv4weMwfM6Mfn3KHLOWt9am07YsekI9XM295jLhaauwNdTbtCRf34jh02NwVAaKxpk+FRzpNdpneFBRZSaEzaToUu04rfPbhb8tiuYja25H4/Qgm1YfM0dvuZ+2s/Xo/YmiYunIFa3FQevOInt+vkc+H5JX4fkYpW4P2LsT+DJGjdPlGtnJZVnew7JY7ZLL0Up+PpIxD8xJ4juN1Um1k4Z4h2wCAzm1t9LMQTbqpGRq850OuTrP6/OA8kLdBvuERIjClV+6LMfN853869HQ3naWyIpRXPuFp7IcVTnUyZARhRgZ0WsNk7MjDf19SrLwyNVbq6pRMgyHMVglKD7NsMzXM6xOEt35qBx0b0YElFvbXYAe7GhLWbYdpWGCyQ98mkJ+Cuzzt0sORMfxSwVcwuIRKTP6PFezbKd5wfSH2C/uQer45bBBCpLEvn1Gcv/p7Sa3snkPYeSgh7KBF8hXzc+CO6/U54SugZyDb1+JeH1jyCIZhd4AL4jw6vf+22cLMgmX4hIvJoDPYFFK3iLxw9IvqOvjAf9D3i/W0nbQD54/fFzl99jSxAvHCdlgW9L16mn5+7fOnTVJP0F58pVMCAjAMvgvH0B2xy71iHhE/mVR7Hyv+he+vvp4L7zmc8WUkKYt0wT9/Eu13LKvtQ96+07tJLicFjeEuS2/CAVIgbOJLNZ+cHoaBj+m+xz/dLqfKYOx7aGtVbvq+r9XbvinPtlkexP9TnLcEfw5eXOS4KF7c1Rdc7o9re7Yfof37Qfxj5L/osLx5TXwNzXWYff/rr6gK/ICwzbJxdZ8/J+U8vPOffsX" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
          </con:settings>
          <con:encoding/>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:username/>
            <con:password xsi:nil="true"/>
            <con:domain xsi:nil="true"/>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="AccountID" value="urn:dece:accountid:org:dece:107006"/>
            <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:9C695CD9A3E2D638E0401F0A05995C96"/>
          </con:parameters>
        </con:request>
      </con:method>
    <con:method name="HeadMethod" method="HEAD" id="715c7b05-8e73-4ab3-a0b0-a4881a7e3883"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="95630093-3615-45f7-b37a-83c967879c6a"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT" id="7d7f27a6-c5d3-4243-a6b8-f46ed2b20a3b"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="3b0e5d47-993b-4f98-8504-8750f44e2cc9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GetMethod" method="GET" id="f8cdc9bd-29a7-439f-9571-53b62a8dcab9"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="${#Project#SchemaNameSpace}">coor:RightsToken</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="7dc0bf27-582a-449a-9f8b-5a1fdfbf0531"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PostMethod" method="POST" id="953be4e4-da84-4ddf-9649-e6f3b88fbf47"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="e0bcedc9-78b9-44dd-99f0-1c1afa975d8f"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" id="93070453-a7ff-40ea-a022-67998c2f95c2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint></con:endpoints>
    <con:resource name="STS" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" id="b653eb40-a051-475e-aa96-f7e81c5a8d0f">
      <con:settings/>
      <con:parameters>
        
      </con:parameters>
      <con:method name="STS - POST" method="POST" id="5e6e4cde-fe4e-4ffd-9942-e8615e952f11">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
          <con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:Credentials</con:element>
        </con:representation>
        <con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="07476f0e-e00b-42c0-9c70-7fb7747e90c8">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="STS Get" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" id="fe738f2b-a694-4fbf-81b2-7c71da7a83b6">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ASSERTION</con:name>
          <con:value>${#TestCase#assertionUUID}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:default>${#TestCase#assertionUUID}</con:default>
        </con:parameter>
      </con:parameters>
      <con:method name="STS - GET" method="GET" id="bd517251-0e5a-4e58-a27b-03cc9d101a69">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="5e93ce06-424f-4c0e-87ae-0e1782a6e881">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenCreate" type="rest" basePath="" definitionUrl="" id="33211648-c6a5-4572-81c7-65dbd8957570" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="RightsTokenCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" id="9134a1f7-2eda-478b-a582-44de964ab9b4">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>AccountID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="RightsTokenCreate Request" method="POST" id="f6491500-87ca-480c-a5a4-9a4b4836debc">
        <con:settings/>
        <con:parameters>
          <con:parameter disableUrlEncoding="true">
            <con:name>AccountID</con:name>
            <con:value/>
            <con:style>TEMPLATE</con:style>
            <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
            <con:default/>
          </con:parameter>
        </con:parameters>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>201</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 401 403 404</con:status>
          <con:params/>
          <con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>text/html</con:mediaType>
          <con:status>413 500</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>text/plain</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="ca26b43b-e4b8-4512-a7b4-f0e77a9ad5e4">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request><![CDATA[<ns4:RightsTokenData ALID="${#TestCase#ALID}" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="${#TestCase#ContentID}" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>
      <ns4:PurchaseProfile ContentProfile="${#TestCase#PPContentProfile1}">
         <ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload>
         <ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream>
      </ns4:PurchaseProfile>
      <ns4:PurchaseProfile ContentProfile="${#TestCase#PPContentProfile2}">
         <ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload>
         <ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream>
      </ns4:PurchaseProfile>
      <ns4:PurchaseProfile ContentProfile="${#TestCase#PPContentProfile3}">
         <ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload>
         <ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream>
      </ns4:PurchaseProfile>
   </ns4:RightsProfiles>
   <ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc>
      <ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location>
      <ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentWebLoc>
      <ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location>
      <ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc>
      <ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location>
      <ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:FulfillmentManifestLoc>
      <ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location>
      <ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
   <ns4:ViewControl>
      <ns4:AllowedUser>${#TestCase#VCAllowedUser}</ns4:AllowedUser>
   </ns4:ViewControl>
</ns4:RightsTokenData>]]></con:request>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE Policy PolicyGet API" type="rest" basePath="" definitionUrl="" id="43f58da5-2de2-4cfe-81be-4713e8c757ac" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
      <con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="2e96b911-010e-4b54-be2e-48e5d90d8572">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="GET" method="GET" id="33c0d180-7f13-42e1-b1db-effcdc1f025b">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyGet I" mediaType="application/xml" id="d615b032-e1a6-47d2-ab94-b6eac2e3e8ff">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyGet for Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="a024e41d-cec4-45a4-8278-bfe7c9946227">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="GET" method="GET" id="bc58ae04-e2b4-467e-9291-25d1b1cdf230">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyGet for Account" mediaType="application/xml" id="c36fa50d-d249-4249-9d53-845a6c42477e">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE Policy PolicyCreate" type="rest" basePath="" definitionUrl="" id="037aa6d9-787a-4361-85b1-791b5f794be9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="2a687984-9ab9-446c-a528-23887c8b3580">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="POST" method="POST" id="8408522f-6fdc-4dad-81c0-f5e039c9a489">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 403</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0 201</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PolicyCreate I" mediaType="application/xml" postQueryString="false" id="0ca5dba0-23d6-4f1c-b5bb-d31dde201540">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyCreate Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="6874c166-d96b-41ca-9f24-552b85020a59">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="POST" method="POST" id="892447e7-ea29-4b21-8486-c35e5283d80f">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 403</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>0 201</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="PolicyCreate for Account" mediaType="application/xml" postQueryString="false" id="ac7bb3d2-6d73-4669-bb0b-1cb49a089212">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE Policy PolicyDelete" type="rest" basePath="" definitionUrl="" id="2dccf192-044a-4aaf-b778-e2878da3ce35" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache/><con:endpoints>
      <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
    </con:endpoints>
    <con:resource name="PolicyDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="ae8af262-6a3c-4206-9a32-2b61403f64cb">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>USER</con:name>
          <con:value>${#TestCase#assertionUserIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUserIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="DELETE" method="DELETE" id="4411eb8d-9462-4ce5-ad8b-33752c5a7be3">
        <con:settings/>
        <con:parameters/>
        <con:request name="PolicyDelete I" mediaType="application/xml" id="bb20e4f4-7cfc-418f-8ce3-0d86493991e7">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="PolicyDelete Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="61398d4d-f76e-44f7-ae86-cb57677cfdf6">
      <con:settings/>
      <con:parameters>
        <con:parameter disableUrlEncoding="true">
          <con:name>ACCT</con:name>
          <con:value>${#TestCase#assertionAccountIdFULL}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionAccountIdFULL}</con:default>
        </con:parameter>
        <con:parameter disableUrlEncoding="true">
          <con:name>POLICYCLASS</con:name>
          <con:value>${#TestCase#policyClass}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#policyClass}</con:default>
        </con:parameter>
        
        
      </con:parameters>
      <con:method name="DELETE" method="DELETE" id="73031d70-c435-4496-a113-5a47c47295cd">
        <con:settings/>
        <con:parameters/>
        <con:request name="PolicyDelete Account" mediaType="application/xml" id="022a4167-7f58-45ad-8c22-2399d5172072">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountCreate" type="rest" basePath="" id="71f0feef-8c70-4b16-a003-befdd1246996" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="AccounCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="b6da419b-814f-4863-9873-aae76ded8a96"><con:settings/><con:parameters/><con:method name="Method 1" method="POST" id="f2da35b3-639e-4bcf-80e1-111fd8207651"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="91254f33-d055-49c9-88dc-4ac962296c1e"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" basePath="" id="7ed794fe-43d5-4ad9-911f-1acccc54c47e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="da738868-96b8-41d8-864a-229e4a15698a"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="a2d5ebe0-260f-4923-bcf7-b81d27e292eb"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:User</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="ac23a8f1-0012-4600-aefe-e95e07ca1e1c"><con:settings/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenGet" type="rest" basePath="" definitionUrl="" id="a77d0641-27a5-47f4-97e2-9e8c7e69a1fe" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint></con:endpoints><con:resource name="RightsTokenGet[ByTokenId]" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="2251ebdf-b6dd-4b92-b990-a1c4da54c499"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="RightsTokenGet[byTokenID]" method="GET" id="1569d2b5-d90e-4086-a667-0765e698c5c0"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:RightsTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>403 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" id="2e965e63-1760-44e5-9ebf-5ba9ba6f481c" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PostMethod" method="POST" id="f8d60a02-77a3-4950-a052-1cf0fd4abb85"><con:settings/><con:parameters/><con:request name="Request 1" id="58212079-3767-4bf3-9c33-1ad93ff69623" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT" id="dcdc135a-d74b-434e-ae6b-de15fb75bce9"><con:settings/><con:parameters/><con:request name="Request 1" id="b417f462-0475-4fc3-ac3b-e3fa63a01f52" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DeleteMethod" method="DELETE" id="809877eb-bef5-44aa-99ac-7d46fac49821"><con:settings/><con:parameters/><con:request name="Request 1" id="129e356b-3763-4c9d-b90b-18a9a21e392f" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD" id="1ba3df67-e6ca-4ae6-ba46-9c5921553423"><con:settings/><con:parameters/><con:request name="Request 1" id="5382dbcb-d3c9-463a-8ff8-1306976df2f5" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface>
  
  
  
  
  
  
  
  
  
  <con:testSuite name="setup_project_level_properties" id="f2031ab4-440d-492d-90da-54afec4b9445"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="load_properties_file" searchProperties="true" id="5f47c811-e153-40d6-bf7a-60d100c9a448"><con:settings/><con:testStep type="groovy" name="read_properties" id="12fd8b25-4fde-4115-b286-3ae82e5ae862"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info("Set Environment properties!!!");
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
log.info("Project Path : '" + projectPath + "'");

def eNV = context.expand( '${#Project#ENV}' )
log.info("Environment: '" + eNV+ "'");

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def versionMinor = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+versionMinor);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");


def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}


log.info "updated_project_properties from properties file";

tP.setPropertyValue("APID",tP.getPropertyValue("Rights_APID"));
tP.setPropertyValue("ALID",tP.getPropertyValue("Rights_ALID"));
tP.setPropertyValue("CID",tP.getPropertyValue("Rights_CID"));</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="RightsTokenDelete_without_DST" id="37270419-8f91-4e01-a95f-e90e1748d7fa">
    <con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\rshriva\Desktop\Rightstoken delete without DST Report</con:setting></con:settings>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties/>
    <con:reportParameters/>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Retailer without DST" searchProperties="true" id="3d785c36-0382-401b-b148-5b294bd196d6">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="00214411-39ab-4aa4-83db-186cdb2380bf"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="801de69c-4726-4c81-90bd-7d57522f5e5c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="514b9997-b211-4c9d-aad6-41b41880170d"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="5268a169-d5c7-4dda-85d8-ca7baf5c51b6">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="d687d4c2-1548-4f45-b6a6-fb2cfd5b6dd0">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="d707125b-16eb-48d5-a259-3a9cb044a23f">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Removing User Link Consent" id="480dea00-a417-4e6f-aba6-3c7149b5ccac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="1f2a73d7-310c-4450-a985-b2596cf46912">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="4eebaa2a-b656-4263-a269-17aa8b2a5559">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="b8254de6-7b4a-496a-9ae6-b2a7efb0df71">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify with Database" id="02504415-b23d-48fd-89f0-31c1b3924b45">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights DELETE  Data Validation")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429701150390</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144F0E5921700AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144F0E59217C0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_dbf4a406-2f4e-497f-93fc-d4e788c08e10</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144F0E59217B0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144F0E59217B0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E59216F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144F0E59216F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144F0E5922730AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>144F0E5922730AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E59216F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>194</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVbbcuI4EP0VyvM4ZXzBhOAKVBFuoQYCwQzJ7suUIrVBiS0bSzZkvn4lEzxASJZJnlxq9+V066i7rzgKA9ttcQ6JoBErbcKAcTeXNrQ0YW6EOOUuQyFwV2DXa42Grl02XbQz0UqDTkP7RR59BznmhW77DuhOvebr9YqPdeJA7fISm5dgmVKV8xQGjAvEREOzTauqm45u2zPLci3brVjlulX/VyvNIeHSt1QpS6stqA1vaEshYtcw1ut1eV0pR8nCsE3TMh5GQw8vIURa82qbUR4oab7q4zIBDEGAyzgKjSvjQOeKcNejC4ZEmsBrLPJeLNMw64bUIZwuvmmFLZAB86P82EYsYhSjgP5Gqj4jEMuIlFrBIkqoWIbvJmGZyrEOG6xjy2HfNOMQ2pmODhAmHOl8iaxXX1PwIQGGofRzOmho3867tdx0liDG/SgJ+eHx7/AAyyCIYiA636X1Cu18hycq1bwC7A4YDlJOM7hVZI0RBv56m4DPd1WaJODTzZBySdANV+iMfXhHx201OnQBXHzmgvYuZ+tkjoIUmv7YJM73zOkvf9/P55W41ussp6yV1QKnkQPYV84FxdVuj0ekLEi0tfhB+t9n4d1dEvaHTw4Zmo8r/+Z+mozJ02iyGA5gc33ridnPzo95JUx+9u8fOPH6I3Z3WVmBRx1yt/En2fV9ZUEu4tXL+P6fyTod4flq1Xloj7s9NGg9z+LBU10Y3efxYokzc/E9pTeXT5P+7cU4WsYPF/UNS27aCW7Ft/Nlf0R75LpG/BFLn1+6zzcX81nVrkbZulGks4f/ULZ78176+ARY7I6KBoNOqSdvCYmPm5mSUKL7uaobq+bDBTChNZWV6h1uKtsdJa68w+3Zcpye2a3Wbat2bba6VtesVsxqvW71zFat61R2TWaL4ghiO2I+VbFUy93S5mOAOHQ5MAKJnkWp7HRc+8BjBwlUGrCpfAQR4zCLZHt+JI+MPS1rLEvrz8gntsVNUl+stdJtJMZsnLR8AclhS3YOWvIUMI0pqL6taM0lr7mQpVihLBWBVc5QmUEqO3uimqxrO5dVg9MwDkABNcKIpAGU42WcF8bg26+tI8xz6bQ7yx/bu2kd/9tVQOoQqhS4yuUa5C3Cidli7xJ5P+HafsI7962UUPWuZDlFQvEWyeGvPyxR9Cgo0mq3u17b28EutP/C+rPGnWHLm3zF9lfb+2V91sHnQ38t8PALWQ+/mrXk7xfN31oaH1DQOGZ/EYhkdC/sbk+TE1/OiObu7a6QVV6V0yxL8+fqOBUjke4N9R4M0zY8wKmcYi+z6BmYUXgxzloZCuBHwQv5IcRULJknkIBQtpdSfjxjR/SAqx1xINvi5twF9CCkLJ2AjTglawdyv1WIP1yBsYuVnhRP5GcdJeTPjZ3wtRdH5ilXREHZQp3UuvDyDi9wJN1SOeiiZN/5KQengh8KiyIXWIQk1GMq4P0/JTXBGhrCOEqZGHS0XLA/VXOc4iUG94/SGzf54C42efr/q7xOcwpgkPs/p7l/tZC56gmwxd5kfg16ejhf9D4azofomm/EbyV7dTrmePM/</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480dea00-a417-4e6f-aba6-3c7149b5ccac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Retailer without DST and with ULC" searchProperties="true" id="79ad2945-a4b0-48ea-a95f-043d5a7b214c">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="d231946d-3998-4900-84a6-35d335a52350"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="0c7654d9-6914-46a9-9753-1af3087aab41"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="012d45a8-60e0-4b27-a95c-216b551d8295"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="87e24626-34c7-4bd1-b3e4-b4aff2912655">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="79c38c92-1784-49bd-9fd4-e495a16fb5a3">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="b5f4527e-1801-49c2-a462-1b1c0af316a9">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="4f4ad40e-bc3a-4953-891f-1145f3e8662f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="221e3c2c-3294-4ec8-ad7e-0626f32563b9">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="ff8d81c3-80c5-4ec4-a8c1-adcd1af86fce">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify with Database" id="644d01f8-1f72-4985-9492-8acb2add1f21">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights DELETE  Data Validation")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429701158802</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144F0E5922810AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144F0E59228D0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_e8275d87-2abe-4480-ab1f-cfd2cc1b5541</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144F0E59228C0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144F0E59228C0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E5922800AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144F0E5922800AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144F0E59235F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>144F0E59235F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E5922800AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>184</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZdU+o8EP4rTL1kSj9oX7AjzHAAlRFFWzxHvXFCmtJom5QmhcqvP0mBCii+HL3qZLv77LObze6eMRBHptNhDKUcU1LJ44gwp5C2lCwlDgUMM4eAGDGHQ8frXA8ds6Y7YGOiVAa9lvKMmmbD9psN1QQTpFpWU1fBxAhUGPgmhMbEti1DqDKWoQFhHBDeUkzdsFXdUk1zbBiOYTqWXqvrp09K5TdKmcAWKjVdWZPKWUsJOU8cTVssFrVFvUbTqWbquqE9XA89GKIYKO2zVUSFo7S91oc1H0EURbAGaaydaTs6Zz5zPDwlgGcpWvvyD/nSNf1UEzo+w9MTpbRF/oAEtDh2AaEEQxDhJZD5uUY8pH6lE01pinkYHwzC0CWwinKoQsMiJ4q2S+1IoB2GKQMqC4GxxnJRgFJEIKrcu4OWcnLcrRWm4xQQFtA0ZrvHf+ODyBxFNEG+yjZhrakdD/hJptpnCDoDAqOM4Tm6kcWaAIjY+jYRPB6qcpuiAOdDzESB5kyy07bp7R1X2ejhKWL8Oxe0dTkrkN8gylD7P5eZnao5mAQXNl/cGs2Jm+ejqxg8TlsFgW3lQlBe7eq4V5RlEa0sQvP6ttubL5dj92LM3GrzoX/3OJo9PfhW5M46j8Fl1bx7CEfj2b17mYSxdm7DnCde9Uq/t6E5ernrNF/Ny6r7pM2CxAjCK2y9Rde21/tj/MpTo1mdpNgfjW1TpP9ifpHBOtKT/p/JXWNMe49NW89G8yVxje7yxffpVa8x9QdJFdKrh3pj+ZhPGmN489I9jSltleFs8d+Vbd68l01eEOSboyyDQa9yLm4J8K+bmZRgXw0KVSeRzYdxRLjSllaydziZaHfYd8Qdrs6GZZ3rffvUNJtdvdM3+rpd1+3TU+Nc7zT6Vn3TZFYs9ih2KQmw9CVb7qpsviYIY4ch4qNUndNMdDqmfIHYAxxUBsQVj4AShsZUtOdFzF7zycye6n44XYRo6c/f7KmJlcoN5SMySjsBR+luS7Z2WrKLIE4wkn1bljUTdc24SMUMzDMeGbU5qBGUic6eyibrmFbT1hiOkwhJolpM/SxCtSRMisRobPU1VQBZIXX74+KxHQxr/98mA0LHx1KByVh+IXGL6JPZUt8EcjjgxnbAG/hO5mP5rkQ6eYrhisnur/cqkeVRlkin2+17XW9Du9T+B+vvGveGHe/2J7bPXe/Z+C7A913/zPHwB1EPfxq1qN8fmn+01L4oQW2/+ktH/hxvud3saWLiixnR3rzdGTBqs1o2n2fFc7WsupYKeE2+B003NQ/BTEyxtzF9RUQrUbSjVoaS+J7zUr5LMeMh8TjgKBbtpVIcj9gRPcTkjjgQbTE/dgHdcSlSx1HOP5N1I7HfSsZfrsDQgVJPiG/FZ0FT//3GPsHa8iPiFCsix2QqT3JdeDtQF5AKWCwGHU23wT8D+Mz5rrBMcsmFi4KaZBwd/lORE6ylAAhpRvigpxSC7ala8ORvCXLelT7AFIO73OTx/6/yKi5KACKx/zNc4MuFzJFPgEy3JvPa6YHhrH81nHfZtT+IP0q28rRf4+2/</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Retailer_CS without DST" searchProperties="true" id="369b8189-d973-4c41-aa2c-de7074422cb0">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="16f5a18a-3e10-442d-85e9-d1a373f33173"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="251633b7-dfea-44f0-9d9d-a6f40f8a8eea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="dbe09175-f9d2-4d43-a13a-9455f179536a"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

//testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="10ab021a-cbc6-4a09-984e-4c576440ab98">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="406a0d3d-ff65-494b-b2b3-f2c843f626db">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Removing User Link Consent" id="997f72f4-6a13-4a61-994a-ca988244612d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER_CS" id="29a31d15-3846-4565-96d7-a72dbdda1925"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET:CS"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET:CS"));


</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="c20182a2-65f2-4855-8916-cddc29286709">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:retailer:customersupport");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="3865a818-96e4-474a-96a1-480762929777">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="7db713bc-d011-43c4-82f4-6c5431fca80c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="68bfe575-45ba-4c0f-b307-6ca8952f349e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429701166066</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144F0E5923730AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144F0E59237F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_c94784f8-059d-4b50-a58d-c33260c6258c</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144F0E59237E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144F0E59237E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E5923720AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144F0E5923720AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144F0E5924510AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>144F0E5924510AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E5923720AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>202</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdZc6JKFP4rFnlMIYsQlYpWEZeEGbNqzExeUm3TYEdoCN2Iya+/3ahEjHqd5Mnqw1m+sx/PKQgD3bIpRQnDEakswoBQK6e2pDQhVgQophYBIaIWg9bQvh5YelW1wFpEqjjdlvQCm0a9YXgNWTWbrmxMTFUGZsOVYa2mn6nwTDcbkLNSmiKHUAYIa0m6qpmyasi6PtI0S9Mto17VDe1ZqoxRQrluzlJVpRWoBW1JU8ZiS1GyLKtmtWqU+Iquqpry53owhFMUAql9vvQoN5S0V/yw6iKIggBWYRQq50qJ59yl1hD7BLA0QStb7j5bqqI2Fc7jUuyfSIUsch3iRfmzA0hEMAQB/gAiPteITSO3Ygd+lGA2Dfc6oalCsYwWUIaaQU4kpQztSEUlhAkFMp0CbaXrAXkoQQSiyuOD05JOjstaLjpKAKFelIS0/Pw3PIjMURDFyJXp2q0VtOMV7ohU+xxByyEwSCmeoxtRrDGAiK6yieDxqip3CfLwYoApL9AFFeiUTXhbz2U0uthHlH0nQRvJWSoZgyBF7VcfzhbjLGBMDW6vFsbl6DqlF9645jqtHMAmc04oUrt8bhVlUURLiYuz1/4Vq2nZa3Z5j03t/n1+T4OP3+h3avhnH5djFqrKZDHKPqZB3D29qz3WEkgbkDmz+rU5+PNx50fPSTACT0B96vgXj64SEfbcmc26o8Qjvcbo12k8mp/99fQgef5l95+9fp1l/XjABlC7GCPl71Pm2OFsDBpPTazf9PCwycymd3rq+PbVO71Ps65x223Ys1bhzgb+Mm3d88N08oogWz9FGTjdSp9nCbDDw0xQsCt7OasVi+FDGSJMagspMTuslI877Fo8h8u3Zhh9tWc29Vq9p9o9raeaNd5ETa2v2vWeUVsPmSWKLYidiHhY2BIjd1k2hwHC0KKIuCiR51HKJx2VDmjsAgYqDnngTRARikYRH8+ar9FskapTjU4npp6aEy9gIDYyqXITsVtym9geQ0l5JhulmfyAII4xEoNb1DXlhU0Zj8UbmKcs0KpzUCUo5aM9EVPW0o2GqVAcxgESSJUwctMAVeNpnEdGoctfXQaQ5tSH3ijvtr1+bX9bh4DzuFgwUOHLBeJpRDuWS23tyH6H65sOr9XbqYtFY/F4sgTDJZLyp88yEfVR1Ijd6fSGneEadsH9D9LfFe4O7OHdT2RfOsMX7bsKvm/6Z4YHP/B68FOvef3+UPyrpHKgBJXt6i8MuXO8YXZ9qPGVz5dEe927b0CrvlXT+TzN29UwakrC1SuiHxRVV4YIpnyNvY+iGSJKoUU56mYogG8ZL+hliCmbkiEDDIV8vFTy5xFH4hBRcSQ6fC4ujr1ASyZ56BhasF20TsAPXIH44A0MLSj4OPmO/2RR4n5mbIeuDTvcT34jMkx88RL3wvueuoARV4v5pouSTeW7FOwyXiYWQS6wMF5Qk5Sh/V8qYoW1JABhlBLmdKWcsLlWc5zsPUbWJ9MXNfnmLk55/P+3vIzzEoCI/wGgONcvLjJLtADxN1bzyuie7awf2s5ldO0v5K+UjTht13j7Pw==</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>29a31d15-3846-4565-96d7-a72dbdda1925</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>251633b7-dfea-44f0-9d9d-a6f40f8a8eea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with LASP-CS without DST" searchProperties="true" id="aedc006e-0801-4f42-a3f5-2517ee733741" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="067239ea-0f1c-47e2-863b-ecf72485ce6c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="0b840324-e55a-4555-9799-7e769c1d2c07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="cf3c40a4-2498-404c-be77-4e0c0ad89671"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="5f1312e4-a3c6-4e7d-a7a9-a62646e10bbe">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="c22f8100-f7b7-4f7e-81af-0b9ce74074b3">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node LASP-CS" id="2166506b-ac03-4bd8-859f-517c7448079c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdLLASP:CS"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create for LASP-CS" id="1b4529b9-df98-4e13-a6b8-735f99a0f98f" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Coordinator_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for LASP" id="d9e5a9a0-9c84-4add-968b-6249f2b31613" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Removing User Link Consent" id="e0181d1f-1fdc-49d2-95dd-e39e4213d589"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="2e4e89f4-9dea-413c-a84d-08a1e866ea53">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:linked:customersupport");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="15961257-0252-4d39-8131-83b9b260c0c1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="30de72ff-8db2-4a94-8f27-d05e72c79a8e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="96425cec-9a6b-45c4-a5ae-173ebe9def3d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>LLASP_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429699689294</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144EB4E5804A20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144EB4E503BA190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_380abdce-8764-4085-8669-1d66be9a6d66</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144EB4E503B9190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144EB4E503B9190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E5804920E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E5804920E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144EB4E50492190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E50492190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:linked:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E5804920E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>61</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVfdcto8EH0Vxr38xlg2hoAnMGN+MiWlhGKSptx0hLyAiC2DJfP39JUMuEBIPppcMVrvnj27Wu0utxyHgeW4nEMsaMRy6zBg3EmlVS2JmRNhTrnDcAjcEcTx3O8dx8ojBx9MtFy7WdV+F8oIj3wCevmmZOs2Khf1cqlU0U2/VBpBBZfkr1TlPIE24wIzUdUsZBZ1ZOuWNTCRY5cdE+VvkDXUck8Qc4ktVfJI25Na86o2FWLuGMZqtcqvCvkonhgWQqbx/L3jkSmEWKvd7iJKHcW1vT7J+0AgCEieRKFxa5zo3Prc8eiEYZHEsPflv+ULGahiSB2f08kXLbMFv83GUXpsYBYxSnBAt1jl5zuIaeTn3GASxVRMwzeDMJEC1mFNdGLa7ItmnFK7EuiEYcyxzqfY3GP1YQwxMAK5x367qn257tZS00GMGR9HcchPj//GB9gSgmgOvs4PYe2pXQ94IVO1WyBOm5Eg4XQJXVWsc0yA728TyPVQuV4MY7ruUC4LdM0VO+OY3tlxl40mnQAXH7mgo8vZgTzhIIFa935e/DZcDJ7v6ePgEVpf7Xs2nfmLLnarKYFj5VSQXe3ueFaUWRHtLDY/trO7yrz8gn889CcL+jBrt1vfxjezkdej/Ufe6fqBvyomIRcgAhGNhuPpxpvMtuPV08puWaVt4xnq23j2a1m2HtDqZ+vH03Dx07vzX3puNyLffhW7T1ZgPTxPh3jdEi+dSasUQHiPrEc/6H413EWl5z7/GvqP2/J/vWHfHDWDsNm76RWKYd0gMzPcTlb1HoV2NQvniP+p7PDmvWQ0AyIOR1UG7WbuTt4SFu83MyWhvj5OVZ25aj4ycia0mrJSvcNJZLujviPvcHc2bbtVt1tFVKhXzAqqt1CxgG4qFfMOuS5ChUOT2bE4o9iI2JgqX6rl7srmfYIkdDgwH2J9GSWy03HtHcQmFjjXZn35CCLGYRDJ9mwW6HyyqYRis50kZhQHJbv4EpUXI9mUu5F4YA+xOxYQnzblwklT7gOhcwqqc6vC5rKyuZDJWOBlIgIzv8R5Bons7bFqs45ll4sGp+E8AEXVCCM/CSA/n87T1Bh892vpmPBU2m8N0uf2ZmDn3w45kDo+VQpcxVIHeY9wYbqgQyBvB1w6DvgA7yY+VS9LJlTElOyYnH76WyeqQLIicRuNltfwDrQz7X+w/qhxs+N6vc/Y/m54v82PAnzc9eccdz4RdeezUcv6/aT5a0vjnRI0zqs/c+Qv6ZHbw6YmZ76cErXD211gM7/IJ8tlkj5X2y4YsYQ31HswkGV4QBI5xzaD6AWYkaEYVy0NGfEz55n8lGIipswTWEAo20suPV6xJXrA1ZbYlo1xfe0KeuJSpk7AWlySNQK54SrG7y7BxCFKT4p78mcVxf7fG7uAdeRHximXREHZRJ3UwrB5oy5IJGGpHHVRfAx+CeCS81NhluSMi5AFNUoEvP0lp2ZYVcOERAkT7aaWCo7naspTbObg/FV6BZOO7myXp/+/zOs0LQEC8h8Apym+Wskc9QTY5Gg2751eGs9lZFcs1LKPx7NZbxazpJywq70Sv5Yc5em8xmt/AA==</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5f11bf18-7835-4b92-8142-04620437941a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0ddb9474-0a81-472d-8843-e16ca5e3db58</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with DLASP without DST" searchProperties="true" id="f40ff8c9-1bb6-4662-8c10-094a26754dc8" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="d14c990f-a73c-41f4-8bc5-4f0e800561a8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="266dd7e3-85f4-4657-9399-9fd80714ac62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="8e1fce60-76e5-4cf2-9400-d1b3ff99e8d6"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="6646e6cb-fab6-434d-9353-4ff5cf9c6bd1">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="55353f35-ccc5-4333-8656-1556cabccdcc">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node DLASP" id="77f1749c-6095-4b65-ab33-ad990f4cb2e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdDLASP"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create for DLASP" id="a422b746-9d12-4077-9f60-4d5804d1343c" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Coordinator_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for Coordinator" id="93b04d79-181c-415a-a85f-d9bc1fc803e2" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Removing User Link Consent" id="eec6625c-1b9e-4a54-954e-b1220267bb5c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="a851eee6-0046-48a1-a1af-df7cd0cc0e7d">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:dynamic");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="e215a726-b828-4db5-8e7a-116c802229c1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="93ae890b-a9a8-4dc5-85a5-7f1c5d4fbabe">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="fbe1aa71-6be3-4b51-946c-16738e8f1df5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DLASP</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429699607776</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144EB4E4FD90190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144EB4E4FD9C190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_b5f2b41f-f5ee-4a6a-b291-5b4938cb6b35</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144EB4E4FD9B190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144EB4E4FD9B190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E4FD8F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E4FD8F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144EB4E4FE6E190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E4FE6E190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:dynamic</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E4FD8F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>277</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVddc+I6DP0rTPaRCU4gtCVTmAkf7dKmC9vQ3m5fdhxHgHcTJxs7Ae6vv3aAFCjtZdsnxop0dCTLkrjkOArrtsM5pILGrLKMQsbtQtrWspTZMeaU2wxHwG1BbM+5c+16zbDx1kSrDPtt7affnNZ9y5zq0yaAbuEzrPv1lqk3favVuCD+md9oSlXOMxgyLjATba1umE3dsPR6fWIatnVmW61a8+ziWas8QsoltlSpGdqG1JK3tbkQiY3QYrGoLRq1OJ2humGY6OnO9cgcIqx1LtcRFY7Szkaf1AIgEIakRuIIXaI9ncuA2x6dMSyyFDa+grd8GchoIakTcDr7opW2EAzZNC6OPcxiRgkO6b9Y5ecOxDwOKk44i1Mq5tGbQZiGAtZhSXRiWuyLhvapnQi0xzDlWOdzbG6w7mEKKTAClYf7YVv7ctqtFaaTFDM+jdOI7x//jg+wHMI4gUDn27A21E4HPJKpziUQe8hImHGawzdVrAkmwDe3CeR0qMo4hSldupTLAl1yxQ7t0js4rrPRpzPg4iMXtHM5a5BHHGbQGec3oj/n3R8TVnVXw17fHXsjw6mOGnG7ILCrXAjKq10fD4qyLKK1BaBqluQJ6Y1b391H5MDo+evEpBfn18/XTyFUY4Kb1u9bFFs/3NGUVlf42g/Y4Bk5kzQko1XfXd5dNa0r+HVHgpss86KuYz70qOWe3y//ycYrK49E17+wrqv128i/fmzFVjdLkxu4/dYbpCL378jqNrmlNw+THJxzfL4cLuHxyfq66KPxwxKN6kEV9fwz93u7DGeH/75s++a9zP8FRGyPqgyG/cqVvCUs3m9mSkIDfVqo2olqPlwAE1pHWaneYWey3dHAlne4PpuWNehaA+uq3+qaLaM7MJoN47zVMq8MxzGMxrbJrFkcUOzFbEqVL9Vy12XzPkES2RxYAKmex5nsdFx7B7GPBa4M2b18BDHjMIllezbn2aKV/CZmaw7LRejnJJ9n8/NFolW+xWLERqkzFZDu9+TGXk++B0ITCqpxq7rmsrC5kLn4g/NMhGYtxzUGmWztqeqydt26aCJOoyQExRRFcZCFUEvmSZEZxNe/dR0TXkjvB5Pitb0Z1+G3bQqkTkCVAlexdEFeIxwZLo1tIG8HfLYb8BbeyQKqHpbMp0gpWTPZ//RSJqo+yhpxer2B1/O2tEvtv7D+qHHfdbzxZ2x/9ryf5kcBPu76c47dT0TtfjZqWb+fNH9tid4pQXRY/aWjIKc7breLmhz5ckh0tm/3DzZrf2pZnmfFc7WsBkolPFLvARl15AHJ5BhbTeLfwFCJgk7aGUriB85L+T7FTMyZJ7CASLaXSnE8YUn0gKslcSj74vLUDXTPpUydgKU4JuuFcsFVjN/dgYlNlJ4Uj+XPIk6Dlxs7grXjR8Ypd0RB2Uyd1L6weqMuSCxhqZx0cboLfgzgmPN9YZnkkouQBeVnAt7+UlEjrK1hQuKMiWFfKwS7Y7XgKVYJ2C9Kr2CKyV2u8vT/d3mdFiVAQP4B4LTAVxuZrZ4Am+2M5o3T49P54uq96bzPrvNK/Fqyk6fDGu/8Bw==</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with DLASP-CS without DST" searchProperties="true" id="f7b30c2c-1d5a-48b5-ae15-ba7c14cae99d" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="34c8879e-6dba-4cfd-ad9a-4a52c147074b"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="5d72c80a-a132-4ae0-bdb3-913ea323677b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="e459e2ad-5678-44a1-a3bf-c641f63be0a6"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="864d661d-ee54-407e-a8ef-46d9793dbd7c">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="739c6723-8edb-4619-8b12-6b2b920282e3">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node DLASP-CS" id="da20db50-78ea-4377-a491-a4a8826436a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdDLASP:CS"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create for DLASP-CS" id="5fbfafe1-9e0e-41f4-97a2-800b6e93a065" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Coordinator_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for Coordinator" id="614597a4-92a3-423f-aaca-dcde134e0b04" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Removing User Link Consent" id="ed3a6cac-c26e-4c13-90a6-6b022adf49ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="e9a9df53-8aea-4d99-9ab8-7d86f25251b6">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:dynamic:customersupport");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="0dcfbacb-b242-4205-b6ba-eaa73e995644">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="00d371e3-787e-4ab4-83a4-bf42d2885e54">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="9907ad9a-b2cb-439c-ad64-383910fe552c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DLASP_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429699617697</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144EB4E57BED20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144EB4E4FE80190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d8cb1693-d467-48ce-ac6b-5fc5fb2e86d7</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144EB4E4FE7F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144EB4E4FE7F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E57BEC20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E57BEC20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144EB4E4FF1F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E4FF1F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:dynamic:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E57BEC20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>60</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVddc+I6DP0rTPq4E5xACJApzISPdrmlLSXsbm9fdowjwCVx0tgByq+/doAsUNrLtk+MFenoSJYlcclxGJQcl3NIBI1YYRUGjDuZtKGlCXMizCl3GA6BO4I4nnvbd0pFw8E7E63Q6zS0336NjE27XtZ9y67qVo2Ajok91isTUpmMS1Cz/apU5TyFHuMCM9HQSoZZ0Q1LL5VGpuFYtlOpF62K/aQVfkLCJbZUKRraltSKN7SZELGD0HK5LC7LxSiZopJhmOjxtu+RGYRYa15uIsocJc2tPin6QCAISJFEIbpEBzqXPnc8OmVYpAlsffnv+TKQUUdSx+d0eqHltuD32CTKjm3MIkYJDugaq/zcgphFfsENplFCxSx8NwjTUMA6rIhOTItdaOiQ2plABwwTjnU+w+YWawgTSIARKPwY9hraxXm3lpmOEsz4JEpCfnj8Oz7AFhBEMfg634W1pXY+4IlMNS+BOD1GgpTTBdypYo0xAb69TSDnQxUGCUzoqk+5LNAVV+zQPr2j4yYbHToFLj5zQXuXswH5iYMUmv3RtTn2H8poPbqD+9Vy+j1mVcv7146XjYzAvnImyK92czwqyryINhbUmg4f+NWABaXQEI+D5+6MR/GjjQY3Ty9PzEwg7F7XJ7/w/FHM0JrOWung6bb91Hp1E2PiDv3a99i9mfdrtX8WZiWw02ndeBgEMXRCxNbr/mphv9Z76TUdfutF6ZwZdrAcI++h6yVcrJfGXfy8rK3Tb9/63aTec0UwW83vgl/LOzNcuT9r/o+bYBw/V6oTkzfycPb4H8p2b95Lx89AxO6oyqDXKVzJW8Li42amJNTXJ5mqE6vmwwUwoTWVleodTirbHfUdeYebs2lZ3ZbVta661SuzbrS6RqVsVOt188pwXcMo75rMhsURxXbEJlT5Ui13UzYfEyShw4H5kOiLKJWdjmsfIHawwIUeG8pHEDEOo0i2ZzrDhmXXIZxi07ST8ry6mMevvMa1wl0k7tl94k4EJIc9uXzQk4dAaExBNW5V11wWNhcyFy94kYrALC5wkUEqW3uiuqxTsmoVxGkYB6CYojDy0wCK8SzOMoP45rckGw7PpMPuKHtt78Z1/G2XAqnjU6XAVSwtkNcIJ4aLtQvk/YDt/YB38G7qU/WwZD5FQsmGyeGnP2Wi6iOvEbfd7nptb0c71/4L688ad/quN/iK7e+299v8LMDnXX/Ncf8LUfe/GrWs3y+av7VEH5QgOq7+3JG/oHtud4uaHPlySDR3b/cFm8WXYrpYpNlztawySiQ8Uu8BGSXkAUnlGHsdRXNgKEdBZ+0MOfEj57n8kGIqZswTWEAo20shO56xJHrA1ZLYk31xde4GeuBSpk7ASpyStQO54CrGH+7AxCFKT4oH8mcZJf6fGzuBtedHxil3REHZVJ3UvvD6Tl2QSMJSOemiZB/8FMAp54fCPMk5FyELapwKeP9LQY2whoYJiVImeh0tE+yP1YyneI3B+aP0Biab3PkqT/9/l9dpVgIE5B8ATjN8tZE56gmw6d5o3jo9MZ0r1Va3XTK61v50NludSp6UA3bNN+K3kr08Hdd48z8=</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008- RightsTokenDelete - PERM - SecurityRoleValid - Invocation with ACCESS PORTAL node without DST" searchProperties="true" id="99ebca12-951f-45be-ad91-e57f295301da" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="f213b83a-dbff-45c5-b97e-68ac64c2b30f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="ca24fbef-35ab-4583-b5b6-784701335a46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="fec5243a-02fb-4854-b815-c86d56cb1063"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="f32aa97e-85b9-40fd-9ded-20ddf4d152d1">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="fa1fc8da-00bf-458d-9ded-7dbc74ed2175">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node ACCESS PORTAL" id="b691fbec-c67e-4d84-8ce7-d11cf060e24a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdACCESS"));



</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for ACCESS PORTAL" id="a3322b8d-0b71-48ec-a3cd-b328accfae68" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Removing User Link Consent" id="b61c9fc6-dd55-4eac-b449-fa45270ebfad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="b53dfe88-22d6-4fe2-ab0d-17f58087a853">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:accessportal");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="41bca5ee-7b38-458e-996a-3eacb15139e3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="b1cc742e-b7b9-45dd-9159-45571d73407b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="1761f777-acc8-464e-a3cc-0e4b518aab3e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>ACCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429699625899</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144EB4E57CBD20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144EB4E4FF31190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_46c3a82a-10ea-44a9-8fce-92728cc08c26</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144EB4E4FF30190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144EB4E4FF30190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E57CBC20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E57CBC20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144EB4E50003190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E50003190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:accessportal</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E57CBC20E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>78</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdbU+JKEP4rVPbRCpmEcEsJVVxdXBAlCOqLNTtpYDSZQGaCyK8/MwEi4OWw+kR1py9fX6a7Oec48C2nxjlEgoYsswp8xp2EW9HiiDkh5pQ7DAfAHUEct9brOlYWOXinomU6zYr2aBdIDpcsrJsIsG7buKyXJgT0slW0SoSgErEKUpTzGDqMC8xERbOQmdeRrVvW0ESOXXRQMVsolB+0zAgiLm1LkSzStqBWvKLNhJg7hvHy8pJ9yWXDaGpYCJnGXa/rkhkEWKuebyJKHEXVrTzJekDA90mWhIFxbhzInHvccemUYRFHsPXlfeYLGahsSBmP0+kvLdUFr8MmYUI2MAsZJdina6zy0wMxC71MzZ+GERWz4NMgTKQM67AiOjFt9kszDqGdaOgAYcSxzmfY3NoawAQiYAQyt4NORft1WtUS1WGEGZ+EUcAPyX/DA2wJfjgHT+e7sLbQTjf4Qaaq50CcDiN+zOkSrlSzzjEBvq0mkNNNZa4jmNBVl3LZoCuu0Bn78I7ITTaadApcfKdAe8XZGBlhP4Zq4ax0wVaXdbS+uemPeuXS8HXae75uTK2wkgDYF04YaWk35FFTpk200Qhm45vRBE+aiwtUa+Plg3F/Gdy6/Sd6ZY0fEKsX7ix7kWs26vOiV86ZpT/PucUN7a1GsSmscfkibkyba3NdxDeoP4lvPJRf35qXv8dkxEgPrxeI0Dnr/7m/LF2M7XE3uoDBfYjqtuHOlu3ftU65+OAVns4eeuV+cNG12nbn7il/D81h/XI8as1mg6vuWTcP17n7ShrOHv5D3u7Nu/HfJyBiR6o26DQzbVklLL4eZopDPX2SiDpzNXy4ACa0qtJSs8OJ5bijniNruKFN227V7ZbdbueQWUb1FsrnULFcNtuoVkMotxsyGxRHEBshm1DlS43cTdt8DZAEDgfmQaQvw1hOOq59YbGJBc502EA+gpBxGIZyPJvIW75aT8XFvDDBXjFmXtGy1yZfa5mrUPRZP6pNBESHMzl3MJMHIItKQQ1u1ddcNjYXMhcLvIyFb2aXOMsglqM9UlPWsexS3uA0mPugkBpB6MU+ZOezeZIZg29+LR0TnnAHrWHy2j6N6/jbLgVSxqNKgKtY6iDLCO+WS8HJ7wL5PODCfsA787XYo+phyXyKiJINksNPb22i+iPtkVqj0XIb7g52Kv0P2t9VbnZr7vVPdB8b7qP5XQPfd/0zx90fRN39adSyf3+o/l7T+KIFjePuTx15S7rndneoyZUvl0R193YX2MwusvFyGSfP1bZzRiTNG+o9GMgyXCCxXGOvw/AZmJFaMU66GVLgR85T/iHEWMyYK7CAQI6XTEKecCS6wNWR2JFzcXXqBXrgUqZOwEp8xGv48sBViL+8gYlDlJxkX8uflzDy3ir2ga09PzJOeSMKyqaKUvfC6yd9QUJplspNF0b7xj8y8JHzQ2aa5BSLkA31Nxbw+ZeMWmEVDRMSxkx0mlrC2F+rCU7xOgfnTeidmWRzp6c8/f9bXqdJCxCQfwA4Teyri8xRT4BN91bz1ukH2zlfbNQbFmrZ+9vZrDfzaVIO0FXfsd9z9vJ03OPV/wA=</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with ACCESS PORTAL-CS node without DST" searchProperties="true" id="dc9e91a0-c06a-47c7-9ca5-1bac8a5fcbeb" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="128a3e59-1cc4-4155-b72d-467193613992"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="a62f2a0e-326d-4d5a-85e0-77d2e5b54475"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="c4586b15-9a28-4701-9e3b-3834210c327b"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="45650005-41eb-49cf-a85e-26628279564e">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="c7e1631c-990f-406e-b8c8-68115e7bf10d">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node ACCESS PORTAL-CS" id="fb159a6c-6b77-496e-b26b-49d6f2809009"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdACCESS:CS"));



</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for ACCESS PORTAL-CS" id="77df531f-d16b-456e-86f6-e39b453c5745" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Removing User Link Consent" id="f7b2bc51-4ac0-4cc0-8727-c95effbc9304"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="e07fc631-c3e3-4e70-8f2f-c61b4e45e6fa">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:accessportal:customersupport");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="dbd02a0e-672b-435e-8076-a15c0b118a41">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="4277c6e5-b3cb-48e2-ab49-3630e340836c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="a9cbead3-93ba-41d8-90f4-8b978a4dbd87">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>ACCESCS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429699635311</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144EB4E50010190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144EB4E5001C190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_421b8fe8-16d1-4fbf-ac87-072333c86a1d</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144EB4E5001B190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144EB4E5001B190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E5000F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E5000F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144EB4E500B5190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E500B5190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:accessportal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E5000F190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>134</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVfdcto8EH0Vxr3MGMvggPEEZsCQloQ0KYb83XQUeQ2ituxYMtA8/ScZcICQfDS5YrTen7Oro93ljOMorDhtziEVNGalZRQy7uTSppalzIkxp9xhOALuCOJ47auBUykjB29MtFK/29R+WxXzyQ7A1s2ab+pW8BTomNh1HdUr1WqV2DVs+lKV8wz6jAvMRFOrIPNUR5ZeqYxM5Fh1x6yVbdt+1Eq3kHLpW6qUkbYGteRNbSpE4hjGYrEoL6rlOJ0YFYRM4/5q4JEpRFhrna0yygOlrbU+KftAIAxJmcSRcWbs6Jz53PHohGGRpbCO5b8XCxmoYUgdn9PJN62wBb/Pgjg/upjFjBIc0hes6nMFYhr7pXY4iVMqptG7SZhIOdZhSXRiWuybZuxCO9LRDsKUY51Psbn2NYQAUmAESuNhv6l9O+7WctNRihkP4jTiu8d/wwNsDmGcgK/zTVpraMc7PFCp1hkQp89ImHE6h5+KrAkmwNe3CeR4V6WbFAK6HFAuCbrkCp2xDW/vuKpGl06Ai89c0NblrJzc4jCDVv108ZKiOxcuBiedX4/nt1eX3Vl4N/TQn2YOYFs5FxRXuzrukbIg0cpi9COc3vYojQTcPviNObqzx70H24Jqdza8R/e4YXpjj3V+XLlmgmqPVzZNBoIkZmfWn9x8txdu1/xh/3S/u2OTXgh6gW743X0D6K9g0h1eDrxO5275EPdZZ9x/NOq953g+fTLHjet5ZNZOhO+/WI1RbPDBvBFPHy/BD+oPcJHAxcv1/cV1Oxu3v588BDW3S9vNIp0t/LuyzZv3sqcZELE5Khr0u6VzeUtYfNzMlIT6epCrOolqPlwAE1pLWane4WSy3VHfkXe4OpuW1etYvVNJoo7ZQJ0eOq2ieqNhnqN2G6HqpsmsUOxBdGMWUBVLtdwVbT4GSCKHA/Mh1edxJjsd1z7w2MUCl/psKB9BzDiMYtmezeflHxIz/6Vu1zNat55wVpnNarWZVvoZi2t2nbYDAeluT67u9OQhEJpQUI1b8ZpLYnMha/GM55kIzfIclxlksrWnqss6Fcs+NTiNkhAUUiOK/SyEcjJN8soYfPVbkQ2H59Jhb5S/tnfz2v+2KYHU8alS4CqXDshrhAPDBW0SeT/h2nbCG/ftzKfqYcl6ipSSFZLdT680UfwoONJ23Z7nehvYhfY/WH/WuDtoezdfsf3ter/Nzzr4fOivBR58IevBV7OW/P2i+VtL4wMKGvvsLwL5c7oVdrOoyZEvh0Rr83afsVl+LmfzeZY/V8uqGql0b6j3YKCK4QHJ5Bj7O4r/ADMKL8ZRO0MBfC94Id+FmIkp8wQWEMn2UsqPRyyJHnC1JPZlX1weu4HuhJSlE7AUh2RuKBdchfjDHZg4ROlJ8Y38WcTpa+KHfG3FkXnKHVFQNlEntS/8fYcXJJZuqZx0cbrt/JCDQ8F3hUWRCyxCEuopE/D+l5IaYU0NExJnTPS7Wi7YHqs5TvE3AedV6Y2bfHIXqzz9/11epzkFCMg/AJzm/tVG5qgnwCZbo3kd9PB0RucfTedddK034reSrTrtc7z1Hw==</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with LASP without DST" searchProperties="true" id="32f333ff-dae1-479c-b213-c6ad5d55de43" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="142a83d1-0f0e-4cd4-a713-bbb470e55e92"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="26ddaf10-0689-4aa1-a481-cc03db7a3ef6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="4b5cc09a-9c07-4b9b-a00f-242a1c162c74"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="21d40512-ffb9-4384-a9fd-6661eea1444b">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="4f52e893-4bfe-4774-b9e9-0712ddfadc0c">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node LASP" id="f8af0eb3-ecc5-4fcf-96f3-811d370e11fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdLLASP"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create for LASP" id="ab59eef0-e5b0-462a-bd7e-4adba4ab672f" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Coordinator_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for LASP" id="bc9a6d71-cf40-418c-a4bc-1a0e60113aae" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Removing User Link Consent" id="056e23d8-c878-48a8-ab54-fd384065363d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="d9dfc31a-4b2a-449a-a7de-405e449f4a3f">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:linked");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="929f2ece-8dcf-4878-a1bc-ea4c4cab6a3e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="d7b45427-e555-4fe3-9fcc-47554cc72f9e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="32037c3f-e15b-46fc-a87b-12dd27c1d6d7">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>LLASP</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429699644228</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144EB4E500C2190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144EB4E57E3620E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_a797c5c7-a8a9-430e-b353-d46d4fb8f4f2</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144EB4E57E3520E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144EB4E57E3520E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E500C1190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E500C1190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144EB4E57ED420E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144EB4E57ED420E4E05307991F0A1BD5</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:linked</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144EB4E500C1190BE05307991F0AA003</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>204</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZdc9o6EP0rjPvYMfJnAE9gxmDS+oY0FNOk05eOIsugYsuOJAPNr69kwAVCcmny5NF69+zZ1Wp3LznMUsvzOcdMkJw21llKuVdJu1rJqJdDTrhHYYa5J5AX+Tcjz2oaHtyZaI0w6Go/YavTQi5q6bANO7pjG1h/sF1bj52L2Eke2omTWFKV8xKHlAtIRVezDNPVDUe3rKlpeE7Ls9zmhev80Bp3mHGJLVWahrYlteZdbS5E4QGwWq2aK7uZsxmwDMME329GEZrjDGq9y01ElSPW2+qjZowRTlPURHkGLsGBzmXMvYjMKBQlw1tf8Uu+DGB0gNSJOZl90GpbHIc0yavjANKcEgRT8gRVfm6wmOdxw09nOSNinr0YhGkoYB2vkY5Mh37QwCG1M4EOGDIOdT6H5hZrghPMMEW48W0SdrUP591aZTplkPIkZxk/PP4bH0yXOM0LHOt8F9aW2vmAJzLVu8TICylKS06W+Isq1gIizLe3idH5UI0xwwlZjwiXBbrmih3Yp3d03GQjIDPMxVsuaO9yNiB3MC1x79dVPP8cFB/vnljYn6yCsZs8OG6xujN5tyKwr1wJ6qvdHI+Ksi6ijUV/Eecj837CwY+4+DGMb/uCZmvrik2L0UXbbk/u7wdP86vvHy3zUzgrrvHMFPzreAE+g4CN26N8MUh8EH4dGsLO/Gv7vymxr8prYd8nq0/O15s+Kibz0R2Lgknn+xoPy4v+tym6nU5acTtNyXj46Xb6rV22kqepGIBFGEuPfhCO/DAK+s7iKYqHn++WgfUFz7p1OHv8D2W7Nx+VD78wErujKoMwaFzJW4Li9WamJCTWk0rVK1Tz4QJTofWUleodXinbHYk9eYebs+k4w74zdFtD27WMoTM0XNtodTrmleGb/cDdNZkNiyOKg5wmRPlSLXdTNq8TRJnHMY0x05d5KTsd115BDKCAjZBO5CPIKcfTXLbnp+TX49IltLMo6MLE0Ek7BntAUGt8ycUtvWV+IjA7bMn2QUueYEQKglXfVmXNZV1zIVPxCJelSM3mEjYpLmVnZ6rJepbTdgEnWZFiRRRkeVymuFnMiyoxgG++lg4Rr6ST4bR6bC+GdfxvlwGpExOlwFUsfSxvEZ+YLeYukJcDvtgPeAfvlzFR70qmUzCCNkwOf/2tElUedYn4g8EwGkQ72rX2P1i/1TgY+dH4PbY/B9FP860Ab3f9Psejd0Q9em/Usn7faf7cErxSguC4+mtH8ZLsud3taXLiyxnR273dR2g2H5vlcllWz9VxbMAkPFDvARgWiDAq5RT7Pc0XmIIaBZy1MtTEj5zX8kOKpZjTSECBM9leGtXxjB0xwlztiKFsi+tzF9ADlzJ1Aq/FKdkglfutYvzqCow8pPSkeCw/q5zFf2/sBNaeHxmnXBEFoTN1UuvC7xfqAuUSlshBl7N98FMAp5wfCusk11yELKiHUuCX/zTUBOtqEKG8pCIMtEqwP1UrnuJ3gb2/Ss9gqsFdb/Lk/1d5nVQlgLDc/zmp8NVC5qknQGd7k3nr9NRwNoyBaXaM/v5w9g3DrpNywK73TPxcspen4xrv/QE=</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Coordinator_CS without DST_Invalid_Scenario" searchProperties="true" id="e4a66fe6-82f7-4728-b3ed-cbf17108e068" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="4a6a87e2-a6ed-4d69-9a94-fbc93b629de8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="63854546-223e-4d66-a6fb-08c185b07043"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="217bb9e3-d670-4e75-8f12-6ad3985999dd"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="c43f8a87-0cdb-4471-89a4-3e9c34679766">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="f8ed46f4-2f21-4e51-84e4-cda095c619ff">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Set Node COORDINATOR:CS" id="1ace1cf7-ad97-4461-b1f5-3c15a3e6240d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdCOO:CS"));
testProject.setPropertyValue("audienceList","urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdCOO"));


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Coordinator_Nodes").getTestCaseByName("TC_DECE_01000 - STS")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

RTCRequest.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdCOO:CS"))</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="Call STS Create for COORDINATOR[:CS]" id="7772bac6-913d-477a-99de-195770e1dbe2"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Coordinator_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());
RTCRequest.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdCOO:CS"))

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="SetUp the UserCredentials Created for Coordinator-CS" id="0597ca92-97f5-4714-a961-1d40dfc18101">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
//testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Removing User Link Consent" id="8b8fb6f2-8d6c-416a-9733-fb4f7b9c80e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="afb736ce-eff8-4377-b68d-68b399dbbf4d">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:coordinator:customersupport");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="9652c847-009c-4a1c-a305-18ddcc092c6d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="0f9d2368-e8c8-4960-ae84-e090f4b12a48">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="c4dcede0-48a6-4f02-b0e5-e738db3295ed">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>coordcs</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425119309357</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>10246907C0480F53E05305991F0A79C3</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024690FBEB81B7FE05307991F0AABB9</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_439b3117-7366-4180-be36-bcb0e50e38f7</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024690FBEB51B7FE05307991F0AABB9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024690FBEB51B7FE05307991F0AABB9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:10246907C0450F53E05305991F0A79C3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">10246907C0450F53E05305991F0A79C3</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024690F39781B81E05307991F0A2536</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024690F39781B81E05307991F0A2536</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:coordinator:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:10246907C0450F53E05305991F0A79C3</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2711</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>nVbbcuI4EP0VyvM4ZXzDGFyBKgK4FiaEDGSY7LxsCbkBbWzZSDKXfP1KBjyYkCy7Ty61W92nu4+OdMdRHNl+h3NggiS0sosjyv3c2tIyRv0EccJ9imLgvsD+tDN68O2q6aPTFq0y6LW0v2pOc+5Ylqd7Tr2u16yGqc/BqetzPDfBNcFpLDzpynkGA8oFoqKl2abl6qat241ny/Rtzzedqlu3f2mVGTAuY0uXqqkdQe14S1sJkfqGsd1uq1unmrClYZumZbyMHqZ4BTHS2neHivJErH30x9UQMEQRruIkNu6Mks9dyP0pWVIkMgbHXOFHuUzDbBrSJ+Rk+UUr9kI4oIskX3YRTSjBKCJvSPVnBGKVhJVOtEwYEav4wyIsUwXWYYd1bNXoF80oQ7sxUAkh40jnK2QdY01gAQwohsqPyaClfbltavnWZ4YoXyQs5uXlf8MDdANRkkKo81NZR2i3B7zSqfYdYH9AcZRxsoFHRdYUYeDHaQK+PVTlicGC7B4IlwTdcYXOOId3sTx0o0eWwMX/GdDZcA5BZijKoP3te7CKxT6izacasWpokfa7X1nycz8atXIA5865oRjtYXlByoJEhx2jAc/wfAJ/DsXzfPkyMYd48hI1Y8f9sQ7cLOvxwGvWxgu0nS63WKTz2Agt4dCvm8H6x/ixGaytXn84DEXiDZO+U0+70c9eYzaboWEn8OZPm+Wvt/741/c9f9ri9cveQ+iVfeu449EYD6LhZEQfU26jsFEfB29/BM891q3R4JuXzfAb470e77zOrHWfrfn3VlHOGf6y7XTmp9n8b8DitFQ0GPQqgZwSEp+LmbKQUF/krn6qxIcLoEJrq11KO/xMyh0JfTnDw9oy7Vq9aQb3/XvXuveCvuk6ptdsWoHZ6dzfN08ic0BxAbGb0AVRuZTkHmjzOUAc+xxoCEzfJJlUOq59ErGHBKoM6EQegoRyeE6kPFtrO4vf6KtFa7vN+tWWf9Kw6SYNrfKYiDEds85CACtrslPS5AlgkhJQwq14zSWxuZC9WKNNJiKrukFVCpmUdqZU1rdrDdfgJE4jUEiNOAmzCKrpKs07Y/DD19YR5rkVJwkLfXw4ch8Wd/nv1AfpExLlwFVB9yBnCe9umLrvnqp5V3X96k10Ct/JQqJOl2yqYAQfkJR//eaKIklBlFNZJ9yF+6WhFNq4rKrIFm4ILihfXNxSz6UCtE+DWaPqupptNlk+Ck8pHZPhDdUPw7SNKeBMatT+OXkFahRRjJsuhAL4RfLCXoaYiRWdCiQgltyp5MsbXgBT4OoFMJCk3936vCillK0TsBPXbN1Ivl4U4k8fONjHyk+an+RnK6f4e2JXYp3lkXXKB4AgdKlW6jLYf0YOImUsYefBrwW4lrxsLJpcYBGSUPNMwMd/KkqfWhrCOMmoGPS03HCumTlOsU/B/+30Lkwuy8U7jfz7Q00nOQUwyNcdJ3l8dd366gjQ5ZnuHpNekV6va9ZcM3CdXHrdg/R6za5TNKWErv3O/N5y1qdLjrf/AQ==</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_000013 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with DECE-CS without DST_Invalid_Scenario" searchProperties="true" id="d823fce4-7121-45af-92c8-4ac1a4072ff1" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="7b014007-2911-469e-b749-baf9b9cfbbe9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));


</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Reset User Credentials" id="acba4be5-c40b-4e29-920c-253857a69d79"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="1d529a5f-2f13-4552-a099-a2d600f12570"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="b8a5e4e0-646d-4e01-b419-2a6153b9c7a5">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Create RightsToken ID to Delete" id="e1c4816a-b419-4a18-bc8d-b3e2c84cf6d8">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node DECE-CS" id="0e581d1d-aeef-4b6e-8b56-d32e61c0685a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdDECE:CS"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create for DECE-CS" id="be242f65-9995-43dd-a0b3-56800c629971"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Portal_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());
RTCRequest.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdDECE:CS"));

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for DECE:CS" id="191eb60d-8fd3-4285-9908-bb493e81c283">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Removing User Link Consent" id="a1539259-bee5-4343-a7a7-ad7906c478bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="c43dd640-028a-4ba7-a985-6e5cd7449a18">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:dececs");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="f6d125a7-00b4-4c71-9041-ec763370396b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="e1188897-4b6a-41b8-ba87-8bc428d45ed8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="ef976f66-c000-4c5e-8943-912db737fd53">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>dececs</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425117723442</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1023D314CF9338E9E05307991F0A2601</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1023D2D549072446E05305991F0A8721</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_0e3f3656-2217-405f-9324-edf5ae0197dc</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1023D2D549062446E05305991F0A8721</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1023D2D549062446E05305991F0A8721</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1023D314CF9238E9E05307991F0A2601</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1023D314CF9238E9E05307991F0A2601</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1023D2B3385338C3E05307991F0A2803</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1023D2B3385338C3E05307991F0A2803</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:dececs</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:F60EB29886E972C0E0401F0A07992681</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>3027</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>nVbZcuI6EP0VynlMGS+Yxa5AFQkk44QsFcgy83JLkdtYxJaMJQPJ149kwMFkudz75FK7dfr0oiOdcJTEttfnHDJBGK2tkphyr7B2tTyjHkOccI+iBLgnsDfuX488u256aLtFq/mDrvaPCY2w0Wq2dNu22rpjNkPdbdiODkHYRGBabjvA0pXzHHzKBaKiq9mm1dRNW7c7E9P1mq7XaNbblvVHqz1CxiW2dKmb2obUine1SIjUM4zlcllfNuosmxq2aVrG8/VojCNIkNY7WWdUBMp6G39cDwBDHOM6ZolxYlR8TgLujcmUIpFnsIkVfBfLNEzXkD4BJ9MjrdwLgU9DVizPEGWUYBSTd6Tqcw0iYkGtH09ZRkSUfJuEZSpgHVZYx5ZDjzSjSu1AoArDjCOdR8jaYN1DCBlQDLWHe7+rHR3WtWLrJEOUhyxLeHX53/gAXUDMUgh0vk1rQ+1wwC8q1TsB7PkUxzknC7hRw5oiDHzTTcCHQ9XuMgjJakS4HNAVV+yMXXp7y3U1BmQKXPyfBu00Zw3yiOIcegbML/3fjedo9WuUmFNqiMHVxdmKdcxhtyCw61wYytaul3tDWQ7Reof/ErZCsXzqx/B4uny+mt1wM/llsKery344aw+yxpwgZzkxaOfCgOj4z+DKiSbjOGLvp6e+vzwX/N5nC2eY34SnozfnMj62nEF7gbLXhf1085xdu+7M7TjiYmgnk1t6bUbnoeAra3IG/dew/cAnr8eDYAij0Sh8aAfzJ9tyoZksHtPlqfX4++5cJLx/8b56nXbLdHb4V23bMz/OX2aAxXapxsAf1M5ll5D4WcyUhQR6WLh6qRIfLoAKrad2Ke3wcil3JPBkD9dry7QbA3vQdFyzZTtOa2g2G2bTda1zs99p29ZWZNYs9iieMRoSFUtJ7npsfiaIE48DDSDTFyyXSse1HxAHSKCaT+/lIWCUw4RJeV6mTmq50Sxq4Rhmb8lsFYhp+s612g0Tt/Q264cCsookW3ZFku8Bk5SA0m011lzONReyFHO0yEVs1ReoTiGXyp4pkfVsp9M0OEnSGBRRI2FBHkM9jdKiMAZff20dYV5Y74eT4rB9m9b+v20FpE9AlANXuZyC7CJ8cbfY20S+T7i5m/AWvp8HRJ0rWU6REbxmUv31MSVqPMoRkRltKZee+4YKqrGfUBkoWBBcznl5W0sRl8e+t23HHNXn9XyxyIsGtJW8ZRLeUCkapm2MAedSmN4m7BWoUaIYB90CJfG94KW9SjEXER0LJCCRE1Mrlgdc+2Pg6tr35aSvDn1TVELK0glYia9sZ7F8sijGP75qsIeVnzTfyc+SZcFHx77A2okj85S3viB0qlbqBnj7Zi4wk7BEahfLdsG/AvgqeNVYFrnkIuRAveQCvv9TU6LU1RDGLKfCH2iFYVcoC57iLQXvw+kTTKHF5eOM/PvrTCfFCGCQTzpOCnx1x3rqCNDpjthugn7S24blnJ27dqMzdAu9ba/11m6Zpd5W2fU+mT9bduq0P+O9vw==</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>33a03373-495b-477b-9b67-164fb0298b2e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b014007-2911-469e-b749-baf9b9cfbbe9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_000014 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Portal-CS without DST" searchProperties="true" id="09f6c665-8c1e-4633-946d-36800a20ab93" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="bc7d6fdb-5e3d-4e5b-bb21-4a7d79cfe4b4"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="9236ab0d-150d-4960-b5f3-ec6fede0b399"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="b216d90e-039f-40ad-bf6e-596ae11eb2ff"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

//testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="eeac4345-35ce-4c5f-bce2-2e56d019203d">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Create RightsToken ID to Delete" id="31e662fe-c01e-43bc-b1c9-51d41bbb58cf">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Removing User Link Consent" id="ba9842cd-2f0f-4229-9520-27583565c0e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Portal-CS" id="18d5c14a-1806-4168-8ee4-a4883500fd86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdPORTAL:CS"));




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Call STS Create for Portal" id="3efec921-7346-4236-9350-2d85fb038d08"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Portal_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

RTCRequest.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdPORTAL:CS"));

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for Portal-CS" id="c8aed0a0-4704-498d-bec2-affac4fc9799">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="dd0d66e2-a2ea-4fae-83d2-f842d4622f09">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:portal:customersupport");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="e5edff5d-4a16-49f1-86fa-5270e6ae57f8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="168123a2-87d5-4212-82d0-851b039f4ca5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="b97ae712-3bbd-443d-9e44-3ce32ee07af1">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify with Database" id="b384dc27-e230-4a55-a8a9-d53a68668c9e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights DELETE  Data Validation")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>iscportalcs1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425119786175</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024856B31F262E9E05307991F0A46AA</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024859C4F166311E05307991F0AB089</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_f6ab0511-6cb3-43ca-b9ee-98b6d15f82ba</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024859C4F156311E05307991F0AB089</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024859C4F156311E05307991F0AB089</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024856B31F162E9E05307991F0A46AA</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024856B31F162E9E05307991F0A46AA</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024857D6BD96301E05307991F0A1011</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024857D6BD96301E05307991F0A1011</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:portal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:D1D5BECD26145410683553549481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<html><head><title>JBoss Web/2.1.3.GA - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 412 - </h1><HR size="1" noshade="noshade"><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>A specified precondition has failed for this request ().</u></p><HR size="1" noshade="noshade"><h3>JBoss Web/2.1.3.GA</h3></body></html>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2781</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZbc+I6DP4rTPZxJ8QJl0KmMBOgnMkstF1CL7svO8ZRwG3i0Njm0l+/doAU6OWw7VPGivTpkyxLOuc4iR3X4xwyQVNWWiUx424ubRkyY26KOeUuwwlwVxA38IYD1ykjF+9MjJLfaxl/ojqeoJptm3UyqZjVCsHmpAlgNhuTemjXooYzwUqVcwk+4wIz0TIcZNdM5JhOY2wjt1Jxa81yHaHfRukWMq6wlUoZGVtSK94yZkLMXctaLpflZaWcZlPLQci27oeDgMwgwUb7fBNR7ihrb/VJOQQCcUzKJE2sc+tA5zzkbkCnDAuZwdZX+J4vZKGmpXRCTqffjMIWQp9FaX7sYpYySnBMn7HOzxDELA1LXjxNMypmybtB2EgDm7AiJrGr7JthHVI7EeiAYcaxyWfY3mKNIIIMGIHSzchvGd9Ou7XcdJxhxqM0S/jh8d/4AFtAnM4hNPkurC210wHfyFT7HIjrMxJLThdwqYt1jgnw7W0COR2qdJ1BRFcDylWBrrhmZ+3TOzpustGjU+DiMxe0dzkbkFscS2h3BRJ3s+6PuscH8u4suHsiyXf/v3E/GLZyAvvKuaC42s3xqCiLItpYMO/Kb4zkVd9vOOlgxZ5naBGOh+Ke/7psTpP+UD5f3Hzvecv05zREab36WB0+LzpBJ4rF/BdLrLP7gUgfUa16F/nRDfo1XU8GK+v35Uje1ir8R72/jK6nQ7S+kbJXwz2eZBN/5sjl4Pr2Z6+b0dWM2POfvLP+/hAmjw/RZBg3IOg8XN6MM6czlsubO4s5vUZEWkU4e/wPZbs3H8jJAxCxO+oy8HulvrolLD5uZlpCQzPKVd25bj5cABNGW1vp3uFK1e5o6Ko73Jxt5FQbtWa32rdr9YptX6BaBZ01m3YfeR3UaO6azIbFEcVuyiKqfemWuymbjwmSxOXAQsjMRSpVp+PGB4g9LHDJZyP1CFLGYZyq9owXCQG8zp4X3KHyedaEyXT+6CyN0mUqrthV5kUCssOWXDloySMgdE5B921d1lzVNRcqFU94IUVslxe4zECqzp7pJuvq7FicJvMYNFErSUMZQ3k+m+eJsfjm65iY8Fw6uhjnj+3dsI7/7TKgdEKqFbiOpQPqFuGN2VLdBfJ+wPX9gHfwngypflcqnSKjZMPk8NdLlejyKErE63Yvgm6wo11o/4P1Z417Ay+4/ortn27wx/4swOddf83x4AtRD74atarfL5q/trQ+KEHruPoLR+GC7rnd7Wlq4qsZ0d693SdcfirLxULmr/VMz8JMwVv6PVjIsQIgUk2x9Th9BGYVKNZJK0NB/Mh5IT+kKMWMBQILSFR7KeXHE3bEALjeEX3VFlenLqAHLlXqBKzEW7JurPZbzfjDFZi4ROsp8bX6LNMsfLmxN7D2/Kg41YooKJvqk14X1u/UBUkVLFWDLs32wd8CeMv5obBIcsFFqIKaSAHv/ynpCdYyMCGpZMLvGblgf6rmPMV6Du6L0iuYfHAXmzz9/1XepHkJEFD7P6c5vl7IXP0E2HRvMm+dvh7O9U7F7tt156K5P5yrdc8rknLArv1K/Fqyl6fjGm//BQ==</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ba9842cd-2f0f-4229-9520-27583565c0e9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Portal without DST" searchProperties="true" id="003e5621-9b42-4224-9f24-046cee86b194" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="e5c1edf0-58ab-4ab8-99b7-75b6bc39b5ff"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="67f8a7c9-49bf-4e02-9711-3872bbe157dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="04eb90ac-b1e9-4f94-8e89-2d16ae5b3239"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

//testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="c0b0bb35-f975-483b-938a-9edba606dc56">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="f685e879-7723-4d5f-9b8f-fc934258a05d">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Portal-CS" id="af047f9e-1258-4994-8f43-eaf1b473c71a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdPORTAL:CS"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create for Portal" id="775896da-57e0-4cc6-93b1-46a2507766b8"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Portal_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

RTCRequest.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdPORTAL:CS"));

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node Portal" id="08030a44-7a80-4c60-8163-7718099efdc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdPORTAL"));





</script></con:config></con:testStep>
      
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for Portal" id="2709255f-ce0b-4bc4-8136-9b49c9a23e23">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Removing User Link Consent" id="6f15ff1c-c271-4d15-9862-101030d1ee0c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="af780734-20b5-44da-9ed8-ae42ab7f485f">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="26a1ec54-7ea3-4394-b6d8-39e1cfd9dedc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="405390cd-1ac6-48d5-b329-cd9e65b5bddd">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="19ffc960-4a2e-4409-a1af-cbc120f993f3">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>iscportalcs1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120010366</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>10248F3332086F64E05305991F0A3B4E</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>10248F2840FB6F60E05305991F0A34B2</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_3ad50357-9a8f-42c9-9278-1979fb8b6576</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:10248F2840FA6F60E05305991F0A34B2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>10248F2840FA6F60E05305991F0A34B2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:10248F3332076F64E05305991F0A3B4E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">10248F3332076F64E05305991F0A3B4E</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:10248F296EF57933E05307991F0A6CE4</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">10248F296EF57933E05307991F0A6CE4</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:AD078BC0050C4410BD019B449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:token_rejected">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2294</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrU/I6EP4rTP3olF65dYQZLuJBQTwURN8vTkgDBNsEmpTbrz9JgUpRPLz6qZPtXp7dPNndGwYC33SqjKGQY0oy68AnzImlZSUKiUMBw8whIEDM4dBxq522Y2Z1BxxMlEyrUVbeLODldCtXUEugOFZtE5bUklkoqkapUBqPiqN8rpAXqoxFqEUYB4SXFVM3cqpuqmaxb+iOVXDsXNa0C3+UzDMKmfAtVLK6sge1ZmVlyvnc0bTVapVdWVkaTjRT1w3tpdN24RQFQKnc7DKKA4WVvT7Meggi34dZSAPtRkvp3HjMcfGEAB6FaB/LOxdL1/SSJnQ8hidXSmKLvBYZ0/hYB4QSDIGPt0DWp4P4lHqZqj+hIebT4GwShi4dq2gNVWjY5ErR0tAudJRCGDKgsikw9r56aIxCRCDKDHqtsnJ12a3Fpv0QEDamYcDSx7/Dg8gS+XSOPJUd0tpDu9zhF5Wq3CDotAj0I4aX6FGSdQ4gYvvbRPByV5mnEI3xuo2ZIOiaSXTaMbyT464aDTxBjP/kgo4uZ+fkGfgRqky33dFiHYxeh+EwV+xsZnfjyYvbeJ1sV+UYwLFyLEiudnc8IWVCop1Fw18N9aK1LHW3d9d3RpfN/Kjgg8EmhLkp7T9et+F9N6+9Dny8eJg18pbe6rij9nZg5JfDcLOprQZ49WTyXtcmt9V1t3YXlTbMWDI2moD6+oW/Dh6KpeuH9mw6Mtf5xXPvjw3cIXjqtx4Ky1HN7PzT13L316N/a/nO8L7/YLG5Sae1WpM2e1VNnwUThiytOezZ5SSdI/xp2eHNu9FohiA/HCUNWo1MU9wS4N83MynBnjqOVZ25bD6MI8KVirSSvcOJRLvDniPucHc2dNMuNs2irTer+WZev9Vzlp4rlYymXrXsmnloMjsUJxDrlIyxjCVb7o423wOEgcMQ8VCoLmkkOh1TvvHYABxkWqQnHgElDPWpaM+z+TaX5xtoQ68A4GjL32kxpO9FJfNIeZd0w+qYozDdkq1US+4hiOcYyb4tac0ErxkXpViAZcR9I7sEWYIi0dlD2WQdUZ2cxnAw95EEqgXUi3yUnU/ncWE0tvuaKoAslvZu+/FjO5vW6b9DBYSOh6UCk7nUkLhF9MVssQ6JnE84f5zwwX018rB8V6KcPMRwhyT964Mlkh4JRar1+q1bdw+wE+2/sP6pcaNddZ9+Y/tWd9+Mnzr4eejfBW7/Iuv2b7MW/P2l+WdL7RsKaqfsTwJ5S3wU9rCniYkvZkTl8HYXILvIRstlFL/WgpyFoXCvyfeg6abmIhiJKbbp03dEtMSLdtHKkAA/CZ7I0xAjPiUuBxwFor1k4uMFO6KLmNwRW6Itri9dQFMhRek4WvOvZHVf7LcS8bcrMHSg1BPiJ/FZ0dD7uLEvfB3FEXmKFZFjMpEnuS5szvACUuEWi0FHw2PnXzn4KnhamBQ5wcIFoUYRR+f/ZOQEKysAQhoR3mooseB4qsY4+WaOnA+lT27iwZ1s8vj/V3kVxxSASOz/DMf+5ULmyCdAJkeTeR/083C2LMvUC2I426nhXLNvk6Kk0FU+iT9Ljup0yvHKfw==</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>775896da-57e0-4cc6-93b1-46a2507766b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af047f9e-1258-4994-8f43-eaf1b473c71a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08030a44-7a80-4c60-8163-7718099efdc0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with LASP-CS without DST with ULC_Invalid_Scenario" searchProperties="true" id="bbfb8e13-85ab-40f9-b29b-9b60437a0859" disabled="true">
      <con:description>This case describes the scenario where a consumer goes to an online Retailer to delete  the rights token from the retailer, who has created the Retailer at the time of purchase.

This test case will verify that the Application Tier properly responses to a RightsTokenDelete invocation when the requesting node is a Retailer.

Expected Result :

It should allow API invocation for the &amp;quot;RETAILER&amp;quot; node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="9bc79557-850a-415f-b222-09430e57809d"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="c87973c8-5262-4b99-9466-138d35a8f9e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Create_Account_User_STS" id="dbac1635-69df-4d01-b9b8-9cd691fb02b8"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="f004d260-432e-4c42-ae19-59a97ef6aaab">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="fab3de1b-79ec-4aa8-93ee-cb9a25dff130">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

log.info rtDBinfo;

//def Val_DbRTInfo = new XmlSlurper().parseText(testCase.getPropertyValue("rtDBinfo"));
//def rtNode = Val_DbRTInfo.

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node LASP-CS" id="c4b93d51-1533-4af8-93cc-9d94ac3077ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdLLASP:CS"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create for LASP-CS" disabled="true" id="d08044e7-4bd7-4583-856b-4e015a51566b"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");


def RTCRequest = testProject.getTestSuiteByName("STS_Creation_Coordinator_Nodes");

RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials Created for LASP" disabled="true" id="0f2c79d4-8e0d-4a5b-9f86-f46efcd6230d">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId_2"))

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId_2"))

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML_2"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert_2"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId_2"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId_2"));
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId_2"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL_2"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL_2"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
testCase.setPropertyValue("DBrightstokenid",null);


</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="1ba06a4a-bca2-4501-adcd-2202355118ce">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:linked:customersupport");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request Without Authorization" id="97370d1f-aee7-4617-b7df-52f35b170fa7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="ee780062-2afb-4e88-b569-bf4440c3fe95">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="da615982-2bd5-4b99-afec-65d081873e3d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>23881</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>TestCase_Role</con:name>
          <con:value>urn:dece:role:userinterface</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-22 06:09:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>LLASP_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120299530</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024A30F1E07298DE05307991F0A00C9</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024A3086D59210FE05305991F0A7BA9</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_ef946466-08a2-4ddb-8d90-1faf02b96246</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1juR8twUVSsnVQN16CignjBN4QRUATkIsivPwNGo9nZl+88pMw03T1ruhfNmp+xcfTIAYhjGCVu4Ncl7rVBQhqa/T7ZIsie2epA2G0ZW2rbMtvWFu/1KBI3d426FMcplPw4MfwExeAE0cK7LaKv4b1Bpzvo0C801ds06ksYxSgzcnnBG/X86PnxoNr1tZFG/iAwYjce+MYRxoPEHMyBPB4gz4Fxg9R4+3kFWW0YvTlJEg4wzHyxoAk9z3wxgyP2E3vy+WnFg7lr+0aSRvBjTyt+bXzEZln2krVfgsjGSBzHMZzGkI8Vu/aPxlvtFgwtyd8F1zVr+IHvmobnFkYJSoaJE1h14NlB5CbO8TepCYzAy9QtmJstk+j4PxrY5wYVun/M9AQyio1W7BjELZkKdzCCvgnrC1V6bfz4pwZeQ7XI8ONdEB3jL+v/hgj6Z+gFIbRa8e1gN3D/nvGbar39hOZA8k0vjd0znJQsCQ0TxvVZBHduPnZjxD0rrlfdr+fxjWDQ/C8d+Yk94kSwsW8qw7k2jJP/p12PrbpmWRpeCt/GVm/k8bCz7ywVOUtmrjSil/MmPVGD1wrCo/MV1L3TH+uvPL3T6iOICy5ae7d3t8F4uO7rp7yYzbxpse0COE7342i44P3QXJ2Fgtcn2LgXH3P3TEw3oszzY9IapWpyEFfNJjfv9GupwIaF3+tB/Cz4cqHTc49xVpPUzptHR12++7s1ttKsIdsnRuAAVUbpEJmvh3iEb1MrDgmTX3uu8i7olFYrNs21BpJZl9BUZ6yzTU1+/TzT4xnKc43gpTpk+f+awmnOSIz7gi0HxQ69nQl8kyWJSwuWBZe5DTKJATb624MJYx9OzsEV6QxngKIIgGMZb8+PZXAQAbHgGUdml0s5ZwswZOzJEgVqNeBtGFnlMy7TuaWivPOZo1ni8rIVvXRT8BMZxFUw68i8yi85VeNlGQRXWy5zWzHfy3M5kxSdq6EEHJ+HhSXSCRRz1yQlSp5TpD6n0s16iezCZXycnLca78msLLLzkziXtm1O4YdA1VcmKaQothgfw6CmL5iHoGEI9wAKGY72BIWsHTJZW5ATTjUqm/ZskyVxKCtxxirVqcQanw2Xi+KzFiwjs9aRz3kNzK61MDVWmOCb9TA2VpQvqyDj7Cp4xGfW9AZEVvCsxl5rNeYzlVcXE0FWpYwHlY3jMy/ekhNnKzpns63kQw3sHxvDKvxK8NFzXz2bF+pUM0QBbI9LwmyrjulSrrEOMnvTzzhFH46CjYTSTIDCM4wCECAclEdD9WfAmFlS09ClSReOd0JwhE5Uk4lgdDgXOd5321N7NllR3O7Qm4nurG1YDiZ5JrlvH4AkQWtEOIphqTqmcr5bdKejxRq6kV4kE0ohum6fqqmrdLHmAq9nva/1xaiZ66aiTWfzxWpW5PnktO8XXvI+Zd6j+VDm7OkEwllsNjHcEBitz1Gs/r5HfNqpOKRqwJYZAMS9bfMuIjDzvr+S8F2VeUReILOZyK5YcQ5EsclLDKcoO8EhZqa4TBfERJZ4y0Nluuhr1attWIZDncKN1SbUSQHfaMCqkikdXrCVBdUcruFGmXjaMgFZuNz5BIGLofK+kzPblEsGWFI2Z9BbxNRSCSyMaTjE89GyixMnxfKGcxos2vmcPORTx95cDvbmgJqiP7w6uga8pfbAMQlRbFVTNF6VQf/6vuWytGirnnnMw+3RzDkN9awKDjSGVwUFX+QcB0ZXW6wBMo/1gt/LLF/F10AuG4gW5+3aiXV/4k41PkWkTR/ost+S+F85VlKs9syxEwsU8JVj/JVjPNidmlKfI2Kqy4bxKrMZkT8pveV4SIe4sh4fakxTwOzE9TpTv59po+aKuGQ9Z6+sVrTEOWzT3+lOe5swuFGYChweeqKrHji/2/Eu8lhWqIWLeRd8D09ZPK5NJMLn20khYHSUNpnjxj0WRbtDLo6zeXqWFsYoJi7O9rSis/3svYthkXihit7mrAjrwNSv35GvQ/JuvI5R7HHAPk3gm/Sap9s9NJPbsvwOS1xdQB9HI/mzjCstrtXaVa6DsNSCcQL9pPFWRpUSbpAioedaA/TlvK5pQLMsKxBtwLAc3RF4vIMTAg5wiqZJodu+ab0rii8Q2cDfueVepZi9fqz/DNA8DrbQiGDU+EOmsk51yVeR+gj8GGrBa4PC0Vvcp7s9guQ5oddl6Q5F0STLAJIV6C7bqE+CZOpPI7BLYPQgkOmvAlmFphu6sFTRH1oiTlAhTsY5TTzi5Wy8+DBFMjsqle6A7PSpqgCYlR5DEz1A0y0Kgzh5CZ2wEjO/PcbXZ7cTIx/LLR3iEjQDUbfgN5K+fUP8y8nIb6X/LT1ILbfULKh8SeSaVyTPjz7ZUNLgTgW8R9M3zHfXr4antNjXE913ss6ueSf0/cKDBDPSVNWlIkaVPxkvp5f0fE6rWvdKvRih9BiB4dgcminSfBctOEAfu2fA/kVt3zF/2fduf0aXJo4/T9CrekS0qFfLv9+0nqJRARKYJ9/ZWA/drcrN/3j9Mgdm6YfMM/STBZH1Wfdvcj3sgyCXY8b17XJVyuTLc3s/6DwwA5TVRZMmiB5zfxf/3d7Pxnu57lASxIptmsDfP6mXI+S1YZhmkPqJxDUqw+NYqzAnlxAOPp1+SVPp1I+LRx7/9uKxlsdz04FHo3H3df/u3HKrxpsQRcVuheW1kaMrNNrctx/G6AfAx0lK4IjB5L1MT3jffjH/anmo3Ff+vv0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_dcc514f9-37c5-4788-acc1-1de0688e072b</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024A3086D58210FE05305991F0A7BA9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024A3086D58210FE05305991F0A7BA9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024A30F1E06298DE05307991F0A00C9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024A30F1E06298DE05307991F0A00C9</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024A30CB8C62985E05307991F0A2429</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024A30CB8C62985E05307991F0A2429</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:linked:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024A30F1E06298DE05307991F0A00C9</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1422</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdbc9o6EP4rjPt4xlg2d09gxuWSMgFCcJKmeeko8hrU2JJjyVz66yuZS4GQHJo8MVrvfvvtarW7XAgcR47rCQGppJwVlnHEhJtLm0aWMpdjQYXLcAzClcT1veHAdYrIxVsTo9DvNI2fEDbK1XK1aqI6dsxyEDyZ9aCBTDvEIXKeGlWnXFWqQmTQZ0JiJpuGg+yKiRzTqd/ayC07bgkVG479aBTuIRUKW6kUkbEhtRRNYyZl4lrWYrEoLkpFnk4tByHbehgOfDKDGButi3VEuaO0tdEnxQAIRBEpEh5bF9aBzkUgXJ9OGZZZChtfwVu+kIUaltIJBJ1+MXa2EPRZyPNjGzPOKMER/Y11foYgZzwoeNGUp1TO4jeDsJEGNmFJTGKX2RfDOqR2JtABw1RgU8ywvcGaQAgpMAKFu0m/aXw579Zy09sUMxHyNBaHx3/jA2wOEU8gMMU2rA218wFPZKp1AcTtMxJlgs5hpIs1wQTE5jaBnA9VGKcQ0uWAClWgS6HZWfv0jo7rbHToFIT8yAXtXc4a5B5HGbTG5dnDKn7OLuPrUbXyEPAx4SW7djcf3zRzAvvKuWB3tevjUVHuimhtMRuiEQ0kq98Fl/2kO7TTb2H/CR5vksfv3yGtda88ENcYP/6QUU/2Sku/VE0XPR7d9fAPn33/8e2/q8HlZXc05O1RmgweqmHv6oHMJ7j27A/brH0/8C971CnFy8nzaIAr43AcTSf31Rtv/DDDt7Uw6WcRvpm/sO7SHt/MrlF7df/tseKtVl8XthdZfbhahINuZxPuEf9D2fbN+9nTLyBye9Rl0O8UeuqWsHy/mWkJDcwwV3UT3XyEBCaNlrbSvcPNVLujgavucH22kVP2Sqhe7VTqjo16XVQpoUqjYfeQV/vqNbZNZs3iiGKbs5BqX7rlrsvmfYIkdgWwAFJzzjPV6YTxDmIHS1zos4l6BJwJuOWqPdt1VElncZUwlsDzrxJ3nqal3wl/MQojLq/ZdeqFEtLDnlw66MkTIDShoBu3rmuhCltIlYsXPM9kZBfnuMggU6091V3Wdcr1iiVonESgmVoxD7IIisksyTNjifWvY2Iicumke5u/tjfjOv62TYHSCahWEDqWr6CuEU4MF2cbyNsBV/cD3sJ7WUD1w1L5lCklayaHn/6Wia6PXY147XbXb/tb2jvtf7D+qHFn4Pnjz9j+bPs/7Y8CfNz15xwPPhH14LNRq/r9pPlrS+udErSOq3/nKJjTPbfbRU2NfDUkWtu3+4KLL8VsPs/y11rTwzBV8JZ+DxZyLB9IpsbY6pY/A7N2KNZZO8OO+JHznfyQYiZnzJdYQqzaSyE/nrEk+iD0kthXfXF57gZ64FKlTsJSnpK1I7Xgasbv7sDEJVpPicfqZ8HT4O+NncDa86PiVDuipGyqT3pfWL1RF4QrWKomHU/3wU8BnHJ+KNwlecdFqoJ6yiS8/aWgR1jTwITwjMl+x8gF+2M15ylXCbh/lV7B5JN7t8rT/9/lTZqXAAH1B0DQHF9vZK5+Amy6N5o3Tk9M557dRVWnUe/k07m2ns4ItXfT+ZBd65X4tWQvT8c13voD</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>3da3a596-60fb-49db-a39c-5accac72acc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ddf013-2346-49cb-9e98-8e9ee04f5892</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10017_RightsTokenDelete_FUNC_RTL_with_Invalid_RightsTokenID without DST" searchProperties="true" id="db1e88aa-5355-4f77-a342-8a45e8560f03">
      <con:description>This test case is to invoke RightsTokenDelete API transaction for deleting the rights token. Verify that the exception for RightsDelete with invalid RightsToken.

Expected Result :

System should return error message

ERROR ID : Request:RightsTokenIdInvalid

DESCRIPTION : RightsTokenID is not valid

HTTP STATUS  CODE : 401</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="0ddb9474-0a81-472d-8843-e16ca5e3db58">
        <con:settings/>
        <con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="f1bb9df7-873a-4adb-bef9-b16626c0bb2b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Create_Account_User_STS" id="e5b38a91-da74-48db-802b-bc192e4eb5e2"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

//testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Setup User credentials" id="5f11bf18-7835-4b92-8142-04620437941a"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="7712631f-afb2-4697-950b-57e7baefc2bb">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Removing User Link Consent" id="c213d4de-18ad-4b04-990f-52a5a5bb7396"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with invalid RightsTokenID" id="aa2668b4-000e-4d97-ad69-4974da9cca55">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid","dece:"+testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","RIGHTSTOKEN_INVALID");
testCase.setPropertyValue("ErrorDataVal","1");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="43388284-5459-45e7-b153-47d5118ee988">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="de84a415-a17d-4cc9-9d9b-ae9ee3075ac3">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="1f54905a-1abd-4fc5-b172-deb80bc10809">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:144F3D75A2865D62E05307991F0AC46F</con:value></con:property>
        <con:property><con:name>accountoid</con:name><con:value>144F3D75A2875D62E05307991F0AC46F</con:value></con:property>
        
        <con:property><con:name>assert</con:name><con:value>pVdpc6JMEP4rFvtxCzkEiVS0imDcsDGXJOb4khqHAWcXZwgziMmvf2dQiZrjdZNPVjd9PH1Md3vIwCw1XY8xlHNMSWMxSwlzK25XKXLiUsAwcwmYIeZy6Ibe2dA1m7oL1ipKI+h3lUezZetxC9lqexJD1dINqHZs2FEnlqFPHCeKLb0lRBkrUEAYB4R3FVM3bFW3VNO8NgzXtFzTaXZs+0FpjFHOhG0h0tSVFagF6ypTzjNX08qybJatJs0TzdR1Q7s7G4ZwimZA6R0uI6oc5b2VPGxGCKI0hU1IZ9qhtiVzGDE3xAkBvMjRylf0kS9d0zuakIkYTn4otS6KAhLTivQBoQRDkOIXIPNzhviURg0vTWiO+XT2YRCGLg2raAFVaFjkh6JtQ9vT0BbCnAGVTYGxsjVCMcoRgahxMwq6yo/9qlapXueAsJjmM7ZN/hseROYopRmKVLYOawVtf4PvZKp3iKAbEJgWDM/RuWzWDEDEVtVEcH9TjcscxXgxxEw06IJJdNomvB1ymY0+ThDjXynQRnGWRsYgLVCPTH6z8/L+gowiOB/A/O7mPk2v9CfrNOlWADaFK0Zd2iW505R1Ey01fv0caWaSRvqLPWg9+7flVTQ+GvjaeZqcjGGOi3uqW44dOiwqT0ZtOxoXT2f6+OaSXcU3t+nx+UMCPRYep/HP04f+wUt5EiZMw8HJLXy+Puagdd85+RuEd0ERDvlkcSnKMo3Ox6cn5CIiSXbgZJPTeXbrjLLy4ndwwUyCg7NfXgatow64jWnm63579stJhmW3DmcD/zZv/ebDYvIHQb4mZRsE/cZAVAnwz4eZ5OBIjStRN5PDh3FEuNKTWnJ2uIUYdzhyRQ2XtGFZg5Zn2Xbb95wD3zrW7ZZudzrGQPd0z2uvh8wSxQ5En5IYS19y5C7b5nOAcOYyRCKUq3NaiEnHlE8s9gEHjYCMxCOghKFrKsaz8fcFUFDmHWq2EP9TWoYdQac0F0rjnPILcpF7MUf59ky2tmbyCEGcYSQHt+xrJhqbcZGLJzAveGo056BJUCFGey6nrFA9sDWGZ1mKJFJtRqMiRc1smlWZ0djy11QBZBV3dHxdvbYP49r9tk6BkImwFGAyliMkyojeWS7GOpCPA3Y2A16b94oIy4cl8slzDJdItj+9tonsj7pHPN8/Dv1wDbuW/gftryr3h154+R3dRz98NL5q4Ouuv+d4+I2oh9+NWvTvN9XfamqftKC22/21o2iON9yuDzWx8sWS6K3f7hMwmk/NYj4vqudqWS0tF+Y1+R403dRCBAuxxp6v6V9EtNqKttfNUAPfcV7ztyEWfEpCDjiaifHSqMg9jsQQMXkkBmIuLva9QLdcitRxtODv8fxUHLgS8ac3MHShlBPsS/FT0jx6rdg7tjb8iDjFjcgxSSQl74XnD/oCUmEWi01H803j7xl4z/k2s05yjYWLhpoUHH38pSFXWFcBENKC8KCvVIzNtVrh5M8Zcl+F3pipNnd9yuP/v+VVXLUAROIPAMOVfXmRufIJkGRjNa+cvtnOfcf2zIO23W+b1XZ2ltvZt9qDOilb6Hpv2G85G3na7fHefw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value>_2350f3e5-6bfc-401c-95c9-b410b77df403</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>144F3D75A2865D62E05307991F0AC46F</con:value></con:property>
        <con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:144F3D75A2865D62E05307991F0AC46F</con:value></con:property>
        
        
        <con:property><con:name>assertionUserId</con:name><con:value>144F3A4556CA78C4E05305991F0A0AA6</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:144F3A4556CA78C4E05305991F0A0AA6</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_32b77ae8-786b-4bc2-8089-0db602977cf0</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>144F0E592D0E0AE1E05305991F0A7E43</con:value>
        </con:property>
        
        <con:property><con:name>ErrorDataVal</con:name><con:value>1</con:value></con:property><con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>RIGHTSTOKEN_INVALID</con:value>
        </con:property>
        
        
        <con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property>
        <con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        
        
        <con:property><con:name>nodetype</con:name><con:value>retailer</con:value></con:property>
        
        <con:property><con:name>password</con:name><con:value>Password1</con:value></con:property>
        <con:property><con:name>QC_Id</con:name><con:value>23902</con:value></con:property><con:property><con:name>rcUUID</con:name><con:value>0</con:value></con:property>
        <con:property><con:name>RightsResTime</con:name><con:value>250</con:value></con:property>
        
        
        <con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:RightsTokenIDNotValid">
      <Reason Language="en">The rights token ID is not valid.</Reason>
      <OriginalRequest>http://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:144F3D75A2865D62E05307991F0AC46F/RightsToken/dece:urn:dece:rightstokenid:org:dece:144F0E592D0E0AE1E05305991F0A7E43</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#RightsTokenIDNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>dece:urn:dece:rightstokenid:org:dece:144F0E592D0E0AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>1</con:value></con:property>
        
        <con:property><con:name>rtDBinfo</con:name><con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value></con:property>
        <con:property><con:name>rtStatus</con:name><con:value/></con:property><con:property><con:name>SAMLassertion</con:name><con:value>nVdZd6pKE333V7g8j1mGyXklWasZg4rK4PjyLYQWUAalQdBffxuMRnNyzs39HjJ00VW9q2pT7H5BZuDTPYAQjBMvCqsy/1r7H0Ov220TdurtTmtdb6wtut4hO906aa9bJN1tt60NWavKCKVQDlFihslrjSYpuk5263TLoOge2e4x1HOzzaxq1RmMEQ6NtzxjrzzwQ9Qrj32tpXHYi0zkoV5oBhD1EqunA2XYwzt75hVT7e3lgrI8MH5zk2TfIwjr2YYW9H3r2YoC4oV42PNio57uOaGZpDH8ONNGr7UP3yzLnjPmOYodgiZJkiC7BN5jI8/5VXurXJ2hLYeb6LLmzDAKPcv0vbNZgFJg4kZ2FfhOFHuJG/whNEVQZBG6DnOrblGN8FeN+DygRPfDSA8gY2TWkWtS12Aa3MAYhhasTjX5tfbrZx28+BqxGaJNFAfoy/q/QYLhEfrRHtp1dM3siu7nEb8p19sLtHpyaPkp8o5wVNBkb1oQVScx3Hj50EOYfDaqlu2v5ujKMGj9l5a8EPc4MWzim8rwngNR8v/0675Xlygz00/hW5pNpUmsotwXO4vJgJ9Q8nK2HrpzUX0tIdxvvoC6tfpj/ZWoN159OA26nBa9i/FxlWzmo+HYWDfChm6HMn1QWqPTkDFJLuMVxxta8pGR0M4+H/nUzkaEEz/tTKZly+SUCtun4TCqdBR/ArPNRk5BkiP93Z4fGp5JOhQ6KB3W1IXDWF77MJ0uuivQdZtMPx+2w/RAbgKCluVhODGCdTRSN9oTWzFWvsJu5WA5SfpivAMqkF8/c7rPochrAE9lksX/iybZ5c3EvC24YlJs8OuZwDdFlvn0zHHgpDsgk1ng4J8tGLHO7uDuPKmbkSxQVRHwHOtvhaECdhKgpgLrKtxspuTcGfRZZzTDjkYF+CtW0YSMz5b8TFXfhcw1bGl2Wkt+ujoLIwWg0plzFUETZrxmCIoCoostV/i1lG8VXclkdclXcABeyPdnW+omUMo9i5abit6kl3ozXS1m2C6ehsHouDYEX+EUidMPki6vGV4V+kBbzi1aTLHveRjso8pyyt459fdwC6CYkfhMcFaMXaYYU3rEa2ZpMx5tiiz1FRVlnFpmJVWErD+bnj9rwbEKZwdCLhhgcqmFZXDiiFwt+sicN0NFAxnvlM4DIbPHVyCKSmYV7lKroZBpgjYdiYomZwIobbyQ+WhNj9y15B4tRs37BtjeN4ZThbkY4uehdrROzUPFlESwDmaUxWiu5TU9cxFlzqqT8eqyP4hWMg4zAqrAsirAgEhQpIbrz4IhO2uO916X9uBwI0YBdOOKQkWD3fGckx2PGTuT0bzJb3btieRNGNN2Cdm36C2zA7IM7QHlqqatLQmND71zazyYLqAXL8/JqKlSLa/TrGhzTHM+8tv2+2I5HTzlS0s1xhN9Op+c83x02HbOfvI+Zt9jva/wzngE4QRZTwRpiqzR4Zvc8n2L+bTRSNisAEdhAZC2jiN4mMDs+/ZCwndNETB5gcJlEjfnJB1I0pMgs7yqbkSXmljSLJ1SI0UWbB+X6bRcaH5lxbE87hRpzlf7JS2SKwPYZTC1IYiOOm0+9RdwpY58Y5aAbD/bhBRFSnv1faNkjqUUDLDlTGfxW8RWUhlMzfG+T+aDWYukDqrt9/UumDK5Tu/yseusTjtntcNNWd69OksD+DPjjmMypti8ohqCpoDO5X3LFXnKaL4V5Pt1YOW8gXtWOkcGK2iiSk5zngeDiw0ZgM7R8ixsFU4o/SsgV0xMi+N64aJlOPLGhpBi0qZ3dNmuafJfOVZQrPLIsQOHp9FXjgkXjglgc3iSOzyFmi1uj+aZw0rCQW3Phv3unlQXw12FfRIJJ/H8xjjsZMbgaU6dsra7Vefzrsy73FO4WbrMOmFJ82ypsL9rS56248NWwz8pQ0VtTj3CP5FbeMjQsDKSqVBgkrNIdOP0iQ1WXnA+Mw16Gkz09ChPzQGiTu76MO9m28l7iyBi6dQ8t1dHVVxE1vLyHfk6JG/Gyxgl7gfswwS+ai89XW+hlVyXxXdY5qsi/jiayd91XGHx7Pqm3NrbF2IQJTBMam+FV6HheilWep7dw1/OyxpQHCnwrS4pkFSHpkWBbJCUSAKy3e0yfFO4ir0Lii8QuSjceMVZhZy9fKz/DtAKegiGNozrxyi1XIhqf4lY1KsqhxpWIVGIoBFhuUzyTLtDMzTTbVGg1ca/xLbYFcVmt9EGHRaL3lGUjMNxDDYJjB+lcvNBKmvQ8vYeLPR0ISoQVhUowSU5mMc08anno/kcwhQr7rgQvT260WkSyAv2PiwAE0Fkpz583rv7skAEuvyl66aFSmtRwFLt/DG/r8+upcB7bK/YgIpkWIjbCb8R/fQ1k98yZr69HFzDg9T2ClGD65rEnnVB8vjoky4FT25cKVK6Yr5t/Wp4CEt8zeh2kn30rBvjb3ciLKmx6Hq7NuRgPh+e0+MxLVvQLgRljMMTFEHShA6tFKvCkxHtYEjcQhA/EuQ31F9Ovtkf8aWJG+oJfpsDTJhqufzBbUyHqLiNyZjw+U+veg9H4rolME++s3E+vrQViP96r7N6VrEPmyf4TxbF9me7vol1dw7OsxhfXugUq0J+n/7ACivCYT08wqL4Pvh3Ab47/NF4K/INS4LZtE4T+Ocn1WI2vdZMy4rSMJH5Wmm4n5clzuS0h73PTb+FKQXwx40mR3+80SyUoY4nV2DWbnu9f99c90q6WBB7Ia/E8lrL8eUcHx46d/P5A+C3I5oXxb+N6MdM3n4z/265q+nX9+HtHw==</con:value></con:property>
        
        
        <con:property><con:name>SAMLExpDate</con:name><con:value>2013-08-17 06:13:31.0</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150422_1429701866485</con:value></con:property><con:property>
          <con:name>useroid</con:name>
          <con:value>144F3A4556CB78C4E05305991F0A0AA6</con:value>
        </con:property>
        
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c78d7a82-eff5-474b-919d-72189f5aac98</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a109b8bf-ea46-4eb8-aff7-62f80ec70742</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93574b1e-d76e-490f-9a69-0cb00b9a6262</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10018_RightsTokenDelete_FUNC_RTL_with_Invalid_AccountId without DST" searchProperties="true" id="23019b06-c59e-43b5-bc5c-17b7f2227378">
      <con:description>This test case is to invoke RightsTokenDelete API transaction for deleting the rights token. Verify that the exception for RightsDelete with invalid AccountId.

Expected Result :

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Reset User Credentials" id="24aaf6de-5894-4e8e-9bc6-5a7bc45b3a9c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="86f3eb20-9aa4-491f-af23-3def3e986812"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
testProject.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRET"));
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Create_Account_User_STS" id="8f0f1e18-1d24-48f1-90ed-b139a410a558"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="2836c8ab-56ad-471c-8797-b054b7acf469">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="bf575a7a-64c6-4608-9a38-534d634eaaa7">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Removing User Link Consent" id="7d09a597-3a69-44b9-8952-5f9c6d91306e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove ULC Policy")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with invalid AccountID" id="ffa72fc9-456c-4d80-a7f1-1089ec92e656">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

//testCase.setPropertyValue("AccountID","deceappp:"+ testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL")+"7001");
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request without Authorization" id="7ca306fb-a44c-4e65-a334-74da268ba466">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="9f294594-ce13-4154-92e7-0b01f2b8d141">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="075c228b-1261-492e-b82f-f22473b94f78" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>144F0E592D2F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_c198d75c-cba7-46b1-833b-60e87e7ac2ed</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>144F3A4557B178C4E05305991F0A0AA6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_6723afb8-1b82-42ef-8888-3f3933260ad3</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>144F0E592E130AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>24219</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>114</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountNotFound">
      <Reason Language="en">The account ID was not found.</Reason>
      <OriginalRequest>http://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001/RightsToken/urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#AccountNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6pKE333V1jux5ThpkatnVQN16CichEvL18hDBdFUAYE/fVnwK3R7Ox9cr5UpZJpuntWdy+GNT+RtQvpPkAIJmkQR3WZf238r/NCM5a77japdZdutmjoNrv4p8m4TI9h6A5pOUyjLiOUQTlCqRWlrw2apOgm2WvSHYOi+2Sv3+o9t7qdVaNuwgTh1NjlmWzUi10YoX617WsjS6J+bKEA9SNrB1E/tfs6UEZ97Nm3rpgabz8vKKsNkzc/Tfd9grCfHWjDMLSf7XhH/CQefH46qK8HXmSlWQJ/7emg18av2DzPn3PmOU48giZJkiB7BPZxUOD9aLzVrsHQkSM3vqw5K4qjwLbC4GyVoBSY+rFTB6EXJ0Hq7/6QmiIoskzdhIXdtKlW9KNBfGxQoftmpgeQCbKayLeoazINujCBkQ3rM01+bfz43gQvsUZiRciNkx36tP5vkGB0hGG8h04TXSu7ovt+xi/a9fYT2n05ssMMBUc4Lmmyt2yI6tMEukExChAmn4Pq1fjrBboyDNr/ZSQ/iXucGDbxRWf4wIMo/X/mdT+rSxbTCjP4JnlOe7qDOTmbWmvLY8fusWuOiMxX0GsF4d75Auo26l/rz0S98epXkBG1CtZSh6ngH90BF6sCOrrckPPnRXdKbagOTxjQXvjEE0Pzi9YLhPlWcd2oG5k876HOHFkqBwkVQXFcO1m2DqgFm7id1SSQ57msd59QkmUqHLdfJMtcmLQsbPb7PQcZHbi9c2iOZ6ce05mIppYzO8uidNls206a1VovXbPYoFOQz0VaX/hAtF8/arqvoaxrCE9VkeX/izbZ463Uui248qRw8euZwjdFlvnszHHgpHsgl1ng4d8NGLPe9uBvA6mXkyxQVRHwHBtuhJECthKgZgLrK5xpKgV3BgPWG5s40KiBcMUqmpDz+ZI3VfVdyH3DkczTWgqz1VkYKwBVwZyvCJpg8pohKAqIL7ZC4ddSsVF0JZfVJV/DCXih2J8dqZdCqQhsWm4repte6u1stTCxXTyNduPj2hBChVMkTj9IurxmeFUYAG05t2kxw7Hn0W4f15Yz9i5osIcbAMWcxHuCs2Jsc8WY0WNesyqb8WhTZGmgqCjn1KoqqSbkA3N2/ugFxyqcsxMKwQDTSy9sgxPH5GoxQNa8HSkayHmvCh4KuTO5AlFUMq9xl16NhFwTtNlYVDQ5F0Bl44U8RGt67K8l/2gzajEwwOZ+MJwqzMUIP4+0o31qH2qWJIL1zqRsRvPtoB1Yizj3Vt2cV5eDYbyScZoxUAWWVQEGRIKyNNx/FoxYsz3ZBz06gCNXjHfQT2oKFQ+3x3NBdgNm4k3H8zbvbl+mUjBlLMcn5NCmN8wWyDJ0hpSvWo62JDQ+Cs6dyXC2gEGyPKfjtkp1gm67ps2z2YKPwxfnfbGcDZ+Kpa0ak6k+m0/PRTE+bLrnMH2fsO+JPlB4bzKGcIrsJ4K0RNbo8m1u+b7BfHI1ErZrwFNYAKSN5wkBJjD7vrmQ8F1TBExeoHC5xM05SQeS9CTILK+qruhTU1sysxk1VmTBCXGbTsuFFtZWHMvjSZHWfLVf0iK5MoBTJVNbguips/bTYAFX6jg0zBTke9ONKIqU9uq7q+SerZQMcORcZ/FbxNYyGcysyX5AFkOzQ1IH1QkHeg/MmEKnt8XE91anrbfa4qEs716dpQFC07jjmIwpNq+phqApoHt53wpFnjFaaO+K/XpnF7yBZ1YFxwYraKJKzgqeB8OLDRmALtDyLGwUTqjia6BQLEyL43rho2U0DiaGkGHSZnd02axp8l85VlKs9sixAwdU8JljwoVjAnAPT3KXp1C7w+3RPPdYSTioL+Zo0NuT6mK0rbFPIuGlQdiaRN3cGD7NqVP+4m/U+bwn8z73FLlLn1mnLGmdbRUOti9SoG35qNMKT8pIUduzgAhP5AYecjSqjWUqEpj0LBK9JHtid6tgdz4zLXq2m+rZUZ5ZQ0Sd/PVh3ss30/cOQSTSqX1+WR1VcRHby8t35PMheTNejlHi/oB9OIGv2kvP1htop9dl+R2W+bqIP45W+ncdV1oCp+lWrv19KQZRCqO08VZGlRqun2GlFzh9/OW8rAHFkQLf6ZECSXVpWhTIFkmJJCBfej2GbwtXsXdB8QkiF0duUO5VytnLx/rvAO1dH8HIgUnzGGe2D1HjLxnLftXlSMMqJI4QNGIsl3sUzVAkI3B0l2pTZJdvAQ5QLVHkyTZPgk6jPo7TSTRJgJvC5FEqtx+ksgbtYB/AUk+XogJhVYFS3JKDdczSkHo+Ws8RzLDiTkrR26db3TaBgt0+hCVgYhc7WQif9/6+ahCBLn/ppmWjylo2sFI7f6zv87NrK7CPE5QOqCyGhXic8AvRz1wr+a1i5svLwTU9yJygFDW4r2kS2Bckj48+6FLy5MaVsqQr5pvrZ8NDWuJzRbednGNg3xh/uxNhSY1F19t1IAfr+fCcHY9ZNYKXUlAmOD1BESRN6NDOsCo8GfEWRsQtBfEtQX5D/Wnnm/0RX5b6kZ7it3mHCVOvlt+4jekQlbcxGRO++O5V72FL3LcUFulXNi7El7YS8V/vdXbfLv2weYr/5HHifIzri1x3++A6y+MriLxyVcrv0x9YYcc4bYCPsDi5T/5Vgq82fzTemnzDkmI2rbMU/vlJvTybXhuWbcdZlMp8ozLcn5cVzvS0h/0Pp9/SVAL4142mQH+80SyUkY5Prp3VuPkG/+7cDCq62BBHoaDC8too8OUcbx55d+fzL4BfHtG8KP7tiH6s5O038++Wu55+fh/e/gE=</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-08-17 06:13:31.0</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429701882971</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>144F3A4557B278C4E05305991F0A0AA6</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=</con:value>
        </con:property>
      <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>8da6d6a8-9e60-47b2-ab72-72e5af24943b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0118cddc-8c09-4b3e-b076-5af86c9404c7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
  </con:testSuite><con:testSuite name="R1_RightsTokenDelete_Policy_RTL_TestCases for Coord-2293" id="46b63a09-90d8-4fb4-a26d-e98813df4d99" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10001-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User Content PG" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="39af89e2-5250-4784-948e-b4397684ce7f">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="calltestcase" name="Node_Setup" disabled="true" id="33645130-e760-4b22-9eb3-f069cb53e0ff"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1faba15c-dfed-4b9b-a263-dc0bcbc3b4d6</con:targetTestCase><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_OID</con:name><con:value>${#Project#Node_OID}</con:value></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep>
      <con:testStep type="groovy" name="Reset User Credentials" id="0d37ca86-f887-41ac-b4af-8ba7b35a9f09"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" id="474add65-727e-4690-b77a-ea6f09198bf7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Create_Account_User_STS" id="b38221b2-ee4c-45ae-b6c2-00823e7624a9"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="4ec14c84-e6b4-4c48-ae5d-95fa130089cb">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");
rightsLockerID = testProject.getPropertyValue("rightsLockerID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);

testProject.setPropertyValue("RightsLockerID","urn:dece:rightslockerid:org:dece:"+rightsLockerID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Account and User Status- Active" disabled="true" id="7398b41a-5259-49f0-be4b-14007dca925c"><con:settings/><con:config><script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;

//accountID = testProject.getPropertyValue("accountOID");
//log.info "accountID-->"+accountID
//USerID = callingTCase.getPropertyValue("useroid");
//testCase.setPropertyValue("AccountOid",accountID.toString());

//UserSetStatus = callingTCase.getPropertyValue("UserStatus");



assert myAccount.accountSetStatus(testCase.getPropertyValue("accountoid"),"active");
assert myUser.userSetStatus(testCase.getPropertyValue("useroid"),"active");

//log.info UserStatus.toString();

//testCase.setPropertyValue("UserStatus",UserStatus.toString());
//callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="Create new RightsToken" id="5be232da-e2f1-4bd0-af6e-a596b751c549">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTGRequest = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("RightsToken-Generation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
log.info rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTG = RTGRequest.run( null , false )
			assert runnerRTG.status == Status.FINISHED;
		}
		else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="fbe12afc-f8ae-4094-a476-7afcd67b89e0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="5a6f8b07-43e3-47f2-9331-b7ccd112d762">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="3ced905f-5dc3-4e42-b03d-27357493e4f5">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="b158ec6e-540b-49c8-9dea-fda9eceafd3a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:G" id="86c1d3f8-866a-4c67-abf0-3ea1818b9778">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:g");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="a9f61506-19b4-4ef7-9b60-aeffa45c1d95">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["G","PG","PG-13","R","NC-17","NR","M","GP","SMA","X"];
ratingArray  = ["G","PG"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request" id="0bc7194b-5bc2-454d-b437-3f5b224fcf0e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="64cb5fe1-c533-4d0b-94cf-94879b9c68b9">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="c529bd72-c20b-4d52-987f-5c753fbc6249">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="a8b364f5-f0ce-4584-8b79-fe34689ca8ea">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">102696949F770198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZbc+I6DP4rTPaxE5ykXJJMYSYFus0s9EJou9uXHeOI4HMSh8YOpP31xw6QBXo5bPuUsSJ9+iTLks44TmLL9TiHTNCU1YokZtwtpR0tz5ibYk65y3AC3BXEDbzR0LXqhou3JlrN73e03wZuN+ypPdUBGrbeMO1THdumrU9xo+kYuAnW1JCqnOfgMy4wEx3NMsymbli6ZU/MU9cw3aZdN06tR612DxmX2FKlLq3WpAre0eZCLFyEVqtVfXVaT7MIWYZhop+jYUDmkGCte7aOqHSUdTf6pB4CgTgmdZIm6Azt6ZyF3A1oxLDIM9j4Ct/zZSDDQVIn5DT6plW2EPpslpbHHmYpowTH9AWr/IxAzNOw5sVRmlExT94NwjQUsA4F0YnZYN80tE/tSKA9hhnHOp9jc4M1hhlkwAjU7sZ+R/t23K2VppMMMz5Ls4TvH/+OD7AlxOkCQp1vw9pQOx7wjUx1z4C4PiNxzukSrlSxLjABvrlNIMdD1W4ymNFiSLks0IIrdmiX3sFxnY0+jYCLz1zQzuWsQe5xnEOX//Q8+/q2Mb8x0fxlbFw3bulicvlrSfxOSWBXuRRUV7s+HhRlVUQbeG42szsLoWVwe17E39FVe7W0i4eTeDC4u20s8Y9s8hLGC9vpRcOHkwcneolHw++OcTkZTNIk7J83eSFlz05rcPVr5LSvvSfrRxryG/vu/vHyCflWcvkQ+Z45HNwH/b4IUjHgj4/Du8t+O+6xlhM1J+OLG++haf5YIX94l16Z0WUw9/tsdXIufk3t6DZORsNs1KnC2eG/L9u++SCf/gNEbI+qDPx+7ULeEhYfNzMloaE+K1XdhWo+XAATWldZqd7h5rLd0dCVd7g+m4bVclq981av3TbMc3tgNE+NtuOYF4bX8k7NbZNZszig2EvZjCpfquWuy+ZjgiRxObAQMn2Z5rLTce0DxD4WuOazsXwEKeMwSWV7NldtyAteGLxI2i+CNkA0nyOWg1a7SsU1u868mYBsvye39nryGAhdUFCNW9U1l4XNhczFE17mIjbrS1xnkMvWnqku61oNu4k4TRYxKKYoScM8hvpivigzg/j6a+mY8FI6HkzK1/ZuXIf/timQOiFVClzFcg7yGuGN4dLYBvJ+wM5uwFt4Lw+pelgynyKjZM1k/9efMlH1UdWI1+sNgl6wpV1p/4X1Z437Qy+4+Yrt717w2/wswOddf83x8AtRD78atazfL5q/tkQflCA6rP7KUbikO263i5oc+XJIdLdv9wnXn+r5cpmXr7WthmEm4ZF6D8iwUAAkl2PseZL+CwxVKOionaEifuC8ku9TzMWcBQILSGR7qZXHI5bEALhaEn3ZF4tjN9A9lzJ1AgrxlqwXywVXMf5wByYuUXpSfCM/qzQL/9zYG1g7fmScckcUlEXqpPaF53fqgqQSlspJl2a74G8BvOV8X1glueIiZEFNcwHv/6mpEdbRMCFpzoTf10rB7lgteYrnBbh/lF7BlJO7WuXp/+/yOi1LgMgRJfVLfLWRueoJsGhnNG+cvp7OTsO5aLcM09mbzlarfVElZY9d95X4tWQnT4c13v0P</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_0a748b8b-ee48-4183-a818-ba4590a5e2b0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>102696949F760198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_0c31da58-1b91-49bd-8f1e-3259ebb4f578</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>G</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:102696949F8C0198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425128664290</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">102696CB6C7801B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2015/03/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt" ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt">         <ns4:SoldAs>                     <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>                      <ns4:ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ns4:ContentID>         </ns4:SoldAs>   <ns4:RightsProfiles>                       <ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd">                                         <ns4:CanDownload>false</ns4:CanDownload>                                         <ns4:CanStream>false</ns4:CanStream>                           </ns4:PurchaseProfile>                                                                </ns4:RightsProfiles>      <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>         <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type">                               <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                          <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                           <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>                 <ns4:Preference>3</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>                 <ns4:Preference>1</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:PurchaseInfo>                       <ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID>                   <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction>                       <ns4:PurchaseAccount>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</ns4:PurchaseAccount>                       <ns4:PurchaseUser>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</ns4:PurchaseUser>                             <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>            <ns4:TransactionType>urn:dece:type:transaction:category1</ns4:TransactionType></ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>102696949F8C0198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>3089</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-02-10 06:53:51.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>102696949F8C0198E05307991F0A267F</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>102696949F770198E05307991F0A267F</ACCOUNT_OID>
      <USER_OID>102696CB6C7801B8E05307991F0A6A31</USER_OID>
      <RIGHTS_LOCKER_OID>102696949F7E0198E05307991F0A267F</RIGHTS_LOCKER_OID>
      <NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>102696949F760198E05307991F0A267F</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>transcation</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>urn:dece:type:transaction:category1</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>102696CB6C7701B8E05307991F0A6A31</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2015-02-28 13:02:50.875</CREATED_DATE>
      <CREATED_BY>C0CEF8E08CE1C7D6E0401F0A0599120B</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2d3280d8-cbcb-4601-ad6b-531b3bb0d526</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1aacd078-f82e-4ac6-95a4-64b76074897b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d02cbf45-be6c-4f71-b5c6-b1f5222aa12f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e4d11a8-0f9f-4fec-887a-5d897a4da1eb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d06cc2a5-cd21-48c3-b8a3-286dee441adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14f85cc5-2e55-4974-b8d9-7f97f34b1d3d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39a81fb1-f068-4ffb-831b-5e22d42733bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10002-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - PG rating - Full User Content PG-13" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9818a6d1-e472-475a-bc10-cba35818e115">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="094b595a-0108-47b6-8b91-d58417436824"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="e4914a5a-dfa5-4d9c-b6c8-133672b5d2c5">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="3ab0c9a9-5778-4295-ba43-e4f8b00ab448">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="c16139dd-a598-4b38-85d9-a266b57d424f">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="7f2778a1-630f-462a-80b7-44954d74a205">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="2e050972-e022-40db-8dfa-6e71db4b4ce6">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:PG" id="a221d283-70f3-4bd0-a0cf-7110cb41835f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:pg");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="a862da2e-aed6-47e9-bdc1-ee2c96d135bb">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="793a2dea-029d-4b97-8637-92a4db13218c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="8efff6e7-e6f8-484c-8f2f-92a7c9f0bf00">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="d6356815-10f8-468b-9d33-d6b5668c22f7">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="eab67046-b17e-4183-a500-dbbbeb8ced58">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="9d939089-1135-4834-93df-97086192b6f7">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value>_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:pg</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C56A85590A67E05307991F0A8FB0</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDB826291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value>urn:dece:streamhandleid:org:dece:9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C56A85590A67E05307991F0A8FB0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2760</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>32124eb2-15b7-4c5d-b484-cb5507c7d069</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db624a0d-7db3-45e3-a2a4-e3eaa20c7d25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10003-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - PG-13 rating - Full User Content R" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="87bd872a-6764-4511-bd28-1f7527b72536">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="30ed2a2b-391d-4550-ac69-81c42d89fb7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="26173233-4928-4a60-b822-209e136c9a08">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="3ab43cd5-f37c-4b1f-adc3-2b2c557c95de">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="aa071a02-6c66-4d7d-a62b-368cdd3c1c4f">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="49cbeee8-c0d2-4b94-810d-7b3cae3287bd">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="72982362-e2e2-4018-845d-5c980cbf3bba">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:PG-13" id="68d19c30-b5c5-43dc-af88-c15bda17ba18">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:pg-13");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="79755e0a-e112-47e9-98c8-a37fd2ce74f6">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13","R"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
	case "R":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="de3d97d1-0942-4f91-b9b8-b354b01c1567">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="e1f5cb29-b602-4cd2-af7f-0c8a23decba6">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="8a9e3536-be09-425e-93b1-c6270209300a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="2186863d-e535-4aa1-bfc8-3a11c56768e9">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="48053c3a-d10f-47c3-825e-5f4b9b6a6aba">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value>_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG-13</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:pg-13</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C57142070A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDB826291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value>urn:dece:streamhandleid:org:dece:9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C57142070A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2089</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>48ecba10-47cb-4c2d-90bd-760171b78c23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>094f46cf-42b2-4ef6-99fc-44b5c4774eae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10004-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - R rating - Full User Content NC-17" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4a692d4f-4f51-499a-bfc6-9389d136b4d6">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="4fe52bf7-9395-4458-a7de-6fb38204a6ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="c2f06c51-2c70-4bd3-800a-c9d1c09873b0">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="53aab0e0-e52d-4c70-8882-1d1d5bce8137">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="9cb2f5fc-40c2-443a-9f29-9c9bf6ef4070">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="49fe88c6-5034-464d-ba8a-ffed3e08e6ee">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="0918302e-402c-4dbb-8f9c-2ca9f105ef22">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:R" id="2fe3671e-2a5b-4850-b465-a2d231e072d4">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:r");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="8d9a755b-9476-47a5-872c-a247e8bfbd32">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13","R","NC-17"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;	
	
	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="d53417c5-b366-47a7-9b19-2ff042279eb2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="205bb597-208b-4163-a40c-1cf7338dd1ec">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="896c81c9-eade-475f-acc5-94edd42d1b82">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="f4f41b9e-477c-4ffa-b897-3e6f36041f5f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="e61aeec3-45da-4b17-9cc6-b3a45308f0f3">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value>_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>R</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:r</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024BB84213E5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDB826291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value>urn:dece:streamhandleid:org:dece:9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024BB84213E5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2948</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1db5834b-7c99-4003-a5d2-c058a8ae2bf4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1a23f840-694c-48cd-9e23-6c8f46619e2a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10006-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User - CID Rating PG" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f9c918ff-f59e-43ec-8533-183a2161b1e4">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="6d138008-d5bd-414a-9f4a-4c46aac7b283"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="1cdcae32-5cd1-4fda-a72e-02f1b14fd1d8">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="01feb0f8-d69d-4014-9a01-5d4a0103e9b4">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="1b95e63f-76eb-4610-8111-4ef74277abfe">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="451b3a9d-3e01-4f74-b7a1-176169a2e297">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="a5d2096e-0416-48c6-99d7-016ac820a909">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:G" id="c415414d-610c-427a-a55d-a6c6a7c1f0f3">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:g");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="e348cc8f-10e9-4a6e-b625-9f686c0d5592">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["G","PG","PG-13","R","NC-17","NR","M","GP","SMA","X"];
ratingArray  = ["PG"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
		testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;

	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTDelete","RatingPolicyExists");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTDelete","AdultContentNotAllowed");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;

}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="84c24119-7ed4-46c7-a320-e5587e40472b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="ef12d847-7cfb-41b2-858a-80013fba3a0f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="b5dbeb23-d28c-4259-b7b7-9719dd55a5e7">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="ed5d862d-8136-4e23-96e9-ae5befe1eb68">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="f3432c5f-a202-468b-8942-0bda9a18968a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value>_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>RatingPolicyExists</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C571423F0A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDB826291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value>urn:dece:streamhandleid:org:dece:9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C571423F0A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2819</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>107ae1fb-b9a6-48a2-b82e-57a9b00fcbc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>51958f09-bdb9-45f6-a890-dc52ebef5bc6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10007-RightsTokenDelete - Policy -RTL - BlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f55da3fb-c91f-4c5b-9b87-07fe6ddcaff8">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="c7a0a0b0-0dad-427d-b59f-247d389d2756"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="d0d76c95-b87d-43bf-944b-e61ff41f8682">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="48b9e22d-9cd5-4a08-98f6-398c634b060d">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="9220aa5c-a048-49d0-adb7-1caf46d776fc">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="9a4ce738-bafe-4bd2-86d2-b9afa8f94cec">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="ded5f990-b3c2-4007-a0f7-d75f03ed7df5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="98c74a24-60b7-4375-b924-a1383244de05">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["NR"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "NR":
		testCase.setPropertyValue("expectErrTypeRTDelete","UnratedContentBlocked");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;	
	
	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="f006cf31-5e3d-4946-918f-2636a2c96cb0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="53cf6137-93f5-47e4-8545-6107a507d193">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="af0ac2bc-6f3f-4de1-882e-bdf7a3592234">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="71cc33bc-869a-49b6-9568-b2351ddd2e5d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>1024BB8420DA5837E05305991F0A6FF9</con:value></con:property><con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        
        
        <con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value></con:property><con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        
        <con:property><con:name>assertionAccountId</con:name><con:value>1024BB8420D95837E05305991F0A6FF9</con:value></con:property>
        
        
        <con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1024BB8F1491583BE05305991F0A1D5B</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value></con:property>
        
        
        <con:property><con:name>assertionUUID</con:name><con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value></con:property>
        <con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property>
        
        
        
        <con:property><con:name>counter</con:name><con:value>1</con:value></con:property>
        
        
        <con:property><con:name>DBrightstokenid</con:name><con:value>1024C572C36A0A85E05307991F0A9453</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>expectErrTypeRTCreate</con:name><con:value>UnratedContentBlocked</con:value></con:property><con:property><con:name>expectErrTypeRTDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>expectErrTypeStreamRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property>
        
        
        
        
        
        <con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property>
        
        
        
        
        <con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property>
        
        
        
        <con:property><con:name>nodeaccountid</con:name><con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value></con:property>
        <con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>retailer</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property>
        
        
        
        <con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property>
        <con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value></con:property>
        
        <con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value></con:property>
        <con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_node222259_RetailerNode</con:value></con:property><con:property><con:name>policyBeingTested</con:name><con:value>NR</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property>
        
        
        
        <con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:rightslockerid:org:dece:1024BB8420E15837E05305991F0A6FF9</con:value></con:property>
        
        
        <con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property>
        
        <con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:highdefinition</con:value></con:property>
        <con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:standarddefinition</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:portabledefinition</con:value></con:property>
        
        
        <con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property>
        
        
        <con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property>
        <con:property><con:name>ratingBeingTested</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rcUUID</con:name><con:value>1</con:value></con:property>
        
        <con:property><con:name>rightslocker</con:name><con:value>null0900</con:value></con:property>
        
        <con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>4511</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:UnratedContentBlocked">
      <Reason Language="en">The user does not have permission to access this content because it is unrated.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:02A20034C3CB4BECE05305991F0AF243/RightsToken/urn:dece:rightstokenid:org:dece:02A20F865ED8171EE05307991F0AB678</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:UnratedContentBlocked</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property>
        
        <con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:1024C572C36A0A85E05307991F0A9453</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>1</con:value></con:property><con:property><con:name>rtDBinfo</con:name><con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value></con:property>
        
        
        
        
        
        
        
        
        
        <con:property><con:name>rtStatus</con:name><con:value/></con:property>
        <con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAMLExpDate</con:name><con:value>2013-10-03 09:23:25.0</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property>
        <con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>null:null</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150228_1425120850745</con:value></con:property>
        
        
        
        
        
        
        
        
      <con:property><con:name>useroid</con:name><con:value>1024BB8F1492583BE05305991F0A1D5B</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ae92bbbb-42ba-4f11-87d5-19ca2354a82c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dc4efb97-4b9d-4c79-9223-1e7f0bd3fc3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10008-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - G Content PG" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="703f9130-3a08-413c-a2a9-0b362b081cec">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="da5e1a6c-223d-4300-ba7d-15435a088dfa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="0382c3be-d58f-43a3-9142-c72329648abf">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="54edb209-1138-4ac5-a88e-3b2dc3a6ae12">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="8a463014-c24e-45ee-b1c8-66697507e6f0">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="883d317e-6431-4900-bc9e-0eb1e4e3b463">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="f6374bc5-5829-4b4c-b438-1c1d7f26477a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:G Rating Policy" id="f421e863-bad1-494a-92f7-bbc718286d13">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:g");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="e66aec2a-52b0-4e24-bbbb-ea3cfb8aed9e">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="275c208a-8109-4d6e-825d-744d868b8a0d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="107da4f9-6eff-455e-a776-4c72eb4a1d83">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="8d480fc1-788d-45bb-91dd-2b5aa62a1caf">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsCreate if necessary" id="7b4d0b02-ecca-4df8-bc4a-d6ac9c76634a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Set CID's content rating to each of the US:US:MPAA ratings");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="b5b5b335-bb9c-4cd1-9a44-93e953dec551">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1024BB8420E15837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C572C3730A85E05307991F0A9453</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">G</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C572C3730A85E05307991F0A9453</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:RatingPolicyExists">
      <Reason Language="en">The user does not have permission to access this content because of its rating.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:02A20034C3CB4BECE05305991F0AF243/RightsToken/urn:dece:rightstokenid:org:dece:02A2066504FD5E9CE05305991F0A7F5B</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:RatingPolicyExists</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1992</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fac7fae5-5a63-4e8b-b131-1be84c2e8ec8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bdc106f-1aef-468e-9315-7136e529c272</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10009-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - PG Content PG-13" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2f54171c-1559-4c3e-8018-b47d565ca1da">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="115e90b4-72d8-4159-99d2-54d732bf091f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="ff7fb9aa-6040-4692-9320-40ce03381e5f">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="202202f4-f088-4a34-9d04-0df61ed5dfab">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="b49e44f3-aa69-4591-bf08-eecedc98c4e1">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="67a0b896-370f-4782-832b-1569bc3b8c6d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="f2186d31-3f47-48be-bf82-fd30f8c82683">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:PG Rating Policy" id="5adfd159-eeee-4ff6-902f-9ccdbc36e7af">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:pg");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="acbaddb7-3a7a-4be6-8400-25bf2a17b66f">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13","R"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
	case "R":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="f68cff0e-478d-4a3e-b046-66d00d7428e6">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="6e5f5e38-e9e8-45d0-a227-2e11b4924ef7">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="b692efb1-17a4-48f6-a48d-796e153a5d86">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="45fb92ed-4d60-4e35-b484-a3afe08d8d97">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:rightslockerid:org:dece:1024BB8420E15837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value>X</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C57142490A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>G</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C57142490A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1976</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>42f9939e-fea2-4332-998f-04f588ca5f8a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62fa3d69-25cc-422c-b362-0efe01e9a3c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10010-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - PG13 Content R" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f0d25619-6635-4627-904b-578eb8ce6e81">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="ecdee4af-c67e-4e4a-8c34-1a54e466fada"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="013e8c04-2df3-4566-811e-a67912911e95">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="55854178-f2c2-4a20-9878-1a33660c961a">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="ff3861fc-3bc1-4c5c-84b3-f7958c2d87ca">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="72575a23-8180-47de-aacd-a11f7d1c2646">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="e29f6ca7-f1ad-4fa3-86c8-26b6d631467f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:PG-13 Rating Policy" id="64bdaaae-e07c-4d96-a989-b1d99ad9c390">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:pg-13");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="8aa4bf1d-e7a5-4852-92ed-ffe5c50835de">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["R"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "R":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="0a5cb021-ae9d-4ab3-b5d8-f4f472ee72a5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="f4aaa4e6-e6c2-4f94-84a6-abe66b10b6a4">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="ee1c50d1-eba1-4edd-a1e1-7b115ba8bc10">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="3d39d532-148b-42cb-b5a2-29ea47f9e731">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsCreate if necessary" id="d0ca7e2a-f5e3-4998-97ac-0649461cfacb">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Set CID's content rating to each of the US:US:MPAA ratings");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:rightslockerid:org:dece:1024BB8420E15837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value>X</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C572C37D0A85E05307991F0A9453</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG-13</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C572C37D0A85E05307991F0A9453</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:UnratedContentBlocked">
      <Reason Language="en">The user does not have permission to access this content because it is unrated.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:02A20034C3CB4BECE05305991F0AF243/RightsToken/urn:dece:rightstokenid:org:dece:02A2066504FD5E9CE05305991F0A7F5B</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:UnratedContentBlocked</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2028</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>512161f1-2020-4908-aa72-2d244b33b04c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae572e5a-a274-4f5c-ae94-db5989c94a51</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10011-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - R Content NC-17" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="68c4c1c1-0619-4054-9fe0-e3c58859c733">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="a5b5afb5-76c0-4338-ae5a-06f2a0e77bd8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="58b10074-e384-4cf0-960c-c1f3bddcf485">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="49ddb1de-ce65-401a-9e6c-f70039a2d963">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="c76c2bf0-17a4-42ad-adbc-0c4b659b2d28">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="5be61aea-9f39-4c69-9334-c00b1d5fec58">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="aa41aa25-a746-4d26-8b46-b5d1641de2c1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:R Rating Policy" id="2f68e23a-0084-44f8-861f-cd583b86b67a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:r");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="0d9f809d-b8e6-4a52-9121-237b9f4a4e4a">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13","R","NC-17"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;	
	
	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="f8116383-85ee-4d37-8224-2b6fdfd60c64">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="422060fb-ace2-49b3-940c-b94bdf8f5350">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="a29aa2ae-085d-4dc7-a846-d33046b5d3ab">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsCreate if necessary" id="d4afb3f3-d671-44c1-aacc-fc92712e3bf4">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Set CID's content rating to each of the US:US:MPAA ratings");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="bb0c09d8-1042-4cf4-9a29-cc2dbeaf3043">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:rightslockerid:org:dece:1024BB8420E15837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value>X</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C57142530A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>R</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C57142530A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2060</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>90225eb4-4613-49a7-84e3-c7d723bb5ef5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d85429d0-564d-4df8-aacf-7a0d725df20c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10012-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - NC-17 Content NR" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9340ca1b-b1eb-4681-8da3-4fb6b115fa6c">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="2c57f5cc-f021-412a-8068-eaee3242739a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="fad8b6e8-d710-42f8-9c4c-fcb1f293818d">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="aed384bb-4b16-4e8b-8952-7f7e293a3964">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="7d390d87-b304-4896-a578-0f3c4910ef05">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="75fd2f2a-b061-4191-b58b-40742f061306">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="560b4fa1-c353-4290-ab57-4efec41cd4d7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:NC-17 Rating Policy" id="c10d387e-9a84-49ed-9dd9-f90611ce6d2c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:nc-17");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="4a869d87-c93d-4622-8d8d-fa1be9e7f8c5">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["NR"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "NR":
		testCase.setPropertyValue("expectErrTypeRTDelete","UnratedContentBlocked");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsCreate if necessary" id="4ccd94b3-7006-4426-83f5-1296358444ed">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Set CID's content rating to each of the US:US:MPAA ratings");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="2cc9c285-efef-497a-adf5-da06cff65c64">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="85451c4f-ae9b-4e75-a821-5bba60500c6f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="2c9a7f4e-3f6e-473e-9997-c4a48de19f7d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="73508ad8-1326-433e-87a9-4795582b596b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:rightslockerid:org:dece:1024BB8420E15837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value>X</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C572C3870A85E05307991F0A9453</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDBC06291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9EADBBFDDBFA6291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:9EADBBFDDBFA6291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>NC-17</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C572C3870A85E05307991F0A9453</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1919</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>666916fd-67bf-4945-92bd-52fb424734ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c050255-9173-4f75-af8f-68cb88cbd849</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10028-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - TVPG:TV-PG rating - Full User Content TV-14" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="44042a17-01cd-4457-b202-c9a07cd4faf0">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="08b157de-7a43-4228-a241-24cc3da727c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="405238e0-d5a5-471b-bea0-d3609675ac2b">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="caa04b3c-f88c-498a-bfe7-8d9de99686ca">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="f7fe8004-39ed-47f2-94db-f2e567e4e678">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="5d7bded5-0694-47a4-9334-dc914bfc71ba">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="1e74d730-8e29-45b9-994c-aa9c73548e9f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as  US - TVPG - TV-PG rating" id="4ab2085c-420a-43e5-b9b7-44114e479b3c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:us:tvpg:tv-pg");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="12a7dc4a-2e5e-4d53-a317-f0f012934593">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["TV-Y","TV-Y7","TV-Y7-FV","TV-PG","TV-14","TV-MA"];
ratingArray  = ["TV-14"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "TVPG";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "TV-PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="719983a0-3e59-4686-a225-06d811ad8550">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="39136ffb-5b0c-49ce-bd70-e54c958840e9">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="104a4d1b-e8f9-4d90-9136-6fb3bef628f4">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="0d648a85-a537-4b3d-9807-c8e673da85d7">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="855b6c96-82df-4b40-9f62-ec4116af84db">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>TV-PG</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:us:tvpg:tv-pg</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024BB8F67D2663FE05307991F0A5D43</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024BB8F67D2663FE05307991F0A5D43</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>5104</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>53004183-0a8e-484c-b937-51afa48dd63b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee520b75-3d28-4dbc-adcd-081f736ed6c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10029-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - TVPG:TV-14 rating - Full User Content TV-MA" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5f7b16ac-710f-441f-9559-b7d94c40c0f6">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="f091a1ad-37eb-4760-bc54-d2ecc83d04e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="3bbd2032-42d8-406b-b636-ea99d1941043">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="1f9272ff-e8c0-4e3c-8c7b-ebb44dc477a6">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="23741fe3-22b6-4068-8a83-40bdb06d335d">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="7e00345d-144a-484f-b80e-9910b85b648d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="e68ad22e-4c94-462d-976d-85d5e72b8519">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as  US - TVPG - TV-14 rating" id="cee3a3bc-1d6f-48ec-aeba-d10783bb6d1b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:us:tvpg:tv-14");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="3215ee74-a814-4060-9d93-6ab172dd756d">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["TV-Y","TV-Y7","TV-Y7-FV","TV-PG","TV-14","TV-MA"];
ratingArray  = ["TV-MA"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "TVPG";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "TV-PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="ed3fac1f-d2e3-4ed8-b349-8435e381a4f2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="08151c46-c49f-42d4-b6d5-f14134bc158b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="11ae1de2-d1c0-404f-94e7-4fa2a87a94b4">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="370c18f6-3195-4f8a-97b2-56fe13c9a0c0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="67177417-ec00-4240-a0fd-2d649c14f225">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>TV-14</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:us:tvpg:tv-14</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024BB84214D5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024BB84214D5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>3001</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2b1fa125-dd69-4187-b55a-a1936ffcd286</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d39dc597-2993-467d-9a93-ebfa823061c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10031-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - UK - FILMTV - BBFC - U rating - Full User Content PG" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e7d1ad25-738a-42ae-963e-d48b7b4e0799">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="1fd57d66-07d6-4150-9447-f214374e48f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="6efd1b60-3935-41a5-a878-8c68d8759ac1">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="d38af6ed-e4c0-4f63-b726-03dc436497c4">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="d65551de-eacd-4300-9325-293d53523ae6">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="e60ec89c-e7c5-4a41-8f1e-8af6c5340f29">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="4aabe7fe-5d72-4058-a110-09066764b5a2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as   UK - FILMTV - BBFC - U rating - Full User" id="fd82230f-89ed-4b9e-a28d-cb8a0f276e37">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:gb:bbfc:u");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="fe60bf2e-7443-4956-bea8-6dfa213b7235">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["U","PG","12","12A","15","18","R18"];
ratingArray  = ["PG"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "GB"
String country = "GB"
String system  = "BBFC";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="af37984d-51db-48be-84e7-03de92689b5b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="fa39609f-db2c-4040-9600-8a3776cb8f42">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="2f443852-1bde-428e-ad9c-2bf265c24693">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="b043e21e-01f0-4867-a027-95a9a7f2f23a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="39b5268f-f3ef-4e26-a740-1db7f1018921">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>U</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:gb:bbfc:u</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C571427E0A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C571427E0A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>3174</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>789ddbb5-2eb4-4dee-a1bb-67507e79c8fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>249d6577-4973-4007-a2cc-36c5902f6606</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10032-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - UK - FILMTV - BBFC - PG rating - Full User Content BBFC - 12" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b3d7d24e-c21c-42c4-b422-3670113392f9">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="fd975faf-cf81-4526-9f11-cb774aab5e8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="de844c0e-f184-478f-85fb-bb64a1383ece">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="e9fc70a3-114d-44d4-a39e-c5e32dfb6ff1">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="fbb43d7f-7699-47b7-80f3-2e693c477a17">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="e6207de3-de98-4593-891a-b593b68aae7c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="73c16cdf-95d2-40c0-83c9-7d0a3ed0f59f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as   UK - FILMTV - BBFC - PG rating - Full User" id="776e8dc1-8c87-4521-946c-4d11680e46e6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:gb:bbfc:pg");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="7e500a00-4aa2-4b6f-ac0a-d1ff05e3f1bd">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["U","PG","12","12A","15","18","R18"];
ratingArray  = ["U","PG","12"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "GB"
String country = "GB"
String system  = "BBFC";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "U":
	case "PG":
	case "12":
		testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="bf0cd2b7-7158-4ae8-9048-095f8a583a86">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="98a75f54-3fa6-4230-bf4b-a61403890f11">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="8b993695-f2f0-49e5-a71d-0f5f6dc0b5ec">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="c77cd8a7-e511-4ce4-97d6-e55da7d122e0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="888320dd-f2d5-42a7-94e5-8dbc1f5c26c5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:gb:bbfc:pg</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C57142A60A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C57142A60A81E05307991F0ACB13</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2863</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>e62b8b90-1f11-49f7-8da6-50a2d60fcdb7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>137258ca-f759-4f43-9671-c23e82768137</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10033-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - UK - FILMTV - BBFC - 12 rating - Full User Content BBFC-15" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="792c38d3-5bc9-4565-b290-1c8980ee7e78">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="87e48725-dcca-4d8c-bccc-57e09e5a1d1e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="58b6da98-4383-41e4-a8db-7fe1eb78109a">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="d0453e7d-072e-4878-9a0f-a50dc88d8bd1">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="8eb5b385-51b6-4611-ae9e-5e860e432fdf">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="56993bbc-a5e3-4c64-8e4b-3e66a077c3a1">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="ce502a69-829f-43dd-adaa-652c742a4585">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as   UK - FILMTV - BBFC - 12 rating - Full User" id="1217703e-a289-46cd-a0f2-f81968dc7518">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:gb:bbfc:12");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="21e4c651-c198-4f60-be43-7d6fefa71ed8">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["U","PG","12","12A","15","18","R18"];
ratingArray  = ["U","PG","12",/*"12A",*/"15"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "GB"
String country = "GB"
String system  = "BBFC";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "U":
	case "PG":
	case "12":
	//case "12A":
	case "15":
		testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="f9cc6c46-9c4a-4399-8266-1e26e8dd8a60">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="cad23f64-ef70-4346-97d1-d3ee24160fbb">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="b2921d97-2aca-40a6-ab9c-734636018f52">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="7b6a2586-bb9e-4ad7-90ab-4676ec9522ef">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="72af574d-41f2-423e-8db0-38c28be31b39">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>12</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:gb:bbfc:12</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024C56B587C0A71E05307991F0AFC7B</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024C56B587C0A71E05307991F0AFC7B</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2012</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>0324cbc1-0767-4966-9677-a8ccf836b2c7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2e54aca-fbbd-4562-b7be-32d4ad862c5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10035-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - UK - FILMTV - BBFC - 15 rating - Full User Content BBFC-18" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8248844d-55f5-41e3-ae11-e674ac5f221a">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="1edf2365-72d6-40f5-8ac9-ff5cecd823c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="b296a5e6-032f-45b7-bb88-02e137f7d289">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="29add80b-094f-4035-b4ab-e3246f70427a">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="3851c77d-b25c-47d9-8fc0-1c806e2bd11e">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="0ffd107b-fabf-437e-a9d8-8f7189e0edb8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="9f0c1701-676c-4c46-bede-185645d5e566">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as   UK - FILMTV - BBFC - 15 rating - Full User" id="e41271b9-a585-4e15-8637-d35cf61a6cc6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:gb:bbfc:15");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="5bfd2d25-4fa6-456b-8bc8-f26b1a13f095">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["U","PG","12","12A","15","18","R18"];
ratingArray  = ["U","PG","12",/*"12A",*/"15","18"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "GB"
String country = "GB"
String system  = "BBFC";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "U":
	case "PG":
	case "12":
	//case "12A":
	case "15":
	case "18":
		testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="89fd7c9e-47ee-4719-b3de-688924088b30">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="8f2fcdde-8e1e-4d05-9567-4b67d54588c3">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="f9f82468-9111-4907-9e4d-a76720876a64">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="c7f7901d-a743-4b7d-91ce-413e26f98c6d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="6248d1df-fb28-40eb-bf79-602deade44db">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8420DA5837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_d43b12f2-a805-4f13-b790-8c761ed8f6a6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>15</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:gb:bbfc:15</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:1024BB8421B35837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120850745</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1024BB8F1492583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>1024BB8421B35837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2610</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>f92b941d-320f-491d-bd3c-54180528625f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8d8dbbf-4f29-448d-8da9-282a2d7c155e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="R1_RightsTokenDelete_Policy_RTL_CS_TestCases for Coord-2293" id="f175f9a0-1481-4d27-8c25-2c51445b5d68" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10001-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User Content PG" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="55580c03-e9aa-4bda-88c2-d4fab49a4dc6">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="calltestcase" name="Node_Setup" disabled="true" id="a838ef73-0d35-406e-b3fb-ca31bef9e51c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1faba15c-dfed-4b9b-a263-dc0bcbc3b4d6</con:targetTestCase><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_OID</con:name><con:value>${#Project#Node_OID}</con:value></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep>
      <con:testStep type="groovy" name="Reset User Credentials" id="24d79a98-bd2c-4c9c-ad50-5830378728a8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username","");
testCase.setPropertyValue("password","");
testCase.setPropertyValue("assertXML","");
testCase.setPropertyValue("assert","");
testCase.setPropertyValue("assertId","");
testCase.setPropertyValue("assertionAccountId","");
testCase.setPropertyValue("assertionUserId","");
testCase.setPropertyValue("assertionAccountIdFULL","");
testCase.setPropertyValue("assertionUserIdFULL","");
testCase.setPropertyValue("rightstokenid","");
testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("accountoid","");
testCase.setPropertyValue("useroid","");
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER" disabled="true" id="4bd74bfe-7733-47c8-9144-24b093da9f81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Set Node RETAILER_CS" id="a475af3e-62a8-4017-85c2-62ed8f12454d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Create_Account_User_STS" id="b14497c3-db52-4213-b17a-900d76f24058"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");

def RTCRequest = testProject.getTestSuiteByName("E2E_TestCases");
RTCRequest.setPropertyValue("country","US");

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;




</script></con:config></con:testStep>
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="863a460e-1a89-4118-a95e-dc2ffb3801a6">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");
rightsLockerID = testProject.getPropertyValue("rightsLockerID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);

testProject.setPropertyValue("RightsLockerID","urn:dece:rightslockerid:org:dece:"+rightsLockerID);
</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Set Account and User Status- Active" disabled="true" id="4006d54f-4b55-45cb-a7e7-f609dfc7ea13"><con:settings/><con:config><script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;

//accountID = testProject.getPropertyValue("accountOID");
//log.info "accountID-->"+accountID
//USerID = callingTCase.getPropertyValue("useroid");
//testCase.setPropertyValue("AccountOid",accountID.toString());

//UserSetStatus = callingTCase.getPropertyValue("UserStatus");



assert myAccount.accountSetStatus(testCase.getPropertyValue("accountoid"),"active");
assert myUser.userSetStatus(testCase.getPropertyValue("useroid"),"active");

//log.info UserStatus.toString();

//testCase.setPropertyValue("UserStatus",UserStatus.toString());
//callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Create new RightsToken" id="60efdf54-f69c-409f-804d-a6e24db6ae54">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTGRequest = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("RightsToken-Generation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
log.info rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTG = RTGRequest.run( null , false )
			assert runnerRTG.status == Status.FINISHED;
		}
		else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="8c93c734-c911-47fa-9411-91008a588855">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="60780ad9-e0e7-4f1d-b244-e143527e0c20">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="87971dda-876d-451e-b363-f41dcbe8ceb6">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="- Remove all Parental Control Policies" id="57d44014-b0ae-443d-ad7c-9f4049998025">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:G" id="d26b112d-2b73-42b4-a060-af767fdaec17">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:g");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="ce6b1fcb-111e-4d07-91ad-aed0ff9952f6">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["G","PG","PG-13","R","NC-17","NR","M","GP","SMA","X"];
ratingArray  = ["G","PG"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call RightsToken Delete Request" id="1b9b7b7e-fd19-427d-a51d-6607dd88f687">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="2f977068-fb8f-4440-85b8-ab130ce16f90">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="a8f939eb-ad18-49b7-9272-463b91e4cee5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="94df3bca-2210-4ff7-b2f9-67c9621532d9">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node RETAILER_CS 1" id="4735d7c7-94e2-44e8-b24a-8879d3c01db4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02A20034C3CB4BECE05305991F0AF243</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_0c31da58-1b91-49bd-8f1e-3259ebb4f578</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>G</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02A200334DA34BEAE05305991F0A2582</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2015/03/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt" ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt">         <ns4:SoldAs>                     <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>                      <ns4:ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ns4:ContentID>         </ns4:SoldAs>   <ns4:RightsProfiles>                       <ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd">                                         <ns4:CanDownload>true</ns4:CanDownload>                                         <ns4:CanStream>true</ns4:CanStream>                           </ns4:PurchaseProfile>                                                                </ns4:RightsProfiles>      <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>         <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type">                               <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                          <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                           <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>                 <ns4:Preference>3</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>                 <ns4:Preference>1</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:PurchaseInfo>                       <ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID>                   <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction>                       <ns4:PurchaseAccount>urn:dece:accountid:org:dece:02A20034C3CB4BECE05305991F0AF243</ns4:PurchaseAccount>                       <ns4:PurchaseUser>urn:dece:userid:org:dece:02A200334DA34BEAE05305991F0A2582</ns4:PurchaseUser>                             <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>            <ns4:TransactionType>urn:dece:type:transaction:category1</ns4:TransactionType></ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>545</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-02-10 06:53:51.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>02A20037F7884A37E05305991F0ACCAE</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>02A20034C3CC4BECE05305991F0AF243</ACCOUNT_OID>
      <USER_OID>02A200334DA44BEAE05305991F0A2582</USER_OID>
      <RIGHTS_LOCKER_OID>02A20034C3D34BECE05305991F0AF243</RIGHTS_LOCKER_OID>
      <NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>02A20034C3CB4BECE05305991F0AF243</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>transcation</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>urn:dece:type:transaction:category1</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>02A200334DA34BEAE05305991F0A2582</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2014-09-09 12:27:31.678</CREATED_DATE>
      <CREATED_BY>C0CEF8E08CE1C7D6E0401F0A0599120B</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2d3280d8-cbcb-4601-ad6b-531b3bb0d526</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1aacd078-f82e-4ac6-95a4-64b76074897b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d02cbf45-be6c-4f71-b5c6-b1f5222aa12f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e4d11a8-0f9f-4fec-887a-5d897a4da1eb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d06cc2a5-cd21-48c3-b8a3-286dee441adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14f85cc5-2e55-4974-b8d9-7f97f34b1d3d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39a81fb1-f068-4ffb-831b-5e22d42733bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10002-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - PG rating - Full User Content PG-13" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="74351279-8b81-4073-9ef2-d70deea12c35">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="c81a3125-0050-4905-8ee0-00e6c0fccfbd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="fa001fcc-35a3-4803-b8f5-8ad931e9ee3a">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="e988bafa-e4c1-43b7-ac4a-5db001bef6a9">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="a1a64cbc-4826-4671-a21a-d5b902acdea2">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="980bbb28-15d7-4b6e-a48c-a8f707c4c24a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="f2416d9f-824d-4421-9600-5ab712c66cc3">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:PG" id="d50fbc25-1c2d-40e3-a95f-fc7f68265f95">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:pg");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="aeb68b75-8e3c-4126-b0c8-4b93a618a5f5">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="36626fa7-0c70-4669-9665-f625cc504549">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="149153b5-02c7-4e03-9374-382d1c3de930">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="933926a9-f9d5-4720-b824-d8f4b224754d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="643097ba-ad30-46a5-83bb-7336baec0339">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="502d58ba-d344-446b-812f-2415bba5d1ab">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value>_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:pg</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDB826291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value>urn:dece:streamhandleid:org:dece:9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>819</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>32124eb2-15b7-4c5d-b484-cb5507c7d069</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db624a0d-7db3-45e3-a2a4-e3eaa20c7d25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10003-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - PG-13 rating - Full User Content R" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e4e1fedb-049d-482a-877b-8707ca502b03">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="c694d080-9e6a-4a0b-ba96-f833442a2848"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="13a9627b-efb6-46df-9f72-4cb1993cdec0">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="008b993c-5c6c-4d16-8769-c19a2e2b7071">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="e56b27c0-e7d8-4178-a205-ab72392853f4">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="cc7d23da-2328-4ece-bd5d-48b26c4e8620">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="9d1334b2-673c-4c9e-8b18-c15f82d2d250">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:PG-13" id="f43c0c5f-35ce-4f7a-bf68-b23faf744070">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:pg-13");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="de345580-640e-4f28-9a59-427a9089a3f4">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13","R"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
	case "R":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="044ea172-f100-443f-98ae-bc7e50144d7d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="4a6453ae-ae28-4b13-990c-4f33be22d7bc">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="ca998d89-0e4d-4d3d-b26b-7f14282761f0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="4a4f9762-9d5c-4638-8770-63e8a08c79d8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="72ccad85-83bf-4054-812a-e22de93aae36">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value>_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG-13</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:pg-13</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDB826291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value>urn:dece:streamhandleid:org:dece:9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1273</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>48ecba10-47cb-4c2d-90bd-760171b78c23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>094f46cf-42b2-4ef6-99fc-44b5c4774eae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10004-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - R rating - Full User Content NC-17" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="70ef4028-41c1-4b04-9915-7b52db5fc193">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="0e1fce38-1763-4deb-a4ea-cf7507406d4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="92a3af3d-fe55-4793-9565-d1537648c7e5">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="e9245cd9-6e8a-4817-9264-2ca3410e6391">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="ce43057f-2569-4ed8-8d2a-b13aeb73ebb1">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="6d058325-732d-4664-854e-1b826a4a0b7f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="0603c5fc-135f-465f-a39b-949ba1d648e9">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:R" id="d0e205d8-234a-49e1-9d21-ef8753a10fb6">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:r");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="6af94e2a-0d6e-4de0-8977-c873d4049211">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13","R","NC-17"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;	
	
	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="2275217e-943e-4368-b776-6079ffabacf2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="c01d9f3a-972f-4814-871f-bc5ffd722893">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="0a2ed754-010c-48ba-9fa6-fb2aef655457">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="49504bc3-2f3b-41af-9c60-ff2e1f3265ee">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="3c52d2a3-8ab7-4e3f-8190-6916ec45478f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value>_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>R</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:r</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDB826291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value>urn:dece:streamhandleid:org:dece:9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>778</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1db5834b-7c99-4003-a5d2-c058a8ae2bf4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1a23f840-694c-48cd-9e23-6c8f46619e2a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10006-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User - CID Rating PG" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2f2c1ced-b28e-4bcd-b205-1af5120e4fd7">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="9da2c3aa-3d5d-40cf-a32d-ea906fd9a82a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="6f4fb81f-db39-4594-b592-b429e6c54465">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="f6e4ae38-452b-4e6f-a26e-8367ed05fc4f">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="b9c88db3-1875-45a2-8478-901abb3ea73c">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="1f08df9d-4d3e-4ff4-b269-010e990763e1">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="3acde259-da6e-49f2-abe4-20dbffd1a85d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as MMPA:G" id="998caed3-a53a-466a-b4db-2201fa5aa0fb">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:g");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="6b632ae7-3f98-464f-a88e-62d9ec8660da">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["G","PG","PG-13","R","NC-17","NR","M","GP","SMA","X"];
ratingArray  = ["PG"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
		testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;

	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTDelete","RatingPolicyExists");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTDelete","AdultContentNotAllowed");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;

}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="05b5b1e7-2cb3-47ba-be0f-12a874c2f9f3">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="adc3db75-93d0-4db5-bb22-67ff9f61959f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="844146b5-9851-460b-b2d7-079fe9c489a8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="54ee0e3e-c813-457c-bdd4-8fa43512b6cf">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="b4cbab33-2bcc-43dd-87d0-b0dd40e9ac91">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value>_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>RatingPolicyExists</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDB826291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value>urn:dece:streamhandleid:org:dece:9EADBBFDDBB36291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>769</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>107ae1fb-b9a6-48a2-b82e-57a9b00fcbc3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>51958f09-bdb9-45f6-a890-dc52ebef5bc6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10007-RightsTokenDelete - Policy -RTL - BlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="97dd7c64-47d2-4eb1-9024-bb1f2b6cd274">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="69ed5b26-e46e-4698-948b-24c10d600d89"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="03a53fb6-3f6a-49a1-a1f4-93f91f81ca69">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="547c12bf-348e-4ef2-8290-bb6b55b10519">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="f680dacb-a079-415a-9a88-c2b39696add9">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="0f06f9ef-2157-4224-b793-29abbed169a4">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="1f793831-7a07-4ef6-97fc-0a9283aaba35">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="eb63a0da-044b-4c12-9842-b55641e0d693">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["NR"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "NR":
		testCase.setPropertyValue("expectErrTypeRTDelete","UnratedContentBlocked");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;	
	
	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="fa8a3a56-ab21-4a54-b6d7-dabbec827112">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="5a1f18d7-f829-4e6e-8043-f33d94c41a4c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="20fb457c-a704-43d6-bc38-bea12c923c12">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="3664ae8a-e996-4de2-9066-0cb05c0df56a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value></con:property><con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        
        
        <con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value></con:property><con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        
        <con:property><con:name>assertionAccountId</con:name><con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value></con:property>
        
        
        <con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>02B5B498357B57BEE05307991F0A0C1F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value></con:property>
        
        
        <con:property><con:name>assertionUUID</con:name><con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value></con:property>
        <con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property>
        
        
        
        <con:property><con:name>counter</con:name><con:value>1</con:value></con:property>
        
        
        <con:property><con:name>DBrightstokenid</con:name><con:value>02B5B462F2D457B9E05307991F0A8A80</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>expectErrTypeRTCreate</con:name><con:value>UnratedContentBlocked</con:value></con:property><con:property><con:name>expectErrTypeRTDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>expectErrTypeStreamRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property>
        
        
        
        
        
        <con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property>
        
        
        
        
        <con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property>
        
        
        
        <con:property><con:name>nodeaccountid</con:name><con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value></con:property>
        <con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>retailer</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property>
        
        
        
        <con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property>
        <con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value></con:property>
        
        <con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value></con:property>
        <con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_node222259_RetailerNode</con:value></con:property><con:property><con:name>policyBeingTested</con:name><con:value>NR</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property>
        
        
        
        <con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>02B5B47B5EE057E6E05307991F0AF6F1</con:value></con:property>
        
        
        <con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property>
        
        <con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:highdefinition</con:value></con:property>
        <con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:standarddefinition</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:portabledefinition</con:value></con:property>
        
        
        <con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property>
        
        
        <con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property>
        <con:property><con:name>ratingBeingTested</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rcUUID</con:name><con:value>1</con:value></con:property>
        
        <con:property><con:name>rightslocker</con:name><con:value>null0900</con:value></con:property>
        
        <con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1182</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:UnratedContentBlocked">
      <Reason Language="en">The user does not have permission to access this content because it is unrated.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:02A20034C3CB4BECE05305991F0AF243/RightsToken/urn:dece:rightstokenid:org:dece:02A20F865ED8171EE05307991F0AB678</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:UnratedContentBlocked</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property>
        
        <con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:222259</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>1</con:value></con:property><con:property><con:name>rtDBinfo</con:name><con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value></con:property>
        
        
        
        
        
        
        
        
        
        <con:property><con:name>rtStatus</con:name><con:value/></con:property>
        <con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAMLExpDate</con:name><con:value>2013-10-03 09:23:25.0</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property>
        <con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>null:null</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value></con:property>
        
        
        
        
        
        
        
        
      <con:property><con:name>useroid</con:name><con:value>02B5B498357C57BEE05307991F0A0C1F</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>ae92bbbb-42ba-4f11-87d5-19ca2354a82c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dc4efb97-4b9d-4c79-9223-1e7f0bd3fc3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10008-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - G Content PG" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5db9db8f-9091-4b34-b0f8-7bbf96d2672c">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="821065be-855e-40bc-9162-f323b4e98eec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="56a24336-3073-449b-8b36-38ad61d59084">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="dadc3a3b-490a-4015-a13c-d9d4f3076426">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="c6ea56ce-becd-444a-98a2-6a15f77e06cf">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="50280a4a-72b2-4cba-8504-204e9289a7eb">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="710e876b-8d69-405d-b7dd-8e05610b2657">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:G Rating Policy" id="af7804da-430a-427f-af95-c09ee92de149">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:g");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="bd4eb512-0b02-43da-a2a7-cebeab0dfc90">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="0c36fc51-1e97-44fc-b912-bb401ee6b5fa">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="be96da62-b0cf-448c-be4d-f2087b587081">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="19ac1b38-1677-49f2-a481-c698e2cd2059">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsCreate if necessary" id="63afe812-e47d-4516-80cf-1080ff856f48">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Set CID's content rating to each of the US:US:MPAA ratings");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="4fae9a46-9693-418e-a907-aee08a60a7b2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B47B5EE057E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">G</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:RatingPolicyExists">
      <Reason Language="en">The user does not have permission to access this content because of its rating.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:02A20034C3CB4BECE05305991F0AF243/RightsToken/urn:dece:rightstokenid:org:dece:02A2066504FD5E9CE05305991F0A7F5B</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:RatingPolicyExists</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1068</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fac7fae5-5a63-4e8b-b131-1be84c2e8ec8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bdc106f-1aef-468e-9315-7136e529c272</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10009-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - PG Content PG-13" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c93440da-f58d-470c-b3de-8adb022d5f2e">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="ec3c2d3e-427b-4a7f-a9fa-362718e0fb59"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="852f28cc-7e79-4986-9fd2-2f4b211e1b8c">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="e5c6ece4-a675-435f-b3d0-7c421eb50bc0">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="d07a8820-5009-404e-9059-cc9aa0648be8">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="40b76e15-ef82-429a-bb2c-4a3e98774141">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="26f9fa80-3872-48ad-a4e8-e82c48d71392">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:PG Rating Policy" id="7c242efc-401f-44a9-922c-3bd050a3af0c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:pg");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="2c99e77e-f97a-42d9-a95d-ec1ae2d41a41">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13","R"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
	case "R":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="e4f3ea7f-f686-4c64-a280-75a99909b30b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="e471c9ad-c6ab-4241-9599-80e0031511f4">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="82f22152-36e4-48cf-9f0b-9a270714f93b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="b592f114-c8ae-44c1-9df2-8e5fc46b750a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>02B5B47B5EE057E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value>X</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>G</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>684</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>42f9939e-fea2-4332-998f-04f588ca5f8a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62fa3d69-25cc-422c-b362-0efe01e9a3c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10010-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - PG13 Content R" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a25b51cb-e75c-4d7c-a5e0-24ce64d7d425">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="4bc67de7-8c56-4cab-8496-0485c3f3abd0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="6b8441c1-64eb-491e-a9ac-da370f0de4c1">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="5ee23567-ec73-4a22-ae91-6f79e25ff710">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="bb5a608e-40f7-4782-aa8c-078957c4c43f">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="e90a947d-4968-44b5-b972-adbe120f5e3a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="1bc3f4cf-4569-4ef9-a318-177c5f261654">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:PG-13 Rating Policy" id="9348ce7b-0ece-447e-b95a-d064026f5845">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:pg-13");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="09cc5ad7-8114-47ea-9313-028a7e7f2a52">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["R"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "R":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="dd2830c2-cb77-4498-a6a6-a27e2e62c264">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="f93690a8-845e-428c-88bd-f9476e445dd5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="034cd142-9ed6-4121-b53b-119c531a17a1">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="df59b377-e69a-414c-8cf2-7db465c747a2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsCreate if necessary" id="44dadc62-c21c-46b7-bbe8-4e159bbf35f8">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Set CID's content rating to each of the US:US:MPAA ratings");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>02B5B47B5EE057E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value>X</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG-13</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:UnratedContentBlocked">
      <Reason Language="en">The user does not have permission to access this content because it is unrated.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:02A20034C3CB4BECE05305991F0AF243/RightsToken/urn:dece:rightstokenid:org:dece:02A2066504FD5E9CE05305991F0A7F5B</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:UnratedContentBlocked</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1295</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>512161f1-2020-4908-aa72-2d244b33b04c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae572e5a-a274-4f5c-ae94-db5989c94a51</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10011-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - R Content NC-17" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a3df9499-f6ad-493f-a897-e18677b83f49">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="deac3a6d-4956-493a-8e06-fbec1d4b66df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="688a3356-a953-4d6b-99ba-21728fd37a06">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="58447040-ffb2-4008-9b76-b5d98d49b867">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="0f7955bd-56c1-4cf5-a4a3-3181d075f358">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="073c54fa-c597-4e29-803d-2ec5219e3f45">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="3fe66fbb-fe72-419a-a4a9-a0be7e379b55">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:R Rating Policy" id="effe1160-4e29-453c-be12-569920322594">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:r");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="ef46d9e8-f84c-496f-868b-123ff87c7297">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["G","PG","PG-13","R","NC-17"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "G":
	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;	
	
	
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="9feaf114-0936-468c-a7ee-d6ea51cc9c1c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="ca0004be-12e1-4c0a-bd10-500239ecd87e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="253668b8-1c39-4c0c-b25b-ba9741464d8a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsCreate if necessary" id="e07138db-be7e-42a0-ab70-5ec0e7f805fa">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Set CID's content rating to each of the US:US:MPAA ratings");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="54baa654-8387-4f5c-9a2b-f76cd124f12f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>02B5B47B5EE057E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value>X</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>R</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1694</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>90225eb4-4613-49a7-84e3-c7d723bb5ef5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d85429d0-564d-4df8-aacf-7a0d725df20c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10012-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - NC-17 Content NR" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7d982e80-ba44-43cd-a816-05df595cf66e">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="c37c80a7-f35a-4c47-9542-6592588d13bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="4016305e-790f-4f0a-92ac-da6a0c19506c">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="7d7201ba-a90f-4379-ab71-5cb3d3c1cc78">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="7e24c0ee-17df-4ea1-ac5c-e96bc57587d5">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="e8fbc31e-eb1c-46a4-9049-f208ed0214a5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish ParentalControl:BlockUnratedContent Policy" id="b2e72a7e-d824-4109-8e9a-67ddf2a7534d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:BlockUnratedContent");
//testCase.setPropertyValue("policyResource",testCase.getPropertyValue("rightslocker"));
testCase.setPropertyValue("policyResource",testProject.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="--- Establish MPAA:US:NC-17 Rating Policy" id="f3267431-82f0-4292-bcbe-65ece7f2907e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:nc-17");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's content rating to each of the US:US:MPAA ratings" id="06003f9f-fc15-4c66-8fc1-aeee844d0e7b">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

ratingArray  = ["NR"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "NR":
		testCase.setPropertyValue("expectErrTypeRTDelete","UnratedContentBlocked");
		testCase.setPropertyValue("ErrorDataVal","1");
	break;
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsCreate if necessary" id="f57b3686-d9b7-4530-9581-0f9193e3ed45">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("Set CID's content rating to each of the US:US:MPAA ratings");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="fbef264e-33f3-4714-b153-19f015610684">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="04c2f37d-11c9-4151-8355-e9719269605c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="f76b4f2d-8ca0-4a8a-a02a-94e0b2ef4e27">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="3a766ed7-71f5-4c44-9cd0-dab6a76103a6">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>0910</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value>RATING_POLICY</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>5</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>02B5B47B5EE057E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ratingBeingTested</con:name>
          <con:value>X</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value>null0900</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9EADBBFDDBC06291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9EADBBFDDBFA6291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:9EADBBFDDBFA6291E0401F0A05991D62</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>NC-17</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1441</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>666916fd-67bf-4945-92bd-52fb424734ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c050255-9173-4f75-af8f-68cb88cbd849</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10028-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - TVPG:TV-PG rating - Full User Content TV-14" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0198b715-bcea-4155-9fd3-f5862bf54999">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="ffa2398e-1035-4675-9e15-ee59d4b323c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="49f3ec8a-70eb-4b7b-b068-4baa740d7812">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="0536bdad-c00e-44e1-a567-82db48f3cb88">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="a01815ef-ba28-4ae3-b42b-b40264c7fd33">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="5e453962-db5d-416a-90d7-60d579477e69">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="d21b7739-ac1b-45d0-98c8-4f450b659643">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as  US - TVPG - TV-PG rating" id="8ca0a535-99e6-474c-bfa8-2ac1af5616b3">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:us:tvpg:tv-pg");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="81f2a1c8-e09b-4fce-804c-aa1f84d09cce">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["TV-Y","TV-Y7","TV-Y7-FV","TV-PG","TV-14","TV-MA"];
ratingArray  = ["TV-14"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "TVPG";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "TV-PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="59eec437-c9b0-40bd-b574-0cae21e0e889">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="bfc77a19-8ac8-4c4d-8438-8bec5f92027f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="04e17afb-7a26-403d-b7be-01e896a59d85">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="6edf1bd0-6846-4bab-a8cf-c92332bf15de">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="d61827cd-92b9-40fb-88a7-568951939a05">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>TV-PG</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:us:tvpg:tv-pg</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>890</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>53004183-0a8e-484c-b937-51afa48dd63b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee520b75-3d28-4dbc-adcd-081f736ed6c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10029-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - TVPG:TV-14 rating - Full User Content TV-MA" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a0e08dcb-edc2-47a0-a3f7-1b7591c7dbee">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="d6f52d67-7ac9-44c0-894b-9fa5aaa16029"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="bf6e2f20-0a90-4a4d-b2f6-c5b4fe50dea9">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="99b4bba1-2d09-4398-a80c-603c1a70e2c1">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="597857e9-1f63-44be-956f-d74aa259b725">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="871c4766-2429-4e20-9143-1933c71b739c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="28077275-0203-4961-bea4-3409672791a5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as  US - TVPG - TV-14 rating" id="50f34423-1b8b-4e81-93fd-27ba168d8c6f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:us:tvpg:tv-14");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:PG");
//urn:dece:type:rating:US:MPAA:G
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="e0c44c26-95ff-46ee-a704-a5a4430f24d3">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["TV-Y","TV-Y7","TV-Y7-FV","TV-PG","TV-14","TV-MA"];
ratingArray  = ["TV-MA"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "TVPG";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "TV-PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="a7b30e7f-1f5f-4701-a421-b28cbd1043cd">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="f4b03dd8-969f-4f12-b876-07f4113a5695">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="679e4efa-8221-4a46-9b50-d49299209a6c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="71c999e5-f32d-4c58-8129-3cabf67c0489">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="4edc6f58-6ccf-4a0b-a012-fc8e19815823">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>TV-14</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:us:tvpg:tv-14</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>732</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>2b1fa125-dd69-4187-b55a-a1936ffcd286</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d39dc597-2993-467d-9a93-ebfa823061c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10031-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - UK - FILMTV - BBFC - U rating - Full User Content PG" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2965d93b-c5bc-48e6-97e5-7e2173e72794">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="e470cb3e-51c5-433d-8a1a-912345779993"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="86f60402-7f2d-4035-9c56-973f633413f7">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="281bb9b6-d0d0-46c6-8da7-b17750846234">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="0d7a0f26-8a66-456d-b003-f03742c88c25">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="a408330b-c862-49d1-a97f-ad04029cf67d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="e2cae13e-93e5-49d5-8750-6876b6e3ecbd">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as   UK - FILMTV - BBFC - U rating - Full User" id="3ac3e890-39ab-4720-9de9-0708d433062f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:gb:bbfc:u");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="e8ce7693-5683-4c6f-a28d-597b15884c0d">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["U","PG","12","12A","15","18","R18"];
ratingArray  = ["PG"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "GB"
String country = "GB"
String system  = "BBFC";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "PG":
		testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="d3f46c64-2a9f-4d9b-a1dc-93296bb60c7f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="d3b394ce-80c9-44ea-a122-e31b25b2bb35">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="3363c093-420e-4757-858e-a76d70d5a29b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="6173d682-8936-4817-912e-319247b5c271">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="4e125cb6-b619-46a3-b41b-548aa5b722a5">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>U</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:gb:bbfc:u</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>960</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>789ddbb5-2eb4-4dee-a1bb-67507e79c8fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>249d6577-4973-4007-a2cc-36c5902f6606</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10032-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - UK - FILMTV - BBFC - PG rating - Full User Content BBFC - 12" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="50f9cd82-bf8e-4446-b755-b8e7423d75a6">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="73957d5f-aea2-4f41-bb20-428200d8cf64"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="e90f7d2c-f38e-461a-91e2-64c97f04065f">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="a1331bfc-87e3-4ee8-a55a-6321fd4a2777">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="6d0c674d-47e6-4de6-9ac2-7d04c4a8185f">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="2f3b027e-239b-4fab-8cc7-9f554b60b50a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="aa25e343-6cca-4034-850a-5fc1de0512ca">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as   UK - FILMTV - BBFC - PG rating - Full User" id="e9828e5b-863c-49e0-b1ce-74307feecaf5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:gb:bbfc:pg");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="0b74b9ea-b37d-4ea9-a7c1-1ec8285b7b45">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["U","PG","12","12A","15","18","R18"];
ratingArray  = ["U","PG","12"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "GB"
String country = "GB"
String system  = "BBFC";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "U":
	case "PG":
	case "12":
		testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="479fa68d-5fc4-4354-a3f2-d9e2e8e48a5e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="69fd5321-b9f2-45dc-a491-6fe0f8a96a9d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="8cd98eca-7827-4e50-92e4-10a73fe556f7">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="b1685dba-e09b-44d2-a4d8-95b7f846138e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="f69372ab-301b-4199-9a90-805da909b2ca">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>PG</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:gb:bbfc:pg</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1940</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>e62b8b90-1f11-49f7-8da6-50a2d60fcdb7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>137258ca-f759-4f43-9671-c23e82768137</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10033-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - UK - FILMTV - BBFC - 12 rating - Full User Content BBFC-15" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="77da119e-fe01-42f9-bcb7-38b2701f5abc">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="50561291-e6f3-4b60-8ccb-4d9a93854b2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="cfb71b75-2fb1-42ad-b8d1-4b7aa8fd5584">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="dc1b947c-8aea-440b-a81b-c038e56f1962">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="34801812-d9ca-4408-b4c0-ea19a9d298cd">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="e07fe656-4e8e-4cc1-8bf1-4938d472eeed">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="b6de36a9-e397-4472-9556-99a95a931f99">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as   UK - FILMTV - BBFC - 12 rating - Full User" id="8a9cb657-6d1a-4ecc-b0b9-7700e081afe1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:gb:bbfc:12");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="2c65459c-626c-4787-8fe6-3ed0bfbd7f11">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["U","PG","12","12A","15","18","R18"];
ratingArray  = ["U","PG","12",/*"12A",*/"15"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "GB"
String country = "GB"
String system  = "BBFC";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "U":
	case "PG":
	case "12":
	//case "12A":
	case "15":
		testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="5ba28fa9-624e-4133-928e-36281d6bd6af">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="e38615a7-4e48-4e09-97c9-6cc76670feb0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="d89969fe-1240-4f38-a42d-15cff680259f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="3aef9fd3-bfb5-422e-925b-98af6192d7f9">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="e3bfdb96-2e6c-48a7-8248-e5592c3063e9">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>12</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:gb:bbfc:12</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>880</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>0324cbc1-0767-4966-9677-a8ccf836b2c7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2e54aca-fbbd-4562-b7be-32d4ad862c5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10035-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - UK - FILMTV - BBFC - 15 rating - Full User Content BBFC-18" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="86d13981-413c-4146-ad59-86b155673b9c">
      <con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Set Node RETAILER" id="044cadec-9997-4009-90b7-2ece76696288"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",testProject.getPropertyValue("nodeIdRTL"));
</script></con:config></con:testStep>
      
      
      <con:testStep type="groovy" name="SetUp the UserCredentials" id="4f9f9d18-1a31-41ad-bf73-3ba8b872014a">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));;
accountID = testProject.getPropertyValue("accountOID");

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));;
userID = testProject.getPropertyValue("userOID");

testCase.setPropertyValue("username",testProject.getPropertyValue("UserName"));
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("assertXML",testProject.getPropertyValue("assertXML"));
testCase.setPropertyValue("assert",testProject.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testProject.getPropertyValue("assertId"));
testCase.setPropertyValue("assertionAccountId",testProject.getPropertyValue("assertionAccountId"));testCase.setPropertyValue("DBrightstokenid","");
testCase.setPropertyValue("assertionUserId",testProject.getPropertyValue("assertionUserId"));
testCase.setPropertyValue("assertionAccountIdFULL",testProject.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",testProject.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("accountoid",accountID);
testCase.setPropertyValue("useroid",userID);
testProject.setPropertyValue("accountoid",accountID);
testProject.setPropertyValue("useroid",userID);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsToken ID to Delete" id="03f47b01-a090-4711-b6cb-51353ca887ac">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTDRequest = testProject.getTestSuiteByName("Staging Rights DELETE").getTestCaseByName("RightsTokenCreate_With_Valid_AccountId")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

//testCase.setPropertyValue("rightstokenid", RTDRequest.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("DBrightstokenid", RTDRequest.getPropertyValue("DBrightstokenid"));

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetSystem"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
testCase.setPropertyValue("rtStatus",rtStatus.toString());
log.info "RightsToken Status : " + rtStatus;

		if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTD = RTDRequest.run( null , false )
			assert runnerRTD.status == Status.FINISHED;
		}else{
			log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
			def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
			def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
			testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenDelete Request with Valid Data" id="0378e607-28fd-4176-935b-1419ca4f9442">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTDReq"));

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
//testCase.setPropertyValue("rcRTStatusHistory",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Remove all Parental Control Policies" id="0bd039de-b6c6-467f-b45f-71bc1605d8d4">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Highlevel Policy Establishment" id="0c61a65b-a32f-4dc1-943a-9fdb72535e83">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish High-Level Policies for User/Account/Node")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="- Establish Parental Control policy as   UK - FILMTV - BBFC - 15 rating - Full User" id="66da9cb7-ab9a-4383-9f59-f335c0527d8e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyResource","urn:dece:type:rating:gb:bbfc:15");
testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));

def myTC = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set CID's rating and Expected Result from API" id="68f4ab2d-e798-48c0-8957-fe04ec39a268">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//ratingArray  = ["U","PG","12","12A","15","18","R18"];
ratingArray  = ["U","PG","12",/*"12A",*/"15","18"];

a = new dbUtils.dbCID(log,testProject.getPropertyValue("targetSystem"));

int counter  = testCase.getPropertyValue("counter").toInteger();

testCase.setPropertyValue("loopuntil", ratingArray.size().toString());

String cid     = testProject.getPropertyValue("cid");
String region  = "GB"
String country = "GB"
String system  = "BBFC";
String rating  = ratingArray[--counter];
String isAdult = "N";

this.log.info "rating[$rating]";
testCase.setPropertyValue("policyBeingTested", rating);
/*
*  NR and 'unknown' ratings are special cases.  They are handled
*  by the allowUnrated policy, thus, if we hit it in
*  this test it should pass it as we have not 'block unrated' 
*  policy established.
*/

switch (rating) {
	case "U":
	case "PG":
	case "12":
	//case "12A":
	case "15":
	case "18":
		testCase.setPropertyValue("expectErrTypeRTDelete","SUCCESS");
	break;

/*	case "PG":
	case "PG-13":
	case "R":
	case "NC-17":
		testCase.setPropertyValue("expectErrTypeRTCreate","RatingPolicyExists");
	break;
	
	
	case "NR":
	case "M":
	case "GP":
	case "SMA":
	case "X":
		isAdult = "Y";
		testCase.setPropertyValue("expectErrTypeRTCreate","AdultContentNotAllowed");
	break;
*/
}
	
//sqlSetRating(String cid, String region, String country, String system, String rating, String CID) {
assert a.sqlSetRating(cid,region,country,system,rating) == 1;
assert a.cidSetisAdult(cid,isAdult) == 1;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Delete Request" id="1d1a78ea-87e0-45b5-9f91-6012ce7d2f26">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Deleted" id="413db9fc-76ec-4649-b50b-9f9faa39f69a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTDRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Delete Information")

RTDRequest.setPropertyValue("TCaseName",testCase.getName());
RTDRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTDRequest.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify RightsTokenDelete RESPONSE" id="2c9e4a59-92aa-4b8c-9059-92e7fd52cefb">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTresponseVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDelete Response Validation")

RTresponseVal.setPropertyValue("TCaseName",testCase.getName());
RTresponseVal.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTD = RTresponseVal.run( null , false )

assert runnerRTD.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set RightsToken Inactive Status" id="f3b10575-acbe-4d8f-ba0a-d36d912545f1">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("RTStatus","active");

def SetRTStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set RightsToken Status");

SetRTStatus.setPropertyValue("TCaseName",testCase.getName());
SetRTStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetRTStatus, null );

TSrunner.runTestStepByName("Set RightsToken Status for RTD")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Update CID's rating and invoke RightsTokenCreate if necessary" id="c89ffa5b-d344-4794-a626-1f8400e605e0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();

int loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
int counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName("- Remove all Parental Control Policies");
}</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B47B5ED957E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZrb/I6DP4rqPs4lV6gdFQDCQps7HAb8LLLlylLA2SnTSBJuezXn6RAB2zs8G4SEoprP37sOLavOYhC26twjpjAlGRWUUi4l0hLWsyIRwHH3CMgQtwT0BtU2i3Pzpoe2JlomWatpL3YAARBwcrp4zFw9HyQC3RQAFAP7IKTKwIXvJpIqnIeoybhAhBR0mzTyutmUbfMoWV5juNZZjbvOs9aZoQYl9hSJWtqW1IrXtKmQsw8w1gul9llLkvZxLBN0zIe260BnKIIaOXrTUSJI1be6sNsgCAKQ5iFNDKujQOd64B7AzwhQMQMbX0Fp3yZhlk0pE7A8eRCS21R0CRjmhx9QCjBEIT4Haj8tJGY0iBTCSeUYTGNTgZhmQpYRyuoQytPLjTjkNqZQAcMGQc6nwJri9VHY8QQgSjzp98saRfn3VpiOmSA8DFlET88/h0fRBYopDMU6HwX1pba+YBfZKp8jaDXJDCMOV6gjirWGYCIb28TwfOhMj2GxnjVwlwW6IordsY+vaPjJhs1PEFc/OSC9i5nAzICYYzKf4aDbo0JgVa90V1udL+6MucOwkH1qV1KCOwrJ4L0ajfHo6JMi2hj0V+tRL1GhrgxmdtuvUXfHuphx/fpzfDquR3SS3Znrdk/jQZ4s4cFyyCtRz8Uq4d1g99PaVG02sK458PqDDUqnd5NPv9k+pd3LTJ6rti97twyap27UZvG+fZD0/Q7S7p+cx7b/dt+l3Unj8CdvN/P3wi4qXRahcVDoTl5dm/GrX6H08mi/RTe3tK5s2KVObh8KqXh7PE/lO3e/CB+fUNQ7I6qDJq1TEPeEhDfNzMlwYE+TlS9mWo+XCAitLKyUr3Di2W7w4En73BzNu2qU80Xr3KOW5W/et10cqZbLFoNs2L6VmPXZDYsjij6lIyx8qVa7qZsvicII48jEiCmL2gsOx3XvkGsAQEyTdKXj4ASjoZUtuclNwsRdKnrOK4VrKPiNAjfiRPKntyhoku6rDIWiB325PxBT+4jiGcYqcat6prLwuZC5mIOFrEIrewCZAmKZWtnqst6dv7KMTiOZiFSTI2IBnGIsrPpLMmMwTf/tg4gT6T9+jB5bSfjOv62S4HUCbBS4CqWKpLXiL4YLuYukNMBu/sB7+ArcYDVw5L5FAzDDZPDTx9louojrZGK79cH/mBHO9X+C+ufGtdalUHvN7Yv/uDF+inAz13/znHrF1G3fhu1rN9fmn+2NL4pQeO4+lNHwQLvud0tanLkyyFR3r3dOcjOs/FiESev1VXDkEl4OaEsxzBtY4BgLMfYekj/RcRIUYyzdoaU+JHzVH5IMRZTMhBAoEi2l0xyPGNJHCCulsSm7IurczfQA5cydXLCiq9kfigXXMX42x0YelDpSXFP/i0pCz5u7AusPT8yTrkjCkwm6qT2hfWJuoBUwmI56SjbB/8K4Cvnh8I0ySkXIQvqNRbo9JeMGmElDUBIYyKaNS0R7I/VhKdYz5D3ofQJJpnc6SqP/3+X13FSAlCOKKmf4KuNzFNPgEz2RvPW6efpLCdzvXbluPXC/nRuFBofb/SAXfmT+LNkL0/HNV7+Dw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_2aadd613-ffa5-4d3d-a6ac-d26539a7ab0e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:02B5B47B5ED857E6E05307991F0AF6F1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_d0506e57-44df-49c3-968d-cfaa9cba2708</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamCreate</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeStreamRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>policyBeingTested</con:name>
          <con:value>15</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:02B5B498357B57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:gb:bbfc:15</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>rightslocker</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>streamExpireAfterRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamExpireBeforeRenew</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>Rights_TokenDelete_User_20140912_0637401410518260240</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">02B5B498357C57BEE05307991F0A0C1F</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>02B5B462F2D457B9E05307991F0A8A80</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>843</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-10-03 09:23:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>rtDBinfo</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>f92b941d-320f-491d-bd3c-54180528625f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8d8dbbf-4f29-448d-8da9-282a2d7c155e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="Test Configuration/Setup" id="bb1ef6f3-95ee-490c-ba4c-f64720ebaef4" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" id="15727dc4-3e84-41b1-820d-d9cccf5fb2d3">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Properties" id="ba48c1f4-ae99-42a1-86ca-1e82bf520572">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("username",null);
testCase.setPropertyValue("password",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("nodeaccountid",null);
testCase.setPropertyValue("nodeuserid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("userrowoid",null);
testCase.setPropertyValue("accountrowoid",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assert",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities" id="e558c277-c98d-47a4-a364-23896f16263a">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username","jbaisakh");
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS" id="ffc49871-355d-45eb-a3bf-a87b2641ce6e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Disable QC Uploading" id="f60b5192-360d-48e6-916a-26682bdcd122">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS GET" id="5db63c71-d751-4745-9c3c-382d82ecbae8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information" id="97684d37-c24b-44be-83d5-cd4f363ba95a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID, b.ROW_OID, c.ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid</con:query>
          <con:assertion type="XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>uname</con:name>
              <con:value>${#TestCase#username}</con:value>
            </con:property>
            <con:property>
              <con:name>nodeid</con:name>
              <con:value>${#TestCase#nodeid}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TestCase-Level Property Transfer" id="68c363d0-7764-447c-b172-30c973210872">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false">
            <con:name>accountoid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath>
            <con:targetType>accountoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false">
            <con:name>useroid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath>
            <con:targetType>useroid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false">
            <con:name>userrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[1]</con:sourcePath>
            <con:targetType>userrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
            <con:name>acctrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[2]</con:sourcePath>
            <con:targetType>accountrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Setup base node-level information based on calling Node type" id="2dc820c5-f355-4ad1-b506-a6ea45e70f84">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def baseNodeType = testCase.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
testCase.setPropertyValue("cid",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("alid",testProject.getPropertyValue("alid"));
//testCase.setPropertyValue("deceorgid",testProject.getPropertyValue("deceorgid"));

//if (testProject.getPropertyValue("targetPort") == "443") {
	//testCase.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost"));
	//testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost"));
//} else {
//	testCase.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost") + ":" + testProject.getPropertyValue("targetPort"));
//	testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost") + ":" + testProject.getPropertyValue("targetPort"));
//}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
testCase.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testCase.setPropertyValue("nodeaccountid",testCase.getPropertyValue("assertionAccountId"));
testCase.setPropertyValue("nodeuserid",testCase.getPropertyValue("assertionUserId"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Promote variables to calling TestCase" id="47d094af-1e8b-4641-a201-25f7af6ec2a5">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def toTCName = testCase.getPropertyValue("tName");
def toTSName = testCase.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = testCase.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodetype":
			case "expectErrTypeSTS":
			case "expectErrTypeSTSGet":
			case "username":
			case "password":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,testCase.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        <con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property>
        <con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        <con:property><con:name>assertId</con:name><con:value>_120426b5-97ae-4376-976f-b1aa1743f38c</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value></con:property>
        <con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property>
        
        <con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property>
        
        
        
        
        <con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value>nVdbd6o8E773V7jcly7LQWnFtdu1wlFUVBCPdxgioAhKQNBf/wWs1nZ3H97vostmyMw8mXmSPPmJ7X3AdgDGKE78KKxq0mttzbAsz29aDQetm41Ws7lutNvrdYPjmhxsvdhNHrZqVQ3jFGkhTuwwea2xNMM0aLbBshbDdTi+w/JPHNde1aozFGMSmUx5omvVfB+EuFNmfa2lcdiJbOzjTmjvEe4ksDMB+qBDZnbsG6Ta288ryDJh/OYlyaFDUfDJQRAFAXyC0Z76SX2a89PBnYnvhnaSxug9p4Nfa+++WZY9Zc2nKHYplqZpiuYpMsfBvvuj9la5OSNHCzfRdSzaYRT60A78i12A0lHiRU4VBG4U+4m3/01ohmLoInQD5bABmVb4o0Z9JCjR/WOkTyBjbDewZzO3YCbaoBiFEFWnpvZa+/FPDby6WrEd4k0U7/GX8X9DhMITCqIDchr4trAbuH+P+E213n4i2NFCGKTYP6FhwZKDDRGujmO08fOBjwn3HFwtu1/N8Y1gCP6XjvykHnES2NQ3lZF8F+Hk/2nXY6uuUWZ2kKI34xwKo3k8lqPxaZOl7VXESWEwDYdr+FpCeJx8BXXv9Pv4K0/vtHp3mpszK3c2m65Ob0aeVG/lG7IZ0/V8aUmU4xq2Z8LJiT4dB8tgPtLseAXOx73YPkR1tOSgPkl9WZ6nblcfyxVlFrKB11otz71nc6NsPSaEMgXC1taQgrFnhcOIPWzW464b+Wfa7ncVf7FayJKqZnKP3eOROYvPp5Y605FUwWOHkazntM6MxDOmT4YDXj/W9LiGYl19dC4XWfy/4GheshP7PhCLg2JDdmeC3nRNk9KLKILzxAWZJgCX/G3BUHB3R2/nq3xGC8AwFCCJQrCVBzrYqYCZyoKni7OZnosX0BPc4Yw4WhUQrATdlDMpW0ozw+jKmWc56uy8VoN0dZGHOsCls+jpsinPJNOSdR1EV1uuS2s13+oTPdOMpVQhASQ5P1wclU+QmvuQ1Th9wrHLCZeuFjNiV86D/fC0tuRAF3VVnBzVibZuSobcA+ZyDlklJb6Xwf4QVZZT4cGpd0BbgJSMJjnBRbd2mW5N2aFk2qXN+mzTNbWnGzgTjXJVakXOerPp5aMWoqCLzl7OZQuMr7WAlqgM6dWih+05F+omyCS3dO7LmTO6AdENOquI11oN5MyUzelQ0U0tk0Fpk+QswGt26K1V7wSbRt6zwPaxMaIhz5WQfA/NEzxzx4qtKmC9nzGwaXrQ53x7EWXuqp1JxrLXj1YaCTMEhiwIBiCAaFAsjdRfAANhxo0OPs/6aLBRoj3y4orORP3d6ZLTbb85csfDOSdtdi9j1R83bcejtACy2+YOaBpy+oxn2I65pEwp9C/Po/50gfx4eUmGnME8+22uYs7T6UKKghenu1hO+/V8CQ1rNJ5M5+NLng+P2/YlSLojoRtPerrkjoYIjTGsU7StCFZb4sRld0v4tDFpxFWAqwsAqFvXlX1CYKG7vZKwa+oyIS/QxUwV56I6AapalzVBMoyN4jFjqM7SKTPUNdkJSJnOy4UZVFaiIJFO0fZ8dViyCr2ygFMGM1qy4hpTrt5boJUxDKxZArLDbBMyDK0ejO5Gz1yoFwxwtGwikF0kVFINTO3RoUfn/dkzzRwNJ+hNeDBt5hN2l488d3XeuasdacryYessLRDMrAeOaYRi84phyaYO2tf9luvatGkGcJ8f1nuYSxbpWekcWYJsKgY9zSUJ9K82bAE2x8uLvNVFufSvgFy3CS1O64WHl+HQH1lySkibPtBlu2bpv3KsoFjlM8eOIjDAV47JV47JYHOsa22JwdyzeMDzzBVU+Wi8zAY9/kAbi8GuItQVyk38oDUK25nVr8+Zc/bibY35nNckT6yHm6XXXCcCbV+ggXq7F9U3d1L43ArO+kA3uKlPBWd6i44ZHlSGGhPKzeSiUHyc1oX9yt9fLs0WO92PJ+lJm9p9zJy99XHOZ9tx95miYvXMXV5WJ0NZRHB5vUe+HpJ34/UYpR4P2E8n8E16TdL1FsHkNizuYU2qKuRytJM/y7jC4juNTTm1cyi0IE5QmNTeCq9CwnVSIvR8p0NuzuuYB7woigrTBIIo8S1Fpls0o9CA5nieVZ6bN613RfEFohiFG7/IVYjZ62X9Z4Bw31kjO0Zx7Q+RijpVtdAk6iMKMbIiombBMyNzbf6Z4bmm0morHNNmWU6Sn2WOYRihVh1GySgcxWCToPhBIDe/CmQTQf/go0JFv2sJnJBCHO1TmgTM08l+ClFKZHZcKN0O22pzZQEoJ90fIPlATrf4EOHk6eAdSjHz22V8/XZbMZnj+MUEXIAWEOkW+kbSMzfEv6yM/Vb638KD1PELzULKl8Q+vCL5/OmDDQUN7lSgX2j2hvk+9V9def5XV+oPiKivxbhnck7+Q97bw4RobSLHyvcIJk072k/Hp/R0Sss2vRRSMybhKZriqQmCKZGLZyvaoZC6R6D+RajfMX/Je7d/RpcmXjhJyC7fE0ZVy+HfH2mfvEkBEpQn39nEgDzLiuR/fLnBDizmEfOY/GRR7HzU/ZtYD3kI5OKE8kO3GBUK+/y5ve87oQMjEtUnh1QUP8b+zv+73J+N93LdoSSEFes0Qb//Ui1On9eaDWGUhokm1UrD44lYYk7OB9T5mPRLmFLivr9ZcvzbN8tCH0ygh/Z27T7X//vkhl82HiLihf0Sy2stJ69vkjx0H07gd4CPhzBDtt7D3vuE9+0X86+Wh8p95e/b/wA=</con:value></con:property><con:property><con:name>sName</con:name><con:value>Common Test Steps</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>null:null</con:value></con:property><con:property><con:name>tName</con:name><con:value>Get SAML Assertion - STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>jbaisakh</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" id="76c28b6c-1b0d-466d-996d-ae8451d29521">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="3fbacd75-71ef-4aae-9a68-bc64e4061730">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("streamhandle",null);
testCase.setPropertyValue("dbxmlresponse",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectTransactionid",null);
testCase.setPropertyValue("expectNickname",null);
testCase.setPropertyValue("expectJDBCSQL",null);
testCase.setPropertyValue("expectDBCreatedBy",null);
testCase.setPropertyValue("expectDBDeletedBy",null);
testCase.setPropertyValue("expectDBCreateUser",null);
testCase.setPropertyValue("expectDBDeleteUser",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="df33e884-8aca-4565-b20f-a988b85da1d3">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
testCase.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
testCase.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
testCase.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
testCase.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
testCase.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
testCase.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
testCase.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
testCase.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
testCase.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
testCase.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));

if (testCase.getPropertyValue("expectDBStatus") == "" || testCase.getPropertyValue("expectDBStatus") == null) {
		testCase.setPropertyValue("expectDBStatus","deleted");
}
if (testCase.getPropertyValue("expectDBCreatedByNodeType") == "" || testCase.getPropertyValue("expectDBCreatedByNodeType") == null) {
		testCase.setPropertyValue("expectDBCreatedByNodeType",testCase.getPropertyValue("nodetype"));
}
if (testCase.getPropertyValue("expectDBDeleteUser") == "" || testCase.getPropertyValue("expectDBDeleteUser") == null) {
		testCase.setPropertyValue("expectDBDeleteUser",testCase.getPropertyValue("useroid"));
}
if (testCase.getPropertyValue("expectDBCreateUser") == "" || testCase.getPropertyValue("expectDBCreateUser") == null) {
		testCase.setPropertyValue("expectDBCreateUser",testCase.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA row" id="651d7bb0-fce4-4abb-a398-dfdbed7e05d7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA where STREAM_HANDLE_OID = :sh</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="c8e5b994-e9f4-41df-b92b-3ade67cb5792">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data" id="a1adb4bc-8fdf-4c49-813c-3c2db45bf4b7">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def urnnode   = testProject.getPropertyValue("urnNode");
def acct      = testCase.getPropertyValue("nodeaccountid");

String XMLbody = testCase.getPropertyValue("dbxmlresponse");
String expectStreamHandle = testCase.getPropertyValue("streamhandle");
String expectAccountOID   = testCase.getPropertyValue("accountoid");
String expectRightsToken  = testCase.getPropertyValue("rightstokenid");
String expectUserOID      = testCase.getPropertyValue("expectDBCreateUser");
String expectStatus       = testCase.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = testCase.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + testCase.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = testCase.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_DATE/>
            <UPDATED_BY/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>975DA31F89B0B21EE0401F0A059979D9</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>975DA31F899FB21EE0401F0A059979D9</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>0900</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>2010-12-15 11:29:52.337</EXPIRATION_DATE>             <CLOSED_DATE>2010-12-14 11:29:53.657</CLOSED_DATE>             <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:0910</CLOSED_BY_ORG_ID>             <CREATED_DATE>2010-12-14 11:29:52.335</CREATED_DATE>             <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>*</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>${#TestCase#expectDBStatus}</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" id="f56e5f87-37d4-40c1-a939-0dfffbe07718">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="879f374c-a054-41c8-8ea2-ae9a98a4cb64">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("streamhandle",null);
testCase.setPropertyValue("dbxmlresponse",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectTransactionid",null);
testCase.setPropertyValue("expectNickname",null);
testCase.setPropertyValue("expectJDBCSQL",null);
testCase.setPropertyValue("expectDBCreatedBy",null);
testCase.setPropertyValue("expectDBDeletedBy",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectDBCreateUser",null);
testCase.setPropertyValue("expectDBDeleteUser",null);
testCase.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="345bdde1-caeb-431b-87a0-14c64be8a739">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
testCase.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
testCase.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
testCase.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
testCase.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
testCase.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
testCase.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
testCase.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
testCase.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
testCase.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
testCase.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));


if (testCase.getPropertyValue("expectDBStatus") == "" || testCase.getPropertyValue("expectDBStatus") == null) {
		testCase.setPropertyValue("expectDBStatus","deleted");
}
if (testCase.getPropertyValue("expectDBCreatedByNodeType") == "" || testCase.getPropertyValue("expectDBCreatedByNodeType") == null) {
		testCase.setPropertyValue("expectDBCreatedByNodeType",testCase.getPropertyValue("nodetype"));
}
if (testCase.getPropertyValue("expectDBDeleteUser") == "" || testCase.getPropertyValue("expectDBDeleteUser") == null) {
		testCase.setPropertyValue("expectDBDeleteUser",testCase.getPropertyValue("useroid"));
}
if (testCase.getPropertyValue("expectDBCreateUser") == "" || testCase.getPropertyValue("expectDBCreateUser") == null) {
		testCase.setPropertyValue("expectDBCreateUser",testCase.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row" id="e2350a5d-2d01-4e97-8eab-495746ca7773">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>${#TestCase#expectDBStatus}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer" id="9989e80c-2546-43bc-b316-606453121e97">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data" id="da5bfe73-d67c-4fad-93da-d0bacf87b0f1">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def urnnode   = testProject.getPropertyValue("urnNode");
def acct      = testCase.getPropertyValue("nodeaccountid");

String XMLbody = testCase.getPropertyValue("dbxmlresponse");
String expectStreamHandle = testCase.getPropertyValue("streamhandle");
String expectAccountOID   = testCase.getPropertyValue("accountoid");
String expectRightsToken  = testCase.getPropertyValue("rightstokenid");
String expectUserOID      = testCase.getPropertyValue("expectDBCreateUser");
String expectStatus       = testCase.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = testCase.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + testCase.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = testCase.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == 1;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectStatus[$expectStatus]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HISTORY_OID>978DCC35FCDE7C08E0401F0A05996438</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY/>
            <UPDATED_DATE/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="96adc8c3-fc98-40d8-a3ab-432c326e8136">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b553030f-44c8-4bf7-a90f-c95e0f824990">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="ab897124-9c75-4a18-90b4-e3fcaabf8f66">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" id="c06f0e24-d744-422b-b2f6-c7b7dc104331" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="62250e35-d8f5-4dc8-80f9-fc359ae4787e">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="bf358cbe-2286-41f7-9686-0245d442fb53" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="27b46ae1-f027-49fc-90db-99162827d346" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" id="6014d9f0-c53f-4614-8a8c-07d3560043db" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" id="25b1102f-24ce-4c12-9fb9-6aac4f6cd511" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" id="3f506e77-2b10-4fd0-909c-149f553ab87b" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" id="70fba712-669d-4ac2-a6da-c6afaed0a9b8" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="d9ffdb8a-1933-4217-bdd5-31ffca74c922" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="2170de30-82ec-40f6-a486-bebc48f2ed1c" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_10001-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User Content PG</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">R1_RightsTokenDelete_Policy_RTL_TestCases for Coord-2293</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPaxE5ykXJJMYSYFus0s9EJou9uXHeOI4HMSh8YOpP31xw6QBXo5bPuUsSJ9+iTLks44TmLL9TiHTNCU1YokZtwtpR0tz5ibYk65y3AC3BXEDbzR0LXqhou3JlrN73e03wZuN+ypPdUBGrbeMO1THdumrU9xo+kYuAnW1JCqnOfgMy4wEx3NMsymbli6ZU/MU9cw3aZdN06tR612DxmX2FKlLq3WpAre0eZCLFyEVqtVfXVaT7MIWYZhop+jYUDmkGCte7aOqHSUdTf6pB4CgTgmdZIm6Azt6ZyF3A1oxLDIM9j4Ct/zZSDDQVIn5DT6plW2EPpslpbHHmYpowTH9AWr/IxAzNOw5sVRmlExT94NwjQUsA4F0YnZYN80tE/tSKA9hhnHOp9jc4M1hhlkwAjU7sZ+R/t23K2VppMMMz5Ls4TvH/+OD7AlxOkCQp1vw9pQOx7wjUx1z4C4PiNxzukSrlSxLjABvrlNIMdD1W4ymNFiSLks0IIrdmiX3sFxnY0+jYCLz1zQzuWsQe5xnEOX//Q8+/q2Mb8x0fxlbFw3bulicvlrSfxOSWBXuRRUV7s+HhRlVUQbeG42szsLoWVwe17E39FVe7W0i4eTeDC4u20s8Y9s8hLGC9vpRcOHkwcneolHw++OcTkZTNIk7J83eSFlz05rcPVr5LSvvSfrRxryG/vu/vHyCflWcvkQ+Z45HNwH/b4IUjHgj4/Du8t+O+6xlhM1J+OLG++haf5YIX94l16Z0WUw9/tsdXIufk3t6DZORsNs1KnC2eG/L9u++SCf/gNEbI+qDPx+7ULeEhYfNzMloaE+K1XdhWo+XAATWldZqd7h5rLd0dCVd7g+m4bVclq981av3TbMc3tgNE+NtuOYF4bX8k7NbZNZszig2EvZjCpfquWuy+ZjgiRxObAQMn2Z5rLTce0DxD4WuOazsXwEKeMwSWV7NldtyAteGLxI2i+CNkA0nyOWg1a7SsU1u868mYBsvye39nryGAhdUFCNW9U1l4XNhczFE17mIjbrS1xnkMvWnqku61oNu4k4TRYxKKYoScM8hvpivigzg/j6a+mY8FI6HkzK1/ZuXIf/timQOiFVClzFcg7yGuGN4dLYBvJ+wM5uwFt4Lw+pelgynyKjZM1k/9efMlH1UdWI1+sNgl6wpV1p/4X1Z437Qy+4+Yrt717w2/wswOddf83x8AtRD78atazfL5q/tkQflCA6rP7KUbikO263i5oc+XJIdLdv9wnXn+r5cpmXr7WthmEm4ZF6D8iwUAAkl2PseZL+CwxVKOionaEifuC8ku9TzMWcBQILSGR7qZXHI5bEALhaEn3ZF4tjN9A9lzJ1AgrxlqwXywVXMf5wByYuUXpSfCM/qzQL/9zYG1g7fmScckcUlEXqpPaF53fqgqQSlspJl2a74G8BvOV8X1glueIiZEFNcwHv/6mpEdbRMCFpzoTf10rB7lgteYrnBbh/lF7BlJO7WuXp/+/yOi1LgMgRJfVLfLWRueoJsGhnNG+cvp7OTsO5aLcM09mbzlarfVElZY9d95X4tWQnT4c13v0P</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish LockerViewAll" searchProperties="true" id="b49c9f94-0985-4394-b892-152ece996970">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="fed55553-982f-4098-b65a-89dbc3bfe0d3">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass", "urn:dece:type:policy:LockerViewAllConsent");
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="1dbb3c0d-c81d-4628-9bf9-fb9dee60369f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyResource") == null || testCase.getPropertyValue("policyResource") == "") {
	testCase.setPropertyValue("policyResource","urn:dece:rightslockerid:org:dece:0900");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}
if (testCase.getPropertyValue("policyRequestEntity") == null || testCase.getPropertyValue("policyRequestEntity") == "") {
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for LockerViewAll" id="f8d1c4a4-19fb-4ac9-bfd3-dc503244b08a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate LockerViewAll if necessary" disabled="true" id="bebe9a9b-76ea-483e-b3c9-a20956657e90">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def exists = testCase.getPropertyValue("policyExists");

if (exists != "true") {
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVftc6I8EP9+fwXDfXwGA4iITHWGgtzR2lf7dvflJoaouUKiJCjtX/8ELFat7fVlpjNOls3ub3d/2d0ecJgmputxjjNBGFWioKv+QXETGq2RrcFx3NIs3Yw12LKx1pLyEYRG2zE6qhJxnuOIcgGp6Kqmbliabmp680q33ZbuGp2Gaeu/VeUGZ1yalioNXVWKNKHcrdx21TyjLoOccJfCFHNXIHfonQxcqenCGpPaO1ihrBxmvakQMxcA1IgxwkmCGoil4ABs6RzE3B2SCYUiz/CTz5h31ae7y+WysWw2WDYBpq7rQO8AqRNzMvmu9r7Vl3Ec0TFbnX1IGSUIJuQRlqBOsJiyWPGSCcuImKavmDaAoZemNVwgDRkW/a6CZwcVunda2gKZcajxKTRqY5d4jDNMEVauL6Ou+v19FVzdvcog5WOWpXzn/DFImC5wwmY41ngdWY3u/Rb3pKt3gJEbUZTknCzwaUmTGUSYK+cZHpNiQLgkX8yVqvxKweUfqVmG0UfKcgA2sUroYE92AjLBXHymZpv1Wlm5gUmOe9ZPw/txe3Mzf7C8yYXZ1AHiuheEwyXrVhA2lVeg1uV+Ou+Sdc2tp0v+oNU/sljo8yj6jenST5DM0q8H59dt+9fN+akdmscXhj8Kf47jSRGR08K/j/tng/bxxSBo3zL+2Dm8+3E2nzhH0bfg5u/d0W0Kz4MR4vz3/Wn/6OcMzaZ87mS3l6n+F4LHHJ78Z3gg9o79awYWQNj2/KqfpIPrRy+7FfN7AO3rQ+Pom2U6+o+CMmckwqK4wGGHdZ9j2oxhW1i3hGE++ouRqI8lPaJACWW9oHi7vZQSEmvjStWdlT2KC0yF2itvla3FzWUDIrEri7k6O6HRbB52QtOxw6Zl6J1Dy2r1m1bHcoyw4zl1D1qh2IHoMzompa+yy6748zZAlLoc0xhn2oLlaIq5+obFAAqoRPRSPg5GOb5isosH9qEdWF7oOHpgh7bTbrXaQWD3rbAThmbLUpVTJs7oWeaNBc62O3hnq4NfYkRmBJdtvuQ5l0TnQqZkDhe5SIzGAjYozuUgyMpe7JqW0wKcpLMEl4BByuI8wY3ZdFYlCPDVr6lBxCvpZf+qen+vhrf7rc6E1IlJqcDLWA6xrCbeM4r0OpBXAzbMzYBr814ek/KZybSKjKAVku1Pz2wpabKmiuf7/aE/rGGvtT9w+7OXg4E3PP/K3T/+8I/xWQOfd/01x4MvRD34atSSv1+8/vImeIOCYJf9a0fxgmy4rTcouRTIkdGr3+4cNuaNfLHIq9faLsdhJs0DA5gGGGKUy5n2cMXuMQVrE+BdK8Ua9Y7ntXwbXy6mdCigwKnsLUp1fMc+OcS83Ccj2RuL9y6rWy5l3gQuxD6Zn8i1s0T85maKXFTqSfG5/FmyLH4u1x5bG35knHKJFIROylO5PDy8QgrEpFkipx3LNo3vM7DP+bZwneQ1FiHZNMoFfv2LUo6xrgoRYjkVUaBWgs3RWuEUDzPsPiu9MFON76d9rOCv7mN3J4OhHHIpVNe65N/KGqnogrBarn0Vlq5ayH8vpHM62RjlTwA3p7nfN5pBX//nNN+OpPdC/FKykdPd99D7Hw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:CE13DE0F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:LockerViewAllConsent</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10018-RightsTokenDelete - Policy -RTL_CS - AllowAdult - US - MMPA - Can create RightsToken that IS_ADULT = 'y' without policy</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="c92f70aa-5f55-4af6-b6c6-605b3b2c060e">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="bbe5c65e-8ba5-468b-829a-86e33029ef0a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="4fb14976-8542-4a7f-9772-55041a2510c5">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.getPropertyValue("policyCreator") == testCase.getPropertyValue("assertionUserIdFULL");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="09a7fa6f-36fd-4327-a405-53adf2952bf0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="d53a9179-45dc-4222-80dd-3f7a04cfff31">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="762fd677-a296-4418-b027-4e84cda564bc">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));
//testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZbc+I6DP4rTPaxE5ykXJJMYSYFus0s9EJou9uXHeOI4HMSh8YOpP31xw6QBXo5bPuUsSJ9+iTLks44TmLL9TiHTNCU1YokZtwtpR0tz5ibYk65y3AC3BXEDbzR0LXqhou3JlrN73e03wZuN+ypPdUBGrbeMO1THdumrU9xo+kYuAnW1JCqnOfgMy4wEx3NMsymbli6ZU/MU9cw3aZdN06tR612DxmX2FKlLq3WpAre0eZCLFyEVqtVfXVaT7MIWYZhop+jYUDmkGCte7aOqHSUdTf6pB4CgTgmdZIm6Azt6ZyF3A1oxLDIM9j4Ct/zZSDDQVIn5DT6plW2EPpslpbHHmYpowTH9AWr/IxAzNOw5sVRmlExT94NwjQUsA4F0YnZYN80tE/tSKA9hhnHOp9jc4M1hhlkwAjU7sZ+R/t23K2VppMMMz5Ls4TvH/+OD7AlxOkCQp1vw9pQOx7wjUx1z4C4PiNxzukSrlSxLjABvrlNIMdD1W4ymNFiSLks0IIrdmiX3sFxnY0+jYCLz1zQzuWsQe5xnEOX//Q8+/q2Mb8x0fxlbFw3bulicvlrSfxOSWBXuRRUV7s+HhRlVUQbeG42szsLoWVwe17E39FVe7W0i4eTeDC4u20s8Y9s8hLGC9vpRcOHkwcneolHw++OcTkZTNIk7J83eSFlz05rcPVr5LSvvSfrRxryG/vu/vHyCflWcvkQ+Z45HNwH/b4IUjHgj4/Du8t+O+6xlhM1J+OLG++haf5YIX94l16Z0WUw9/tsdXIufk3t6DZORsNs1KnC2eG/L9u++SCf/gNEbI+qDPx+7ULeEhYfNzMloaE+K1XdhWo+XAATWldZqd7h5rLd0dCVd7g+m4bVclq981av3TbMc3tgNE+NtuOYF4bX8k7NbZNZszig2EvZjCpfquWuy+ZjgiRxObAQMn2Z5rLTce0DxD4WuOazsXwEKeMwSWV7NldtyAteGLxI2i+CNkA0nyOWg1a7SsU1u868mYBsvye39nryGAhdUFCNW9U1l4XNhczFE17mIjbrS1xnkMvWnqku61oNu4k4TRYxKKYoScM8hvpivigzg/j6a+mY8FI6HkzK1/ZuXIf/timQOiFVClzFcg7yGuGN4dLYBvJ+wM5uwFt4Lw+pelgynyKjZM1k/9efMlH1UdWI1+sNgl6wpV1p/4X1Z437Qy+4+Yrt717w2/wswOddf83x8AtRD78atazfL5q/tkQflCA6rP7KUbikO263i5oc+XJIdLdv9wnXn+r5cpmXr7WthmEm4ZF6D8iwUAAkl2PseZL+CwxVKOionaEifuC8ku9TzMWcBQILSGR7qZXHI5bEALhaEn3ZF4tjN9A9lzJ1AgrxlqwXywVXMf5wByYuUXpSfCM/qzQL/9zYG1g7fmScckcUlEXqpPaF53fqgqQSlspJl2a74G8BvOV8X1glueIiZEFNcwHv/6mpEdbRMCFpzoTf10rB7lgteYrnBbh/lF7BlJO7WuXp/+/yOi1LgMgRJfVLfLWRueoJsGhnNG+cvp7OTsO5aLcM09mbzlarfVElZY9d95X4tWQnT4c13v0P</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F/User/urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases for Coord-2293</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10001-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User Content PG</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="d9c41120-2d21-4f9a-96f1-f5be54d072f3">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="448440cb-87e5-4657-a984-738aa55c0dd0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="505f6aab-d5b0-41cd-951a-dd111dc2197d">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.getPropertyValue("policyCreator") == testCase.getPropertyValue("assertionUserIdFULL");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for Policy" id="4da6b64d-bec5-4ec6-9ca3-d17d5eb250e8">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="d0e3936b-bc0f-4850-bcce-bb59e34a6c68">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", testCase.getPropertyValue("policyClass"));

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for Policy" id="765f35de-79ff-49ef-8bb0-6db55bd01589">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));
//testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdrU+o8EP4rTM9Hp/TKrSPMcD1ywGtBPX5xYrqFSJvWJgX0179JgQqIvhz9xGS7l2c3T3aXU4bCwHSajEHCSUQLyzCgzMmkdSVNqBMhRphDUQjM4dhxm+dDxyzqDtqYKIV+p648erb1ZJi+qaKqXlJt37DUp0pNV6u4UjbAq/plVBaqjKXQp4wjyuuKqRslVTdVszoydKdkOLZdLJvVB6VwCwkTvoVKUVfWoJasrkw5jx1NWywWxYVVjJKJZuq6od2fD108hRApjdNVRlmgpLHWx0UPMAQBLuIo1E61HZ1TjzkumVDE0wTWsbzPYumaXtOEjsfI5JeS24LXp36UHduIRpRgFJA3JOtzDnwaeYVmMIkSwqfhp0kYunSswhKr2LDpL0XbhXakox2ECUMqmyJj7esGfEiAYiiMb/p15ddxt5aZjhJEmR8lIds9/hseoHMIohg8lW3SWkM73uGBSjVOATt9ioOUkTlcSLLGCANb3ybg410VrhLwyXJImCDokkl02ja8veOqGh0yAca/c0Fbl7NycouCFBovbEFvMK6cXZwR7frEumota/qEu7NZVM8AbCtngvxqV8c9UuYkWlksFrfXZvfKtnvR8/2sHQ7Dsdu1B+e17sC+W74FzfLvYdiBZnkZBzS9nwwYvdQsfxA044e/+vAlfkgASFkb9MblcTx6vbXn89ew1+50u2OjGvZ7nYvS2PXeBjN6Pfs7aD2cDJNeMOmC+YefMVLzZ79tN6ieu7NB/9J6M5qU6NA7mT4sqoPp3R+h1rmrtC4tf1mt5+ls4d+Vbd68mz49A+abo6RBv1PoiVtC/OtmJiXEU/1M1Yll82EcKFca0kr2DicV7Y54jrjD1dnQTbvVqvYMu2aUqlarq5csvVSrGT29aXRKrU2TWaHYg9iOqE9kLNlyV7T5GiAOHQbUg0SdR6nodEz5wmMHcVTo0xvxCCLKYBSJ9mx41uRtqRtJpZRwwzRLafmNPtcsMlcKFxG/pJdJ0+eQ7DZla6cp3wAmMQHZuSWxmWA246IYL2ie8sAozlGRQip6eyLbrGPa1ZLGSBgHIKFqYeSlARTjaZyVRmOrX9F7MMukN91R9tw+TWz/26YGQscjUoHJXFog7hEOTBdrk8jnCZe3E964b6YekS9LFJQnBK+Q7H5654kkSE6SZrvdddvuBnau/Q/W3zXuDJvu1U9sH9vuo/FdB98P/bPAwx9kPfxp1oK/PzT/aKl9QUFtn/15IG9OtsJuNjUx88WUaGze7gsqvhTT+TzNXmtFTsNEuNfke9B0U3MBp2KOvY6iGVAt96IdtTTkwPeC5/JdiCmfUpcjDqFoL4XseMSW6AKTW2JfNMblsSvoTkhROg5LfkjWDsSGKxF/uQRjB0s9Ib4SP4so8d5v7ICvrTgiT7EkckIn8iQXhtdPeIEj4ZaIURcl284POTgUfFeYFznHwgWhnlIOn38pyBlWVxDGUUp5v6Nkgu25muHkrzE470of3GSjO9/lyf8v8yrJKIBB/ANgJPMvVzJHPgE62ZrN66AHxrNt6p2aGM+V7fFc7vVqeVF20DU+iD9Ktuq0z/HGfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:1024BB8420D95837E05305991F0A6FF9/User/urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:1024BB8F1491583BE05305991F0A1D5B</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1024BB8420E15837E05305991F0A6FF9</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases for Coord-2293</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10012-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - NC-17 Content NR</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="aa75d0ff-c97f-4379-b02e-9b47c1d0b01b">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="b489b24a-d156-485d-bf4e-b88d36067a17">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="b6a3484c-22f8-490e-89a6-f59ba1865ab8">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="5b9d0d5d-8dd2-4152-a39b-e0256feac439" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="4241bd21-33c3-4bb4-bbe2-535b01ee0c49" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="96bc2b28-cc6c-466c-af60-967c72afdb68" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="2a2bc556-e9b3-4bed-a752-b41e825c5875" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="fe236c8b-9f3d-4296-961b-25831efaa5fd" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="e6fe3ca1-b7fb-496a-857d-48a95c490d72" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:NoPolicyEnforcement" id="bc841d28-fb22-44d0-a624-62f335606fd0" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:NoPolicyEnforcement" id="cfe835fd-e6be-4672-ac03-a2b98feb60c0" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="DeleteUserPolicies" id="96a14680-c601-41d5-821e-f4a4fd9baf6b"><con:settings/><con:config><script>import dbUtils.dbPolicy;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )
def username = context.expand( '${#TestCase#username}' )

a = new dbUtils.dbPolicy(log,testProject.getPropertyValue("targetDECEDB"));
log.info "useroid"+useroid;
log.info "username=="+username;

a.policyDelete(302,username,"deleted")
a.policyDelete(300,username,"deleted")
a.policyDelete(304,username,"deleted")
a.policyDelete(303,username,"deleted")</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPaxE5ykXJJMYSYFus0s9EJou9uXHeOI4HMSh8YOpP31xw6QBXo5bPuUsSJ9+iTLks44TmLL9TiHTNCU1YokZtwtpR0tz5ibYk65y3AC3BXEDbzR0LXqhou3JlrN73e03wZuN+ypPdUBGrbeMO1THdumrU9xo+kYuAnW1JCqnOfgMy4wEx3NMsymbli6ZU/MU9cw3aZdN06tR612DxmX2FKlLq3WpAre0eZCLFyEVqtVfXVaT7MIWYZhop+jYUDmkGCte7aOqHSUdTf6pB4CgTgmdZIm6Azt6ZyF3A1oxLDIM9j4Ct/zZSDDQVIn5DT6plW2EPpslpbHHmYpowTH9AWr/IxAzNOw5sVRmlExT94NwjQUsA4F0YnZYN80tE/tSKA9hhnHOp9jc4M1hhlkwAjU7sZ+R/t23K2VppMMMz5Ls4TvH/+OD7AlxOkCQp1vw9pQOx7wjUx1z4C4PiNxzukSrlSxLjABvrlNIMdD1W4ymNFiSLks0IIrdmiX3sFxnY0+jYCLz1zQzuWsQe5xnEOX//Q8+/q2Mb8x0fxlbFw3bulicvlrSfxOSWBXuRRUV7s+HhRlVUQbeG42szsLoWVwe17E39FVe7W0i4eTeDC4u20s8Y9s8hLGC9vpRcOHkwcneolHw++OcTkZTNIk7J83eSFlz05rcPVr5LSvvSfrRxryG/vu/vHyCflWcvkQ+Z45HNwH/b4IUjHgj4/Du8t+O+6xlhM1J+OLG++haf5YIX94l16Z0WUw9/tsdXIufk3t6DZORsNs1KnC2eG/L9u++SCf/gNEbI+qDPx+7ULeEhYfNzMloaE+K1XdhWo+XAATWldZqd7h5rLd0dCVd7g+m4bVclq981av3TbMc3tgNE+NtuOYF4bX8k7NbZNZszig2EvZjCpfquWuy+ZjgiRxObAQMn2Z5rLTce0DxD4WuOazsXwEKeMwSWV7NldtyAteGLxI2i+CNkA0nyOWg1a7SsU1u868mYBsvye39nryGAhdUFCNW9U1l4XNhczFE17mIjbrS1xnkMvWnqku61oNu4k4TRYxKKYoScM8hvpivigzg/j6a+mY8FI6HkzK1/ZuXIf/timQOiFVClzFcg7yGuGN4dLYBvJ+wM5uwFt4Lw+pelgynyKjZM1k/9efMlH1UdWI1+sNgl6wpV1p/4X1Z437Qy+4+Yrt717w2/wswOddf83x8AtRD78atazfL5q/tkQflCA6rP7KUbikO263i5oc+XJIdLdv9wnXn+r5cpmXr7WthmEm4ZF6D8iwUAAkl2PseZL+CwxVKOionaEifuC8ku9TzMWcBQILSGR7qZXHI5bEALhaEn3ZF4tjN9A9lzJ1AgrxlqwXywVXMf5wByYuUXpSfCM/qzQL/9zYG1g7fmScckcUlEXqpPaF53fqgqQSlspJl2a74G8BvOV8X1glueIiZEFNcwHv/6mpEdbRMCFpzoTf10rB7lgteYrnBbh/lF7BlJO7WuXp/+/yOi1LgMgRJfVLfLWRueoJsGhnNG+cvp7OTsO5aLcM09mbzlarfVElZY9d95X4tWQnT4c13v0P</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The supplied policy was not found.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E/User/urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E/Policy/urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases for Coord-2293</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10001-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User Content PG</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>useroid</con:name><con:value>102696CB6C7801B8E05307991F0A6A31</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150228_1425128664290</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="d17e6f55-1ab3-4649-b918-7b160600cdee">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property" id="dedecf7d-94fd-4f1f-aaa0-82e70d4cf860">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			/*nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "ErrorResponse";			
			if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			propertyValue = nodeRole;*/		
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="dc121c99-6ed7-4623-855e-60c559bc7996">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases" id="b0144c28-51c5-41c0-b2d4-9baa89585372">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = newTestCaseName.replace("_PERM_", "_FUNC_");		
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="bda3d379-4b94-4afb-b127-b0ecd663a14e">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="c3e59d43-0a40-4351-98ed-5a729498670a">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Dynamic LASP Test Cases"; 
//def oldString = """deleteTC.setPropertyValue("CallingTestSuiteName", testSuite.name);"""
//def newString = oldString + '\n' + """deleteTC.setPropertyValue("RequestorUUID", requestorUUID);"""

def oldString = """- LLASP -""";
def newString = """- DLASP -""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				stepScript = testStepList[j].getScript();
				stepScript = stepScript.replace(oldString, newString);
				targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsToken-Generation" searchProperties="true" id="6dbd5b23-4d81-4732-80ba-4d4d45ab39d9"><con:settings/><con:testStep type="groovy" name="Feed Rights Token Data" id="3f729402-5716-4612-a520-ebc2463aaf24"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

//RightsToken Request and properties
TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("nodeid",RTCRequest.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",RTCRequest.getPropertyValue("assert"));

testCase.setPropertyValue("AccountID",RTCRequest.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("ALID",testProject.getPropertyValue("alid"));
testCase.setPropertyValue("ContentID",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","false");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","false");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","false");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("PIRetailerTransx","transcation");
testCase.setPropertyValue("PIPurchaseAccount",RTCRequest.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("PIPurchaseUser",RTCRequest.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("VCAllowedUser","urn:dece:userid:org:dece:12222599");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Rights Token Create API" id="3b9f6e5d-e289-4d60-98fc-69cc1bbedef3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get Rights Token Data" id="97554649-7983-4eca-be4b-427dc2b1074e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Create Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

log.info RTCRequest.getPropertyValue("TCaseName");

def runnerRTC = RTCRequest.run( null , false )

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTestCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

log.info "new generated rights token is "+testCase.getPropertyValue("rightstokenid");

//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));




//assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Response" id="c387a547-3234-43a0-b77a-2934bd25aa70">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

RTCRequest.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
RTCRequest.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
RTCRequest.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
RTCRequest.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
RTCRequest.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify the RightsTokenGet Response" disabled="true" id="d88fdf96-eb04-4e65-9fae-836c9c70220a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify theRightsTokenGet Response against DB Result" disabled="true" id="29f681e8-2d62-4d88-a4b5-ea51c8ae995d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights GET  Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPaxE5ykXJJMYSYFus0s9EJou9uXHeOI4HMSh8YOpP31xw6QBXo5bPuUsSJ9+iTLks44TmLL9TiHTNCU1YokZtwtpR0tz5ibYk65y3AC3BXEDbzR0LXqhou3JlrN73e03wZuN+ypPdUBGrbeMO1THdumrU9xo+kYuAnW1JCqnOfgMy4wEx3NMsymbli6ZU/MU9cw3aZdN06tR612DxmX2FKlLq3WpAre0eZCLFyEVqtVfXVaT7MIWYZhop+jYUDmkGCte7aOqHSUdTf6pB4CgTgmdZIm6Azt6ZyF3A1oxLDIM9j4Ct/zZSDDQVIn5DT6plW2EPpslpbHHmYpowTH9AWr/IxAzNOw5sVRmlExT94NwjQUsA4F0YnZYN80tE/tSKA9hhnHOp9jc4M1hhlkwAjU7sZ+R/t23K2VppMMMz5Ls4TvH/+OD7AlxOkCQp1vw9pQOx7wjUx1z4C4PiNxzukSrlSxLjABvrlNIMdD1W4ymNFiSLks0IIrdmiX3sFxnY0+jYCLz1zQzuWsQe5xnEOX//Q8+/q2Mb8x0fxlbFw3bulicvlrSfxOSWBXuRRUV7s+HhRlVUQbeG42szsLoWVwe17E39FVe7W0i4eTeDC4u20s8Y9s8hLGC9vpRcOHkwcneolHw++OcTkZTNIk7J83eSFlz05rcPVr5LSvvSfrRxryG/vu/vHyCflWcvkQ+Z45HNwH/b4IUjHgj4/Du8t+O+6xlhM1J+OLG++haf5YIX94l16Z0WUw9/tsdXIufk3t6DZORsNs1KnC2eG/L9u++SCf/gNEbI+qDPx+7ULeEhYfNzMloaE+K1XdhWo+XAATWldZqd7h5rLd0dCVd7g+m4bVclq981av3TbMc3tgNE+NtuOYF4bX8k7NbZNZszig2EvZjCpfquWuy+ZjgiRxObAQMn2Z5rLTce0DxD4WuOazsXwEKeMwSWV7NldtyAteGLxI2i+CNkA0nyOWg1a7SsU1u868mYBsvye39nryGAhdUFCNW9U1l4XNhczFE17mIjbrS1xnkMvWnqku61oNu4k4TRYxKKYoScM8hvpivigzg/j6a+mY8FI6HkzK1/ZuXIf/timQOiFVClzFcg7yGuGN4dLYBvJ+wM5uwFt4Lw+pelgynyKjZM1k/9efMlH1UdWI1+sNgl6wpV1p/4X1Z437Qy+4+Yrt717w2/wswOddf83x8AtRD78atazfL5q/tkQflCA6rP7KUbikO263i5oc+XJIdLdv9wnXn+r5cpmXr7WthmEm4ZF6D8iwUAAkl2PseZL+CwxVKOionaEifuC8ku9TzMWcBQILSGR7qZXHI5bEALhaEn3ZF4tjN9A9lzJ1AgrxlqwXywVXMf5wByYuUXpSfCM/qzQL/9zYG1g7fmScckcUlEXqpPaF53fqgqQSlspJl2a74G8BvOV8X1glueIiZEFNcwHv/6mpEdbRMCFpzoTf10rB7lgteYrnBbh/lF7BlJO7WuXp/+/yOi1LgMgRJfVLfLWRueoJsGhnNG+cvp7OTsO5aLcM09mbzlarfVElZY9d95X4tWQnT4c13v0P</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>102696949F8C0198E05307991F0A267F</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ns4:SoldAs><ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:hd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:sd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:pd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID><ns4:RetailerTransaction>transcation</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:CAC19DE62078514EE0401F0A2222592AE4</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:CAC19DE62086514EE0401F0A2222592AE4</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime></ns4:PurchaseInfo><ns4:ViewControl><ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser></ns4:ViewControl></ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>false</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>false</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>false</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2015/03/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt" ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt">         <ns4:SoldAs>                     <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>                      <ns4:ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ns4:ContentID>         </ns4:SoldAs>   <ns4:RightsProfiles>                       <ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd">                                         <ns4:CanDownload>false</ns4:CanDownload>                                         <ns4:CanStream>false</ns4:CanStream>                           </ns4:PurchaseProfile>                                                                </ns4:RightsProfiles>      <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>         <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type">                               <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                          <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                           <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>                 <ns4:Preference>3</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>                 <ns4:Preference>1</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:PurchaseInfo>                       <ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID>                   <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction>                       <ns4:PurchaseAccount>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</ns4:PurchaseAccount>                       <ns4:PurchaseUser>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</ns4:PurchaseUser>                             <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>            <ns4:TransactionType>urn:dece:type:transaction:category1</ns4:TransactionType></ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>3089</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:102696949F8C0198E05307991F0A267F</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10001-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User Content PG</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R1_RightsTokenDelete_Policy_RTL_TestCases for Coord-2293</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove ULC Policy" searchProperties="true" id="ccebe513-676e-4223-bfe8-dc3ec2f2db74">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="676316dd-4f4b-42b1-8252-df4185bb7dde">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties" id="569f3d83-8c4f-4693-9136-e0b8509b1a73">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ULC Policy" id="6372b3c9-231d-4482-95ff-3c3a7f4ba6a3" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ULC Policy" id="6c8dbaae-b568-42d9-a92c-d134c4bb07e4" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      <con:testStep type="groovy" name="DeleteUserPolicies" id="5ee1207d-6fc9-4cf4-b5b2-595067c035c3"><con:settings/><con:config><script>import dbUtils.dbPolicy;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )
def username = context.expand( '${#TestCase#username}' )

a = new dbUtils.dbPolicy(log,testProject.getPropertyValue("targetDECEDB"));
log.info "useroid"+useroid;
log.info "username=="+username;

a.policyDelete(203,username,"deleted")
</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:FB25769611C044109B445E349481F9A8">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:CF155FAF01C044109B445E349481F9A8</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
   </Policy>
</PolicyList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>RightsTokenDelete_without_DST</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10018_RightsTokenDelete_FUNC_RTL_with_Invalid_AccountId without DST</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>useroid</con:name><con:value>144F3A4557B278C4E05305991F0A0AA6</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150422_1429701882971</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="Test Cases Containing APIs" id="645701c7-5abe-4ea2-be69-9a546753019f" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="49071030-5e3c-4707-8157-c4bbee5f30d2">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="68966753-ab1b-4fab-b6f7-d05d38a6e59b">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="8246ea5f-a44e-4c71-a686-e38b15c146a5">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="28fe769e-0333-483e-a081-58e334904fcc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DELETE - PolicyDelete" id="3c38f1ae-b60f-492c-89d8-da210a8c03e9" disabled="true">
        <con:settings/>
        <con:config service="DECE Policy PolicyDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="RET_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DELETE-PolicyDelete" id="602d7984-8a5e-468a-bbd0-834bcf0fdcb1"><con:settings/><con:config service="DECE Policy PolicyDelete" methodName="DELETE" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE-PolicyDelete" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:entry key="ACCT" value="${#TestCase#assertionAccountIdFULL}"/><con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/><con:entry key="POLICYCLASS" value="${#TestCase#policyClass}"/></con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="941eef75-270b-432b-9d58-4da6be480c6e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Process response body and headers" id="ed1a7428-16ab-4a3b-a22c-9f52e0639465">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="4dc19424-a92e-42d5-84f3-6b3433d90e73">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Remove ULC Policy</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVdbb6M6EH7fX4HYx4pwCTSAmkiEwC7btLsK6fVl5RgncRcMxSaX8+uPTUqapGm320qVIg9z+cbzeWZ6RkGWGq5HKSoZzokUDbry78lpxzRNx1Fs03IUcwJMBViWoZgdGyTgVDtFGpSliNIKRYQyQFhXNjTdVDRD0TpjXXf1jmuctizDvpela1RS7pqrtDRZWmUpoW4dtitXJXFzQDF1CcgQdRl0Y+9i6HJNFzSY5N7ZBmUdsOzNGStcVYWtBEGUprAF80w9U/d0zhLqxnhGAKtK9BQzoV35yXa5XLaW7VZezlRD0zRVc1Suk1A8+yr3vjTGKInINN+cfUBygiFI8X9AgLpAbJ4nkpfO8hKzefaKa13VNeFaQSuoQN0kX2X1OUCN7p2e9kCWFCh0DvTG2QhNUYkIRNLVKOrKX99XwY3tuASETvMyowfnf4OEyAKleYEShTaZNeje7/HIdfXOEHQjAtOK4gW6FDQpAERU+lWiKV4NMeXkS6hUl19aUf6HG5Yh+C9lOVN3sXLo6pHbGeAZouwjNdut18bLNUgr1HukN1l255HFfZBfD+bh+KS4OcnG0XRtdmsIu8obUNtyP50Pybrl1pPR7fnirl1mD1rUP7HTftaGahVr59Gfqxvvrn8N7Ohu3Tb1UTg4SZ1waP4Ao+DqqrMslj8T7BSJbU7O6Sxx7vvl9Mvlg3eiWevpt7Y3geYyvrCj/PwB3uLb8Tpgl9/Pv3eCETz5kdLTm1DzQytYeWv6CG8m0TqOb7+Nvl9lbT2/b2P/5ovWt891L5yoD1dFeJvC+DHoPue0m8O+sGkJcTV5QJA1R0GPaCCFvF6Avd1ehAQnyrRWdQvRoyhDhMk9YSVai1vxBoQTlxdzc/ZD3bJCL9R0XzNNXXP6pmkFbdMxbT10PLvpQRsUBxD9nEyxiCW67IY/bwOEmUsRSVCpLPIKzhGV3/A4AAxIERnxx5ETisY57+KWHxihFzh9J3ROHXugtS1PCyzDDwb9jm0MZOkyZz/Jz9KbMlTud3Bzr4OPEMQFRqLNC55TTnTK+JU8gkXFUr21AC2CKj4IStGLXcO0LZXirEiRAKxmeVKlqFXMi/qCVLr5NRQAaS0dBeP6/b2a3uG35ia4ToKFAhW59BGvJjoyivQmkdcT7uwm3Lj3qgSLZ8avlZUYbpDsf3pmi6DJliqe7wexHzewt9r/YP1R48HQi399xva3H//WP+rg46E/F3j4iayHn82a8/eT5i8t1TcoqB6yfxsoWeCdsM0GxZcCPjJ6zdt9BK3HVrVYVPVr7YhxWHL3qq4auhojWPGZth7nfxBRty7Ud60UW9QHkbfyfXwVm5OYAYYy3luk+viOfTJGVOyTEe+Nq/cuq3sh+b0xtGLHZH7K106B+M3NFLpQ6HHxL/6zzMvkuVxHfO3E4XnyJZJhMhMnsTysXyEFzLlbzKddXu46P+bgWPB94faSt1gYZ9OkYuj1L5IYY10ZQJhXhEViXHDB7mitcbJ1gdxnpRdu6vH9tI+t6Kv72O3FMOZDLgPyVhf/XVnBNV0gksXaV2Ppyiv+7wUPTmY7o/wJ4O401/g09w3zr9N8P5PeC/FLyc6dHr6H3v8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:0F15C24F01C044109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:CF155FAF01C044109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:UserLinkConsent</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyInfoInURLNotValid">
      <Reason Language="en">The policy information in the URL is not valid.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:EAF4863EA0C044109B445E349481F9A8/User/urn:dece:userid:org:dece:ABF41FBEA0C044109B445E349481F9A8/Policy/urn:dece:type:policy:UserLinkConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/21/error/en/ErrorList.html#Policy:PolicyInfoInURLNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 400 Bad Request</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>845</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6b5f270e-fc19-4c6e-adc7-f0574c831457">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="ba31485e-da7f-4c4e-bde2-81c1acb013f9">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");
testCase.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("streamhandleFULL",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyAuthority",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus",null);
testCase.setPropertyValue("policyResourceXML",null);
testCase.setPropertyValue("expectErrTypePolicyCreate",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="43c115e0-96a4-4dff-84ee-ec13e1dcfae6">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
testCase.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
testCase.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("encodedpolicyClass",callTC.getPropertyValue("policyClass"));
}

if (testCase.getPropertyValue("expectErrTypePolicyCreate") == null || testCase.getPropertyValue("expectErrTypePolicyCreate") == "") {
		testCase.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
		testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}

switch (testCase.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		testCase.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="0af03d18-346d-48bf-b271-128dba4da2fc">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="0bfcd339-f5ab-42ec-8c03-dafd1049dd2e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("POST - PolicyCreate Account");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - PolicyCreate Account" id="4531bb0a-cb84-4a17-9209-d29c34caa49d">
        <con:settings/>
        <con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="45604c59-48ef-48a9-9288-5e658c424196">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value;
			break;
		case "#status#": 
			status = value; 
			break;
		case "Connection": 
			connection = value; 
			break;
		case "Content-Type": 
			contentType = value; 
			break;
		case "Content-Length": 
			contentLength = value; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the response headers and body" id="79719466-8647-411c-b1ab-d3a95331d5c0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def acct      = testCase.getPropertyValue("nodeaccountid");

def sh            = testCase.getPropertyValue("streamhandleFULL");
def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = testCase.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = testCase.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");
assert testCase.getPropertyValue("httpStatus") == expectHTTPstatus;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6JME773V1jupWU4KEatJFXDMaioIB5vvsJhQJSDMiDor38HjK7JZvfd97tImWn68HT3Q9Pzgq3AZ3sAYxQnXhRWVfG1hhyOabdasOE07Vajtem0G9YGOQ3U7doQMlyT2dC1qopxitQQJ1aYvNZYmmEadKfBcCbN9uh2j2aeWgy3rlXnKMbEM1F5IlZ54Ie4V0Z9raVx2Iss7OFeaAUI9xLYmwJt2COaPesGqfb2cgVZBozftkly6FEUfLIRRL4Pn2AUUC/UJ50XG/emnhtaSRqjj5g2fq192GZZ9pQ1n6LYpViapim6SxEdG3vuj9pb5WaMbDV0outZsMIo9KDlexerAKWhZBvZVeC7Uewl2+A3rhmKoQvXDZTDBmRa4Y8a9TNAie4vPX0CGWOrgbcWc3NmIAfFKISoOjPU19qPv2rg1dSMrRA7URzgL+f/hgiFJ+RHB2Q38C2xG7i/9/hNtd5eEOypIfRT7J3QqGDJwYIIVycxcrx86GHCPRtXy+5Xc3wjGIL/pSMv1CNOApv6pjKi5yKc/D/temzV1cvc8lP0ZkXzjhis3brQnIROU/AGnM/RdeGZWr2WEB6Vr6Dunf44f+XpnVYfRsfODsaOzmOaGWyx2Wbc/VTcpcESnkW+HTDN7nOH3vgdeeVEJ20kDLG0t2krtqYbo8kx+/ckn/cvFKMNkmYlmDm4ZWhTgep3WqYZOSkVd9kZtOZUa7LoZ7KcTbPxMRjFkn6kDb+dL7xQOErDw34wmtHnrN5cgUs0avMLrtLP2uu2mkzPPK/sDFBfI/r1Z06PORR5DdC5TLL4f8nRXdFKrPtBKAaFQ97OBL1pqiqmF0EA56kLMpUHLvnbgRHv7o/bvad0M5oHui4DUeD9nTTUwF4BzEzit5own2u5cAF93h3NiaFZAf6a1wwpE7OVONf1dynbmrYyP28UP11fpJEGcGksbDXJkOaiYUqaBqKrLNfEjZLvtKmWqfpKrBAHopQfLrbSTZCSe5BVOW3Ksaspl66XcyKXz8NgdNqYkq8JmiJMj8pU3TRFXeoDY7WArJwS28swOESV1Yx/MOof0A4gOaNJTHDRzH2mmTN2JBpWKTM/yzRV6Ws6zgS9zEqpSFl/Prv8rIXAa4IdSLlkgsm1FtAU5BG9XvaxteBCzQCZ6JbGAymzxzcgmk5nFeFaq6GUGZIxG8maoWYSKGWilPl4w462G2V7gk0975tg99gYQZcWckieh8YJnrljxVJksAnmDGwaW+hxnrWMMnfdyUR91R9Ea5W4GQFd4nkdEEA0KFIj9efBkJ9z44PXZT00dOQoQNu4ojHRYH+65HTHa47dyWjBic7+eaJ4k6ZlbynVh+yuuQeqiuwBs9Ut21hRhhh6l/Z4MFsiL15dkhGnM22vw1WMRTpbipH/bL8vV7NBPV9B3RxPprPF5JLno+Ouc/GT9zH/Hk/7muiORwhNMKxTtCXzZkfkhNX7jvDJMWjEVYCr8QAoO9eVPEJg/n13JeG7oUmEvEATMkVYCMoUKEpdUnlR1x15y0ygMk9nzEhTJdsnZTqvloZfWQu8SDpFW4v1YcXK9NoEdulMb0myq8+4en+J1vrIN+cJyA5zJ2QYWjno746WuVArGGCr2ZQnbxFfSVUws8aHPp0P5m2aOeq23592wayZT9l9Pt666/PeXe9JU1YPr87KBP7cfOCYSii2qOimZGigc33fck2dNQ0fBvlhE8BcNEnPSuPI5CVD1ulZLopgcJVhE7A5Xl2knSZIpX0F5JpFaHHaLLd4FY68sSmlhLTpA112G5b+V44VFKt85thRADr4yjHpyjEJOMe62hEZzLWFA15kLq9IR/15Pux3D7S+HO4rfF2m3MTzW+Owk5mD+oI5Z8/bnb5YdFVxK9RDZ7VtbhKeti5QR/39s+IZezFst/yzNtR0buZR/pneoWOGh5WRyoRSM7nIVDdO63yw9oLLpdliZ8Fkmp7UmTXAzHm7OS662W7y3qaoWDlzl+f1SZeXEfz4jnwdknfhdYxSjwP20wS+rV7TdLNDMLkdi++wKlZl8nG0kj+vcYXEsxtOqdo7FLsgTlCY1N4Kq2KF66Vk0fPsHvlyXs+AEWhJbHdpiWY6LCtLdItmZBrQz91uU+Sk2653RfEFohCFjlfEKpbZ68f6zwBh0NsgK0Zx7Q+eijpV1dAg20cUYmRGr7X/cTbLONDZ0BB22c0G0gxnd7sW7NDdTZvdNG2LaUKn9ex0a9VRlIzDcQycBMUPu3L7665sIOgdPFQs1B9rBU5ITY7WKU185ulkPYUoJRt3XCy9PbbV4SjsBQcfFcipILJTHz0dtoeyQhS+/rINC+JSaiPHSv2kgQ/l0vPbdL8+u1WG6NheoYCLjHhEuop+Wf25HndL55e02W+vCDf3ILW9YrchZU5iD16RfH70kzUFXe6UIdTo3DDfVf/atPurKfUHRNTXYtwj2SfvIe7tAkN2crK2lfcWTDp6tJ6OT+nplJY9fC5W0pi4pxiKpqYIpmStPJvRHoXU3QP1Nwv9HfOXuHf5Z3Rpsg2nCZkGAaFbtTz++2XukzUpQILy5DuZ4JPrWxH8jzc82IOFHhFPyE8WxfbPun/j6yEOgVxMMi90i1OxiZ8/t/fjNenBiHj1yDCL4kff39l/F/uz8F6uO5SEsGKTJuj3T6rFlHqtWRBGaZioYq0UPE7OEnNyPqDeT6Vf3JSr8MfdJv/dRZahltpwCrcosGp3Xe/flRte2XiIiBX2SiyvtZzc0knw0H2Y1B8Avx3Woiz/aVh/zuTtF/GvkoeafmX22z8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>[close]</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>[799]</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>[application/xml]</con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>[HTTP/1.1 400 Bad Request]</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyAuthority</con:name>
          <con:value>urn:dece:role:type:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:EnableManageUserConsent</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2011/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:EnableManageUserConsentCannotBeCreated">
      <Reason Language="en">EnableManageUserConsent Cannot Be Created</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/0/Account/urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E/Policy/urn:dece:type:policy:EnableManageUserConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#EnableManageUserConsentCannotBeCreated</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyResourceXML</con:name>
          <con:value>&lt;dece:Resource>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E&lt;/dece:Resource></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9170e8ef-e0ad-43f0-bc88-a699f893757c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="2f926641-61a2-4601-be61-c37a7c1a8073">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="3c3ce46a-ce16-40b1-adcb-10bc22eaf681">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="495583cd-7c9c-42fc-99b3-8e721ea6cb40">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyDelete Account");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="PolicyDelete Account" id="588d8f33-05aa-4959-912e-6af506daedb4">
        <con:settings/>
        <con:config service="DECE Policy PolicyDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="PolicyDelete Account" mediaType="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="68795850-9006-4d0d-90ab-75a1d73c9386">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="75d58ae4-717b-448e-ae1e-043dd3ee57de">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="802cd6c2-1bef-42c2-81f3-7882f44f81e1">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_04600 - StreamCreate - DLPCS - Policy - Can create stream when ShareMediaHistory policy is absent</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0914</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">d8a2af59-94ce-4d58-a97b-8920da8cf22a</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>nVdbc6JME773V1jupZVwUKJYSaqGg4gRFMTjHQ4joAjKgKC//hswGpPNZvf9LlJmmj480/1MT88ztncB2wEYozjxo7CqSi81p22z9prjH/gmRA9Nh2s/2Hxr9dDmWdqx23DNsnatqmKcIjXEiR0mLzWWZpgHmn1gGxbT7jBMh2s/Np7YZa06RTEmnonKI12r5rsgxJ0y6kstjcNOZGMfd0J7h3AngZ0x0AYdotmxr5Bqr88XkGXA+NVLkn2HouCjgyAKAvgIox31TH3SeXZwZ+y7oZ2kMXqP6eCX2rttlmWPWeMxil2KpWmaonmK6DjYd3/VXitXY+So4Tq6rEU7jEIf2oF/tgtQGkq8yKmCwI1iP/F2f3DNUAxduH5AOXyATDP8VaM+ApTo/tHTJ5Axth+wZzNXZyZaoxiFEFUnpvpS+/VPBbyYWrEd4nUU7/CX9X9DhMIjCqI9ch7wdWNXcP/u8ZtsvT4j2FFDGKTYPyK9YMnehghXRzFa+/nAx4R7Dq6W1a/m+EowBP9LRZ6pe5wENvVNZiTfRTj5f8p1X6qLl6kdpOh1sxLWs6WfshD4E+RHOtqedXvT3Z+NlxLCvfIF1K3S7+uvPL3R6t1oAA/R2LCSgexOcY+jj4yeeBN60M7zE71zJ3Yd+KfhAL+ZwO5G9fai1zbHQDlleqzEs+OIltBQUIaNbOXEFd49D3hz1oTsRuJYfafjpm/kmzifLpOeuu812+xWZXcbOW9sELfmYc41t3xLH+P6ZgR3eIZHI1525MbEOlV0J6FURY7n43oW9qW+P4EvH3u630Oxrzd0KjdZ/D/naF6yE/u2EItGsSanM0GvmqpK6VkUwWnsgkwVgEv+NkAX3O3B2/oKn9ECMIwukEQh2MgDDWwVwExkwdPE6VTLxTPoC64+JYZWBQRLQTPlTMoW0tQwenLmWY4yPa2UIF2eZV0DuDQWPU025alkWrKmgegiyzVppeQbbaxlqrGQKsSBJOf7s6PwCVJyH7Iqp405djHm0uV8SuTd02CnH1eWHGiipojjgzJWVw3JkPvAXMwg202J7Xmw20eVxUS4M+rv0QagbkaTmOCsWdtMsyasLpl2KbM+yzRV6WsGzkSj3JVSkbP+dHL+yIUoaKKzk3PZAqNLLqAldnV6Oe9je8aFmgkyyS2N3+TMGV6BaAadVcRLrgZyZsrmRO9qpprJoJRJchbgFat7K8U7woaR9y2wuS+MaMizbki+h+YRnrhDxVa6YLWbMrBhetDnfHseZe6ynUnGov8WLVXiRgeGLAgGIIBoUGyN5F8AA2HKDfc+z/posO5GO+TFFY2J3rbHc063/cbQHekzTlpvWyPFHzVsx6PUgPC6sQWqipw3xjNsx1xQphT656fh22SO/HhxTnTOYJ78NlcxZ+lkLkVBy+nNF5O3er6AhjUcjSez0TnP9cOmfQ6S3lDoxeO+JrlDHaERhnWKtruC1ZY4cdHbED6tTRpxFeBqAgDKxnVlnxBY6G0uJOyZmkzICzQxU8SZqJCTqdRlVZAMY931mBFUpumE0TVVdgKSptNibgaVpShIpFK0PVvuF2yXXlrAKZ0ZTbnrGhOu3p+jpaEH1jQB2X66DhmGVvZGb61lLtQKBjhqNhbIKRIqqQom9nDfp/O36RPNHAwn6I95MGnkY3abDz13edq6yy0pyuLu6CwsEEytO46phGKzimHJpgbal/OWa+qkYQZwl+9XO5hLFqlZaRxZgmx2DXqSSxJ4u8iwBdgcL87yRhPl0r4Ccs0mtDiu5h5ehLo/tOSUkDa9o8tmxdJ/5VhBscpnjh1EYICvHJMvHJPB+lBX2xKDuSdxj2eZKyjywWhNB31+TxvzwbYi1LuUm/hBcxi2M+utPmNOWcvbGLMZr0qeWA/XC6+xSgTaPkMD9bctxTe3UvjUDE7aQDO4iU8FJ3qDDhkeVHSVCeVGcu5SfJzWhd3S353PjSY72Y3G6VGd2G+YOXmrw4zPNqPeE0XFyok7t5ZHozuP4OJyj3xtkjfhpY1S9w32Uwe+jl7jdLVBMLkui3tYlapdcjnayc9jXCHxnYd1qdrZF7MgTlCY1F4Lq2KE66Rk0POdDrk5L2teeHriWE4A3acWzXCCTDdppksDmuP5JiuC66x3QfEFohiFa7+IVQyzl8v6Z4Bw11khO0Zx7QdPRZ6qamiS6SMKMbKil1qj2QUc05VaEgA0EMVWQxJEDtAsC/inFsfWqnqUDMNhDNYJiu8G5ObXAdlE0N/7qJii32cJnJBEHOxjmgTM49F+DFFKxuy4mHQ7bLPNlQmgnHS3h+QD6W7xPsLJ497bl8PMH7fx9dt1x0TH8QsFXIAWEKkW+makb14R/7Yz9tvR/+oepI5fzCwkfUnswwuSz58+2FDQ4EYFmmeaV8w31X8z5Rnm6XdT6gdE1Ndk3CI5R/8u7vVhQmZtMo6V7xFMinawHw+P6fGYlmVq0TRLxcQ9xVA0NUYwJePiyYq2KKRuHqh/GdRvmL/Evck/o0sTLxwn5JTvCKOq5fLvj7RP1iQBCcqT72RiQJ5lRfAfX26wAws9Ih6RnyyKnY+8f+PrLg6BXHQoP3SLVTFhnz6X9/0kdGBEvPqkSUXxve/v7L+L/Vl4S9cNSkJYsUoT9Ocv1aL7vNRsCKM0TFSpVgruO2KJOTntUedD6Tc35Yj7/mbJ8R/fLHNtMIYe2tm1m67/d+UHvyw8RMQK+yWWl1pOXt8keOjedeB3gH9owtxPTfjzTl5/E/8uucvpV2a//g8=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ShareMediaHistory</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User.old" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true" id="9fc6d40c-7a23-4072-9904-28d699f3772a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="0cc087dc-5b04-4751-bdb9-83e42ff4adac">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");
testCase.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("streamhandleFULL",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyAuthority",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus",null);
testCase.setPropertyValue("policyResourceXML",null);
testCase.setPropertyValue("expectErrTypePolicyCreate",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="335695a0-83ed-464f-a65f-3c439a8b7a9f">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
testCase.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
testCase.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (testCase.getPropertyValue("expectErrTypePolicyCreate") == null || testCase.getPropertyValue("expectErrTypePolicyCreate") == "") {
		testCase.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
		testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}

switch (testCase.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		testCase.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="032fde10-641c-4b77-979b-7823316bd123">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="328902f8-e591-4a37-b88e-231de0b968fb">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - PolicyCreate");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "C:\\DECE\\certs\\222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - PolicyCreate" id="2b61126f-0842-469b-9f38-3f2f28c2396e">
        <con:settings/>
        <con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="USER" value="${#TestCase#assertionUserIdFULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="b004eaf3-66ea-497c-b62b-7714bda009d0">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the response headers and body" id="f6b4f838-3f4e-438f-97d1-66998b69b698">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def acct      = testCase.getPropertyValue("nodeaccountid");

def sh            = testCase.getPropertyValue("streamhandleFULL");
def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = testCase.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = testCase.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");
assert testCase.getPropertyValue("httpStatus") == expectHTTPstatus;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdrc6LMEv7ur7B8P6YMA4qKtUnVcBUVFcTrl1MII6IIyoAgv/4MGF2Tze6751QllUzTl6e7H5qeH9g6+kwXYoyi2AuDqiq+1cC25TgIOHUENk69CbabegcBpt4CLbtBc6zd2li1qopxgtQAx1YQv9UYQNN10KnTrElzXQZ0QeuV6K9r1TmKMPFMVF5BrZod/QB3y6hvtSQKuqGFPdwNrCPC3djuTqE27BLNrnWHVHv/cQNZBozed3F86lKU/eogG/m+/WqHR+oH9Unnh4O7U88NrDiJ0EdMB7/VPmzTNH1NG69h5FIMAIACHEV0HOy5/9TeK3dj5KjBNrydBSsIA8+2fC+3ClAainehU4W+G0ZevDv+xjVN0aBwXUeZXbfpZvBPjfoZoET3l54+gYywVcc7i747M9AWRSiwUXVmqG+1f/6qgTdTM7ICvA2jI/5y/t8QoeCC/PCEnDq+J3YH9/cev6nW+w9kd9XA9hPsXdCoYMnJshGuTiK09bKhhwn3HFwtu1/N8J1gyP5fOvKDesZJYFPfVEb0XITj/6ddz626eZlbfoLejQmVMeK5OVjTOTjZfDJcOC3vfFw4zbcSwrPyDdSj0x/nrzx90OrDKHQD3zTkjcCpSm+7ygVFXqP8QDkQHE9bus2qSy/WTdULrkprDgb7iWHlg5lLNXiutaItHzh7n9bjcSbzlb1Dq42WJevjpm4PaVvxpA5ub6PZYQNyat3K2y8djHtxx1fVoCVIiRIjCqtzfpFxemSIC77nn0ULpjzdr0yQEB/nvW0vcfdNdPAUt/P2M6fnHIq8BuhaJln8v2QBJ1qx9TgIxaDYkrczRu+aqopJLgjwOnVhqvLQJb97OOLdw3lHonAp4KGuy1AUeH8vDTV4UCA9k/idJsznWibksM+7ozkxNCvQX/OaIaViuhLnut6T0p3pKPPrRvGTdS6NNIhLY2GnSYY0Fw1T0jQY3mSZJm6UbK9NtVTVV2KFOBCl7JQ7ChcjJfNsRmW1KcuspmyyXs6JXL4Oj6PLxpR8TdAUYXpWpuqmIepSHxqrhc3ICbHNh8dTWFnN+Cej/gntIZJTQGLCXDMPqWbOmJFoWKXM/CzTVKWv6TgV9DIrpSKl/fks/1kLgdcE5yhlkgknt1rYpiCPwHrZx9aCDTQDpqJbGg+k1BnfgWg6SCvCrVZDKTUkYzaSNUNNJVjKRCn18YYZ7TbK7mI39Kxvwv1zYwRdWsgBeR4YF/vKniuWIsPNcU7bDWNne6xnLcPUXXdSUV/1B+FaJW5GUJd4XocEEIBFaqT+PBzyc3Z88jjGQ8OtHB7RLqpodDg4XPIMdLzG2J2MFqy4PbQnijdpWM6OUn2b2TcOUFWRM6B3uuUYK8oQAy9vjQezJfKiVR6PWJ1ueR22YiyS2VIM/bbTW65mg5dsZevmeDKdLSZ5lo3O+07ux70x34umfU10xyOEJth+oYAl82ZHZIVVb0/4tDUAYivQ1XgIlb3rSh4hMN/b30jYMzSJkBdqQqoIC0GZQkV5kVRe1PWtvKMntjJPZvRIUyXHJ2W6rpaGX1kLvEg6BazF+rRiZLA2oVM605uS7Ooz9qW/RGt95JvzGKan+TagaaCc9N5WS11bKxjgqOmUJ28RX0lUOLPGpz7IBvMWoM+64/enHJw1silzyMY7d309uOsDacrq6dVZmdCfm08cUwnFFhXdlAwNdm7vW6aps4bh28fstDnamWiSnpXGoclLhqyDWSaKcHCTYRMyGV7l0l4TpNK+AjPNIrS4bJY7vApG3tiUEkLa5Iku+w0D/pVjBcUqnzl2FqAOv3JMunFMgtvzi9oRacy2hBNepC6vSGe9PR/2uRPQl8NDhX+RKTf2/OY46KTm4GVBX9P2bq8vFpwq7oSXYLvaNTYxD6zc1lH/0FY84yAGraZ/1Yaazs48yr+CPTqneFgZqXQgNeJcprgoeeGPa++Y540mMztOpslFnVkDTF93m/OCS/eTXouiIuXK5u31RZeXob26fUe+DsmH8DZGqecB+2kC31evabLZIzu+H4vvsCpWZfJxtOI/r3GFxHPq21K1eyp2QRyjIK69F1bFCtdNyKLnOV3y5bydIeRAR5BoyAOJaUhtCTQBLQMI2hzXYpjGfde7ofgCUQiDrVfEKpbZ28f6zwDtY3eDrAhFtT94KupUVQODbB9hgJEZvtX+Q3dAgwVNlutwmwbXtMiqxdoW07bbW5ptgAZCDrulLabF1qqjMB4H4whuYxQ97cqtr7uygWzv5KFiof5YK3BManK2Lkns068X6zVACdm4o2Lp7TLNDkth73jyUYGcOoZO4qPX0+5UVojCt79M3bJxKXXQ1kr8uI5P5dLz23S/PrtXhug4XqGAi4x4RLqKvq7+5Ie9p/NL2sy3V4S7e5g4XrHbkDLHkWffkHx+9JM1BV0elCHU6NwxP1T/2pT71ZT6AyLqazEekZyL9xT3foEhOzlZ28p7CyYdPVuv59fkcknKHraLlTQi7imaAtQU2QlZK69meEAB9fBA/c1C/8D8Je5D/hldEu+CaUymwZHQrVoe//0y98maFCBGWfydTPDJ9a0I/scbnt21Cz0inpA/aRg5P+v+ja+nOARyMcm8wC1OxSZ+/dzej9eka4fEq0eGWRg9+/7O/rvYn4WPcj2gxIQVmyRGv39SLabUW82y7TAJYlWslYLnyVlijq8n1P2p9IubchX+uNtkv7vI0tRSG07tHTpatYeu9+/Kda9svI2IFfZKLG+1jNzSSfDAfZrUHwA/DesmJzMdXmZaQGbYZucxrFmOA0wLPgr4KZP3X8S/Sp5q+pXZ7/8F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/0/Account/urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A/User/urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>policyAuthority</con:name>
          <con:value>urn:dece:role:type:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResourceXML</con:name>
          <con:value>&lt;dece:Resource>urn:dece:type:rating:US:MPAA:g&lt;/dece:Resource></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="eb8a1a9f-1424-450a-8675-f57443904185">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="20efd39d-961d-4087-8d4e-0a3d89630094">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");
testCase.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("streamhandleFULL",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyAuthority",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus",null);
testCase.setPropertyValue("policyResourceXML",null);
testCase.setPropertyValue("expectErrTypePolicyCreate",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="965af7e4-e6c3-43e2-8e0b-44088bf45b65">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
testCase.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
testCase.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("encodedpolicyClass",callTC.getPropertyValue("policyClass"));
}

if (testCase.getPropertyValue("expectErrTypePolicyCreate") == null || testCase.getPropertyValue("expectErrTypePolicyCreate") == "") {
		testCase.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
		testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}

switch (testCase.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		testCase.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML1" id="179b5ab1-b869-4162-ba52-e4ae4de2fefb" disabled="true">
        <con:settings/>
        <con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["us:mpaa:G", "us:mpaa:pg", "us:mpaa:pg-13","us:mpaa:r", "us:mpaa:nc-17", "us:mpaa:NR",
	"us:mpaa:m", "us:mpaa:GP", "us:mpaa:SMA","us:mpaa:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:g","US:MPAA:pg","US:MPAA:pg-13","US:MPAA:r","US:MPAA:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-Y7-fv","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvmovieRatingsUK = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12",/*"gb:bbfc:12a",*/"gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18",];
chvrsRatingCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r","ca:chvrs:e"]
tvRatingCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+","ca:cbsc:e"]
RatingIR = [/*"ie:ifco:e",*/"ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
RatingAU = [/*"au:ncs:e",*/"au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
RatingNZ = [/*"nz:oflc:e",*/"nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];

RatingFR = ["fr:moc:u","fr:moc:10","fr:moc:12","fr:moc:16","fr:moc:18"];
RatingDE = ["de:fsk:0","de:fsk:6","de:fsk:12","de:fsk:16","de:fsk:18"];
RatingAT = ["at:fsk:0","at:fsk:6","at:fsk:12","at:fsk:16","at:fsk:18"];
RatingCH = ["ch:fsk:0","ch:fsk:6","ch:fsk:12","ch:fsk:16","ch:fsk:18"];

RatingLU_MOC = ["lu:moc:u","lu:moc:10","lu:moc:12","lu:moc:16","lu:moc:18"];
RatingLU_FSK = ["lu:fsk:0","lu:fsk:6","lu:fsk:12","lu:fsk:16","lu:fsk:18"];
RatingBE = ["be:kijkwijzer:AL","be:kijkwijzer:6","be:kijkwijzer:9","be:kijkwijzer:12","be:kijkwijzer:16"];
RatingNL = ["nl:kijkwijzer:AL","nl:kijkwijzer:6","nl:kijkwijzer:9","nl:kijkwijzer:12","nl:kijkwijzer:16"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {

	case "${urnRating}lu:moc:u":
	case "${urnRating}lu:moc:10":
	case "${urnRating}lu:moc:12":
	case "${urnRating}lu:moc:16":
	case "${urnRating}lu:moc:18":
		for (rating in RatingLU_MOC) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	case "${urnRating}lu:fsk:0":
	case "${urnRating}lu:fsk:6":
	case "${urnRating}lu:fsk:12":
	case "${urnRating}lu:fsk:16":
	case "${urnRating}lu:fsk:18":
		for (rating in RatingLU_FSK) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	case "${urnRating}nl:kijkwijzer:AL":
	case "${urnRating}nl:kijkwijzer:6":
	case "${urnRating}nl:kijkwijzer:9":
	case "${urnRating}nl:kijkwijzer:12":
	case "${urnRating}nl:kijkwijzer:16":
		for (rating in RatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
		
	
case "${urnRating}be:kijkwijzer:AL":

case "${urnRating}be:kijkwijzer:6":

case "${urnRating}be:kijkwijzer:9":

case "${urnRating}be:kijkwijzer:12":

case "${urnRating}be:kijkwijzer:16":

	for (rating in RatingBE) { 

		rating = urnRating + rating;

		this.log.info "rating[$rating] - resource[$resource]";

		resourceXml += "<dece:Resource>$rating</dece:Resource>\n";

			if (rating == resource) {

				break;
	
		}

		}

		break;	
		
	case "${urnRating}fr:moc:u":
	case "${urnRating}fr:moc:10":
	case "${urnRating}fr:moc:12":
	case "${urnRating}fr:moc:16":
	case "${urnRating}fr:moc:18":
		for (rating in RatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	case "${urnRating}de:fsk:0":
	case "${urnRating}de:fsk:6":
	case "${urnRating}de:fsk:12":
	case "${urnRating}de:fsk:16":
	case "${urnRating}de:fsk:18":
		for (rating in RatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}at:fsk:0":
	case "${urnRating}at:fsk:6":
	case "${urnRating}at:fsk:12":
	case "${urnRating}at:fsk:16":
	case "${urnRating}at:fsk:18":
		for (rating in RatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}ch:fsk:0":
	case "${urnRating}ch:fsk:6":
	case "${urnRating}ch:fsk:12":
	case "${urnRating}ch:fsk:16":
	case "${urnRating}ch:fsk:18":
		for (rating in RatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	/*case "${urnRating}ie:ifco:e":*/
	case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
		for (rating in RatingIR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
			
	/*case "${urnRating}au:ncs:e":*/
	case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
		for (rating in RatingAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
		
	/*case "${urnRating}nz:oflc:e":*/
	case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
	case "${urnRating}nz:oflc:r16":
	case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
		for (rating in RatingNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	
	case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r":
	case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
	case "${urnRating}ca:cbsc:18+":
	case "${urnRating}ca:cbsc:e":
		for (rating in tvRatingCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}US:MPAA:m":
	case "${urnRating}US:MPAA:nc-17":
	case "${urnRating}US:MPAA:r":
	case "${urnRating}US:MPAA:pg-13":
	case "${urnRating}US:MPAA:pg":
	case "${urnRating}US:MPAA:g":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	case "${urnRating}us:tvpg:tv-Y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	//case "${urnRating}gb:bbfc:12a":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsUK) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	default:
		//resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="6ad73cc9-0dd0-436d-82a5-597ac39df0c5">
        <con:settings/>
        <con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

policyResource=testCase.getPropertyValue("policyResource");
log.info "policyResource....." +policyResource;

if (policyResource.contains('rating'))
{
		def x=policyResource.split(':');
		Country=x[4].toString().toUpperCase(); ; 
	RatingSystem=x[5].toString().toUpperCase(); ; 
	Rating=x[6].toString().toUpperCase(); 
	log.info "x[0]" +x[4];
	log.info "x[5]" +x[5];
	log.info "x[0]" +x[6];

	def generalUtilObj = new generalUtils.generalUtils(this.log);
	
	log.info "this.context" +this.context;
	def resourceXml=generalUtilObj.getAllRatingsForAGivenCountry(Country,Rating,RatingSystem,this.context);
	log.info "resourceXml" +resourceXml;
	testCase.setPropertyValue("policyResourceXML", resourceXml);
}	
else
{
	testCase.setPropertyValue("policyResourceXML","");
}
	
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="b08d26c0-4ded-4c41-bd05-a45eb31ba773">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("POST - PolicyCreate");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="POST - PolicyCreate" id="c05be7d6-10b3-4dbb-a2bb-9a7b28e72acd">
        <con:settings/>
        <con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
  <con:entry key="USER" value="${#TestCase#encodedAssertionUserIdFULL}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="3b73b1f8-f384-4739-b8f0-2bbef1dd25ad">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the response headers and body" id="bf3a6f12-a4f2-498b-9220-bc4e94a63a97">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url       = testProject.getPropertyValue("targetHost");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnstream = testProject.getPropertyValue("urnstream");
def acct      = testCase.getPropertyValue("nodeaccountid");

def sh            = testCase.getPropertyValue("streamhandleFULL");
def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = testCase.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = testCase.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");
assert testCase.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPaxE5ykXJJMYSYFus0s9EJou9uXHeOI4HMSh8YOpP31xw6QBXo5bPuUsSJ9+iTLks44TmLL9TiHTNCU1YokZtwtpR0tz5ibYk65y3AC3BXEDbzR0LXqhou3JlrN73e03wZuN+ypPdUBGrbeMO1THdumrU9xo+kYuAnW1JCqnOfgMy4wEx3NMsymbli6ZU/MU9cw3aZdN06tR612DxmX2FKlLq3WpAre0eZCLFyEVqtVfXVaT7MIWYZhop+jYUDmkGCte7aOqHSUdTf6pB4CgTgmdZIm6Azt6ZyF3A1oxLDIM9j4Ct/zZSDDQVIn5DT6plW2EPpslpbHHmYpowTH9AWr/IxAzNOw5sVRmlExT94NwjQUsA4F0YnZYN80tE/tSKA9hhnHOp9jc4M1hhlkwAjU7sZ+R/t23K2VppMMMz5Ls4TvH/+OD7AlxOkCQp1vw9pQOx7wjUx1z4C4PiNxzukSrlSxLjABvrlNIMdD1W4ymNFiSLks0IIrdmiX3sFxnY0+jYCLz1zQzuWsQe5xnEOX//Q8+/q2Mb8x0fxlbFw3bulicvlrSfxOSWBXuRRUV7s+HhRlVUQbeG42szsLoWVwe17E39FVe7W0i4eTeDC4u20s8Y9s8hLGC9vpRcOHkwcneolHw++OcTkZTNIk7J83eSFlz05rcPVr5LSvvSfrRxryG/vu/vHyCflWcvkQ+Z45HNwH/b4IUjHgj4/Du8t+O+6xlhM1J+OLG++haf5YIX94l16Z0WUw9/tsdXIufk3t6DZORsNs1KnC2eG/L9u++SCf/gNEbI+qDPx+7ULeEhYfNzMloaE+K1XdhWo+XAATWldZqd7h5rLd0dCVd7g+m4bVclq981av3TbMc3tgNE+NtuOYF4bX8k7NbZNZszig2EvZjCpfquWuy+ZjgiRxObAQMn2Z5rLTce0DxD4WuOazsXwEKeMwSWV7NldtyAteGLxI2i+CNkA0nyOWg1a7SsU1u868mYBsvye39nryGAhdUFCNW9U1l4XNhczFE17mIjbrS1xnkMvWnqku61oNu4k4TRYxKKYoScM8hvpivigzg/j6a+mY8FI6HkzK1/ZuXIf/timQOiFVClzFcg7yGuGN4dLYBvJ+wM5uwFt4Lw+pelgynyKjZM1k/9efMlH1UdWI1+sNgl6wpV1p/4X1Z437Qy+4+Yrt717w2/wswOddf83x8AtRD78atazfL5q/tkQflCA6rP7KUbikO263i5oc+XJIdLdv9wnXn+r5cpmXr7WthmEm4ZF6D8iwUAAkl2PseZL+CwxVKOionaEifuC8ku9TzMWcBQILSGR7qZXHI5bEALhaEn3ZF4tjN9A9lzJ1AgrxlqwXywVXMf5wByYuUXpSfCM/qzQL/9zYG1g7fmScckcUlEXqpPaF53fqgqQSlspJl2a74G8BvOV8X1glueIiZEFNcwHv/6mpEdbRMCFpzoTf10rB7lgteYrnBbh/lF7BlJO7WuXp/+/yOi1LgMgRJfVLfLWRueoJsGhnNG+cvp7OTsO5aLcM09mbzlarfVElZY9d95X4tWQnT4c13v0P</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 400 Bad Request</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyAuthority</con:name>
          <con:value>urn:dece:role:type:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandleFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:SaxParserException">
      <Reason Language="en">cvc-elt.1.a: Cannot find the declaration of element 'dece:PolicyList'.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F/User/urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#SaxParserException</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyResourceXML</con:name>
          <con:value>&lt;dece:Resource>urn:dece:type:rating:US:MPAA:G&lt;/dece:Resource>
</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>77323</con:value>
        </con:property>
      <con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value></con:property><con:property><con:name>encodedpolicyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Git\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>6ad73cc9-0dd0-436d-82a5-597ac39df0c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5b9a97d2-87df-4a7a-a824-68fb6dfd5cae">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="388877fa-30d8-4bc3-8c47-793dcd4ef757">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("returnXMLResult",null);
testCase.setPropertyValue("XMLbody",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="c8f097af-c4f7-4788-8086-a0986320d9cc">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("encodedpolicyClass",callTC.getPropertyValue("policyClass"));
}

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (testCase.getPropertyValue("returnXMLResult") == null || testCase.getPropertyValue("returnXMLResult") == "") {
		testCase.setPropertyValue("returnXMLResult","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="c21067dd-e402-4516-970e-48b3ceafb230">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - PolicyGet I");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GET - PolicyGet I" id="cc1bcc07-a9c5-41d9-bea9-f500a7b4b240">
        <con:settings/>
        <con:config service="DECE Policy PolicyGet API" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GET - PolicyGet I" mediaType="application/xml" sslKeystore="RET_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
  <con:entry key="USER" value="${#TestCase#encodedAssertionUserIdFULL}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="2ea669e5-d40b-4d81-b50d-2d0ecad753c3">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('GET - PolicyGet I');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="d6ade996-ea05-4e29-a1d3-01b53a07caa4">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def XMLbody    = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists == " + testCase.getPropertyValue("policyExists");
log.info "xmlPolicyClass - $xmlPolicyClass";</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="ea603966-b964-4e5c-b974-c5121f01f869">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));

if (testCase.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",testCase.getPropertyValue("XMLbody"));
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish Parental Control Rating</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPaxE5ykXJJMYSYFus0s9EJou9uXHeOI4HMSh8YOpP31xw6QBXo5bPuUsSJ9+iTLks44TmLL9TiHTNCU1YokZtwtpR0tz5ibYk65y3AC3BXEDbzR0LXqhou3JlrN73e03wZuN+ypPdUBGrbeMO1THdumrU9xo+kYuAnW1JCqnOfgMy4wEx3NMsymbli6ZU/MU9cw3aZdN06tR612DxmX2FKlLq3WpAre0eZCLFyEVqtVfXVaT7MIWYZhop+jYUDmkGCte7aOqHSUdTf6pB4CgTgmdZIm6Azt6ZyF3A1oxLDIM9j4Ct/zZSDDQVIn5DT6plW2EPpslpbHHmYpowTH9AWr/IxAzNOw5sVRmlExT94NwjQUsA4F0YnZYN80tE/tSKA9hhnHOp9jc4M1hhlkwAjU7sZ+R/t23K2VppMMMz5Ls4TvH/+OD7AlxOkCQp1vw9pQOx7wjUx1z4C4PiNxzukSrlSxLjABvrlNIMdD1W4ymNFiSLks0IIrdmiX3sFxnY0+jYCLz1zQzuWsQe5xnEOX//Q8+/q2Mb8x0fxlbFw3bulicvlrSfxOSWBXuRRUV7s+HhRlVUQbeG42szsLoWVwe17E39FVe7W0i4eTeDC4u20s8Y9s8hLGC9vpRcOHkwcneolHw++OcTkZTNIk7J83eSFlz05rcPVr5LSvvSfrRxryG/vu/vHyCflWcvkQ+Z45HNwH/b4IUjHgj4/Du8t+O+6xlhM1J+OLG++haf5YIX94l16Z0WUw9/tsdXIufk3t6DZORsNs1KnC2eG/L9u++SCf/gNEbI+qDPx+7ULeEhYfNzMloaE+K1XdhWo+XAATWldZqd7h5rLd0dCVd7g+m4bVclq981av3TbMc3tgNE+NtuOYF4bX8k7NbZNZszig2EvZjCpfquWuy+ZjgiRxObAQMn2Z5rLTce0DxD4WuOazsXwEKeMwSWV7NldtyAteGLxI2i+CNkA0nyOWg1a7SsU1u868mYBsvye39nryGAhdUFCNW9U1l4XNhczFE17mIjbrS1xnkMvWnqku61oNu4k4TRYxKKYoScM8hvpivigzg/j6a+mY8FI6HkzK1/ZuXIf/timQOiFVClzFcg7yGuGN4dLYBvJ+wM5uwFt4Lw+pelgynyKjZM1k/9efMlH1UdWI1+sNgl6wpV1p/4X1Z437Qy+4+Yrt717w2/wswOddf83x8AtRD78atazfL5q/tkQflCA6rP7KUbikO263i5oc+XJIdLdv9wnXn+r5cpmXr7WthmEm4ZF6D8iwUAAkl2PseZL+CwxVKOionaEifuC8ku9TzMWcBQILSGR7qZXHI5bEALhaEn3ZF4tjN9A9lzJ1AgrxlqwXywVXMf5wByYuUXpSfCM/qzQL/9zYG1g7fmScckcUlEXqpPaF53fqgqQSlspJl2a74G8BvOV8X1glueIiZEFNcwHv/6mpEdbRMCFpzoTf10rB7lgteYrnBbh/lF7BlJO7WuXp/+/yOi1LgMgRJfVLfLWRueoJsGhnNG+cvp7OTsO5aLcM09mbzlarfVElZY9d95X4tWQnT4c13v0P</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F/User/urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>HTTP/1.1 404 Not Found</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>close</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>application/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>836</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>encodedAssertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:102696949F760198E05307991F0A267F</con:value></con:property><con:property><con:name>encodedAssertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:102696CB6C7701B8E05307991F0A6A31</con:value></con:property><con:property><con:name>encodedpolicyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Git\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="65fd39d6-00d2-40cd-84ec-30317b731741">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="723a6f6a-04ee-47c8-a19c-9029475106bf">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("returnXMLResult",null);
testCase.setPropertyValue("XMLbody",null);
testCase.setPropertyValue("expectErrTypePolicyGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="08d49049-ba62-437f-85e4-0ec3ceb0fc33">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
testCase.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(callTC.getPropertyValue("assertionUserIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedpolicyClass",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
}else{
	testCase.setPropertyValue("encodedAssertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedAssertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("encodedpolicyClass",callTC.getPropertyValue("policyClass"));
}

if (testCase.getPropertyValue("expectErrTypePolicyGet") == null || testCase.getPropertyValue("expectErrTypePolicyGet") == "") {
		testCase.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (testCase.getPropertyValue("returnXMLResult") == null || testCase.getPropertyValue("returnXMLResult") == "") {
		testCase.setPropertyValue("returnXMLResult","false");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="5f370b6e-d608-42b4-8003-0327c3da2f8e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - PolicyGet for Account");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GET - PolicyGet for Account" id="05ea4e9e-2386-44aa-8695-0d33397c8dfe">
        <con:settings/>
        <con:config service="DECE Policy PolicyGet API" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GET - PolicyGet for Account" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="ACCT" value="${#TestCase#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#encodedpolicyClass}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body" id="94ea1794-40fe-4e43-94db-1c54c3860fa5">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('GET - PolicyGet for Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value;
			break;
		case "#status#": 
			status = value; 
			break;
		case "Connection": 
			connection = value; 
			break;
		case "Content-Type": 
			contentType = value; 
			break;
		case "Content-Length": 
			contentLength = value; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpContentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Process response body and headers" id="8882b9bc-376f-4020-9b78-2b6a93035318">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def XMLbody = testCase.getPropertyValue("XMLbody");
def httpStatus = testCase.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = testCase.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "[HTTP/1.1 200 OK]" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


testCase.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists == " + testCase.getPropertyValue("policyExists");
log.info "xmlPolicyClass - $xmlPolicyClass";</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return policyExists to calling test case" id="e38474f9-47c7-4bd5-9e2f-a0496e9ca32c">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",testCase.getPropertyValue("policyExists"));

if (testCase.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",testCase.getPropertyValue("XMLbody"));
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdZk6JKE333VxjOY4fNorjFdEcUa6Oigri+fIFFsSiCUiDor78Fjo729Myd+z102JVUZp3MPCSnvmNrH7A9gDGKEz8Kq6r4VvufTXN0C3HterNpO/VmFzbq3VbHrkPHsrpwY7FtulOrqhinSA1xYoXJW42lGbbO0HW6YdLdHtvosdwry7HrWnWOYkxCky2vdK2a74MQ98pj32ppHPYiC/u4F1p7hHsJ7E2BNuyRnT3rhqn2/v2KsjwwfveS5NCjKPhqI4iCAL7CaE99p572fLdxb+q7oZWkMfpxpo3faj98syx7zRqvUexSLE3TFN2lyB4b++632nvl5oxsNXSi61qwwij0oRX4F6sApaHEi+wqCNwo9hNv/5vQDMXQReg6ymEdMs3wW436eUCJ7i8jPYGMsVXHnsXcghnIQTEKIarODPWt9u3vOnj1NWMrxE4U7/Gn9X+DhMITCqIDsuv4ltkN3d9H/KJc798R7KkhDFLsn9CooMnBgghXJzFy/HzoY0I+G1fL9ldzfGMYgv+lJd+pR5wENvVFZUTfRTj5f/r12KtrlLkVpOi9OTpvVywctVaEvuNxPEpFbrv1aCUBbyWEx81XUPdW/1h/JuqdVz+cRqid0MzLMctiu5+MXqwpBILZv7QGLQZHaPWSM+kJfjS1SeL0qV2+CxQRTxxJ2+/UQdQKlxvHiJyOm7bWuCK7bMtPw+ZaNQHtD7St6h/N8Yp2deDuck9hYTf0gaHGy0lzGRxcqh86bW+fO9RKBjsBJcnwbOyAyThWUkl1eWC64Y7JGoejZbYvvvv2M6fHHIq8BuhcJln8v+Tormgl1n0hFJPCIa9ngt41VRXTiyCA89QFmcoDl/xtwYh3d0dv5yvdjOaBrstAFPhgKw01sFMAM5N4TxPmcy0XLqDPu6M5cTQrIFjzmiFlYrYS57r+IWWeaSvz80YJ0vVFGmkAl86Cp0mGNBcNU9I0EF1tuSZulHyrTbVM1VdihQQQpfxwsZVugpTch6zKaVOOXU25dL2cE7t8Hu5Hp40pBZqgKcL0qEzVTUPUpT4wVgvIyinxvQz3h6iymvEPTv0D2gIkZzQ5E1w0c5dp5owdiYZV2sxnm6YqfU3HmaCXWSkVKevPZ5eftRB4TbD3Ui6ZYHKtBTQFeUSvl31sLbhQM0AmuqXzQMrs8Q2IptNZRbjWaihlhmTMRrJmqJkESpsoZQHesCNvo3gn2NDzvgm2j40RdGkhh+R5aJzgmTtWLEUGm/2cgQ3Dgz7nW8soc9edTNRX/UG0VkmYEdAlntcBAUSDIjVSfx4M+Tk3Pvhd1kdDR472yIsrGhMNdqdLTnf8xtidjBac6OzaE8WfNCzbo9QAstvGDqgqsgeMp1u2saIMMfQvrfFgtkR+vLokI05nWn6HqxiLdLYUo6BtfyxXs8FLvoK6OZ5MZ4vJJc9Hx23nEiQfY/4jnvY10R2PEJpg+ELRlsybHZETVh9bwifHoBFXAa7GA6BsXVfyCYH5j+2VhB+GJhHyAk3IFGEhKFOgKC+Syou67sgeM4HKPJ0xI02V7ICU6bxaGkFlLfAi6RRtLdaHFSvTaxPYZTC9KcmuPuNe+ku01keBOU9Adpg7IcPQykH/cLTMhVrBAFvNpjx5i/hKqoKZNT706Xwwb9HMUbeD/rQLZo18yu7yseeuzzt3vSNNWT28OisTBHPzgWMqodiiopuSoYHO9X3LNXXWMAK4zw+bPcxFk/SsdI5MXjJknZ7loggGVxs2AZvj1UXaaoJU+ldArlmEFqfN0sOrcOSPTSklpE0f6LLdsPS/cqygWOWZY0cB6OAzx6QrxyTgHF/UjshgriUc8CJzeUU66u35sN890PpyuKvwLzLlJn7QHIedzBy8LJhz1va2+mLRVUVPeAmdldfYJDxtXaCO+ru24hs7MWw1g7M21HRu5lPBmd6iY4aHlZHKhFIjuchUN05f+P3a318ujSY720+m6UmdWQPMnL3NcdHNtpOPFkXFypm7tNcnXV5GcHX9jnweknfjdYxSjwP2aQLftNc03WwRTG7L4jusilWZfByt5M86rrD4dt0pt/YOhRjECQqT2nvhVWi4XkqUnm/3yJfzugaMQEtiq0tLNNNhWVmimzQj04Bud7sNkZNuYu+K4hNEIQodvzirkLPXj/WfAcJ9D6PQRnH9FKXQQ7j2h4hFvapqaBAVEoUYmRGRyxzHdLudTksUeZrmRJZr8O2ORAMg8lJHltq16ihKxuE4Bk6C4iepzLBPUtlA0D/4qNDThajARFXghJTkaJ3SJGBeT9ZriFKiuONC9PbYZoejsL8/BKgATO0jOw3Q68E7lAWi8PWXrVsQl9aigKXa+W1+n5/dSkH22H6xARfJ8Ii0E30h+plbJr9k3PjycnALD1LbL0QNqWsS+/CK5PnRT7oUPLlzpUjphvm+9bPhKSz1OaP7SfbJh3fG3+9ERFIT0fV+a8jRej2+pqdTWragXQjKmISnGIpmqSmCKVGFZzPaoZC6h6D+SpDfUX86+W5/xpcmXjhNyNu8J4Splsu/uI1NES5uYyohfP63V72nI0ndEpQnX9mEgFzaCsR/vNfBHiz2EfOE/GRRbP9s1xexHs4heRbjyw/dYlXI7/NvWAEjEtYnIyyKH4N/FeCrw5+N9yLfsSSETZs0Qb9/Ui1m01vNgjBKw0QVa6XhcV6WOJPzAfV+bvolTCmAf9xocvzbG81SG07J5Npbtfte/9831/2SLhARL+yXWN5qObmck8ND92E+/wD45YgWZflPI/o5k/dfzL9aHmr6+X14/wc=</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:EnableUserDataUsageConsent</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypePolicyGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<PolicyList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:C20960585FEAD7B6E0401F0A05997FD3">
      <PolicyClass>urn:dece:type:policy:EnableUserDataUsageConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</Resource>
      <RequestingEntity>urn:dece:org:org:dece:222259</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E" CreationDate="2012-06-09T11:25:39.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>httpStatus</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>httpConnect</con:name>
          <con:value>[close]</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentType</con:name>
          <con:value>[application/xml;charset=utf-8]</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLength</con:name>
          <con:value>[963]</con:value>
        </con:property>
        <con:property>
          <con:name>httpContentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" disabled="true" id="f1111bbd-bbcc-4ef4-8f12-08496cc1eafc">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="8cf81666-ff97-42de-80ee-ea1f07f692a6">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e5e2b062-d8e6-49bd-ab71-87c3d922e8a1">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="0fd64860-4da2-481e-826d-7d7029696ebc">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("STS - POST");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "C:\\certs\\RET_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - POST" id="1bad2ed3-befc-41fc-a49b-812d6c8a5d1c">
        <con:settings/>
        <con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="c4a0a0e1-e7ed-4061-bca5-9b24d4d45003">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="2f3c5449-1cc3-4b3d-ab95-9371c2021be9">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url           = testProject.getPropertyValue("targetURL");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTS");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		//orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/06/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="94b3fd2d-d001-447b-a585-8bce61e00ca1">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="570a045e-1f3c-4b2a-a9e1-d46a5d8e0040">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        
        
        
        <con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_120426b5-97ae-4376-976f-b1aa1743f38c</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property>
        
        
        
        
        
        
        
        <con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property>
        
        
        <con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property>
        
        
        
      <con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>jbaisakh</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" disabled="true" id="9126c8d8-117e-4a28-9150-915bc008c71c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d376a210-df99-4179-a7f5-86f1ed947cdf">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="2780b535-cbb0-4e3c-877d-3dd5b5ba3c3a">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="5b5ee4d3-d7b1-47d1-8c66-37612cc9d6b9">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "C:\\DECE\\certs\\222259_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
		case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	 break;
	
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" id="d88ee4fc-3330-49a8-a3ec-e93598ce7dce">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="7ff6a200-5174-4122-8d6c-0cb52340776c">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="09f3a3c3-5408-498d-bba4-5d4f84fa7783">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="cb8989e5-b739-48a3-9e2c-19a6919ad637">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="09f79538-59d3-4a69-a708-bffc101d2d18">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url           = testProject.getPropertyValue("targetURL");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/0/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="3a745261-03de-4824-907e-2f226a9c5826">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="0c38bc77-09d5-450a-b37e-a143bf8c67bc">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="0e890cc5-3ab0-4c23-828e-4a27ec7470ac">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        
        <con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_120426b5-97ae-4376-976f-b1aa1743f38c" IssueInstant="2012-09-26T12:10:23.898Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_120426b5-97ae-4376-976f-b1aa1743f38c">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>D/Kx3Ry2iBLBVaYgJosWnGxWrgY=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
IiYK5ZPoGLpNdeWLNPTiHDrm6Hufrzb6QoWcxmphxUA+go1qWK8d4WGVWtrPyjpPxmjYEO2leKOR
eoYcreVYdDo2nT2aKnGxEwoapnDTyEcaC3bmUs6f3PKmoczrDI+WCDeoxfi5LKLgch57i+eCycQL
cAfxwyZGs8ankUuTkHQ=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_DC8D5F4260B5F2F2DA66B88422D72CA5" NotOnOrAfter="2012-09-26T15:10:23.898Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/222259"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2012-09-26T12:10:13.898Z" NotOnOrAfter="2013-09-26T12:10:23.898Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:222259</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_120426b5-97ae-4376-976f-b1aa1743f38c</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2012-09-26T12:10:23.898Z" SessionIndex="_120426b5-97ae-4376-976f-b1aa1743f38c"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>4310</con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property>
        
        
        
        
        
        <con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_120426b5-97ae-4376-976f-b1aa1743f38c</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value></con:property>
        
        
        
      <con:property><con:name>assertionAccountId</con:name><con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_120426b5-97ae-4376-976f-b1aa1743f38c</con:value></con:property><con:property><con:name>assertAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVdZk6JKE333VxjOY4fNYuMW3R1RrI2KCuL68gUWJaAsSoGgv/4W2Dra0zN37vdgYCWVWSczTxWnXrEV+GwXYIzixIvCqiq+1f7HsPQL21xz9U7LQvWXRqtJ/jU39TVjWUzrpbFptGGtqmKcIjXEiRUmbzWWZtg63amzTZNhuwzdZRvP7U57VavOUIxJaDLlma5V88APcbdc9q2WxmE3srCHu6EVINxNYHcCtEGXzOxaV0y199cLynLB+N1Nkn2XouCzjSDyffgMo4B6pR7mvNq4O/Gc0ErSGH2uaeO32qdvlmXPWeM5ih2KpWmaojsUmWNjz/lRe69cnZGthpvoMhasMAo9aPne2SpAaShxI7sKfCeKvcQNfhOaoRi6CF1HOaxD5iX8UaN+LlCi+8tIDyBjbNWxazHXYAbaoBiFEFWnhvpW+/F3Hbz4mrEV4k0UB/jL+L9BQuER+dEe2XV8zeyK7u8jflOu91cEu2oI/RR7RzQsaLK3IMLVcYw2Xj7wMCGfjatl+6s5vjIMwf/SklfqHieBTX1TGdFzEE7+n37d9+oSZWb5KXoXqX7eME6sxw/4mbV0ehGeh0o+j53lWwnhfvIF1K3Vn+OvRL3x6tNJ9ZZ9bjWOlMF+aKP5YDg2vQ8xDpof6SY+r5t6NId5sHfzKXhyIuYw77ftl7kymyfx+LTdj/Ngu5RGrI/6I6OCoiUkkZe2GLGhyVp9AlbKImsfiuZJgpbQWAdT3Nw0xv0ggudYVJ/mgoiifONxg/7AgS7X8p6QcIL6oALBJs9OKwW3rXA3Tc3dh/72M6f7HIq8+uhUJln8X3B0R7QS6zYQipNiQ7Zngt41VRXTsyCA08QBmcoDh/y2YMg7u4O785RORvNA12UgCry/lQYa2CmAmUq8qwmzmZYLZ9DjneGMOJoV4K94zZAyMVuKM13/kDLXtJXZaa346eosDTWAS2fB1SRDmomGKWkaiC62XBPXSr7VJlqm6kuxQgKIUr4/20onQUruQVbltAnHLidculrMiF0+DYLhcW1KviZoijA5KBN13RB1qQeM5Ryyckp8z4NgH1WWU/7OqbdHW4DkjCZrgrNm7jLNnLJD0bBKm/lo01Slp+k4E/QyK6UiZb3Z9PyzFgKvCXYg5ZIJxpdaQFOQh/Rq0cPWnAs1A2SiUzr3pcweXYFoOp1VhEutBlJmSMZ0KGuGmkmgtIlS5uM1O3TXinuEDT3vmWB73xhBl+ZySN6HxhGeuEPFUmSwDmYMbBgu9DjPWkSZs2pnor7s9aOVSsIMgS7xvA4IIBoUqZH684BsKG609zqshwYbOQqQG1c0JurvjuecbnuNkTMezjlxs2uNFW/csGyXUn3Ibhs7oKrI7jOubtnGkjLE0Ds3R/3pAnnx8pwMOZ1pem2uYszT6UKM/Jb9sVhO+0/5EurmaDyZzsfnPB8etu2zn3yM+I940tNEZzREaIzhE0VbMm+2RU5YfmwJnzYGjbgKcDQeAGXrOJJHCMx/bC8k/DA0iZAXaEKmCHNBmQBFeZJUXtT1jewyY6jM0ikz1FTJ9kmZTsuF4VdWAi+STtHWfLVfsjK9MoFdBtNfJNnRp9xTb4FW+tA3ZwnI9rNNyDC0stc/NlrmQK1ggK1mE57sIr6SqmBqjfY9Ou/PmjRz0G2/N+mAaSOfsLt85Dqr085Z7UhTlndbZ2kCf2becUwlFJtXdFMyNNC+7LdcU6cNw4dBvl8HMBdN0rPSOTJ5yZB1epqLIuhfbNgEbI6XZ2mrCVLpXwG5ZhFaHNcLFy/DoTcypZSQNr2jy3bN0v/KsYJilUeOHQSgg68cky4ck8Dm8KS2RQZzTWGP55nDK9JBb80Gvc6e1heDXYV/kikn8fyXUdjOzP7TnDllLXerz+cdVXSFp3CzdBvrhKetM9RRb9dSPGMnhs0X/6QNNJ2bepR/orfokOFBZagyodRIzjLVidMnPlh5wfnceGGnwXiSHtWp1cfMyV0f5p1sO/5oUlSsnLhza3XU5UUEP78jXw/Jm/FyjFL3B+zDCXzVXpN0vUUwuQ6L77AqVmXycbSSP+u4wuLZ9U05tbsvxCBOUJjU3guvQsN1U6L0PLtLvpyXMWAEWhKbHVqimTbLyhL9QjMyDehWp9MQOekq9i4ovkAUonDjFWsVcvbysf4zQBh0MQptFNePUQpdhGt/iFjUq6qGBlEhUYiRGRG5LApkO8tEb9E8J7MyK4Jmk2+3X1hWbLEC4GrVYZSMwlEMNgmKH6Uy9yCVDQS9vYcKPV2ICkxUBU5ISQ7WMU185vloPYcoJYo7LkRvl31pcxT2gr2PCsBUENmpj5737r4sEIUvT7ZuQVxaiwKWaue3+X19dy0FmWN7xQRcJMMj0k70jehnrpn8knHj28vBNTxIba8QNaSuSezBC5LHVz/pUvDkxpUipSvm29Svhoew1NeMbivZRw/eGH+7ExFJTUTX+7UhB+v58Jwej2nZglYhKGMSnmIomqUmCKZEFZ7MaIdC6haC+itBfkP9ZeWb/RFfmrjhJCG7OSCEqZbDv7iNTRAubmMqIXz+t1e9hyVJ3RKUJ9/ZBJ9c2grEf7zXwS4s5hHzmDyyKLZ/tuubWHfrkDyL48sLnWJUyO/Tb1gBIxLWI0dYFN8H/y7Ad4s/Gm9FvmFJCJvWaYJ+/6ZanE1vNQvCKA0TVayVhvvzssSZnPao+3PSL2FKAfx5o8nxb280C20wISdXYNVuc71/n1z3SrpARLywV2J5q+Xkck4WD5278/kT4LdHtCjLfzqiHzN5/8X8q+Wupl/3w/s/</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of STS API" searchProperties="true" disabled="true" id="d00ef2ab-c8f8-4d8b-b0b0-f60b5a386b4d">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="6f6a91cb-2a1b-43a3-80ff-266a7e741f98">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);
log.info("Establish Test Case Properties.......");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="28294220-3976-4d59-af0e-9476cb522f95">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("username","SCHOrg1Full1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));
log.info("Extract Required Properties from Calling Test Case...........");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="b04b832c-d20a-482b-b3a9-856b66951f2d">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeId");

RestTestRequestStep  testStep = testCase.getTestStepByName("STS - POST");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

nodeId="RET";
switch (nodeId) {
	case "RET":
		keyStorePath = "C:\\certs\\RET_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - POST" id="60b7b7ba-7949-43b0-81fd-b9ee05a05663">
        <con:settings/>
        <con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            </con:settings>
            <con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint>
            <con:request><![CDATA[<Credentials xmlns="http://www.decellc.org/schema/2010/10/dece">
  <Username>tester_one</Username> 
  <Password>password2</Password> 
  </Credentials>]]></con:request>
            <con:credentials><con:username>tester_one</con:username><con:password/><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of STS - POST" id="b1dc54f5-a263-4d6a-9232-291f279baa49" disabled="true">
        <con:settings/>
        <con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>tester_one</Username> 
  <Password>Password2</Password> 
  </Credentials>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="03f98ddb-5ce0-4190-9209-ba2e4ee718bf" disabled="true">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="1d60a2bc-b1cc-4cc6-8df4-aac326488d9e" disabled="true">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url           = testProject.getPropertyValue("targetURL");
def urnacct       = testProject.getPropertyValue("urnaccount");
def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTS");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/0/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="9f27fae0-2bdd-4bbf-b244-25df4056e519" disabled="true">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="ff5fd9ed-aa92-46aa-992c-1bc97b6e4a2d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        
        <con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
      <con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/6f8a0720-d056-4d0a-a707-d5c1fcddb9da</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>SCHOrg1Full1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>b1dc54f5-a263-4d6a-9232-291f279baa49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of STS API" searchProperties="true" disabled="true" id="bbc5da06-ca84-4db2-9f72-73f7b0c05f95">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="85740061-d6d9-4c50-878a-bec94805cca3">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="28886d39-be5f-42c8-a543-95d4e8780927">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="8d445252-a635-46e6-bf29-696cadba536a">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("STS - POST");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "222259":
		keyStorePath = "C:\\certs\\RET_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - POST" id="3a42af14-9cdc-417b-b8e9-fef22d523504">
        <con:settings/>
        <con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>tester_one</Username> 
  <Password>Password2</Password> 
  </Credentials>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="67d1cbb4-e283-4d53-8de9-c33959746c20">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="7ccdfece-0db1-4056-b970-888861d6a624">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url           = testProject.getPropertyValue("targetURL");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTS");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		//orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/06/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="f786b2a6-4c71-4213-a689-b686bb1a1160">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="171e2bbf-803f-4395-9311-172ee048044b">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        
        
        
        <con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_120426b5-97ae-4376-976f-b1aa1743f38c</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property>
        
        
        
        
        
        
        
        <con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property>
        
        
        <con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property>
        
        
        
      <con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>jbaisakh</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="Common Test Steps" id="5586a894-f4a1-478e-a196-2fde8b22dc5f" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties/>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights Create Data Validation" searchProperties="true" id="c506c74e-f2d6-41da-82bf-76565b42d2f5">
      <con:settings/>
      <con:testStep type="groovy" name="Validate DB for RightsToken" id="5a3558b2-6a98-425d-a27f-2c59f882406c">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//log.info RT_Data2.toString(); 
log.info RT_Data.toString();

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

//log.info testCase.getPropertyValue("DbResultRTXml");
//log.info testCase.getPropertyValue("RightsReqXml");

// Assert RightsToken Information Expected &amp; Actual 

def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
def Val_DbResultRTSHXml =  new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT_StatusHistoryXml"));

def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());

// Assert RightsTokenID

assert Val_DbResultRTXml.ResultSet.Row.RIGHTS_TOKEN_OID == testCase.getPropertyValue("DBrightstokenid");

//Assert ALID information
assert  Val_DbResultRTXml.ResultSet.Row.ALID == Val_RightsReqXml.@ALID;

// Assert CID information 
assert  Val_DbResultRTXml.ResultSet.Row.CONTENT_ID == Val_RightsReqXml.@ContentID;

//Assert NodeID information
//Val_RightsReqXml.PurchaseInfo.NodeID 
assert  Val_DbResultRTXml.ResultSet.Row.NODE_OID.toInteger() == Val_RightsReqXml.PurchaseInfo.NodeID.toString().tokenize(':').last().toInteger();

log.info rcStatusHistory;
// return rc for Status History 

CallingTCase.setPropertyValue("RTC_rcStatusHistory",testCase.getPropertyValue("RTC_rcStatusHistory"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreate_With_Valid_AccountId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Staging Rights DELETE</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:A17388C835F7967BE0401F0A059962B0</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>A17388C835F7967BE0401F0A059962B0</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>A17388C835F7967BE0401F0A059962B0</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>7001</ACCOUNT_OID>
      <USER_OID>799999</USER_OID>
      <RIGHTS_LOCKER_OID>7001</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>107002</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_node222259_RetailerNode</RETAILER_TRANSACTION>
      <PURCHASE_NODE_USER_OID>9A9CCCF13ABCD94FE0401F0A05992F63</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>https://dl.bestbuy.com/p/bb93827398sdjdhds</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2011-04-21 19:21:47.412</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData ALID='urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt' xsi:schemaLocation='http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd' ContentID='urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt' xmlns:ns4='http://www.decellc.org/schema/2010/10/dece' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'><ns4:SoldAs><ns4:DisplayName Language='en'>Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:BundleID>urn:dece:bid:FILE:mystudio Version_525899.txt</ns4:BundleID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:DiscreteMediaRightsRemaining FulfillmentMethod='urn:dece:type:discretemediaformat:securedigital'>1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile='urn:dece:type:mediaprofile:standarddefinition'><ns4:DiscreteMediaRightsRemaining FulfillmentMethod='urn:dece:type:discretemediaformat:securedigital'>0</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile='urn:dece:type:mediaprofile:portabledefinition'><ns4:DiscreteMediaRightsRemaining FulfillmentMethod='urn:dece:type:discretemediaformat:securedigital'>0</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:ResourceStatus><ns4:Current CreatedBy='urn:dece:org:org:dece:222259' CreationDate='2011-02-17T15:12:03'><ns4:Value>urn:dece:type:status:active</ns4:Value><ns4:Description>new rights token</ns4:Description></ns4:Current></ns4:ResourceStatus><ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc xsi:type='ns4:ResourceLocation-type' ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc xsi:type='ns4:ResourceLocation-type' ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc xsi:type='ns4:ResourceLocation-type' ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc xsi:type='ns4:ResourceLocation-type' ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID><ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:107002urn:dece:accountid:org:dece:107006</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime></ns4:PurchaseInfo></ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT_StatusHistoryXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>A17388C83604967BE0401F0A059962B0</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>A17388C835F7967BE0401F0A059962B0</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>RightsToken has been created.</DESCRIPTION>
      <CREATED_DATE>2011-04-21 19:21:47.431</CREATED_DATE>
      <CREATED_BY_NODE_OID>222259</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>799999</CREATED_BY_USER_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Get Information-old" searchProperties="true" id="8dae3dc2-8753-4633-a6b6-b0ea36ecb638">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenGet Response" id="824d53ae-84e5-4eea-a2a6-ab0b388105cc">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def Resp_RightTokenObj = Val_RightsResXml.RightsToken.children().collect{ it[0].name()};
testCase.setPropertyValue("RTObjType", Resp_RightTokenObj[0]);

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
callingTCase.setPropertyValue("RTObjType",testCase.getPropertyValue("RTObjType"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E08520F41F14C4E3E0401F0A05995354" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenFull ContentID="urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt" ALID="urn:dece:alid:file:RTDELETE_R3_EXAMPLE_ALIDVersion_760911.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:222259" CreationDate="2013-07-02T09:40:18.808Z" ModifiedBy="urn:dece:org:org:dece:222259" ModificationDate="2013-07-02T09:40:24.381Z">
            <Value>urn:dece:type:status:deleted</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:222259" ModificationDate="2013-07-02T09:40:24.380Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>Rights Token is Deleted</Description>
            </Prior>
            <Prior ModifiedBy="urn:dece:org:org:dece:222259" ModificationDate="2013-07-02T09:40:18.813Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <PurchaseInfo>
         <NodeID>urn:dece:org:org:dece:222259</NodeID>
         <RetailerTransaction>transcation</RetailerTransaction>
         <PurchaseAccount>urn:dece:accountid:org:dece:E085176981C0A457E0401F0A05993E0A</PurchaseAccount>
         <PurchaseUser>urn:dece:userid:org:dece:E0851E8E263A0C2DE0401F0A05993E15</PurchaseUser>
         <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
         <TransactionType>urn:dece:type:transaction:category1</TransactionType>
      </PurchaseInfo>
      <RightsLockerID>urn:dece:rightslockerid:org:dece:E085176981C8A457E0401F0A05993E0A</RightsLockerID>
   </RightsTokenFull>
</RightsToken>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2876</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDeleteRequest</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate SAML Assertion" searchProperties="true" id="9d075eb2-b520-431f-b5f7-c18df4bf1a80">
      <con:settings/>
      <con:testStep type="groovy" name="Get Assertion From FormAuth" id="b18d0462-b486-4fe9-926b-4242980d2df9">
        <con:settings/>
        <con:config><script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("TSuiteName");
def callTCname = testCase.getPropertyValue("TCaseName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));

String nodeID = testCase.getPropertyValue("nodeid").toString();
String userID = testCase.getPropertyValue("username").toString();
String useroid = "";
String acctoid = "";

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
                def a = new dbUtils.dbUser(log,testProject.getPropertyValue("targetDECEDB"));
                useroid = a.userGetUserOID(userID);
                log.info "useroid" + useroid;
                acctoid = a.userGetAccountOIDbyUsername(userID);
                log.info "acctoid" + acctoid;
} 
catch (Throwable e) {
                log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
/*
*  LP1 security contexts
*/

if (testProject.getPropertyValue("targetDECEDB").toString() == "LP1") {
                switch (nodeID) {
                                case "222259":  
                                       if (userID == "schfau1")
                                                {
												   callTC.setPropertyValue("assert","nVdZk6LKEn43wv9gOI+GzeJudHdEsdmoqCCuLzewKAFFQAoE/fWnwNbRnp45c+5Dh02Sy5eZXyVZr9g4uGwXYIzCyPG9kiy8lf/X7JgsgvVNFbXZerXehqjaqbVQlW3DFqp3WizdbpVLMsYxkj0cGV70VmZphq0ydJWu6QzbbXS6DPPCtph1uTRHISauicoLXS6lB9fD3TzsWzkOva5vYAd3PeOAcDeC3SlQhl2i2TVumMrvr1eUecDw3Y6ioEtR8MVEELkufIH+gXqlnnReTdydOpZnRHGIPmOa+K38aZskyUtSe/FDi2JpmqboDkV0TOxYP8rvxcLNGpmyt/U/Bbzh+Z4DDde5GBksBUW2b5aAa/mhE9mH3zhnKIbOnFdRCquQqXs/ytRDiBzgX7p6whlio4ptg7l709AWhciDqDTT5Lfyj7/r4qexHhoe3vrhAX8V/DdUyDsh1w+QWcW35O4A/97lNzV7f0WwK3vQjbFzQqOMLYEBES5NQrR10qGDCQdNXMpZUErxjWgI/pe+vFKPODPc1HfFERwL4ej/6dpTx65u5oYbo3cwOXbisCJta5vLcn3eM5exx7rz4+yYvOUgHpU/cd07fhP8wtk7w252KnXER2ZggMp2MLIqPsdpwVETeF7CS12pNYMF0x7KmmFtm6N0uJHCSQsuWoazxBtwlIUU88qlsQukSEsPxUIARxXDujBire/702Y60yb6QDoCa7ZJAnktGtOGxramtWmybiZtTpoIl1qLcVdD0T2ItjDQ5TG7MmuVD6hRxcKyvvYFSCWNuan5aGxLK/XtIbGnPLLkBuicp5r9v2zQHcGIjPsDn82OLTmuEXpXZFmILzwPzlMLJDIHLPK3AyPO2h/tvdPrJDQHVFUCAs+5O3GogH0PMDORsxV+PldS/gL6nDWaE0O9WADumlM0MRGSlTBX1Q8xsXWzNz9vem68vogjBeDcmrcVURPngqaLigL8qyxVhE0v3SlTJZHVlVAsEA+CmAYXs9eJUC91ICs3lGmDXU0b8Xo5J3LpPDyMThtddBVe6fHTY28qb2qCKvaBtlpAVoqJ7WV4CPxiYTXjHqz6AdoBJCU0iQouir5PFH3GjgTNyGX6s0yRe31FxQmv5nn1igUx6c9nl5/14DmFNw9iKupgcq0H1HlpRK+XfWwsGp6igUSwcuuBmJjjGxJFpZNigb/WaygmmqjNRpKiyYkIcpkgJi7esCN707NPsKamfR3sHrvDq+JC8sh7TzvBc+NYLBg9CWwOcwbWNBs6DcdY+om1bieCuuoP/LVM/IyAKnKcCggkGmTZkSZwYMjNG+PA6bAOGm4l/4DssFhQGH+wP11Suu3UxtZktGgI231r0nMmNcO0KdmF7K62B7KMzAFjq4aprShN8JxLczyYLZETri7RqKEyTafdKBa0RTxbCr7bMj+Wq9mgkq6gqo8n09licknT0XHXvrjRx5j7CKd9RbDGI4QmGFYo2pA4vS00+NXHjtBqq9GIeAOWwgHQ21mW6BAmcx+7Kxs/NEUkLAYKn/T4Bd+bgl6vIsqcoKpbyWYmsDePZ8xIkUXTJZU6r5aaWyyseU4g/aKNxTpYsRK91oGZe1PromSps0alv0RrdeTq8wgkwXzrMQzdC9SPrZJYUMl4YMrJlCPniSsWYhnMjHHQp9PBvEkzR9V0+9MOmNXSKbtPx7ZFJpm13pPOrB5O0UoH7lx/4JpMmLYgw0kXNQW0r2cvVeRZTXPhIQ02B5gKOulcbu3rnKhJKj1LBQEMrjKsAzbFq4u4U3gxtyd1SxWDsOO0Wdp45Y2csS7GhL3xA2t2G5b+V65lTCsWnrl25IEKvnJNvHJNBNtjRW4LDG40+QAvEovriUe1NR/2OwGtLof7YoGrSJQVOW597LUTfVBZMOekZe/UxaIjCzZf8bYru7aJONq4QBX1962eo+0Fr1l3z8pQURszh3LP9A4dEzwsFkYy44m16CJRnTCucIe1c7hcanV2dphM45M8MwaYOdub46KT7CYfTYoKe+fGpbU+qdLSh6vr9+Xr0LwLr2OVehy4TyP5tp1N480Owej2mH2iZaEkkc+mEf1508skjlnd5qrdIFsXcYS8qPyeWWVbXjcmu6Bjdskn9foM6h2JJV8UtsnU2Ua9LdJ1mpFoQDc6HZptSrd18IriC0Te97ZOFitbeK9f8T8DhIcuRp6JwurJj6GNcPkPHrN6lWRPIwuK72Gk+2ShrtMcI/ANwPF1gRZq7VarRtNis8MxdYGVJLFcGvnR2BuHYBuh8HmZbjwt0xqCTuCgbOPOtg1M1g0ckZIcjVMcuczLyXjxUEx28jBbi7tsvd2gsHMIXJQBpg6+GbvoJbCDvEAUvv6yVQPiXEq3Op18Efptfl/f3UpBdEwnU8BZMhwi7UTfXAvoWya/ZFz79vpwcw9i08l2HVLXKHTgFcnzq590yXhy50qW0g3zXfWr4Mkt9TWjeyTz5MA74++3JrJwk13s/daQo/FyfIlPpzhvQSvbNUPinmIomqWmCMZkXTzr/h551N0F9Vfr+h31l8h3+TO+OLK9aURO84EQppQ//sV9bYpwdl+TCeHTv70MPoUkdYtQGn0n411yrcsQ//HmB7sw0yPiCflJ/ND82a5vfD3EIXlm48vxrOwp28vPv2EF9Ilbh4wwP3x0/p2D74I/C+9FvmOJCJs2cYR+/6aUzaa3sgGhH3uRLJRzweO8zHFG5wB1fyr94ibfiD8vOyn+7WVnqQynZHIdjPJd1/l35aqT0wUiYoWdHMtbOSXXdxLcsx7m8yfA70c0LX0zosG9gE+ZvP8i/lXyUNOv5+H9Hw==");
                                                                callTC.setPropertyValue("assertId","_69d2ec4b-e824-48ce-937e-28c7e4972087");
                                                                callTC.setPropertyValue("assertionUUID","_69d2ec4b-e824-48ce-937e-28c7e4972087");
                                                                testProject.setPropertyValue("assertionUUID","_69d2ec4b-e824-48ce-937e-28c7e4972087");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("assertionUserId","A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                log.info "Done setting the properties"
                                                                                                  
                                                } else if (userID == "schfau2") {
                                                                callTC.setPropertyValue("assert","nVdbc6pKE333V1juR8twi9dKUjVcgwoK4vXlKxxGQBGUAUF//Rkwuk129j77fA8pM013z+ruxbDmBdv7gO0BjFGc+FFYVcXX2v+YzdqBGw42bG4DG8+20250OlyzgRB07G5r04bIrlVVjFOkhjixw+S1xtIM26DbDZq1GK7HMD2afuK63KpWnaEYk9TE5YmuVfN9EOJeue1rLY3DXmRjH/dCe49wL4G9CdCGPeLZs2+Yam8vV5TlhvGblySHHkXBJwdBFATwCUZ76oX65PPi4N7Ed0M7SWP0saeDX2sfsVmWPWXcUxS7FEvTNEV3KeLjYN/9UXur3IKRo4ab6LoW7DAKfWgH/sUuQGko8SKnCgI3iv3E2/8mNUMxdJG6gXLYgMxz+KNG/dygRPeXmT6BjLHdwJ7N3JKZaINiFEJUnZrqa+3H303wGmvFdog3UbzHX9b/DRIKTyiIDshp4FtlN3R/n/Gbdr29INhTQxik2D8hvaDJwYYIV8cx2vj50MeEfA6uluOv5vjGMAT/y0heqEecBDb1TWdE30U4+X/m9Tira5aZHaToLRfG6mY2G6iikQR7bfvMbIfvwngVMtlrCeHR+QrqPuqP9Vei3nn1EeQwq4OXJvIBJevNMXFgprIgOKM6LfYFKhs3++P8cLGE57hlmul8l0woailyUpvWsSVf5J2TqDtanC0yR610z8+gfukPu+qMUdft7JT3l3zYwvW2Xs+6yjGK5XOLruP8pON125uO66Ctn1p1GvaVVqhqpzXHCcZ5vcOBXpnW7fXuuFKod8q4KLybONrrz5oeayjqGqBzWWTx/6JJd0U7se8LoTgpNuT1TNCbpqpiehEEcJ64IFN54JK/LdB5d3f0dr7SzWgeGIYMRIEPttJQAzsFMFOJ9zRhNtNy4QL6vKvPSKBVAcGK10wpE7OlODOMdynzLEeZnddKkK4ukq4BXAYLniaZ0kw0LUnTQHS15Zq4VvKtNtEy1ViKFZJAlEizHaWbICX3Ias2tUmTXU6a6WoxI3b5PNzrp7UlBZqgKcLkqEzUNScaUh+Yyzlk5ZTEXob7Q1RZTvmHoP4BbQGSM5rsCS6atcs0a8rqommXNuuzTVOVvmbgTDDKqpSKlPVn08vPXgi8Jjh7KZcsML72AlqCrNOrRR/b82aomSAT3TJ4IGXO6AZEM+isIlx7NZQyUzKnuqyZaiaB0iZKWYDXrO6tFe8EOSPvW2D7OBjBkOZySJ6H5gmem8eKrchgvZ8xkDM96Dd9exFl7qqTicayP4hWKkmjA0PieQMQQDQoSiP958GQnzVHB7/L+mi4kaM98uKKxkSD3emS0x2fG7ljfd4UN7v2WPHHnO14lBpAdsvtgKoiZ8B4hu2YS8oUQ//SGg2mC+THy0uiNw2m5XeaFXOeThdiFLSd98VyOqjnS2hYo/FkOh9f8lw/bjuXIHkf8e/xpK+J7khHaIxhnaJtmbc6YlNYvm8JnzYmjZoV4Go8AMrWdSWfEJh/315J+G5qEiEv0IRMEeaCMgGKUpdUXjSMjewxY6jM0imja6rkBKRN5+XCDCorgRfJpGh7vjosWZleWcApkxnPkuwa02a9v0ArQw+sWQKyw2wTMgytHIz3jZa5UCsY4KjZhCdvEV9JVTC1R4c+nQ9mLZo5Gk7Qn3TBlMsn7C4fee7qvHNXOzKU5cOrs7RAMLMeOKYSis0rhiWZGuhc37dcU6ecGcB9fljvYS5aZGZlcGTxkikb9DQXRTC42rAF2BwvL9JWE6QyvgJyzSa0OK0XHl6Guj+ypJSQNn2gy3bN0v/KsYJilc8cOwrAAF85Jl05JoHNsa52RAY3W8IBzzOXV6Sj0Z4N+90DbSyGuwpflyk38YPnUdjJrEF9zpyztrc15vOuKnpCPdwsPW6d8LR9gQbq79qKb+7EsPUcnLWhZjSnPhWc6S06ZnhY0VUmlLjkIlPdOK3z+5W/v1y4Z3a6H0/Skzq1B5g5e+vjvJttx+8tioqVc/PSXp0MeRHB5fU78vWQvBuvxyj1eMB+OoFv2muSrrcIJrdl8R1WxapMPo528mcdV1h8p7EpXXuHQgziBIVJ7a2IKjRcLyVKz3d65Mt5XQNGoCWx1aUlmumwrCzRzzQj04Bud7uc2JRuYu+K4gtEIQo3frFXIWevH+s/A4T73hrZMYprf8hU9KmqhiZRH1GIkRW91rpMFzCcKLZbQGiyjCDS7TYrAaZJzN2u1K1V9SgZhaMYbBIUPyhk7qtCNhH0Dz4qZHShJTAREzghnTjapzQJmKeT/RSilAjtuNC6Pfa506Swvz8EqMBL7SMnDdDTwTuUfaHw9Zdt2BCX1qJvpcj5bXlfn906QXwcv3DARTE8IlNEv2h9ute8VfJLxdy3d4JbepA6fqFlSFuT2IdXJJ8f/WRJQY87RYqSbpjvrl8Nn9JSXyu67+ScfHgn+v0qRJQ00Vpvt4Ec7afjU3o6peUI2oWOjEl6iqFolpogmBIxeLaiHQqpewrqr3T4HfWXne/2z/jSxAsnCXmJ94Qw1XL575ewT9GkBQnKk+9sQkCuXcXmf7yZwR4s/Ih5TH6yKHZ+dv6bXA/7EMjFAeSHbrEqBPT5NwOGEUnrk0Moih+Tf5fgu80/G+/9umNJCDHWaYJ+/6RanC6vNRvCKA0TVayVhscTr8SZnA+o99PplzSlhP24k+T4t3eShTacQA/t7drd1/9354ZfTh4iEoX9EstrLSfXa7J56D6csB8Avz1kRVn+0yH7uZK3X8y/Wh56+pXab/8A");
                                                                callTC.setPropertyValue("assertId","_1fbdcf3c-a3fc-4ad7-8835-eecda96f7cea");
                                                                callTC.setPropertyValue("assertionUUID","_1fbdcf3c-a3fc-4ad7-8835-eecda96f7cea");
                                                                testProject.setPropertyValue("assertionUUID","_1fbdcf3c-a3fc-4ad7-8835-eecda96f7cea");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223");
                                                                callTC.setPropertyValue("assertionUserId","AA908CE1AB0E23E7E0401F0A2222596223");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                
                                                } else if (userID == "SCHOrg1Full1") {
                                                                callTC.setPropertyValue("assert","nVdZk6JKE333VxjOo2GzKG7R3RHFKioqiOvLFwgloGxSIOivvwW2jt3TM3fu99BhV5KZdTLzUJx6RYbv0X2AEIwTNwyqMv9W+59lmgzV2vcazY7JNFqdbrdhmCbVoCxItrtdSHboXa0qI5RCOUCJESRvNZqk6AbZbtC0Trb7ZK/PdF+oLrmtVZcwRjg1dnkha9Xc9wLUL7d9q6Vx0A8N5KJ+YPgQ9ROzPwfKuI89+8YdU+399Yay3DB+d5Ik6hOE+WJBE3qe+WKGPvFKfPJ5tVB/7tqBkaQx/NjTQm+1j9gsy16y5ksY2wRNkiRB9gjsYyHX/lF7r9yDoSUH+/C25owgDFzT8NyrUYBSYOKEVhV4dhi7ieP/JjVFUGSRugFzs2FSreBHjfi5QYnuLzN9Ahkjo4Ecg7on0+AexjAwYXWhyW+1H383wVusHhsB2oexj76s/xskGJyhF0bQaqB7ZXd0f5/xm3a9v0KzLwemlyL3DCcFTSLDhKg6i+HezccuwuSzULUcfzVHd4ZB87+M5JV4xolhE990hndtiJL/Z17Ps7plWRpeCt87S2h39l3voo3d1SwgwHra5MbMZrnrvpUQnp1voB6j/lh/JeqDVx9Be4fZe4LPX5wxIdAb4GTro7RoRWIzNaeU0a638vMGbqN8lLu6Omhed2zAH6Sjvo9WLnXoGL3eXCHPUPP9aYXVPLc1UCTbojw64nMwGksKz05GPU1Mo9P81JqAzEZgT3j13OwNL8Nd51oHazSadva8n6zi3BXXg45oIa1Cd82mD3V/sN8O2i3hJM/st581PddQ1DWCl7LI4v81Q/Z4IzEeC644Kfb49UzguyLLfHrlOHCZ2yCTWWDjvwOYsPbx5BxdqZeRLFBVEfAc6x2EsQKOEqAWAuso3HKp5NwVDFl7ssSBegV4W1bRhIzPNvxSVQdC5uiWtLzsJC/dXoWJAlAZzDmKoAlLXtMFRQHhzZYr/E7KD8pcyWR1w1dwAl7Io6sl9RIo5a5Jy4wyZ+jNnEm36yW2i5exPznvdMFTOEXi5idpLu+avCoMgbZZmbSY4tjr2I/CymbBPgUNI3gAUMxIvCe4KvoxU/QFPeE1o7Tpn22KLA0VFWWcWlYlVYRsuFxcf/aCYxXO8oVc0MHs1gtT58QJuV0PkbFiAkUDGW+XwSMhs6Z3IIpKZhXu1quxkGmCtpiIiiZnAihtvJB5aEdPnJ3knM2mmg91cHgeDKcKKzHAzwPtbF6YU8WQRLDzl5TZ1BzTZVxjHWb2tpvx6mY4CrcyTjMBqsCyKsCASFCUhvvPgjG7ZKaR26NdON6LoQ+duKJQ4eh4vuZk121O7dlkxfD7Y2cmubOmYTmE7Jn0oXkEsgytEeWohqVtCI0P3Gt7OlqsoRtvrsmEUam222Uq2ipdrPnQ61iD9WYxqucbU9Wns/liNbvm+eR06F69ZDBlB/F8qPD2dALhDJl1gjREVu/yDLcZHDCf9hoJmQqwFRYA6WDbgosJzA4ONxIONEXA5AUKl0ncipPmQJLqgszyqroXHWpmSst0QU0UWbA83KbLZq15lS3H8nhSpLHaRhtaJLc6sMpkaksQbXXB1IdruFUnnr5MQBYt9wFFkVKkDvZKZptKwQBLzuYsfovYSiqDhTGNhmQ+WrZJ6qRa3nDeA4tmPqeP+dSxt5ejvT3ioWyeXp2NDryl/sQxGVNsVVF1QVNA9/a+5Yq8aGqe6efRzjdzXsczK4NDnRU0USUXOc+D0c2GdEDnaHMVDgonlPEVkCsGpsV5t3bQJpi4U11IMWnTJ7ocdjT5rxwrKFb5zLETB1TwlWPCjWMC2J/qcpenENPmIrTKbFYSTmpnOR72IlJdj48Vti4SduJ6rWnQzfRRfUVdso5zUFernsw7XD3Yb5zmLmFJ42qqcHjsSK525IN2y7soY0VlFi7hXcgDPGVoXJnIVCA0k6tI9OK0zvpb179emy164c/m6VleGCNEXZzdadXLDrNBmyBi6cJcO9uzKq5Dc3P7jnw9JB/G2zFKPB+wn07gu/aap7sDNJP7svgOy3xVxB9HI/mzjissrtXYl679qBCDKIFBUnsvogoN10+x0nOtPv5y3tY90OM4TqSagOX4XksUyBZJiSQgmV6PFtvNu9i7ofgCkQuDvVvsVcjZ28f6zwBNv7+DRgzj2h8yFX2qyoGG1UcYIKiHb7UWw3OkyHMdnuabdLNDCS2x1e7RDE+TPCNyteokTKbBNAb7BMZPCrn5VSFr0HQjFxYyutASCIsJlOBOnIxzmnjUy9l4CWCKhXZcaN0+3eoyBHL9yIMFXsIPrdSDL5ETlX0h0O2XxpIPlVay0+uVIue35X19du8E9rHcwgEVxbAQTxF+o/Vb90p+qbj57Z3gnh6klltoGdzWJHbNG5LPj36ypKDHgyJFSXfMD9evhk9pia8VPXayzq75IPrjKoSVNNZa7/eBnIyX00t6PqflCDqFjoxxeoIiSJqYQzPFYvCih0eIVdw9BfFXOvyB+svOD/tnfGniBPMEv8Q+Jky1XP77JexTNG5BAvPkOxvn4WtXsfkfb2Zm3yz8sHmGf7Iwtn52/ptcT/tgyMUB5AZ2sSoE9OU3AzZDnNbFh1AYPyf/LsF3m382Pvr1wJJgYuzSBP7+SbU4Xd5qeFxhGiQyXysNzydeiTO5RLD/0+mXNKWE/biT5Oi3d5K1Mp6bDvSN2sPX/XfnhltO3oQ4Crkllrdajq/XePPAfjphPwA+H7IUiUncfrTpE973X8y/Wp4695XA7/8A");
                                                                callTC.setPropertyValue("assertId","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                callTC.setPropertyValue("assertionUUID","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                testProject.setPropertyValue("assertionUUID","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:107006");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63");
                                                                callTC.setPropertyValue("assertionUserId","9A9CCCF13ABCD94FE0401F0A05992F63");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                 
                                                                                                
                                                } else if (userID == "jbaisakh") {
                                                              callTC.setPropertyValue("assert","nVfbkqLKEn33KwznscPmoqgY0x1R3GxUVC5eX05gUQKKoBQI+vW7wNHRnp7Zs89Dh11JZdbKzEWy6ju29wHbBRijOPGjsKpKb7X/0bDBODbXqTNrnqk3+bVT72wYVG+wHI/W6+aGa3dqVRXjFKkhTuwweauxNNOo02ydoS261eUaXY5+5dvcqladoRiT0GTLK12r5vsgxN3y2LdaGofdyMY+7ob2HuFuArsm0IZdsrNr3zDV3r9fUZYHxu9ekhy6FAVfHQRREMBXGO2p79TTnu8O7pq+G9pJGqMfZzr4rfbDN8uy16zxGsUuxdI0TdE8RfY42He/1d4rN2fkqOEmuq5FO4xCH9qBf7ELUBpKvMipgsCNYj/x9r8JzVAMXYSuoxzWIdMMv9WonweU6P4y0hPIGNt17NnMLZiBNihGIUTVqaG+1b79XQevvlZsh3gTxXv8af3fIKHwhILogJw6vmV2Q/f3Eb8o1/t3BLtqCIMU+yc0KmhysCHC1UmMNn4+9DEhn4OrZfurOb4xDMH/0pLv1CNOApv6ojKS7yKc/D/9euzVNcrMDlL03h5BzjhvRijOzdZGNZwD5KZnmEmS+lZCeNx8BXVv9Y/1Z6LeefXDaRgtAmydk4Z0HIlUaoQv5kGBYD/QFdA5U+ZuNx4f893c3kiavpzIXnvrUfI45ZVcbtFaY+WgOSfTJptlbmXp7oT9eWTxlzXugGF4TFfCEsww1gVpyetODl6m8+ZwOmkAyUD94UGOPuSXgebuzV7WbLWlzWWktHznyJlRZTcxFKrD+ye2fey3W+dNO3v7mdNjDkVeA3Qukyz+X3A0L9mJfV+IxaTYkNczQe+aqkrpRRTB2XRBpgrAJX9bMBLc3dHb+T0+owWgk+wlUQi28lADux5gprLgaeJspuXiBfQFdzQjjlYFBCtBM+RMypbSTNc/5MyznN7svO4F6eoijzSAS2fR02RDnkmGJWsaiK62XJPWvXyrmVqm6kupQgJIcn64OD0+Qb3ch6zKaSbHLk0uXS1mxK6ch/vRaW3JgSZqPdE89kx13ZB0uQ+M5RyySkp8L8P9Iaosp8KDU/+AtgApGU3OBBfN2mWaNWVHkmGXNuvZpqm9vqbjTNTLrHoVOevPppeftRAFTXT2ci5bYHKtBbREZUSvFn1sz7lQM0AmuaXzQM6c8Q2IptNZRbzWaihnhmxMR4pmqJkMSpskZwFesyNv3fNOsKHnfQtsHxsj6vJcCcnz0DjBM3es2D0FrPczBjYMD/qcby+izF11Mklf9gfRSiVhRkCXBUEHBBANitRI/QUwFGbc+ODzrI+GGyXaIy+uaEw02J0uOd3xG2N3Mppz0mbXnvT8ScN2PEoNILtt7ICqImfAeLrtGEvKkEL/0hoPpgvkx8tLMuJ0puV3uIoxT6cLKQrazsdiOR285EuoW+OJOZ1PLnk+Om47lyD5GAsfsdnXJHc8QmiC4QtF24pgdSROXH5sCZ82Bo24CnA1AYDe1nVlnxBY+NheSfhhaDIhL9DErCfOxZ4Jer0XWRUkXd8oHjOBvVk6ZUaaKjsBKdN5uTCCykoUJNIp2p6vDktWoVcWcMpgelNWXH3KvfQXaKWPAmuWgOww24QMQ/cO+sdGy1yoFQxw1MwUyFskVFIVTO3xoU/ng1mLZo66E/RNHkwbucnu8rHnrs47d7UjTVk+vDpLCwQz64FjKqHYvKJbsqGBzvV9yzV12jACuM8P6z3MJYv0rHSOLEE2FJ2e5pIEBlcbtgCb4+VF3mqiXPpXQK7ZhBan9cLDy3Dkjy05JaRNH+iyXbP0v3KsoFjlmWNHEejgM8fkK8dksDm+qB2JwVxLPOB55go9+ai3Z8M+f6D1xXBXEV4Uyk38oDkOO5k1eJkz56ztbfX5nFclT3wJN0uvsU4E2r5AHfV37Z5v7KSw1QzO2lDTualPBWd6i44ZHlZGKhPKjeSiUHycvgj7lb+/XBpNdrqfmOlJndoDzJy99XHOZ9vJR4ui4t6Zu7RXJ11ZRHB5/Y58HpJ343WMUo8D9mkC37SXma63CCa3ZfEdVqWqQj6OdvJnHVdYfKe+Kbd2D4UYxAkKk9p74VVouG5KlJ7vdMmX87oGjEjLUounZZrpsKwi002aUWhAt3m+IXHyTexdUXyCKEbhxi/OKuTs9WP9Z4Bw38UodFBcP0Up9BCu/SFiUa+qGhpEhUQhRlZE5DLLoUabsxsOajKQZTfIbvJthCDL2et1h286bJOHqMk2iGgeRck4HMdgk6D4WTTzT6LZQNA/+KhQ1oW8wERf4IQU52if0iRgXk/2a4hSor3jQv522WaHo7C/PwSogE7tIycN0OvBO5SlovD1l63bEJfWopSl7vltpp+f3YpC9jh+sQEXyQiINBZ9If+bt0x+ybj55TXhFh6kjl/IG1LhJPbhFcnzo5/EKRhzZ02R0g3zfetnw1NY6nNG95Ockw/v3L/fjoi4JvLr/daQo/16fE1Pp7RsQbuQljEJTzEU3aJMBFOiD89WtEMhdQ9B/ZU0v6P+dPLd/owvTbzQTMh7vSeEqZbLv7iXmQgX9zKVUD//20vf05GkbgnKk69sYkCubwXiP97wYBcW+4h5Qn6yKHZ+tuuLWA/nkDyLQeaHbrEqhPj5N6yAEQnrk2EWxY/Bvwrw1eHPxnuR71gSwqZ1mqDfP6kWU+qtZkMYpWGiSrXS8Dg5S5zJ+YC6Pzf9EqaUwj/uNvnvbrIMtdCGJplhe7t23+v/++a6X9IFIuKF/RLLWy0n13RyeOg+TOofAL8c1pKi/GlYP2fy/ov5V8tDTT+/D+//AA==");
                                                                callTC.setPropertyValue("assertId","_0c31da58-1b91-49bd-8f1e-3259ebb4f578");
                                                                callTC.setPropertyValue("assertionUUID","_0c31da58-1b91-49bd-8f1e-3259ebb4f578");
                                                                testProject.setPropertyValue("assertionUUID","_0c31da58-1b91-49bd-8f1e-3259ebb4f578");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionAccountId","A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserId","A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                } else {
                                                                log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
                                                                assert 1 == 2;
                                                }
                                                break;
                                case "0701":  // Nodes with different roles other then Retailer/Retailer CS
                                case "0702":

									/* if (userID == "schfau1")
                                                
                                                {
                                                                callTC.setPropertyValue("assert","nVdbc6JME773V1jupWU4SRQrSdVwMqioIB5vvkIYDoqADAj6698Bo2uy2X33/S5SZpo+PN390PS8IPMQ0D2AEExSPwrrivjaaNNMh+3YTMtx6G6rTZFOi2MdtgW3nQ5LQ9IyO0yjriCUQSVEqRmmrw2apKgW2WnRHYPq9BiyR3JPDM1tGvUFTBD2jFWeyEa9OAQh6lVRXxtZEvYiE/moF5oHiHqp1ZsBddTDmj3zBqnx9nIFWQVM3rw0jXsEYT3Z0IJBYD1Z0YF4IT7pvNioN/Pd0EyzBH7EtNFr48M2z/OnnHmKEpegSZIkSI7AOjby3R+Nt9rNGNpK6ETXs2CGUehbZuBfzBKUClMvsusgcKPET73Db1xTBEWWrluwsFoW1Q5/NIifASp0f+npE8gEmS3kmdTNmQ4dmMDQgvW5rrw2fvxVA6+mRmKGyImSA/py/m+IYHiCQRRDu4Vuid3A/b3Hb6r19gKtnhJaQYb8ExyXLIlNC6L6NIGOX4x8hLlno3rV/XqBbgSD1n/pyAvxiBPDJr6pjOi7EKX/T7seW3X1sjCDDL6hAjpLOgMnaayMTTCSvI0nN4UuOnVfKwiPyldQ905/nL/y9E6rDyOvfQ74QZBpz3C91s0OsCdkO7Y37L6YD8ZDLkJ6O9WPgqhPySEpRlqyJL1xUw7CnKWF1Ux0uQIhMEny512N7Nhpk1ZIRwrl08aZk3ExnSw33SUj0OZRMKj9u48ieXGcssFsz8B9x8omnZPFTJOzu22adLEegNhi8netqA0OHYd1Z3tKDfhTk15mkfr6M6fHHMq8hvBcJVn+v2JJTjRT834QykHh4LczhW+qoojZRRDAeeaCXOGBi/92YMy7+6O39/tcTvJA02QgCnywk0Yq2PcBNZd4TxUWC7UQLmDAu+MFNjRqINjwqi7lYr4WF5r2LuWeYfcX520/yDYXaawCVBkLnirp0kLUDUlVQXSVFaq47Rc7dabmirYWa9iBKBXxxe5zKewXvkUrrDpj6fWMzTarBZbL59FhfNoaUqAKal+YHfszZcuImjQA+npp0XKGbS+jQxzV1nP+wWgQwx2Ack7imOCiGvtcNeb0WNTNSmZ8lqlKf6BqKBe0Kqt+TcoHi/nlZy0EXhXsg1RIBphea2EZgjwmN6sBMpdsqOogF93KeCjl9uQGRNXIvCZcazWScl3S52NZ1ZVcApVMlPIAbemxt+17mBVaMTDA7rExgiYt5RA/D/WTdWaPNbMvg+1hQVmM7lk+65urKHc33VzU1oNhtFGwmzHQJJ7XAAZEgjI1XH8ejPgFO4l9jvbhyJGjA/SSmkpFw/3pUpBdn5m40/GSFZ19Z9r3p4xpe4QSWPSO2QNFgfaQ8jTT1teELob+5XkynK+gn6wv6ZjVqGe/y9b0ZTZfiVHQsd9X6/mwWawtzZhMZ/Pl9FIU4+OuewnS9wn/nswGquhOxhBOkdUkSFPmja7ICuv3HeaTo5OQrQFX5QHo71xX8jGB+ffdlYTvuiph8gJVyPvCUujPQL/flBRe1DRH9qip1V9kc2qsKpId4DKd1ys9qG0EXsSdIs3lJl7TMrkxgF0509qS7GpztjlYwY02DoxFCvJ44YQURfZj7d1Rc9dSSwbYSj7j8VvE1zIFzM1JPCCL4eKZpI6aHQxmHJgzxYzeFxPP3Zz37maPm7J+eHXWBggWxgPHFEyxZU0zJF0F3ev7VqjKnNED61DE24NViAbuWWUcGbykyxo5L0QRDK8yZAC6QOuLtFMFqbKvgUI1MS1O25WH1uHYnxhShkmbPdBlt6XJf+VYSbHaZ44dBaCBrxyTrhyTgHNsKl2RQuyzEKNl7vJ96ah1FqMBF5PaarSv8U2ZcFM/aE/Cbm4Mm0vqnHe8nbZccoroCc3QWXvMNuVJ82JpcLDv9H19L4bP7eCsjlSNnftEcCZ38JijUW2sUKHEpBeZ4JKsyR82/uFyYdr0/DCdZSdlbg4Rdfa2xyWX76bvzwSR9M/spbM5afIqstbX78jXIXkXXsco8ThgP03g2+o1y7Y7aKW3Y/kdVsS6jD+OZvrnNa6U+HbLqVR7cbkLohSGaeOttCpXuF6GFz3f7uEv5/UM2pxMd3mZfqbaNNvuSmSbpGQSkCzHkfSzfNv1rii+QBSi0PHLWOUye/1Y/xmgdehtoZnApPEHT2Wd6kqo4+0jChE0otfG/5i22e1CumvbDk3Z3bbJMCa1tTmackzG5hiGokzS5iir3aiPo3QSThLgpDB52JW7X3dlHVp+7MNyof5YK1CKa3I0T1kaUE8n8ymEGd64k3Lp7dHtLksg/xAHsEROHCI7C+BT7MVVhQh0/aVbpoUqqQ0dMwvSFoqrpee36X59dqsM1rH9UgGVGfEQdxV+Xf1prsfe0vklbfrbK8LNPchsv9xtcJnTxLeuSD4/+smaki53ypAdrnvDfFf9a1PuV1PiD4iIr8W4R7JP/kPc2wUG7+R4bavuLQh39Gg+HZ+y0ymretgpV9IEuycogiRm0MrwWnk2oj0MibsH4m8W+jvmL3Hv8s/ostQLZymeBgdMt3p1/PfL3CdrXIAUFul3MiHA17cy+B9veFbPKvWweIp/8iixf9b9G18PcTDkcpL5oVueyk38/Lm9H69Jz4qwVx8Psyh59P2d/XexPwvv5bpDSTErtlkKf/+kXk6p14ZpWVEWporYqASPk7PCnJ5j2Pup9IubahX+uNsUv7vIUsRKHc0sDx7Mxl3X/3flll813oLYCvkVltdGgW/pOHjoPkzqD4DfD2tS/mZYg3sBP2Xy9ov4V8lDTb8y++0f");
                                                                callTC.setPropertyValue("assertId","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                callTC.setPropertyValue("assertionUUID","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                testProject.setPropertyValue("assertionUUID","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("assertionUserId","A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                                         
                                                } elseif 
                                                 */   
                                                if (userID == "SCHOrg1Full1") {
                                                                callTC.setPropertyValue("assert","nVdbc6JME773V1juZcpwUFSsJFXDQYKKCuLx5iscRkARkAFBf/07YHRNNrvvvt9FykzTh2e6n+npecHWwWe7AGMUJ14YVFXptYZQu7VhG0y9zTZhvUlbVn3T2fB1xmrBRqvVbtm8VauqGKdIDXBiBclrjaUZpk536kzTZBtdlus26ec2z69r1TmKMfFMVJ7pWjU/+AHullFfa2kcdEMLe7gbWAeEuwnsToE27BLNrnWDVHt7uYIsA8ZvbpJEXYqCzzaCyPfhMwwP1Av1SefFxt2p5wRWksboI6aNX2sftlmWPWeN5zB2KJamaYrmKaJjY8/5UXur3IyRrQbb8LoWrSAMPGj53sUqQGkocUO7CnwnjL3EPfzGNUMxdOG6jnJYh0wz+FGjfgYo0f2lp08gY2zVsWsxN2cG2qIYBRBVZ4b6WvvxVwW8mpqxFeBtGB/wl/V/Q4SCE/LDCNl1fNvYDdzfe/wmW28vCHbVAPop9k5oVLAksiDC1UmMtl4+9DDhno2rZfWrOb4RDMH/UpEX6hEngU19kxnJcxBO/p9yPZbq6mVu+Sl6G1hD9dhnAtnjRXMxa/tM/tT3LX3qZa8lhEflK6h7pT/WX3l6p9WHkdBhsGoIR2uprI+KiNMhtxusp+vVbiD7oHkehqf2eQQ0SZn3Fuc0XjhoBVl98OT0uAHCjaHQbp2Hx6C/o6eVNNJMOG+FSznZnfRTq59MouZ2N9uuLL7nPkmx77njVjI7SDB61/n3fcb30GKdZIwbaX3O8HcLG9rvJqe0hEqzD2Yc4Bbhxm7gDT2fNp3Xn3t63EOxrwE6l5ss/l9yNC9ZiXVfiEWj2JLTmaA3TVWl9CKK4Dx1QKYKwCF/OzASnP3R3XsKn9EC0PUekETB38lDDewVwMxkwdXE+VzLxQvoC85oTgzNCvDXgmbImZStpLmuv8uZa9rK/LxR/HR9kUcawKWx6GqyIc8lw5Q1DYRXWa5JGyXfaVMtU/WVVCEOJDmPLrbCJ0jJPciqnDbl2NWUS9fLOZH3zsPD6LQxZV8TNUWcHpWpumlIutwHxmoB2V5KbC/DQxRWVjPhwagfoR1AvYwmMcFFM/eZZs7YkWRYpcz8LNNUpa/pOBP1cldKRc7689nlZy5EQRPtg5zLJphccwFNsTei18s+thZcoBkgk5zSeCBn9vgGRNPprCJeczWUM0M2ZqOeZqiZDEqZJGc+3rAjd6O4J9jQ874Jdo+FEXV50QvI98A4wTN3rFhKD2wOcwY2DBd6nGctw8xZdzJJX/UH4VolbkZAlwVBBwQQDYqtkfwLYCjMuXHk8ayHhtteeEBuXNGYcLA/XXK64zXGzmS04KTtvj1RvEnDsl1K9SG7a+yBqiJ7wLi6ZRsrypAC79IaD2ZL5MWrSzLidKbldbiKsUhnSyn02/b7cjUbPOUrqJvjyXS2mFzyfHTcdS5+8j4W3uNpX5Oc8QihCYZPFG31BLMjceLqfUf4tDVoxFWAowkAKDvHkT1CYOF9dyXhu6HJhLxAEzNFXIjKFCjKk6wKkq5vey4zgco8nTEjTZVtn6TpvFoafmUtChKpFG0t1tGK7dFrE9ilM70p9xx9xj31l2itj3xznoAsmm8DhqGVSH/fapkDtYIBtppNBXKKhEqqgpk1jvp0Ppi3aOao235/yoNZI5+y+3zsOuvz3lnvSVFWD0dnZQJ/bj5wTCUUW1R0UzY00Lmet1xTZw3Dh4c82hxgLpmkZqVxaAqy0dPpWS5JYHCVYROwOV5d5J0myqV9BeSaRWhx2ixdvApG3tiUU0La9IEuuw1L/yvHCopVPnPsKAIdfOWYfOWYDLbHJ7UjMZhriRFeZI6gyEe9PR/2+YjWl8N9RXjqUU7i+c1x0MnMwdOCOWdtd6cvFrwqueJTsF25jU0i0NYF6qi/byuesZeCVtM/a0NN52Ye5Z/pHTpmeFgZqeR+aCSXHsXH6ZNwWHuHy6XRZGeHyTQ9qTNrgJmzuzku+Gw3eW9RVKycuUt7fdJ7yxCurvfI1yZ5F17bKPXYYD914NvoNU03OwST27K4h1Wp2iOXo5X8eYwrJJ5d35aq3aiYBXGCgqT2VlgVI1w3JYOeZ3fJzXld8xItk+7c7DFMpy2JHZlu0kyPBjTH821OatxmvSuKLxDFMNh6RaximL1e1n8GCA/dDbJiFNf+4KnIU1UNDDJ9hAFGZvha+x+9Zdqs1eEa1oa3ab7D2XynCSHDblp2G9Jo2+Zput3hG0ytOgqTcTCOwTZB8cOszH2dlQ0EvchDxUD9MVbghOTkaJ3SxGeeT9ZzgFIyccfF0Ntlmx2Owt4h8lGBnDqEduqj58iNygxR+PrL1i2IS6mNtlbqJ3UclUPPb7f79dstM0TH9goFXOxIQKSq6JvRv3Hbzi/bZr99Itzcg9T2itmGpDmJPXhF8vnTT9YUdLlThm7T7A3zXfWvTZlfTak/IKK+JuMeyT55D3FvDxgyk5OxrXy3YFLRo/V8fE5Pp7SsYbsYSWPinmIompoimJKx8myGexRQdw/U3wz0d8xf4t7ln9GliRtME9INDoRu1XL574+5T9YkAQnKk+9kok+eb0XwP77wYBcWekQ8IT9ZGNs/8/6Nr4c4BHLRybzAKVbFJH7+XN6PY9KFIfHqkWYWxo++v7P/LvZn4T1ddygJYcUmTdDvv1SLLvVasyAM0yBRpVopeOycJebkHKHuT6Vf3JSj8MfbJv/dQ5ahltpwCl10sGp3Xe/fleteWXiIiBX2SiyvtZy80knwwHno1B8AH5s1QxcMvqfpE963X8S/Sh4y95W/b/8A");
                                                                callTC.setPropertyValue("assertId","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                callTC.setPropertyValue("assertionUUID","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                testProject.setPropertyValue("assertionUUID","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:107001");
                                                                callTC.setPropertyValue("assertionAccountId","107001");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:9D0EDCB4F1187DC8E0401F0A059975D3");
                                                                callTC.setPropertyValue("assertionUserId","9D0EDCB4F1187DC8E0401F0A059975D3");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                /*                                                
                                                } else if (userID == "jbaisakh") {
                                                                callTC.setPropertyValue("assert","nVdZk6LKEn73VxieR8NmURSN6Y5gk0ZFBXHBlxtYFIKySYGgv/4W2Dp2T8+cufehw64kly8zP5KsH8gKfHrAIQST1IvCuiK+NigaWG22B1vtXt9qdfos27Js0G0xds8BFsnSgGUadQWhDCohSq0wfW3QJEW1yF6LZg2KGdDdAUO9tFlq26ivYIKwZ6zyQjbqReCHaFBFfW1kSTiILOShQWgFEA1SMFhw6mSANQfWHVLj7ccNZBUweXPTNB4QBHixIYC+D15AFBA/iE86P2w0WHj70EqzBH7EtNFr48M2z/OXvP0SJXuCJkmSIPsE1rGRt/+n8Va7G0NbCZ3odhasMAo9YPne1SpBqTB1I7vO+fso8VI3+I1riqDI0nULFqAFqE74T4P4GaBC95eePoFMkNVCrkXdnenQgQkMAawvdeW18c9fNfBmaiRWiJwoCdCX8/+GCIZn6EcxtFvontgd3N97/KZabz8gGCgh8DPkneG0ZElsAYjq8wQ6XjHxEOaejepV9+sFuhMMgv+lIz+IZ5wYNvFNZURvD1H6/7TruVU3LyvLz+DbORbooxTLbWAGk64ggHTdCTxyI67AawXhWfkG6tHpj/NXnj5o9WEk+uPDQSG6XiH76WQ5bxZthDaBSlmEBdyxrpz42WQxZraj0Xk6XvXZ+dTV103VzjbuQibm0WURmwbchtNzp6aaO9PUt6AT845tzM2+kXrO0gosRluilL+0e23WPPY1cjRb8bPiPLNHw2wn7pHj680L3UkTWeqM0uk2TGFt5vrHxWzOBc2xHC5WLDofX3/m9JxDmdcYXqoky/83DNkXrdR6HIRyUDj47Uzhm6ooYnYVBO6y2HO5wnN7/Hfgpvz+eHKPntzPSZ7TtCEnCrx/kCYqd5Q5ainxriqsVmohXLkRv5+usKFR4/wtr+pSLuamuNK0dyl3DVteXXayn22v0lTlUGUsuKqkSytRNyRV5aKbrFDFnVwc1IWaK5op1rADUSriqy33UygXHqAVRl0wtLlgsu1mheXDyySYnneG5KuCKguLk7xQdm1Rk0acbq4BPcyw7XUSxFHNXPJPRqMYHjg4zEkck7uqxjFXjSU9FXWrkhmfZaoij1QN5YJWZSXXpHy0Wl5/1kLgVcEOpEIyuPmtFsAQhlNyuxkha82Eqs7l4r4yHku5PbsDUTUyrwm3Wk2kXJf05XSo6koucZVMlHIf7eipu5PdM2hrxcjgDs+NETRpPQzx81A/gwtzqlnykNsFKwq0dRd4jGdtony/ZXNRM0fjaKtgN1NOk3he4zAgkitTw/XnuQm/Ymax16c9OHGGUQDdpKZS0fh4vhYk67Vn+/l0zYjOsTeXvXnbsl1C8QF9aB85RYH2mHI1y9ZNQhdD79qdjZcb6CXmNZ0yGtX1WKamr7PlRoz8nv2+MZfjZmECzZjNF8v1/FoU09OBvfrp+4x/TxYjVdzPphDOEWgSpDXkDVZkBPP9gPnk6CRkatxe5TlOPuz3kocJzL8fbiR811UJk5dThVwW1oK84GS5KSm8qGnO0KXmQF5lS2qqKpLt4zJdzI3u17YCL+JOkdZ6G5v0kNwanF050zrScK8tmeZoA7fa1DdWKZfHKyekKFKOtXdHzfdALRlgK/mCx28RX8sUbmnN4hFZjFddkjpptj9a9Lllu1jQx2Lm7reX4357xE0xn14d0+D8lfHEMQVTbF3TDElXOfb2vhWqsmzrPgiKeBeAQjRwzyrjyOAlfaiRy0IUufFNhgyOLpB5lQ6qIFX2Na5QLUyL827jIjOcejNDyjBpsye6HHY0+a8cKylW+8yxk8Bp3FeOSTeOSZxzaiqsSCGmK8Rone95WTppvdVk1I9JbTM51vjmkNinnt+ZhWxujJtr6pL33IO2XvcV0RWaoWO67V3Kk9YVaHB07MmefhTDbse/qBNVY5Ye4V/IAzzlaFKbKlQotdPrkOgnWZMPtl5wvbY79DKYL7KzsrTGiLq4u9O6nx/m712CSOQLc+1tz9pwEwHz9h35OiQfwtsYJZ4H7KcJfF+9FtnuAEF6P5bfYUWsD/HH0Ur/vMaVEs9uOZXqIC53QZTCMG28lVblCjfI8KLn2QP85bydOUogJbHbJyWSYml6KJEdkhqSHNnr99siI913vRuKLxCFKHS8Mla5zN4+1n8GCILBDloJTBp/8FTWqa6EOt4+ohBBI3pt/KfDdh2SZAFt4d2q3aUZltzRvR0AkO1YDrC7FKC7Xcdpw0Z9GqWzcJZwTgqTp125/3VX1iHwYg+WC/XHWoFSXJOTdc5Sn3o5Wy8hzPDGnZRL74DusAyBvCD2YYmcCCI78+FL7MZVhQh0+6VbFkCV1IaOlflpC8XV0vPbdL8+u1cG69heqYDKjHiIuwq/Wf0793R+SZv+9opwd89ltlfuNrjMaeKBG5LPj36ypqTLgzKYGuwd80P1r037v5oSf0BEfC3GI5J99p7i3i8weCfHa1t1b0G4oyfr5fSSnc9Z1cNeuZIm2D1BESSxgCDDa+XFiI4wJB4eiL9Z6B+Yv8R9yD+jy1I3XKR4GgSYbvXq+O+XuU/WuAApLNLvZIKPr29l8D/e8MAAlHpYPMc/eZTYP+v+ja+nOBhyOcm8cF+eyk388rm9H6/JAETYq4eHWZQ8+/7O/rvYn4WPcj2gpJgVuyyFv39SL6fUa8MCIMrCVBEbleB5claY00sMBz+VfnFTrcIfd5vidxdZitiokwVwYWA1Hrrevyu3vKrxAA8qrF9heW0U+JaOg4f7p0n9AfDbYS0Oh38a1p8zeftF/KvkqaZfmf32Xw==");
                                                                callTC.setPropertyValue("assertId","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                callTC.setPropertyValue("assertionUUID","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                testProject.setPropertyValue("assertionUUID","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionAccountId","A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserId","A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                */                callTC.setPropertyValue("useroid",useroid);
                                                } else {
                                                                log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
                                                                assert 1 == 2;
                                                }
                                                
                                                break;
                              default:
                                                log.info "ERROR - NodeID supplied is not configured!";
                                                assert 1 == 2;
                                              break;
                }

}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate SamlGetAssertionExpDate" id="6f132a31-fc09-4176-9390-1365d4d08f4a">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

testCase.setPropertyValue("nodeid",callingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUUID",callingTCase.getPropertyValue("assertionUUID"));

               
def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;

nodeid = testCase.getPropertyValue("nodeid");
Uuid = testCase.getPropertyValue("assertionUUID");
rcSAMLuuid = myDbSaml.samlGetAssertionRowCount(Uuid,nodeid);
testCase.setPropertyValue("rcUUID",rcSAMLuuid.toString());

		if (rcSAMLuuid.toInteger() ==1){ 
			log.info "UUid : [$Uuid] Found, row count: $rcSAMLuuid";
			// check expiration date for the assertion	
			ValsamlExpDate = GetsamlExpDate(Uuid,nodeid);			
			ValSysDate = getSysDate();
			
				 if (CompareDates(ValsamlExpDate,ValSysDate).toString()=='true'){
			 		log.info  "SAML Assertion is Good !" 
			 		log.info "SAML Assertion Expiration Date till-[$ValsamlExpDate]";
			 		testCase.setPropertyValue("SAMLExpDate",ValsamlExpDate);
				 }
				 else{
				 	log.info "SAML Assertion is Expired."
				 	assert setSamlExpDate(Uuid.toString(),nodeid.toString(),4) == 1;	
				 	ValsamlRenwDate = GetsamlExpDate(Uuid,nodeid);
				 	SysDate = getSysDate();
				 	log.info "SAML Assertion Renewed till-[$ValsamlRenwDate]";
				 	assert CompareDates(ValsamlRenwDate,SysDate)== true;
				 	testCase.setPropertyValue("SAMLExpDate",ValsamlRenwDate);			 			 	
				 }
		
		}
		else{	
			log.info "UUid : [$Uuid] not Found, row count: $rcSAMLuuid";
			testCase.setPropertyValue("rcUUID",rcSAMLuuid.toString());	
			
		}


// Get SAML Expiration Date Mehtod
def GetsamlExpDate(String Uuid, String Nodeid){
def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;
ExpDate = myDbSaml.samlGetAssertionExpDate(Uuid ,nodeid);
samlExpDateXML = new XmlSlurper().parseText(ExpDate.toString());
samlExpDate = samlExpDateXML.toString();
return samlExpDate;
}


def getSysDate(){
	sysDate = new Date().format("yyyy-MM-dd hh:mm:ss.S");
	return sysDate;
}
	
def CompareDates( String SamlDate, String SysDate){
	
		def testSuiteamlDate = new Date().parse("yyyy-MM-dd hh:mm:ss.S",SamlDate.toString());
		def testSuiteysDate = new Date().parse("yyyy-MM-dd hh:mm:ss.S",SysDate.toString());

		log.info "SamlDateTime in Millisec:" + tSamlDate.getTime() + "- SysDateTime in Millisec:" + tSysDate.getTime();
		if (tSamlDate.getTime() >= tSysDate.getTime()){
		return true;
		}
	
}	

def setSamlExpDate( String Uuid, String Nodeid, int Years){
		def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;
		def rcsetSamlExpDate = myDbSaml.samlRenewAssertionYear(Uuid.toString(),Nodeid.toString(),Years.toInteger() );
		return rcsetSamlExpDate;
}

// Return SAML Assertion Validations 

callingTCase.setPropertyValue("SAMLExpDate",testCase.getPropertyValue("SAMLExpDate"));
callingTCase.setPropertyValue("rcUUID",testCase.getPropertyValue("rcUUID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_69d2ec4b-e824-48ce-937e-28c7e4972087</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">222259</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2016-08-19 06:59:22.0</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10004_RightsTokenDelete_Head_Method_RTL</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenUpdate_ByMethod_Invocation</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>schfau1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get SAML Assertion - STS" searchProperties="true" id="82dcc039-cab6-408e-b24b-e38ce41fa170">
      <con:settings/>
      <con:testStep type="groovy" name="Get SAML Assertion from STS" id="d8fb0523-46bd-42de-94d7-2c2e4c23eee9">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

		testCase.setPropertyValue("nodetype",callingTCase.getPropertyValue("nodetype"));
		testCase.setPropertyValue("nodeid",callingTCase.getPropertyValue("nodeid"));
		testCase.setPropertyValue("username",callingTCase.getPropertyValue("username"));
		testCase.setPropertyValue("password",callingTCase.getPropertyValue("password"));
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype",callingTCase.getPropertyValue("tokentype"));
		testCase.setPropertyValue("loopuntil",callingTCase.getPropertyValue("loopuntil"));
		testCase.setPropertyValue("expectErrTypeSTS",callingTCase.getPropertyValue("expectErrTypeSTS"));
		testCase.setPropertyValue("expectErrTypeSTSGet",callingTCase.getPropertyValue("expectErrTypeSTSGet"));


def GetSTS = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authorization Information Extraction via STS")

GetSTS.setPropertyValue("tName",testCase.getName());
GetSTS.setPropertyValue("sName",testSuite.getName());

def runnerTC = GetSTS.run( null , false )

assert runnerTC.status == Status.FINISHED;


// Return Property Values to the Calling testcase

callingTCase.setPropertyValue("nodeid", testCase.getPropertyValue("nodeid"));
callingTCase.setPropertyValue("nodetype",testCase.getPropertyValue("nodetype"));
callingTCase.setPropertyValue("username",testCase.getPropertyValue("username"));
callingTCase.setPropertyValue("password",testCase.getPropertyValue("password"));
callingTCase.setPropertyValue("accountoid",testCase.getPropertyValue("accountoid"));
callingTCase.setPropertyValue("useroid",testCase.getPropertyValue("useroid"));
callingTCase.setPropertyValue("SAMLassertion",testCase.getPropertyValue("assert"));
callingTCase.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));
callingTCase.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));
callingTCase.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callingTCase.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callingTCase.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>jbaisakh</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_120426b5-97ae-4376-976f-b1aa1743f38c</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdZk6JKE333VxjOY4fNYuMW3R1RrI2KCuL68gUWJaAsSoGgv/4W2Dra0zN37vdgYCWVWSczTxWnXrEV+GwXYIzixIvCqiq+1f7HsPQL21xz9U7LQvWXRqtJ/jU39TVjWUzrpbFptGGtqmKcIjXEiRUmbzWWZtg63amzTZNhuwzdZRvP7U57VavOUIxJaDLlma5V88APcbdc9q2WxmE3srCHu6EVINxNYHcCtEGXzOxaV0y199cLynLB+N1Nkn2XouCzjSDyffgMo4B6pR7mvNq4O/Gc0ErSGH2uaeO32qdvlmXPWeM5ih2KpWmaojsUmWNjz/lRe69cnZGthpvoMhasMAo9aPne2SpAaShxI7sKfCeKvcQNfhOaoRi6CF1HOaxD5iX8UaN+LlCi+8tIDyBjbNWxazHXYAbaoBiFEFWnhvpW+/F3Hbz4mrEV4k0UB/jL+L9BQuER+dEe2XV8zeyK7u8jflOu91cEu2oI/RR7RzQsaLK3IMLVcYw2Xj7wMCGfjatl+6s5vjIMwf/SklfqHieBTX1TGdFzEE7+n37d9+oSZWb5KXoXqX7eME6sxw/4mbV0ehGeh0o+j53lWwnhfvIF1K3Vn+OvRL3x6tNJ9ZZ9bjWOlMF+aKP5YDg2vQ8xDpof6SY+r5t6NId5sHfzKXhyIuYw77ftl7kymyfx+LTdj/Ngu5RGrI/6I6OCoiUkkZe2GLGhyVp9AlbKImsfiuZJgpbQWAdT3Nw0xv0ggudYVJ/mgoiifONxg/7AgS7X8p6QcIL6oALBJs9OKwW3rXA3Tc3dh/72M6f7HIq8+uhUJln8X3B0R7QS6zYQipNiQ7Zngt41VRXTsyCA08QBmcoDh/y2YMg7u4O785RORvNA12UgCry/lQYa2CmAmUq8qwmzmZYLZ9DjneGMOJoV4K94zZAyMVuKM13/kDLXtJXZaa346eosDTWAS2fB1SRDmomGKWkaiC62XBPXSr7VJlqm6kuxQgKIUr4/20onQUruQVbltAnHLidculrMiF0+DYLhcW1KviZoijA5KBN13RB1qQeM5Ryyckp8z4NgH1WWU/7OqbdHW4DkjCZrgrNm7jLNnLJD0bBKm/lo01Slp+k4E/QyK6UiZb3Z9PyzFgKvCXYg5ZIJxpdaQFOQh/Rq0cPWnAs1A2SiUzr3pcweXYFoOp1VhEutBlJmSMZ0KGuGmkmgtIlS5uM1O3TXinuEDT3vmWB73xhBl+ZySN6HxhGeuEPFUmSwDmYMbBgu9DjPWkSZs2pnor7s9aOVSsIMgS7xvA4IIBoUqZH684BsKG609zqshwYbOQqQG1c0JurvjuecbnuNkTMezjlxs2uNFW/csGyXUn3Ibhs7oKrI7jOubtnGkjLE0Ds3R/3pAnnx8pwMOZ1pem2uYszT6UKM/Jb9sVhO+0/5EurmaDyZzsfnPB8etu2zn3yM+I940tNEZzREaIzhE0VbMm+2RU5YfmwJnzYGjbgKcDQeAGXrOJJHCMx/bC8k/DA0iZAXaEKmCHNBmQBFeZJUXtT1jewyY6jM0ikz1FTJ9kmZTsuF4VdWAi+STtHWfLVfsjK9MoFdBtNfJNnRp9xTb4FW+tA3ZwnI9rNNyDC0stc/NlrmQK1ggK1mE57sIr6SqmBqjfY9Ou/PmjRz0G2/N+mAaSOfsLt85Dqr085Z7UhTlndbZ2kCf2becUwlFJtXdFMyNNC+7LdcU6cNw4dBvl8HMBdN0rPSOTJ5yZB1epqLIuhfbNgEbI6XZ2mrCVLpXwG5ZhFaHNcLFy/DoTcypZSQNr2jy3bN0v/KsYJilUeOHQSgg68cky4ck8Dm8KS2RQZzTWGP55nDK9JBb80Gvc6e1heDXYV/kikn8fyXUdjOzP7TnDllLXerz+cdVXSFp3CzdBvrhKetM9RRb9dSPGMnhs0X/6QNNJ2bepR/orfokOFBZagyodRIzjLVidMnPlh5wfnceGGnwXiSHtWp1cfMyV0f5p1sO/5oUlSsnLhza3XU5UUEP78jXw/Jm/FyjFL3B+zDCXzVXpN0vUUwuQ6L77AqVmXycbSSP+u4wuLZ9U05tbsvxCBOUJjU3guvQsN1U6L0PLtLvpyXMWAEWhKbHVqimTbLyhL9QjMyDehWp9MQOekq9i4ovkAUonDjFWsVcvbysf4zQBh0MQptFNePUQpdhGt/iFjUq6qGBlEhUYiRGRG5LApkO8tEb9E8J7MyK4Jmk2+3X1hWbLEC4GrVYZSMwlEMNgmKH6Uy9yCVDQS9vYcKPV2ICkxUBU5ISQ7WMU185vloPYcoJYo7LkRvl31pcxT2gr2PCsBUENmpj5737r4sEIUvT7ZuQVxaiwKWaue3+X19dy0FmWN7xQRcJMMj0k70jehnrpn8knHj28vBNTxIba8QNaSuSezBC5LHVz/pUvDkxpUipSvm29Svhoew1NeMbivZRw/eGH+7ExFJTUTX+7UhB+v58Jwej2nZglYhKGMSnmIomqUmCKZEFZ7MaIdC6haC+itBfkP9ZeWb/RFfmrjhJCG7OSCEqZbDv7iNTRAubmMqIXz+t1e9hyVJ3RKUJ9/ZBJ9c2grEf7zXwS4s5hHzmDyyKLZ/tuubWHfrkDyL48sLnWJUyO/Tb1gBIxLWI0dYFN8H/y7Ad4s/Gm9FvmFJCJvWaYJ+/6ZanE1vNQvCKA0TVayVhvvzssSZnPao+3PSL2FKAfx5o8nxb280C20wISdXYNVuc71/n1z3SrpARLywV2J5q+Xkck4WD5278/kT4LdHtCjLfzqiHzN5/8X8q+Wupl/3w/s/</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10040 - RightsTokenDelete - Policy - ParentalControl:RatingPolicy -   UK - FILMTV - BBFC - r18 rating - Full User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>assertCommon</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDeleteRequest1" searchProperties="true" id="2c6438ad-d3e2-47b8-ac53-f03d4b74e9f6">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="babd6110-5ad8-4c0f-a14a-8a8c7b884fd3">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
testCase.setPropertyValue("assert",CallingTCase.getPropertyValue("assert"));

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

//SetUp test properties
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));

if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}	
else
{
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
}	
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsTokenGet API to have the ETAG" id="1584ee73-97f2-474b-955f-c1c6f5a8ea91"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

//Extractthe Response and Set the ETag Value at the Project Level Properties
RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request

def headers = new StringToStringMap()
headers.put("If-Match",etagValue);
headers.put("Authorization","SAML2 assertion="+ testCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Exact the ETag Details" id="71721bdd-13aa-4a9d-b861-704bd42cc7b0" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//Extractthe Response and Set the ETag Value at the Project Level Properties
def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request
if (etagValue.toString()!="null")
{
def headers = new StringToStringMap()
headers.put("IF-Match",etagValue);
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
}
assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="pem set" id="a79c550e-426b-4409-9a5e-14751bb3939f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDeleteRequest");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenDeleteRequest" id="82cf2888-6118-42a7-8703-60b63ad9e616">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Authorization" value="SAML2 assertion=pVdZb+o6EH7vr4jSxypkIRCIAIkl3OYUCiV0Oy+VcQyYkzg0dljOr792IBQo9HSRWiEPs3zj+TwzVCgIA8OuU4pihiMiua2q/KKbfn6k62WlmPctxYR6XgFoDBW/WBiNNd0f5aEmSy6lCXIJZYCwqmxouqlohqJZQ123Dd02jVy5pP2WpQcUU+6aq+S41SoMCLXTsFU5iYkdAYqpTUCIqM2g7dW7HZtr2iDDJNcqG5RpwLg2ZWxuqyrM+QiiIIA5GIVqRT3QqfjU9vCEAJbEaBvTp1V5a7tcLnPLfC6KJ6qhaZqqlVWu41M8uZRrF5kx8l0yjjbnJiARwRAE+C8QoLqITSNfqgeTKMZsGp5xrau6JlwraAUVqJvkUlbfAqToPunpAGRMgUKnQM+cDdAYxYhAJN0P3Kp8+bkKbmyHMSB0HMUhPTp/DRIiCxREc+QrNMssQ/d5jyeuq1ZB0HYJDBKKF+hW0GQOIKJSP0ZjvOpgysnnUyktv7Si/A9nLEPwK2WpqPtYOXT1xO208ARR9p2a7ddr4+UBBAmqmc/FZjtsFTXDWiI8L6yLtw7rxOMr3a2mEPaVN6B25d6ej8m649bWqO/PSO+pNPTztFO8AsPZ2GvckUZgrlv9J+veWbuk07t+uPtbntxcdZm7KukxLagDej2gi1vnGo5GvafeaNRdr5cXHfIKrRuyumO9R7q47z22Sk5081ToDyiY5Z+9gHhR/yamd+F4XV/OvGVYv34sPw6Hv1bPbReA8uPozjFmvxYWsS4Gar6XdAOt/7sEG/8xo279qb7ltJ/DoTBrCV4ymiHIsqOgh9uS2rxegH3cXoQE+8o4VbXnokdRhgiTa8JKtBY74Q0I+zYv5uZcaucLTtF0TL2pmaaulRumWXDyZtks6e1yvZT1oA2KI4jNiIyxiCW67IY/HwOEoU0R8VGsLKIEThGVP/DYAgxILhnwxxERioYR7+Il0yhoZdMynWLbahf0gmNx1MVGvVnUCvxflm4j1iO9uD5mKD7s4OZBBx8giOcYiTYveE450SnjV/IKFgkL9NwC5AhK+CCIRS+2DbNUUCkO5wESgNUw8pMA5ebTeXpBKt18GgqANJUOnGH6/s6md/xddhNcx8dCgYpcGohXE50YRfkskfMJW/sJZ+7riY/FM+PXymIMN0gOv3pji6DJjir1ZtPxml4Ge6f9BevvGrc6da//E9uXpveif9fB90P/LHDnB1l3fpo15+8Pzd9bqh9QUD1m/y6Qv8B7YbMNii8FfGTUsrf7CnKvuWSxSNLXaolxGHP3qq4auuohmPCZth5GfxBRdy7UT60UO9RHkXfyQ3wJmxKPAYZC3luk9PiJfdJDVOyTLu+Nq88uqwch+b0xtGKnZM2Ar50C8YebKbSh0OPiPv9YRrH/Vq4Tvvbi8Dz5EskwmYiTWB7WZ0gBI+4W82kXxfvOTzk4FfxQuLvkHRbG2TRKGDr/jSTGWFUGEEYJYW5LTgX7ozXFydZzZL8pvXOTju/tPraiZ/exp27H40MuBPJOF/9bWcEpXSCSxdqXYqnKK/7zggcnk71RvgW4P82bTr7QaDRb/5rmh5nU3onfS/bu9Pg91P4H"/>
  <con:entry key="If-Match" value="&quot;F1D01E0804E3890FE0401F0A07992C96:D3D382DC&quot;"/>
</xml-fragment>]]></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#encodedRightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="restrequest" name="RightsTokenDeleteRequest_with_NULL_trxid" disabled="true" id="78cba979-6645-495f-8db2-add8415d040b">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest_with_NULL_trxid" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdbd6LKEn73V7jcj1kJDXhfk6zVXCSoqCBeX86CpgUUQWkQ9NefBqNjMpnZc85Dol3W5auqj6L6B7H2AdeFhOA48aOwqkqvNauN7U5nU3+2WvRfHTn0m8Vvnh27bndQx+6AFqhVVUJSrIYkscLktcYBln0G7WeWMznQrXe6oPPS5hvrWnWOY0I9U5UXapXvg5B0y6ivtTQOu5FFfNINrT0m3QR1p1Abdqlm17pBqr39uIIsA8ZvXpIcugyDXhyMcBCgFxTtmR/MJ50fDulOfTe0kjTGHzEd8lr7sM2y7CXjX6LYZTgAAAM6DNVxiO/+U3ur3Iyxo4ab6HoWrTAKfWQF/sUqQGk48SKnCgM3iv3E2//GNcuwoHD9jHP0jNh6+E+N+RmgRPeXnj6BjIn1TDyLvTkz8AbHOES4OjPU19o/f9XAq6kZWyHZRPGefDn/b4hweMJBdMDOM7kldgP39x6/qdbbD4y6aoiClPgnPCpYcrAQJtVJjDd+PvQJ5Z5DqmX3qzm5EQyj/6UjP5hHnBQ2801lJN/FJPl/2vXYqquXuRWk+G0+lXnD1MU4Qjo4eW19rfCsl537LngtITwqX0HdO/1x/srTO60+jJy+xIt2OAdrbpjBgXWaxJ41Rk/ntWYtVqN56/ykjVOFjzxWH0dq22LqYMgN08WJG0s4HUSzdmhrzWRzPlgVsX8MhfOJxYFk8HJoGO9y1OgnhrHltkEH12O0ZNvLpYHwYChMlHoGNu/Y7i22uNUXeH+pEjRpGVMw8kir0hyHiglW6VqUg8yPmvWn7PVnTo85FHkN8LlMsvi+bICOZCXW/SAWg2JDn84Ev2mqKqUXUYTnqQszVYAu/dvCkeDujt7OVzoZEKCu96AkCsFWHmpwp0B2JgueJs7nWi5eYF9wR3NqaFZgsBY0Q86kbCXNdf1dzjzTUeZnWwnS9UUeaZCUxqKnyYY8lwxT1jQYXWW5JtlKvtWmWqbqK6lCHUhyfrg4SifBSu4jTm1o0wa3mjbS9XJO5b3zcD862aYcaKKmiNOjMlVtXtLlPjRWC8T1Ump7Ge4PUWU1Ex6M+ge8hbiXARoTXjRzl2nmjBtJhlXKzM8yTVX6mk4yUS+zUipy1p/PLj9rIQqa6OzlXDbh5FoLZIq9EVgv+8RaNELNgJnklsYDOXPGNyCaDrKKeK3VUM4M2ZiNepqhZjIsZZKcBcTmRp6teCfE63nfhNvHxoi6vOiF9PfQOKFz41ixlB6093MW8YaH/IZvLaPMXbczSV/1B9FapW5GUJcFQYcUEIBFarT+AhwK88b44Hc4Hw83vWiPvbiisdFgd7rkoO3zY3cyWjSkza41UfwJbzkeowaI2/I7qKrYGbCebjnGijGk0L80x4PZEvvx6pKMGjrb9NuNirFIZ0spClrO+3I1GzzlK6Sb48l0tphc8nx03LYvQfI+Ft7jaV+T3PEI4wlBTwyweoLZlhri6n1L+bQxAG5UoKsJECpb15V9SmDhfXsl4buhyZS8UBMzRVyIyhQqypOsCpKub3oeO0HKPJ2xI02VnYCW6bxaGkFlLQoS7RSwFuvDiuuBtQmd0plel3uuPms89Zd4rY8Cc57A7DDfhCwLlIP+vtEyF2kFAxw1mwr0KRIqqQpn1vjQB/lg3gTsUXeC/rQDZ3w+5Xb52HPX55273tGmrB4enZUJg7n5wDGVUmxR0U3Z0GD7+rzlmjrjjQDt84O9R7lk0p6VxpEpyEZPB7NckuDgKiMm5HKyushbTZRL+wrMNYvS4mQvPbIKR/7YlFNK2vSBLlubA//KsYJilc8cO4pQh185Jl85JsPN8UltSyxpNMUDWWSuoMhHvTUf9jsHoC+Hu4rw1GPcxA/q47CdmYOnBXvOWt5WXyw6quSJT+Fm5fF2IgDrgnTc37UU39hJYbMenLWhpjdmPhOcwRYfMzKsjFQ2lPnk0mM6cfok7Nf+/nLh69xsP5mmJ3VmDQh79uzjopNtJ+9NhomVc+PSWp/03jJCq+t75OuQvAuvY5R5HLCfJvBt9Zqm9haj5HYs3sOqVO3Rl6OV/HmNKyS+87wpVbuHYhckCQ6T2lthVaxw3ZQuer7TpW/O6xnWOz2uLfS4JlvnGvW2DOqA7QEIGp0O4Jq92653RfEFohiFG7+IVSyz15f1nwGifdfGVozj2h88FXWqqqFBt48oJNiMXmv/sW0A7A3PI9uyWdxptC3QBnWeb7VtvmnbLN+kuOus3eZr1VGUjMNxDDcJjh92Zf7rrmxg5B98XCzUH2sFSWhNjtYpTQL25WS9hDilG3dcLL1drt5uMMTfHwJcIGf2kZMG+OXgHcoKMeT6yT1biJRSB2+sNEieyaFcen6b7tffbpWhOo5fKJAiIwHTruJfVv92t3FL55e0uW+vCDf3MHX8YrehZU5iH12RfP7pJ2sKutwpA1qd9g3zXfWvTTu/mjJ/QMR8LcY9knPyH+LeLjB0J6drW3lvIbSjR+vl+JKeTmnZw1axksbUPcMygJlilNK18mxGOxwydw/M3yz0d8xf4t7ln9GliRdOEzoN9pRu1fL475e5T9a0AAnOk+9kYkCvb0XwP97wUBcVelQ8oR9ZFDs/6/6Nr4c4FHIxyfzQLU7FJn7+3N6Px6SLIurVp8Msih99f2f/XezPwnu57lASygo7TfDvf6kWU4peqRGK0jBRpVopeJycJebkfMDdn0q/uClX4Y+7Tf67iyzLLLXhFHl4b9Xuuv6/Kz/7ZeMRplbEL7G81nJ6S6fBQ/dhUn8A/H5Yg943wxreC/gpk7dfxL9KHmr6ldlv/wU=" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:B6ACE7F48352D3C9E0401F0A059915EC "/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10001-RightsTokenDelete - Policy -RTL - ParentalControl:RatingPolicy - US - MMPA - G rating - Full User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:2E45C3CA51C044109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:CE35BBCD41C044109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
      <con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:2E45C3CA51C044109B445E349481F9A8</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:CE35BBCD41C044109B445E349481F9A8</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:2E45C3CA51C044109B445E349481F9A8" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt" ALID="urn:dece:alid:file:RTDELETE_R3_EXAMPLE_ALIDVersion_760911.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2014-02-07T11:22:30.843Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-02-07T11:22:30.844Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1580</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>RightsTokenInfo</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVdZb+o6EH7vr4jSxypkIRCIAIkl3OYUCiV0Oy+VcQyYkzg0dljOr792IBQo9HSRWiEPs3zj+TwzVCgIA8OuU4pihiMiua2q/KKbfn6k62WlmPctxYR6XgFoDBW/WBiNNd0f5aEmSy6lCXIJZYCwqmxouqlohqJZQ123Dd02jVy5pP2WpQcUU+6aq+S41SoMCLXTsFU5iYkdAYqpTUCIqM2g7dW7HZtr2iDDJNcqG5RpwLg2ZWxuqyrM+QiiIIA5GIVqRT3QqfjU9vCEAJbEaBvTp1V5a7tcLnPLfC6KJ6qhaZqqlVWu41M8uZRrF5kx8l0yjjbnJiARwRAE+C8QoLqITSNfqgeTKMZsGp5xrau6JlwraAUVqJvkUlbfAqToPunpAGRMgUKnQM+cDdAYxYhAJN0P3Kp8+bkKbmyHMSB0HMUhPTp/DRIiCxREc+QrNMssQ/d5jyeuq1ZB0HYJDBKKF+hW0GQOIKJSP0ZjvOpgysnnUyktv7Si/A9nLEPwK2WpqPtYOXT1xO208ARR9p2a7ddr4+UBBAmqmc/FZjtsFTXDWiI8L6yLtw7rxOMr3a2mEPaVN6B25d6ej8m649bWqO/PSO+pNPTztFO8AsPZ2GvckUZgrlv9J+veWbuk07t+uPtbntxcdZm7KukxLagDej2gi1vnGo5GvafeaNRdr5cXHfIKrRuyumO9R7q47z22Sk5081ToDyiY5Z+9gHhR/yamd+F4XV/OvGVYv34sPw6Hv1bPbReA8uPozjFmvxYWsS4Gar6XdAOt/7sEG/8xo279qb7ltJ/DoTBrCV4ymiHIsqOgh9uS2rxegH3cXoQE+8o4VbXnokdRhgiTa8JKtBY74Q0I+zYv5uZcaucLTtF0TL2pmaaulRumWXDyZtks6e1yvZT1oA2KI4jNiIyxiCW67IY/HwOEoU0R8VGsLKIEThGVP/DYAgxILhnwxxERioYR7+Il0yhoZdMynWLbahf0gmNx1MVGvVnUCvxflm4j1iO9uD5mKD7s4OZBBx8giOcYiTYveE450SnjV/IKFgkL9NwC5AhK+CCIRS+2DbNUUCkO5wESgNUw8pMA5ebTeXpBKt18GgqANJUOnGH6/s6md/xddhNcx8dCgYpcGohXE50YRfkskfMJW/sJZ+7riY/FM+PXymIMN0gOv3pji6DJjir1ZtPxml4Ge6f9BevvGrc6da//E9uXpveif9fB90P/LHDnB1l3fpo15+8Pzd9bqh9QUD1m/y6Qv8B7YbMNii8FfGTUsrf7CnKvuWSxSNLXaolxGHP3qq4auuohmPCZth5GfxBRdy7UT60UO9RHkXfyQ3wJmxKPAYZC3luk9PiJfdJDVOyTLu+Nq88uqwch+b0xtGKnZM2Ar50C8YebKbSh0OPiPv9YRrH/Vq4Tvvbi8Dz5EskwmYiTWB7WZ0gBI+4W82kXxfvOTzk4FfxQuLvkHRbG2TRKGDr/jSTGWFUGEEYJYW5LTgX7ozXFydZzZL8pvXOTju/tPraiZ/exp27H40MuBPJOF/9bWcEpXSCSxdqXYqnKK/7zggcnk71RvgW4P82bTr7QaDRb/5rmh5nU3onfS/bu9Pg91P4H</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1584ee73-97f2-474b-955f-c1c6f5a8ea91</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71721bdd-13aa-4a9d-b861-704bd42cc7b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights GET  Data Validation" searchProperties="true" id="e11d0743-db67-43d5-b0f0-f4d7c97f8dc6">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsToken GET" id="f5dc86d9-af55-4157-9133-cf272a3e61d4">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsTokenGet Response" id="73f61dff-7704-4f46-bf68-b84ead9ed6dd">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();


def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();

RTObjType = testCase.getPropertyValue("RTObjType");


switch (RTObjType) {
	
	case "RightsTokenFull":

		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

	break;

	case "RightsTokenBasic":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

}

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken."$RTObjType".@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.Value).toString();

//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..actFFWeblocSize-1 ){
	
		actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..actFFManifestSize-1 ){
	
		actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Actual Rights Purchase Info
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;

// Assert RightsToken LockerId

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;

// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;

// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile == actRTG_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR == actRTG_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload == actRTG_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream == actRTG_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10001_RightsTokenGet_RTR_FUNC_with_Valid_Accountid_and_RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenGet_ByRightsTokenID_Retailer_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9BB325E8AABE6B2FE0401F0A222259320A</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9BF67E75E0AD1C6DE0401F0A05992B3B</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>7001</ACCOUNT_OID>
      <USER_OID>799999</USER_OID>
      <RIGHTS_LOCKER_OID>7001</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>107002</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_node222259_RetailerNode</RETAILER_TRANSACTION>
      <PURCHASE_NODE_USER_OID>9A9CCCF13ABCD94FE0401F0A05992F63</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>https://dl.bestbuy.com/p/bb93827398sdjdhds</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2011-02-10 22:56:38.958</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ns4:SoldAs><ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:ResourceStatus><ns4:Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-17T15:12:03"><ns4:Value>urn:dece:type:status:active</ns4:Value><ns4:Description>new rights token</ns4:Description></ns4:Current></ns4:ResourceStatus><ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID><ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:107006</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime></ns4:PurchaseInfo><ns4:ViewControl><ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser></ns4:ViewControl></ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList AccountID="urn:dece:accountid:org:dece:107006" RightsLockerID="urn:dece:rightslockerid:org:dece:7001" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken>
      <RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9BB325E8AABE6B2FE0401F0A222259320A">
         <RightsLockerID>urn:dece:rightslockerid:org:dece:7001</RightsLockerID>
         <RightsTokenData ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
            <SoldAs>
               <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
               <ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ContentID>
            </SoldAs>
            <RightsProfiles>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
            </RightsProfiles>
            <ResourceStatus>
               <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-07T14:35:52.942Z">
                  <Value>urn:dece:type:status:active</Value>
               </Current>
            </ResourceStatus>
            <LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</LicenseAcqBaseLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/aaa</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/bbb</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ccc</Location>
               <Preference>3</Preference>
            </FulfillmentManifestLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ddd</Location>
               <Preference>1</Preference>
            </FulfillmentManifestLoc>
            <PurchaseInfo>
               <NodeID>urn:dece:org:org:dece:222259</NodeID>
               <RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</RetailerTransaction>
               <PurchaseAccount>urn:dece:accountid:org:dece:107006</PurchaseAccount>
               <PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</PurchaseUser>
               <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
            </PurchaseInfo>
         </RightsTokenData>
      </RightsTokenFull>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenFull</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>9BF67E75E0B81C6DE0401F0A05992B3B</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASED_MEDIA_PROFILE_OID>9BF67E75E0B31C6DE0401F0A05992B3B</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9BF67E75E0B21C6DE0401F0A05992B3B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>highdefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASED_MEDIA_PROFILE_OID>9BF67E75E0B51C6DE0401F0A05992B3B</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9BF67E75E0B41C6DE0401F0A05992B3B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>standarddefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASED_MEDIA_PROFILE_OID>9BF67E75E0B71C6DE0401F0A05992B3B</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9BF67E75E0B61C6DE0401F0A05992B3B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>portabledefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>9BF67E75E0AE1C6DE0401F0A05992B3B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>9BF67E75E0AF1C6DE0401F0A05992B3B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>9BF67E75E0B01C6DE0401F0A05992B3B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>9BF67E75E0B11C6DE0401F0A05992B3B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Response Validation" searchProperties="true" id="13d7751d-1c5d-47e9-afb9-4c37aba7caf7">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenGet RESPONSE" id="f403f373-3b64-40cf-8022-03d75a0a7914">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

	String major = context.expand('${#Project#versionMajor}');
	String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));

testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
testCase.setPropertyValue("expectErrTypeRTGet",CallingTCase.getPropertyValue("expectErrTypeRTGet"));

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName("RightsTokenGet byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName("RightsTokenGet byTokenID").httpRequest.response.getResponseHeaders();
def errorRespType = testCase.getPropertyValue("expectErrTypeRTGet");

def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");
def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//log.info Resp_HTTPstatus;
//log.info Resp_HTTPconnection;
//log.info Resp_HTTPcontenttype;
//log.info Resp_HTTPcontentlength;

// Error Validation Flags &amp; Values

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";
*/

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport'&amp;&amp; Res_RTObjType == 'RightsTokenFull'){
               
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$Res_RTObjType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$Res_RTObjType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus;
assert Resp_HTTPstatus == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection;
assert Resp_HTTPconnection == expectHTTPconnection;

//Content-Length

log.info "Content-Length:"+ Resp_HTTPcontentlength;
assert Resp_HTTPcontentlength.toInteger() > 0; 

//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype;
assert Resp_HTTPcontenttype == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10001_RightsTokenGet_RTR_FUNC_with_Valid_Accountid_and_RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenGet_ByRightsTokenID_Retailer_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9BB325E8AABE6B2FE0401F0A222259320A</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList AccountID="urn:dece:accountid:org:dece:107006" RightsLockerID="urn:dece:rightslockerid:org:dece:7001" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken>
      <RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9BB325E8AABE6B2FE0401F0A222259320A">
         <RightsLockerID>urn:dece:rightslockerid:org:dece:7001</RightsLockerID>
         <RightsTokenData ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
            <SoldAs>
               <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
               <ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ContentID>
            </SoldAs>
            <RightsProfiles>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
            </RightsProfiles>
            <ResourceStatus>
               <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-07T14:35:52.942Z">
                  <Value>urn:dece:type:status:active</Value>
               </Current>
            </ResourceStatus>
            <LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</LicenseAcqBaseLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/aaa</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/bbb</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ccc</Location>
               <Preference>3</Preference>
            </FulfillmentManifestLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ddd</Location>
               <Preference>1</Preference>
            </FulfillmentManifestLoc>
            <PurchaseInfo>
               <NodeID>urn:dece:org:org:dece:222259</NodeID>
               <RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</RetailerTransaction>
               <PurchaseAccount>urn:dece:accountid:org:dece:107006</PurchaseAccount>
               <PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</PurchaseUser>
               <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
            </PurchaseInfo>
         </RightsTokenData>
      </RightsTokenFull>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenFull</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenUpdate Request" searchProperties="true" id="71803d7f-c935-48c0-8545-93d5187f62ae">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="c58bb642-e7f2-4f66-b0bd-3dc23e9f3bbc">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("SAMLassertion"));
testRunner.testCase.getTestStepByName("RightTokenUpdateRequest PUT").testRequest.setRequestHeaders(headers);


//SetUp test properties

testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("RightsLockerID",CallingTCase.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RRSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTUReq","OK");
CallingTCase.setPropertyValue("FeedRTUReq",testCase.getPropertyValue("FeedRTUReq"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_RightsTokenUpdate_FUNC_RTL_With_Valid_Accountid and Valid RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenUpdate_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>RightsLockerID</con:name>
          <con:value>urn:dece:rightslockerid:org:dece:7001</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>ALID</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsBundleID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTUReq</con:name>
          <con:value>OK</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Update Information" searchProperties="true" id="8af405ac-b863-4694-944e-e6b09dd22474">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenUpdate Request XML" id="a4892525-58b0-4961-a49e-4008a025435c">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName("RightTokenUpdateRequest PUT").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info "RightsReqXml:" + testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="6427b864-5f89-44c7-b17b-5152548a0536">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

log.info RightsResHttpStatus;
log.info "Response Time : $RightsResTime:ms";
testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
log.info "ResponseXML:" + testCase.getPropertyValue("RightsResXml");
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_RightsTokenUpdate_FUNC_RTL_With_Valid_Accountid and Valid RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenUpdate_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE"  xsi:schemaLocation="http://www.decellc.org/schema dece.xsd "  xmlns:ns4="http://www.decellc.org/schema/2010/10/dece"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <ns4:RightsLockerID>urn:dece:rightslockerid:org:dece:7001</ns4:RightsLockerID> <ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:ResourceStatus> 		<ns4:Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-17T15:12:03.000"> 			<ns4:Value>urn:dece:type:status:active</ns4:Value> 			<ns4:Description>new rights token</ns4:Description> 		</ns4:Current> 	</ns4:ResourceStatus> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:107006</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:ViewControl> 		<ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser> 	</ns4:ViewControl> </ns4:RightsTokenData> </ns4:RightsTokenFull>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2756</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenUpdate Response Validation" searchProperties="true" id="ab996a77-0d92-48ce-8ab1-9ea09bbb013b">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenUpdate RESPONSE" id="fa7001d1-ad95-47d9-8455-ebee1da34077">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrTypeRTUpdate",CallingTCase.getPropertyValue("expectErrTypeRTUpdate"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName("RightTokenUpdateRequest PUT").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName("RightTokenUpdateRequest PUT").httpRequest.response.getResponseHeaders();

def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTUpdate");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");

	
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";
String orgRequest = "$DeceUrl:$DecePort/rest/0/9/Account/$accountid/RightsToken/$rightstokenid";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "$DeceUrl:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		processXMLFlag   = false;
		Responsebodynull = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "API call not authorized";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	Resp_errorReason = "ContentID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotValid";
	Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	Resp_errorReason = "AssetLogicalID is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserNotActive";
	Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	Resp_errorReason = "Request Account ID not match";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	Resp_errorReason = "AssetLogicalID is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	Resp_errorReason = "AssetLogicalID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	Resp_errorReason = "BundleID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
	break;

	case "CONTENTPROFILE_NOT_VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	Resp_errorReason = "FulfillmentLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	Resp_errorReason = "PurchaseUser is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "LICACQBASE_LOC_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus;
assert Resp_HTTPstatus == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection;
assert Resp_HTTPconnection == expectHTTPconnection;

//Content-Length
if (Resp_HTTPstatus == "HTTP/1.1 200 OK")
{
log.info "Content-Length:"+ Resp_HTTPcontentlength;
assert Resp_HTTPcontentlength.toInteger() == 0; 
}
else 
{
log.info "Content-Length:"+ Resp_HTTPcontentlength;
assert Resp_HTTPcontentlength.toInteger() > 0; 
}
// Location
/*

if (Resp_HTTPstatus == "HTTP/1.1 201 Created")
{
log.info "Location:" + Resp_HTTPLocation;
assert orgRequest == Resp_HTTPLocation;
}
else
{
log.info "Location:" + Resp_HTTPLocation;
assert Resp_HTTPLocation == null;
}
*/
//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype;
assert Resp_HTTPcontenttype == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

	// Verify response sizes...
	
ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
	// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
	// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

	// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_RightsTokenUpdate_FUNC_RTL_With_Valid_Accountid and Valid RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenUpdate_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTUpdate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights UPDATE  Data Validation" searchProperties="true" id="3c21d026-e74b-4f8c-9d83-823c5a72a60b">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsToken UPDATE" id="9ec3bc5a-5e7f-4a0d-a387-2ef57e416096">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));


// Fetch RightsToken info from RIGHTS_TOKEN table

RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsTokenUPDATE Request" id="366a2576-bc9e-491c-88ca-149d04b80aec">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 

def actRTU_PPContentProfile  = new ArrayList();
def actRTU_PPDMR  = new ArrayList();
def actRTU_PPCanDownload  = new ArrayList();
def actRTU_PPCanStream  = new ArrayList();
def actRTU_PPDMProfile  = new ArrayList();
def actRTU_LicAcqBaseLoc = new ArrayList();
def actRTU_FFWebLoc_Location = new ArrayList();
def actRTU_FFWebLoc_Pref = new ArrayList();
def actRTU_FFManifestLoc_Location = new ArrayList();
def actRTU_FFManifestLoc_Pref = new ArrayList();
def expectRTU_PPContentProfile  = new ArrayList();
def expectRTU_PPDMR  = new ArrayList();
def expectRTU_PPCanDownload  = new ArrayList();
def expectRTU_PPCanStream  = new ArrayList();
def expectRTU_PPDMProfile  = new ArrayList();
def expectRTU_LicAcqBaseLoc = new ArrayList();
def expectRTU_FFWebLoc_Location = new ArrayList();
def expectRTU_FFWebLoc_Pref = new ArrayList();
def expectRTU_FFManifestLoc_Location = new ArrayList();
def expectRTU_FFManifestLoc_Pref = new ArrayList();

// RightsToken Update Request Information 

def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
RTObjType = testCase.getPropertyValue("RTObjType");
log.info RTObjType.toString();

		expectRTU_AccountID = testCase.getPropertyValue("Accountid");
		expectRTU_RightsTokenID =  Val_RightsReqXml.@RightsTokenID.toString();
		expectRTU_RightsLockerID = Val_RightsReqXml.RightsLockerID.toString();		
		expectRTU_ALID = Val_RightsReqXml.RightsTokenData.@ALID.toString();
		expectRTU_ContentID = Val_RightsReqXml.RightsTokenData.@ContentID.toString();
		expectRTU_SoldAsLang = Val_RightsReqXml.RightsTokenData.SoldAs.DisplayName.@Language.toString();
		expectRTU_DisplayName = Val_RightsReqXml.RightsTokenData.SoldAs.DisplayName;
		expectRTU_SoldAsContentID = Val_RightsReqXml.RightsTokenData.SoldAs.ContentID;
		expectRTU_SoldAsBUNDLE_ID = Val_RightsReqXml.RightsTokenData.SoldAs.BundleID;


// Rights Purchase Media Purchase Profiles
		expPMPPSize = Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..expPMPPSize-1 ){
	
			expectRTU_PPContentProfile +=(Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			expectRTU_PPDMR +=(Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			expectRTU_PPDMProfile +=(Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			expectRTU_PPCanDownload += 'Y';
			}
			else{
			expectRTU_PPCanDownload += 'N';
			}
			
			if ((Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			expectRTU_PPCanStream += 'Y';
			}
			else{
			expectRTU_PPCanStream += 'N';
			}
		}


// Expected Rights Status 

		expectRTU_RS_CreatedBy = (Val_RightsReqXml.RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsReqXml.RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		RS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		log.info RS_CreationDate;
		expectRTU_RS_CreationDate = new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",RS_CreationDate.toString());
		log.info expectRTU_RS_CreationDate;
		expectRTU_RS_Value = (Val_RightsReqXml.RightsTokenData.ResourceStatus.Current.Value).toString();



//  Expected Rights Licence Acq Base Location

 		expLicAcqSize = Val_RightsReqXml.RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..expLicAcqSize-1 ){
		
			expectRTU_LicAcqBaseLoc += Val_RightsReqXml.RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Expected Rights Fullfillment WebLoc

	expFFWeblocSize = Val_RightsReqXml.RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..expFFWeblocSize-1 ){
	
		expectRTU_FFWebLoc_Location += (Val_RightsReqXml.RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		expectRTU_FFWebLoc_Pref += (Val_RightsReqXml.RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Expected Rights Fullfillment ManifestLoc

	expFFManifestSize = Val_RightsReqXml.RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..expFFManifestSize-1 ){
	
		expectRTU_FFManifestLoc_Location += (Val_RightsReqXml.RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		expectRTU_FFManifestLoc_Pref += (Val_RightsReqXml.RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Expected Rights Purchase Info
		expectRTU_PI_NodeID = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.NodeID).toString();
		expectRTU_PI_RetailerTrax = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		expectRTU_PI_PurcaseAccount = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		expectRTU_PI_PurchaseUser = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		expectRTU_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Expected Rights Status History 

		log.info "Rights Status History Row Count Before Rights Token Update ;" + testCase.getPropertyValue("RTC_rcStatusHistory");
		expectRTU_rcSatusHistory = ((testCase.getPropertyValue("RTC_rcStatusHistory")).toInteger() + 1).toString();


// DB Rights Token Information 

def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
def Val_DbResultRTSHXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-StatusHistoryXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();


		// Rights Token 
		actRTU_Accountid =  "urn:dece:accountid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		actRTU_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		actRTU_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		actRTU_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		actRTU_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		actRTU_SoldAs_Lang = (Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID).toString();
		actRTU_SoldAs_PRODUCT_ID = (Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID).toString();
		actRTU_SoldAs_DisplayName = (Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME).toString();
		actRTU_SoldAs_ContentID = (Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID).toString();
		actRTU_SoldAs_BUNDLE_ID = (Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID).toString();

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		actRTU_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		actRTU_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//actRTU_PPDMProfile = 
		actRTU_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		actRTU_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		actRTU_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		actRTU_RS_CreationDate =  new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",CreationDate.toString())
		actRTU_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		actRTU_LicAcqBaseLoc += (Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i]).toString();
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		actRTU_FFWebLoc_Location += (Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString();
		actRTU_FFWebLoc_Pref += (Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString();
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		actRTU_FFManifestLoc_Location += (Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString();	
		actRTU_FFManifestLoc_Pref += (Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString();
	
		}

		// Rights Purchase Infomation
				
		actRTU_PI_NodeID = "urn:dece:org:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.NODE_OID).toString();
		actRTU_PI_RetailerTrax = (Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION).toString();
		actRTU_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID).toString();
		actRTU_PI_PurchaseUser = "urn:dece:userid:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID).toString();
		actRTU_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

		// Rights Status History
		
		def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
		testCase.setPropertyValue("RTU_rcStatusHistory", rcStatusHistory.toString());
		log.info "Rights Status History Row Count After Rights Token Update ;" + testCase.getPropertyValue("RTU_rcStatusHistory");
				
		actRTU_rcSatusHistory = testCase.getPropertyValue("RTU_rcStatusHistory");


// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenUpdate Accountid Expected : [$expectRTU_AccountID] - Actual Recieved: [$actRTU_Accountid]";
 		assert expectRTU_AccountID == actRTU_Accountid ;

// Assert RightsToken LockerId

		log.info "Rights TokenUpdate Lockerid Expected : [$expectRTU_RightsLockerID] - Actual Recieved: [$actRTU_Lockerid]";
		 assert expectRTU_RightsLockerID == actRTU_Lockerid;

// Assert RightsToken id 

		log.info "Rights TokenUpdate Tokenid Expected : [$expectRTU_RightsTokenID] - Actual Recieved: [$actRTU_RightsTokenID]";
		assert expectRTU_RightsTokenID == actRTU_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenUpdate Alid Expected : [$expectRTU_ALID] - Actual Recieved: [$actRTU_ALID]";
 		assert expectRTU_ALID.toString() == actRTU_ALID.toString();

// Assert RightsToken ContentID 

		log.info "Rights TokenUpdate ContentID Expected : [$expectRTU_ContentID] - Actual Recieved: [$actRTU_ContentID]"; 
 		assert expectRTU_ContentID.toString() == actRTU_ContentID.toString();

// Assert RightsToken SoldAS Language

		log.info "Rights TokenUpdate SoldAs Language Expected : [$expectRTU_SoldAsLang] - Actual Recieved: [$actRTU_SoldAs_Lang]";
		assert expectRTU_SoldAsLang == actRTU_SoldAs_Lang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenUpdate SoldAs DisplayName Expected : [$expectRTU_DisplayName] - Actual Recieved:[$actRTU_SoldAs_DisplayName]";
 		assert expectRTU_DisplayName == actRTU_SoldAs_DisplayName;

		if (expectRTU_SoldAsContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenUpdate SoldAs ContentID Expected : [$expectRTU_SoldAsContentID] - Actual Recieved:[$actRTU_SoldAs_ContentID]";
 		assert expectRTU_SoldAsContentID == actRTU_SoldAs_ContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenUpdate SoldAs BUNDLE_ID Expected : [$expectRTU_SoldAsBUNDLE_ID] - Actual Recieved:[$actRTU_SoldAs_BUNDLE_ID]";
		assert expectRTU_SoldAsBUNDLE_ID == actRTU_SoldAs_BUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenUpdate Purchase ContentProfile Expected : $expectRTU_PPContentProfile - Actual Recieved:$actRTU_PPContentProfile";
		assert expectRTU_PPContentProfile == actRTU_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenUpdate Purchase DiscreteMediaRightsRemaining Expected : $expectRTU_PPDMR - Actual Recieved:$actRTU_PPDMR";
		assert expectRTU_PPDMR == actRTU_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenUpdate Purchase CanDownload Expected : $expectRTU_PPCanDownload - Actual Recieved:$actRTU_PPCanDownload";
		assert expectRTU_PPCanDownload == actRTU_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenUpdate Purchase CanStream Expected : $expectRTU_PPCanStream - Actual Recieved:$actRTU_PPCanStream";
		assert expectRTU_PPCanStream == actRTU_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenUpdate ResourceStatus CreatedBy Expected : [$expectRTU_RS_CreatedBy] - Actual Recieved: [$actRTU_RS_CreatedBy]";
		assert expectRTU_RS_CreatedBy == actRTU_RS_CreatedBy;
		
		log.info "Rights TokenUpdate ResourceStatus CreationDate Expected : [$expectRTU_RS_CreationDate] - Actual Recieved: [$actRTU_RS_CreationDate]";
		//assert expectRTU_RS_CreationDate == actRTU_RS_CreationDate; //  No Validation on  RS Creation Date 

		log.info "Rights TokenUpdate ResourceStatus Value Expected : [$expectRTU_RS_Value] - Actual Recieved: [$actRTU_RS_Value]";
		assert expectRTU_RS_Value ==  actRTU_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenUpdate LicenceAcqBase Location Expected : [$expectRTU_LicAcqBaseLoc] - Actual Recieved: [$actRTU_LicAcqBaseLoc]";
		assert expectRTU_LicAcqBaseLoc == actRTU_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenUpdate FF Web location Expected : [$expectRTU_FFWebLoc_Location] - Actual Recieved: [$actRTU_FFWebLoc_Location]";
		assert expectRTU_FFWebLoc_Location == actRTU_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenUpdate Web FF preference Expected : [$expectRTU_FFWebLoc_Pref] - Actual Recieved: [$actRTU_FFWebLoc_Pref]";
		assert expectRTU_FFWebLoc_Pref == actRTU_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenUpdate FF Manifest location Expected : [$expectRTU_FFManifestLoc_Location] - Actual Recieved: [$actRTU_FFManifestLoc_Location]";
		assert expectRTU_FFManifestLoc_Location == actRTU_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenUpdate FF Manifest  preference Expected : [$expectRTU_FFManifestLoc_Pref] - Actual Recieved: [$actRTU_FFManifestLoc_Pref]";
		assert expectRTU_FFManifestLoc_Pref == actRTU_FFManifestLoc_Pref ;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenUpdate PurchaseInfo  NodeID Expected : [$expectRTU_PI_NodeID] - Actual Recieved: [$actRTU_PI_NodeID]";
		assert expectRTU_PI_NodeID == actRTU_PI_NodeID;

		log.info "Rights TokenUpdate PurchaseInfo  RetailerTrax Expected : [$expectRTU_PI_RetailerTrax] - Actual Recieved: [$actRTU_PI_RetailerTrax]";
		assert expectRTU_PI_RetailerTrax == actRTU_PI_RetailerTrax;

		log.info "Rights TokenUpdate PurchaseInfo  PurcaseAccount Expected : [$expectRTU_PI_PurcaseAccount] - Actual Recieved: [$actRTU_PI_PurcaseAccount]";
		assert expectRTU_PI_PurcaseAccount == actRTU_PI_PurcaseAccount;
		
		log.info "Rights TokenUpdate PurchaseInfo  PurchaseUser Expected : [$expectRTU_PI_PurchaseUser] - Actual Recieved: [$actRTU_PI_PurchaseUser]";
		assert expectRTU_PI_PurchaseUser == actRTU_PI_PurchaseUser;

		log.info "Rights TokenUpdate PurchaseInfo  PurchaseTime Expected : [$expectRTU_PI_PurchaseTime] - Actual Recieved: [$actRTU_PI_PurchaseTime]";
		def actPurchaseTime = new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",actRTU_PI_PurchaseTime.toString());
		def expectPurchaseTime = new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",expectRTU_PI_PurchaseTime.toString());

		log.info "Expected Purchase time :" + expectPurchaseTime.getTime() + " ms || Actual PurchaseTime :" + actPurchaseTime.getTime() + " ms";
		assert expectPurchaseTime.getTime() == actPurchaseTime.getTime();

// Assert Rights History Table
		log.info " Record Count RightsToken History Table" 
		log.info " Expected Rights TokenUpdate Status HistoryCount:[$expectRTU_rcSatusHistory] - Actual Recieved: [$actRTU_rcSatusHistory]";
		assert expectRTU_rcSatusHistory == actRTU_rcSatusHistory;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_RightsTokenUpdate_FUNC_RTL_With_Valid_Accountid and Valid RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenUpdate_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>7001</ACCOUNT_OID>
      <USER_OID>799999</USER_OID>
      <RIGHTS_LOCKER_OID>7001</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>107002</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_node222259_RetailerNode</RETAILER_TRANSACTION>
      <PURCHASE_NODE_USER_OID>9A9CCCF13ABCD94FE0401F0A05992F63</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>https://dl.bestbuy.com/p/bb93827398sdjdhds</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2011-02-12 16:34:23.655</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>2011-02-14 14:39:44.832</UPDATED_DATE>
      <UPDATED_BY>222259</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE"  xsi:schemaLocation="http://www.decellc.org/schema dece.xsd "  xmlns:ns4="http://www.decellc.org/schema/2010/10/dece"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <ns4:RightsLockerID>urn:dece:rightslockerid:org:dece:7001</ns4:RightsLockerID> <ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:ResourceStatus> 		<ns4:Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-17T15:12:03.000"> 			<ns4:Value>urn:dece:type:status:active</ns4:Value> 			<ns4:Description>new rights token</ns4:Description> 		</ns4:Current> 	</ns4:ResourceStatus> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:107006</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:ViewControl> 		<ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser> 	</ns4:ViewControl> </ns4:RightsTokenData> </ns4:RightsTokenFull>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenFull</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>9C196308C68C1497E0401F0A2222593EAE</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2011-02-12 16:34:23.489</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASED_MEDIA_PROFILE_OID>9C4004C0670F89F4E0401F0A05997DE3</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9C4004C0670E89F4E0401F0A05997DE3</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>highdefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASED_MEDIA_PROFILE_OID>9C4004C0671189F4E0401F0A05997DE3</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9C4004C0671089F4E0401F0A05997DE3</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>standarddefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASED_MEDIA_PROFILE_OID>9C4004C0671389F4E0401F0A05997DE3</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9C4004C0671289F4E0401F0A05997DE3</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>portabledefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>9C4004C0670A89F4E0401F0A05997DE3</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>9C4004C0670B89F4E0401F0A05997DE3</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>9C4004C0670C89F4E0401F0A05997DE3</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>9C4004C0670D89F4E0401F0A05997DE3</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-StatusHistoryXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>9C35E526F029BE8BE0401F0A22225933E5</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 03:05:44.346</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
    <Row rowNumber='2'>
      <RIGHTS_STATUS_HISTORY_OID>9C4004C0670989F4E0401F0A05997DE3</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 14:39:44.768</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
    <Row rowNumber='3'>
      <RIGHTS_STATUS_HISTORY_OID>9C36B498C42A0515E0401F0A05997A39</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 03:33:39.789</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
    <Row rowNumber='4'>
      <RIGHTS_STATUS_HISTORY_OID>9C36B498C4360515E0401F0A05997A39</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 03:39:33.805</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
    <Row rowNumber='5'>
      <RIGHTS_STATUS_HISTORY_OID>9C36B498C41E0515E0401F0A05997A39</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 03:33:05.227</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>RTU_rcStatusHistory</con:name>
          <con:value>5</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Delete Information" searchProperties="true" id="3e28733e-b47b-4bf0-a358-067a52fd7a34">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenDelete Response" id="7c5edea8-eab8-4a4d-a6de-1be7c2363dc9">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName('RightsTokenDeleteRequest').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName('RightsTokenDeleteRequest').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName('RightsTokenDeleteRequest').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

//def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

// Evaluate RightsToken Success &amp; Failure
log.info RightsResHttpStatus[0];
if(RightsResHttpStatus[0] == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus[0].toString()}";
log.info "Response Time : $RightsResTime:ms";

}
else{
log.info " RightsToken Delete failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountNotFound">
      <Reason Language="en">The account ID was not found.</Reason>
      <OriginalRequest>http://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001/RightsToken/urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#AccountNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>114</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10018_RightsTokenDelete_FUNC_RTL_with_Invalid_AccountId without DST</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenDelete_without_DST</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDelete Response Validation" searchProperties="true" id="7e254241-ac8b-48df-b9a1-08518931a3db">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenDelete RESPONSE" id="31a16940-5d67-4c4d-bba8-c20918fdc406">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode","nothing");
testCase.setPropertyValue("errorReason","nothing");
testCase.setPropertyValue("errorID","nothing");
def ValerrorID;
def QAResp_ErrorID;

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrTypeRTDelete",CallingTCase.getPropertyValue("expectErrTypeRTDelete"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));
testCase.setPropertyValue("RTObjType",CallingTCase.getPropertyValue("RTObjType"));

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHostq");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest").httpRequest.response.getResponseHeaders();

def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTDelete");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength[0];
log.info errorRespType;

// Error Validation Flags &amp; Values


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "$DeceUrl:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";


switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport'){
               
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	QAResp_ErrorID = "ForbiddenAccountNotActive"
	ValerrorID = 1;
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;


	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
			
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID  = 1;
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = ""
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;

	case "CONTENTPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	ValerrorID = 1;
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	ValerrorID = 1;
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded"
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;
	
	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;

	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	QAResp_ErrorID = ""
	break;
	
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	QAResp_ErrorID = "BadRequestLicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;

	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:NotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "RT_ALREADY_DELETED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

 }


testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());

log.info "From ValidateRights ---" + Resp_ErrorID;

if(ValerrorID.toString() == '1') {
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
//assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length

if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype[0];
assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");
/*
assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		*/
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	//assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001</con:value></con:property>
        
        <con:property><con:name>ErrorDataVal</con:name><con:value>1</con:value></con:property>
        
        <con:property><con:name>errorID</con:name><con:value>AccountIdUnmatched</con:value></con:property><con:property><con:name>errorReason</con:name><con:value>The account ID does not match.</con:value></con:property>
        
        <con:property><con:name>errorStatusCode</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>expectErrTypeRTDelete</con:name><con:value>ACCOUNTID NOT MATCH</con:value></con:property>
        
        <con:property><con:name>expectErrTypeRTGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property>
        <con:property><con:name>QAerrorID</con:name><con:value>ForbiddenAccountIdUnmatched</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value></con:property>
        
        <con:property><con:name>RTObjType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10018_RightsTokenDelete_FUNC_RTL_with_Invalid_AccountId without DST</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>RightsTokenDelete_without_DST</con:value></con:property>
        
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights DELETE  Data Validation" searchProperties="true" id="83a3c065-6def-48a7-bcb9-8ab895959f85">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsToken DELETE" id="87c3ff8d-85fd-42f3-8476-3eea1736d883">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));

log.info CallingTCase.getPropertyValue("rightstokenid");
log.info CallingTCase.getPropertyValue("Accountid");

testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("rtStatus",CallingTCase.getPropertyValue("rtStatus"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsTokenDelete Response" id="3862638d-a7c6-4d8f-a767-4035191b982d">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 

// RightsToken Delete Request Information 

	expectRTD_AccountID = testCase.getPropertyValue("Accountid");
	expectRTD_RightsTokenID = testCase.getPropertyValue("rightstokenid");
	Pr_rtStatus = testCase.getPropertyValue("rtStatus");
	expectRTD_RightsTokenID_Status = "deleted";

// Expected Rights Status History 

		log.info "Rights Status History Row Count Before Rights Token Delete : " + (testCase.getPropertyValue("RTC_rcStatusHistory")).toInteger();
		expectRTD_rcSatusHistory = ((testCase.getPropertyValue("RTC_rcStatusHistory")).toInteger() + 1).toString();


// DB Rights Token Information 

	def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
	def Val_DbResultRTSHXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-StatusHistoryXml"));


		// Rights Token 
		actRTD_RightsTokenID = "urn:dece:rightstokenid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_TOKEN_OID;
		actRTD_Accountid =  "urn:dece:accountid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		actRTD_RightsTokenID_Status = Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		
		// Rights Status History
		
		def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
		testCase.setPropertyValue("RTD_rcStatusHistory", rcStatusHistory.toString());
		log.info "Rights Status History Row Count After Rights Token Delete " + testCase.getPropertyValue("RTD_rcStatusHistory");
				
		actRTD_rcSatusHistory = testCase.getPropertyValue("RTD_rcStatusHistory");


// Assert RightsToken Information DB and RightsTokenDelete Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenDelete Accountid Expected : [$expectRTD_AccountID] - Actual Recieved: [$actRTD_Accountid]";
 		assert expectRTD_AccountID == actRTD_Accountid ;

// Assert RightsToken id 

		log.info "Rights TokenDelete Tokenid Expected : [$expectRTD_RightsTokenID] - Actual Recieved: [$actRTD_RightsTokenID]";
		assert expectRTD_RightsTokenID == actRTD_RightsTokenID;
		
// Assert RightsToken id Status

		log.info "Rights TokenDelete Tokenid Expected : [$expectRTD_RightsTokenID_Status] - Actual Recieved: [$actRTD_RightsTokenID_Status]";
		assert expectRTD_RightsTokenID_Status == (actRTD_RightsTokenID_Status).toString();

// Assert Rights History Table
		log.info " Record Count RightsToken History Table" 
		log.info " Expected Rights TokenDelete Status HistoryCount:[$expectRTD_rcSatusHistory] - Actual Recieved: [$actRTD_rcSatusHistory]";
		assert expectRTD_rcSatusHistory == actRTD_rcSatusHistory;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00002 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Retailer without DST and with ULC</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenDelete_without_DST</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144F0E59235F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E5922800AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144F0E59235F0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>144F0E59235F0AE1E05305991F0A7E43</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>144F0E5922810AE1E05305991F0A7E43</ACCOUNT_OID>
      <USER_OID>144F0E59228D0AE1E05305991F0A7E43</USER_OID>
      <RIGHTS_LOCKER_OID>144F0E5922880AE1E05305991F0A7E43</RIGHTS_LOCKER_OID>
      <NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>144F0E5922800AE1E05305991F0A7E43</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_nodeRET_RetailerNode</RETAILER_TRANSACTION>
      <TRANSACTION_TYPE>urn:dece:type:transaction:category1</TRANSACTION_TYPE>
      <PURCHASE_NODE_USER_OID>144F0E59228C0AE1E05305991F0A7E43</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2015-04-22 11:12:44.501</CREATED_DATE>
      <CREATED_BY>C0CEF8E08CE1C7D6E0401F0A0599120B</CREATED_BY>
      <UPDATED_DATE>2015-04-22 11:12:45.332</UPDATED_DATE>
      <UPDATED_BY>C0CEF8E08CE1C7D6E0401F0A0599120B</UPDATED_BY>
      <STATUS_ID>deleted</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>144F0E5923650AE1E05305991F0A7E43</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>144F0E59235F0AE1E05305991F0A7E43</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2015-04-22 11:12:44.486</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASE_PROFILE_OID>144F0E5923640AE1E05305991F0A7E43</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>144F0E59235F0AE1E05305991F0A7E43</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>N</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2015-04-22 11:12:44.486</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>[20, 79, 14, 89, 35, 96, 10, -31, -32, 83, 5, -103, 31, 10, 126, 67]</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>[20, 79, 14, 89, 35, 95, 10, -31, -32, 83, 5, -103, 31, 10, 126, 67]</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2015-04-22 11:12:44.486</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>[20, 79, 14, 89, 35, 98, 10, -31, -32, 83, 5, -103, 31, 10, 126, 67]</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>[20, 79, 14, 89, 35, 95, 10, -31, -32, 83, 5, -103, 31, 10, 126, 67]</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2015-04-22 11:12:44.486</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>[20, 79, 14, 89, 35, 97, 10, -31, -32, 83, 5, -103, 31, 10, 126, 67]</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>[20, 79, 14, 89, 35, 95, 10, -31, -32, 83, 5, -103, 31, 10, 126, 67]</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2015-04-22 11:12:44.486</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>[20, 79, 14, 89, 35, 99, 10, -31, -32, 83, 5, -103, 31, 10, 126, 67]</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>[20, 79, 14, 89, 35, 95, 10, -31, -32, 83, 5, -103, 31, 10, 126, 67]</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2015-04-22 11:12:44.486</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-StatusHistoryXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>144F0E5923660AE1E05305991F0A7E43</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>144F0E59235F0AE1E05305991F0A7E43</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>RightsToken has been created.</DESCRIPTION>
      <CREATED_DATE>2015-04-22 11:12:44.507</CREATED_DATE>
      <CREATED_BY_NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>144F0E59228D0AE1E05305991F0A7E43</CREATED_BY_USER_OID>
    </Row>
    <Row rowNumber='2'>
      <RIGHTS_STATUS_HISTORY_OID>144F0E59236E0AE1E05305991F0A7E43</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>144F0E59235F0AE1E05305991F0A7E43</RIGHTS_TOKEN_OID>
      <STATUS>deleted</STATUS>
      <DESCRIPTION>Rights Token is Deleted</DESCRIPTION>
      <CREATED_DATE>2015-04-22 11:12:45.329</CREATED_DATE>
      <CREATED_BY_NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>null</CREATED_BY_USER_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTD_rcStatusHistory</con:name>
          <con:value>2</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreateRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3d9c896a-5e58-4ea1-85c3-40c6296a8217">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="c10a3315-b4fd-4b91-858a-8bfc1b50abf3">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("assert"));


testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1","false");
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2","false");
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3","false");
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="cc35dd62-5906-4519-a9e3-52505b7afee6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreate Request POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenCreate Request POST" id="4878e24c-5f09-4819-9f4c-9cbb7a2b1505">
        <con:settings/>
        <con:config service="RightsTokenCreate" methodName="RightsTokenCreate Request" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenCreate Request POST" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}">         <ns4:SoldAs>                     <ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName>                      <ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID>         </ns4:SoldAs>   <ns4:RightsProfiles>                       <ns4:PurchaseProfile  MediaProfile="${#TestCase#PPContentProfile2}">                                         <ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload>                                         <ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream>                           </ns4:PurchaseProfile>                                                                </ns4:RightsProfiles>      <ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc>         <ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}"  xsi:type="ns4:ResourceLocation-type">                               <ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location>                            <ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentWebLoc  MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type">                          <ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location>                            <ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentManifestLoc  MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type">                           <ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location>                 <ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile2}" xsi:type="ns4:ResourceLocation-type">                                <ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location>                 <ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:PurchaseInfo>                       <ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID>                   <ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction>                       <ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount>                       <ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser>                             <ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime>            <ns4:TransactionType>urn:dece:type:transaction:category1</ns4:TransactionType></ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:request>
            <con:assertion type="GroovyScriptAssertion" id="15e3c188-5059-40df-ab50-5ff1b9032a5b">
              <con:configuration>
                <scriptText>// check for the HTTP Response code 
log.info  messageExchange.responseHeaders["#status#"]</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="AccountID" value="${#Project#encodedAssertionAccountIdFULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript><![CDATA[def RightsTCLogs;
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\RightsLog\\RightsTClogFile.txt");

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
   	   def rawRequest = new String( r.rawRequestData );   		     	

   	    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
       	"TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
        	" ###################" + "\n\n" ;
   }
    else
   {	
   	 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
   	  " ###################" + "\n\n";	
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
//RightsTClogFile << RightsTCLogs;
}]]></con:tearDownScript>
      <con:properties>
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value></con:property>
        
        <con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value></con:property>
        
        <con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        
        <con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property>
        
        
        <con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property>
        <con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property>
        <con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property><con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>ns3.google.com</con:value>
        </con:property>
        
        
        <con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property>
        
        
        
        <con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</con:value></con:property>
        
        
        <con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_nodeRET_RetailerNode</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property>
        <con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property>
        
        <con:property><con:name>PPCanStream1</con:name><con:value>false</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>false</con:value></con:property>
        <con:property><con:name>PPCanStream3</con:name><con:value>false</con:value></con:property>
        <con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:pd</con:value>
        </con:property>
        
        
        <con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property>
        
        
        <con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property>
        
        
        <con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03</con:value></con:property>
        
        <con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:status:active</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=</con:value>
        </con:property>
        
        
        <con:property><con:name>SoldAsBundleID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property>
        <con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property>
        
        
      <con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>RightsTokenCreate_With_Valid_AccountId</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Staging Rights DELETE</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsError Validation" searchProperties="true" id="75fcf069-c2f4-4d57-9f30-5f36e82a5f7d">
      <con:settings/>
      <con:testStep type="groovy" name="Validate Rights Errors" id="f3521edc-02ee-47cf-9cd5-bb89bd638307">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbErrors;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RightsErrors = new dbErrors(log,testProject.getPropertyValue("targetDECEDB"));;


def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
def errId = CallingTCase.getPropertyValue("QAerrorID");
//log.info errId.tokenize(':').last();
/*if(errId.contains('Policy'))
{
	log.info 'Policy:' + errId.tokenize(':').last();
	ErrorID = 'Policy:' + errId.tokenize(':').last();
}
else
{
	log.info errId.tokenize(':').last();
	ErrorID = errId.tokenize(':').last();
}
*/

def xmlData = "";

try {
			 xmlData = RightsErrors.errGetIdInfo(errId.toString());
                log.info xmlData;
                
                assert xmlData.trim().length() > 1;

                def myXML = new XmlSlurper().parseText(xmlData);
                

                log.info myXML.ResultSet.Row.size();
                testCase.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
                testCase.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
                testCase.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

                /*
                *  The DB does not contain the complete HTTP status
                *  string, only the code.  Thus, we must adjust.
                */
                switch (testCase.getPropertyValue("errorStatusCode")) {
                                case "400":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
                                                break;
                                case "403":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
                                                break;
                                case "404":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
                                                break;
                                case "409":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
                                                break;
                }
}
catch (Throwable e) {
                log.info "STEP FAILURE! --- " + e;
                
}


CallingTCase.setPropertyValue("errorStatusCode",testCase.getPropertyValue("errorStatusCode"));
CallingTCase.setPropertyValue("errorReason",testCase.getPropertyValue("errorReason"));
CallingTCase.setPropertyValue("errorID",testCase.getPropertyValue("errorID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDelete Response Validation</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value>HTTP/1.1 403 Forbidden</con:value>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value>The account ID does not match.</con:value>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value>AccountIdUnmatched</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Node Statuses" searchProperties="true" id="10cb18ab-1651-4403-8d45-43a593534136">
      <con:settings/>
      <con:testStep type="groovy" name="Get Node Statuses for RTD" id="2e855d42-b0d2-42cd-83b4-87ea04eecb3e">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;
NodeStatusXML = myDb.SelectFromDB("select Status from NODE_STATUS where Status != 'active'","LP1");

log.info NodeStatusXML.toString();

testCase.setPropertyValue("NodeStatusXML",NodeStatusXML.toString());
callingTCase.setPropertyValue("NodeStatusXML",testCase.getPropertyValue("NodeStatusXML"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Statuses for RTD" id="d21ab4d3-8734-4c17-ac11-329ddfacdef1">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

log.info CallingTCase.getName();
//log.info CallingTCase.getPropertyValue("nodeid");

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("NodeStatus",CallingTCase.getPropertyValue("NodeStatus"));

nodeid = testCase.getPropertyValue("nodeid");
NodeStatus = testCase.getPropertyValue("NodeStatus");

myNode.nodeSetStatus(nodeid ,NodeStatus);

Upd_NodeStatus = myNode.nodeGetStatus(nodeid);

testCase.setPropertyValue("NodeStatus",Upd_NodeStatus);

CallingTCase.setPropertyValue("NodeStatus",testCase.getPropertyValue("NodeStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>NodeStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10006_RightsTokenDelete_FUNC_RTL_CS_with_Inactive_Nodeid</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value>active</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set RightsToken Status" searchProperties="true" id="270ad2c9-50a8-44a6-a7c3-4c0292fbd3b1">
      <con:settings/>
      <con:testStep type="groovy" name="Get RightsToken Status for RTD" id="4b0fb896-12cc-45fa-a453-ee8d2235ddd8">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbRightsToken;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

RightsTokenId = callingTCase.getPropertyValue("rightstokenid");
dbRighttoken = RightsTokenId.tokenize(':').last();
testCase.setPropertyValue("dbRighttoken", dbRighttoken);

myRT = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

RTStatus = myRT.rightstokenGetStatus(dbRighttoken);

log.info "Current RightsTokenStatus : " + RTStatus.toString();

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;

SqlStr = callingTCase.getPropertyValue("SqlStr");

RTStatusXML = myDb.SelectFromDB(SqlStr,"LP1");

log.info RTStatusXML.toString();

testCase.setPropertyValue("RTStatusXML",RTStatusXML.toString());
callingTCase.setPropertyValue("RTStatusXML",testCase.getPropertyValue("RTStatusXML"));

testCase.setPropertyValue("RTStatus",RTStatus.toString());
callingTCase.setPropertyValue("RTStatus",testCase.getPropertyValue("RTStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set RightsToken Status for RTD" id="8845a294-4f2d-49e6-8b1a-bbd543fd842e">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbRightsToken;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();


RightsTokenId = callingTCase.getPropertyValue("rightstokenid");
dbRighttoken = RightsTokenId.tokenize(':').last();
testCase.setPropertyValue("dbRighttoken", dbRighttoken);

myRT = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

RTStatus = callingTCase.getPropertyValue("RTStatus");

RTStatus = myRT.rightsTokenSetStatus(dbRighttoken.toString(),RTStatus.toString());

log.info RTStatus.toString();

testCase.setPropertyValue("RTStatus",RTStatus.toString());
callingTCase.setPropertyValue("RTStatus",testCase.getPropertyValue("RTStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10023-RightsTokenDelete - Policy -RTL - NoPolicyEnforcement - US - MMPA - Can create RightsToken that IS_ADULT = 'y' with policy and all rating as per Matrix</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>RTStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RTStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS_ID>other</STATUS_ID>
    </Row>
    <Row rowNumber='2'>
      <STATUS_ID>pending</STATUS_ID>
    </Row>
    <Row rowNumber='3'>
      <STATUS_ID>suspended</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>dbRighttoken</con:name>
          <con:value>3033D5EBBB6F34109B445E349481F9A8</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Account Status" searchProperties="true" id="35aa82ad-f306-483d-b59a-5a4874a22484">
      <con:settings/>
      <con:testStep type="groovy" name="Get Account Status for RTD" id="58b68a87-e20d-4271-9d98-519c2af11b74">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

//AccountID = callingTCase.getPropertyValue("accountoid");

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;

SqlStr = callingTCase.getPropertyValue("SqlStr");

log.info SqlStr;

AccountStatusXML = myDb.SelectFromDB(SqlStr, "LP1");

log.info AccountStatusXML.toString();

testCase.setPropertyValue("AccountStatusXML",AccountStatusXML.toString());
callingTCase.setPropertyValue("AccountStatusXML",testCase.getPropertyValue("AccountStatusXML"));

AccXML = new XmlSlurper().parseText(AccountStatusXML.toString());

AccountStatus = AccXML.ResultSet.Row.STATUS

testCase.setPropertyValue("AccountStatus",AccountStatus.toString());
callingTCase.setPropertyValue("AccountStatus",testCase.getPropertyValue("AccountStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Account Status for RTD" id="13ed47c0-ade1-49b6-9f7c-8d986800d92e">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

log.info callingTCase.getPropertyValue("accountoid");

AccountID = callingTCase.getPropertyValue("accountoid");


//testCase.setPropertyValue("AccountID",AccountID);

AccountStatus = callingTCase.getPropertyValue("AccountStatus");

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myAccount.accountSetStatus(AccountID.toString(),AccountStatus.toString());

log.info AccountStatus.toString();

testCase.setPropertyValue("AccountStatus",AccountStatus.toString());
callingTCase.setPropertyValue("AccountStatus",testCase.getPropertyValue("AccountStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10010_RightsTokenDelete_FUNC_RTL_CS_with_Inactive_Account</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set User Status" searchProperties="true" id="ae4407e4-e111-4edd-a20f-07f425022b21">
      <con:settings/>
      <con:testStep type="groovy" name="Get User Status for RTD" id="30780d06-a893-4fd0-88f8-d4bc2d803f58">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

USerID = callingTCase.getPropertyValue("useroid");
myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myUser.userGetStatus(USerID);

log.info UserStatus.toString();

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;

SqlStr = callingTCase.getPropertyValue("SqlStr");

UserStatusXML = myDb.SelectFromDB(SqlStr,"LP1");

log.info UserStatusXML.toString();

testCase.setPropertyValue("UserStatusXML",UserStatusXML.toString());
callingTCase.setPropertyValue("UserStatusXML",testCase.getPropertyValue("UserStatusXML"));

testCase.setPropertyValue("UserStatus",UserStatus.toString());
callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set User Status for RTD" id="562a66a3-fe6a-4ebd-994b-e313e09c6564">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();



USerID = callingTCase.getPropertyValue("useroid");
testCase.setPropertyValue("UserOid",USerID.toString());

UserSetStatus = callingTCase.getPropertyValue("UserStatus");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myUser.userSetStatus(USerID.toString(),UserSetStatus.toString());

log.info UserStatus.toString();

testCase.setPropertyValue("UserStatus",UserStatus.toString());
callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10012_RightsTokenDelete_FUNC_RTL_CS_with_Inactive_User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>UserOid</con:name>
          <con:value>EDCDDE5B724361B5E0401F0A0599682B</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Node Role" searchProperties="true" id="7c1a4b78-c25f-424e-8e51-03db58012e7c">
      <con:settings/>
      <con:testStep type="groovy" name="Set Node Role for RTD" id="33107300-88db-4172-9c3e-3075ab68f6fb">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

testCase.setPropertyValue("nodeid", callingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("NodeRole", callingTCase.getPropertyValue("NodeRole"));

myDbNode = new dbUtils.dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

nodeid = testCase.getPropertyValue("nodeid");
NodeRole = testCase.getPropertyValue("NodeRole");

rcNode = myDbNode.nodeSetRole(nodeid,NodeRole);

log.info  testCase.getPropertyValue("NodeRole") + " has been NodeRole Updated" ;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Node Role for RTD" id="9a1e3a34-21e3-4fa0-a4fb-793c08336221">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

myDbNode = new dbUtils.dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

testCase.setPropertyValue("nodeid", callingTCase.getPropertyValue("nodeid"));

nodeid = testCase.getPropertyValue("nodeid");

NodeRole = myDbNode.nodeGetRole(nodeid);

log.info "NODE Role : " + NodeRole.toString();

testCase.setPropertyValue("NodeRole",NodeRole.toString());
callingTCase.setPropertyValue("NodeRole",testCase.getPropertyValue("NodeRole"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10020 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Access_Portal_CS</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_Invocation_ByPermission_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:accessportal:customersupport</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Create Information" searchProperties="true" id="4b53319e-4197-45ab-8562-cf5ac60432e2">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML" id="add45db4-e51e-443e-855b-90e96d9f62c0">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="024460cb-f795-4d7c-8f91-0fbb1db753f3">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");
def RightsResLocation = RightsResHeader.getAt("Location");
log.info RightsResHttpStatus[0];
log.info RightsResLocation;

log.info "Response Time : $RightsResTime:ms";

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

if(RightsResHttpStatus[0] == "HTTP/1.1 201 Created")
{
def RTKLoc = RightsResLocation[0].tokenize('/')
log.info RTKLoc[RTKLoc.indexOf("RightsToken").next()];
/*testCase.setPropertyValue("rightstokenid",RTKLoc[RTKLoc.indexOf("RightsToken").next()] );
log.info RTKLoc[RTKLoc.indexOf("Account").next()];
testCase.setPropertyValue("Accountid",RTKLoc[RTKLoc.indexOf("Account").next()]);*/

def decodedRTKLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("RightsToken").next()],"UTF-8");
log.info "decodedRTKLoc=="+decodedRTKLoc;

testCase.setPropertyValue("rightstokenid",decodedRTKLoc);

log.info RTKLoc[RTKLoc.indexOf("Account").next()];
def decodedAccountIDLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("Account").next()],"UTF-8");
log.info "decodedAccountIDLoc=="+decodedAccountIDLoc;
testCase.setPropertyValue("Accountid",decodedAccountIDLoc);

//com.eviware.soapui.support.UISupport.showInfoMessage("RightsToken has been Created"); 
}
else{
log.info " RightsToken Create failed - [ " + RightsResHttpStatus[0] + " ]"
}
// Returns Rights token , Account id
testCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("rightstokenid").tokenize(':').last());
callingTCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
callingTCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreate_With_Valid_AccountId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Staging Rights DELETE</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>144F0E592E130AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2015/03/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt" ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt">         <ns4:SoldAs>                     <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>                      <ns4:ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ns4:ContentID>         </ns4:SoldAs>   <ns4:RightsProfiles>                       <ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd">                                         <ns4:CanDownload>true</ns4:CanDownload>                                         <ns4:CanStream>false</ns4:CanStream>                           </ns4:PurchaseProfile>                                                                </ns4:RightsProfiles>      <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>         <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type">                               <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                          <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                           <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>                 <ns4:Preference>3</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>                 <ns4:Preference>1</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:PurchaseInfo>                       <ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID>                   <ns4:RetailerTransaction>RetailerTransaction_1_nodeRET_RetailerNode</ns4:RetailerTransaction>                       <ns4:PurchaseAccount>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</ns4:PurchaseAccount>                       <ns4:PurchaseUser>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</ns4:PurchaseUser>                             <ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime>            <ns4:TransactionType>urn:dece:type:transaction:category1</ns4:TransactionType></ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>278</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Request" searchProperties="true" id="abbec9ac-e279-4db8-94b9-0efc994d0a9f">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="63ba1e92-df1c-427a-bac4-49e34eb96f29">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
//testCase.setPropertyValue("nodeid","0701");
//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
//headers.put("Authorization","SAML2 assertion=zVdJk6rKEt77KwzPssNmUJzidN8oxkZFBcFph0UJKINSIOivv4W2HrvP/N5bvEVHW0lm1peZX2Vlff2nCIPqESXYj6OXGvNM16oogrHjR+5LzTLleqf2z2vlK7bDgO0BjFGSEs2qKr7UIAfXTY7p1jkHsfUmbHTrdmdj1xtduKHbzfWa7cJaVcU4Q2qEUztKX2oszTB1ulVnOibd6nHNHsM8c1xzVavObhjYEgNBFeHeZdeXWpZEvdjGPu5FdohwL4W9KdCGPaLZs2+Qaq/vIC8bJtTrVwf3pr4b2WmWoHeHDn6peWm671FUnufPeeM5TlyKpWmaorsU0XGw736pkYDfjZGjRpv4uhbsKI58aAf+2S531FDqxU4VBG6c+KkX/sQ1QzF06bqOCliHTDP6UqO+bXBB94eePoBMsF3Hns3cnBlogxJSOlS1DPWl9uWPqnM1NRM7wps4CfGn9d8hQtERBfEeOXV8C+wG7s89/iBbr18R7KkRDDLsH9GopMDehghXJwna+MXQx4RYDq5eyl8t8I09CP5NRb5SjzgJbOoHmRF9F+H0PynXY6muXmZ2kKFX8NQdthZDn2nuOKvNtU5spzD2K66ZxC8XCI/KV1D3Sr+vP/P0Tqt3I8tm1/suNd7S6TDeHncQGFjx/aHmSG/FErvmvCWnvpDussMM5EtLSmm4VrZcs6/EIE83whGrihu3Y8qElcPIYgehiZyx48AJL7QmKLbEaBW2AZaVnDl0DmEWdeSA0QYyT4+H4XSQ8+5yjhJx5e/bUmOqupQ4TFDBVvJRzHHDRTiAXe/cga21aL18i+kxhjKuATpdgix/Lzi6K9qpfV8IZRfYkNOZoldNVcXsLAjgNHVBrvLAJX9bMOLd3cHb+Uo3p3mg6zIQBT7YSkMN7BTAWBLvacJsphXCGfR5dzQjhmYFBCteM6RczJfiTNffpNwzHWV2WitBtjpLIw3gi7HgaZIhzUTDlDQNxFdZoYlrpdhqUy1X9aVYIQ5EqdifHaWbIqXwIaty2pRjl1MuWy1mRC6fhuHouDalQBM0RZgelKm6boi61AfGcg5ZOSO252G4jytLi38w6u/RFiA5p8me4KyZu1wzLXYkGvZFZn6UaarS13ScC/olKqUi5f2Zdf6WC4HXBCeUCskEk2suoCnII3q16GN7zkWaAXLRvRgPpNwZ34BoOp1XhGuuhlJuSIY1kjVDzSVwkYlSHuA1O/LWineEDb3om2D7WBhBl+ZyRL5HxhGeuEPFVmSwDmcMbBge9DnfXsS5u+rkor7sD+KVStyMgC7xvA4IIBqUoZH882DIz7jx3u+yPhpu5DhEXlLRmHiwO54LuuM3xu5kNOfEza49UfxJw3Y8Sg0gu23sgKoiZ8B4uu0YS8oQI//cGg+sBfKT5TkdcTrT8jtcxZhn1kKMg7bztlhag6diCXVzPJla88m5KEaHbeccpG9j/i2Z9jXRHY8QmmD4RNG2zJsdkROWb1vCp41BI64CXI0HQNm6ruQTAvNv2ysJ3wxNIuQFmpArwlxQpkBRniSVF3V9I3vMBCqzzGJGmio5AUnTabkwgspK4EVSKdqer/ZLVqZXJnAuzvSmJLu6xT31F2iljwJzloJ8P9tEDEMre/1to+Uu1EoGOGo+5ckp4iuZCix7vO/TxWDWopmD7gT9aRdYjWLK7oqx565OO3e1I0VZPhydpQmCmfnAMZVQbF7RTcnQQOd63gpNtRpGAMNivw5hIZqkZhfj2OQlQ9ZpqxBFMLjKsAnYAi/P0lYTpIt9BRSaTWhxXC88vIxG/tiUMkLa7IEu2zVL/5ZjJcUqHzl2EIAOPnNMunJMApvDk9oRGcy1hD2e5y6vSAe9PRv2u3taXwx3Ff5JptzUD5rjqJObg6c5c8rb3lafz7uq6AlP0WbpNdYpT9tnqKP+rq34xk6MWs3gpA01nbN8KjjRW3TI8bAyUplIaqRnmeom2RMfrvzwfG40WSucTLOjatkDzJy89WHezbeTtxZFJcqJO7dXR11exHB5vUc+N8m78NpGqccG+6ED3+aqabbeIpjeluU9rIpVmVyOdvrzGY15Zi4S36lvLqq9LMJ7BAkM5NReSzMHQdTLyBjnOz1ydV7XgOt2+W63xcgSy4CGKNFNmpFpQLdLoQS+Uo8wPmEU4mjjl5uVo+r1tv71FAnD3hrZCUpqv/BUJqqqRgYZP+IIIzN+qWHSVbLIP2QkPo9cyrXqKE7H0TgBmxQll3GX/fG4a5AU7H1UzsQPwwMq7HAfoGcYh5QNYZxFKSY/8GU++Smwz99uMRAdxy8VcAmLR6QA6PMI3mj3GjdMf4j95h5kjl+OISQhaeLDK5KPn14fYivL+hzFDnoua3iDfNf8U8vO95bUL/BQn1Nx38g5+g/b3p4RqkjGq1fAC6J09/vx22cLMm6X4hIvJoCvYFFGHjzJ89o/U/cXCv6HvJrsNXTQd57ffdzlH7FlqRdNU3JoQ8KX6mX5+wfVB2sSfoqK9EcyISAAy81/+cqCPVjqEfGE/MvjxPmW9R/4+tHHj8J7PHdMKSnaOkvRz79Uy8P+Uns/GL5TuwhuHeiBMI/pFyVBosDVRBVr3zm9DJjvL4YC//TFsNCGU+ih0K7ddf3fK9f9S50gaQxEv5ee9gR/QR62ZPPIfWh/95geOmCzK7MdXmZbtMxyzc69A5LOSLOtewf8GMnrd+LvJf9F7pPb2+Nvsm9I8v9d5oEs8gLDNsg12mj+T1L5+Uy//gs=");

testRunner.testCase.getTestStepByName("RightsTokenGet byTokenID").testRequest.setRequestHeaders(headers);


//SetUp test properties

testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}	
else
{
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
}	
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",testCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="998d8ba0-6c0e-4c86-aa9f-3ceee7f75c21">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenGet byTokenID");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of RightsTokenGet.d" disabled="true" id="fa6d2717-203f-4f4a-a739-1be1766d57e5">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="a90fef60-121c-4a45-90a9-745101e80745">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>schfau1</con:username>
              <con:password>Password1</con:password>
              <con:domain>DECE</con:domain>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:B63430FA5E97FC0EE0401F0A0599303B"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID" id="c2633f9f-911d-41a9-8526-118e19c952c5">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet byTokenID" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#Query_HostName}</con:endpoint>
            <con:request/>
            
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet.d" disabled="true" id="efc50424-d17a-42a1-8871-c18f7542a9cd">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdbd6LKEn73V7jcj1kJDXhfk6zVXCSoqCBeX86CpgUUQWkQ9NefBqNjMpnZc85Dol3W5auqj6L6B7H2AdeFhOA48aOwqkqvNauN7U5nU3+2WvRfHTn0m8Vvnh27bndQx+6AFqhVVUJSrIYkscLktcYBln0G7WeWMznQrXe6oPPS5hvrWnWOY0I9U5UXapXvg5B0y6ivtTQOu5FFfNINrT0m3QR1p1Abdqlm17pBqr39uIIsA8ZvXpIcugyDXhyMcBCgFxTtmR/MJ50fDulOfTe0kjTGHzEd8lr7sM2y7CXjX6LYZTgAAAM6DNVxiO/+U3ur3Iyxo4ab6HoWrTAKfWQF/sUqQGk48SKnCgM3iv3E2//GNcuwoHD9jHP0jNh6+E+N+RmgRPeXnj6BjIn1TDyLvTkz8AbHOES4OjPU19o/f9XAq6kZWyHZRPGefDn/b4hweMJBdMDOM7kldgP39x6/qdbbD4y6aoiClPgnPCpYcrAQJtVJjDd+PvQJ5Z5DqmX3qzm5EQyj/6UjP5hHnBQ2801lJN/FJPl/2vXYqquXuRWk+G0+lXnD1MU4Qjo4eW19rfCsl537LngtITwqX0HdO/1x/srTO60+jJy+xIt2OAdrbpjBgXWaxJ41Rk/ntWYtVqN56/ykjVOFjzxWH0dq22LqYMgN08WJG0s4HUSzdmhrzWRzPlgVsX8MhfOJxYFk8HJoGO9y1OgnhrHltkEH12O0ZNvLpYHwYChMlHoGNu/Y7i22uNUXeH+pEjRpGVMw8kir0hyHiglW6VqUg8yPmvWn7PVnTo85FHkN8LlMsvi+bICOZCXW/SAWg2JDn84Ev2mqKqUXUYTnqQszVYAu/dvCkeDujt7OVzoZEKCu96AkCsFWHmpwp0B2JgueJs7nWi5eYF9wR3NqaFZgsBY0Q86kbCXNdf1dzjzTUeZnWwnS9UUeaZCUxqKnyYY8lwxT1jQYXWW5JtlKvtWmWqbqK6lCHUhyfrg4SifBSu4jTm1o0wa3mjbS9XJO5b3zcD862aYcaKKmiNOjMlVtXtLlPjRWC8T1Ump7Ge4PUWU1Ex6M+ge8hbiXARoTXjRzl2nmjBtJhlXKzM8yTVX6mk4yUS+zUipy1p/PLj9rIQqa6OzlXDbh5FoLZIq9EVgv+8RaNELNgJnklsYDOXPGNyCaDrKKeK3VUM4M2ZiNepqhZjIsZZKcBcTmRp6teCfE63nfhNvHxoi6vOiF9PfQOKFz41ixlB6093MW8YaH/IZvLaPMXbczSV/1B9FapW5GUJcFQYcUEIBFarT+AhwK88b44Hc4Hw83vWiPvbiisdFgd7rkoO3zY3cyWjSkza41UfwJbzkeowaI2/I7qKrYGbCebjnGijGk0L80x4PZEvvx6pKMGjrb9NuNirFIZ0spClrO+3I1GzzlK6Sb48l0tphc8nx03LYvQfI+Ft7jaV+T3PEI4wlBTwyweoLZlhri6n1L+bQxAG5UoKsJECpb15V9SmDhfXsl4buhyZS8UBMzRVyIyhQqypOsCpKub3oeO0HKPJ2xI02VnYCW6bxaGkFlLQoS7RSwFuvDiuuBtQmd0plel3uuPms89Zd4rY8Cc57A7DDfhCwLlIP+vtEyF2kFAxw1mwr0KRIqqQpn1vjQB/lg3gTsUXeC/rQDZ3w+5Xb52HPX55273tGmrB4enZUJg7n5wDGVUmxR0U3Z0GD7+rzlmjrjjQDt84O9R7lk0p6VxpEpyEZPB7NckuDgKiMm5HKyushbTZRL+wrMNYvS4mQvPbIKR/7YlFNK2vSBLlubA//KsYJilc8cO4pQh185Jl85JsPN8UltSyxpNMUDWWSuoMhHvTUf9jsHoC+Hu4rw1GPcxA/q47CdmYOnBXvOWt5WXyw6quSJT+Fm5fF2IgDrgnTc37UU39hJYbMenLWhpjdmPhOcwRYfMzKsjFQ2lPnk0mM6cfok7Nf+/nLh69xsP5mmJ3VmDQh79uzjopNtJ+9NhomVc+PSWp/03jJCq+t75OuQvAuvY5R5HLCfJvBt9Zqm9haj5HYs3sOqVO3Rl6OV/HmNKyS+87wpVbuHYhckCQ6T2lthVaxw3ZQuer7TpW/O6xnWOz2uLfS4JlvnGvW2DOqA7QEIGp0O4Jq92653RfEFohiFG7+IVSyz15f1nwGifdfGVozj2h88FXWqqqFBt48oJNiMXmv/sW0A7A3PI9uyWdxptC3QBnWeb7VtvmnbLN+kuOus3eZr1VGUjMNxDDcJjh92Zf7rrmxg5B98XCzUH2sFSWhNjtYpTQL25WS9hDilG3dcLL1drt5uMMTfHwJcIGf2kZMG+OXgHcoKMeT6yT1biJRSB2+sNEieyaFcen6b7tffbpWhOo5fKJAiIwHTruJfVv92t3FL55e0uW+vCDf3MHX8YrehZU5iH12RfP7pJ2sKutwpA1qd9g3zXfWvTTu/mjJ/QMR8LcY9knPyH+LeLjB0J6drW3lvIbSjR+vl+JKeTmnZw1axksbUPcMygJlilNK18mxGOxwydw/M3yz0d8xf4t7ln9GliRdOEzoN9pRu1fL475e5T9a0AAnOk+9kYkCvb0XwP97wUBcVelQ8oR9ZFDs/6/6Nr4c4FHIxyfzQLU7FJn7+3N6Px6SLIurVp8Msih99f2f/XezPwnu57lASygo7TfDvf6kWU4peqRGK0jBRpVopeJycJebkfMDdn0q/uClX4Y+7Tf67iyzLLLXhFHl4b9Xuuv6/Kz/7ZeMRplbEL7G81nJ6S6fBQ/dhUn8A/H5Yg943wxreC/gpk7dfxL9KHmr6ldlv/wU=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="c5208353-bc0b-470a-82b0-07423a7e5e36">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of DevAuth RightsTokenGet.d" disabled="true" id="b2885a05-94c8-4cb6-9b15-6117cb74c646">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of DevAuth RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdZc6rMFn33V1iex5ShAYlDJalqBhEVFcQB3xBaQBGUBkF+/W00ekxOzvDdh5TpzR5W7726Wbxiax8wHYgxihM/CquK+FYDlsO9rFlQbzXaVr3BNFB9vWm16i2LBQ6grSYLQK2qYJwiJcSJFSZvNQbQTB3QdRoYDNth6U6DeW5yzVWtOkcxJpmJyzOJyvdBiDuXqm+1NA47kYV93AmtPcKdxO5MoTrsEM+OdYNUe3+9grwUjN+9JDl0KMp+dpCNgsB+tqM99Up98nl1cGfqu6GVpDH6qOngt9pHbJZlzxn7HMUuxQAAKNCmiI+DffdH7b1yC0aOEm6i61qwwij0bSvwC6sEpaLEi5wqDNwo9hNv/5vUNEWDMnUd5Xbdphvhjxr1s8AF3T9m+gQyxlYdexZ9S6ajDYpRaKPqTFfeaj/+aYDXUCO2QryJ4j3+sv5viFB4QkF0QE4d3zZ2A/fvGb/p1vsrsjtKaAcp9k9oVLLkYNkIVycx2vj50MeEew6uXqZfzfGNYMj+LxN5pR5xEtjUN50RfRfh5P8Z1+OorlnmVpCi97E8zOaDkavJ4jYeqGi1hC1OxwzMwNsFwqPzFdR90h/rrzy90+ojaA5aqD1yJdtd6yFF+SDYCuexuVjJ+w1j8ttCMMWCdjgA+9TGb5vdKewphxDs5kPmHBVjf4bBuAUU3386VGzvOOkpCFMDdz6OT4XGnLxDlzmfZ9yot+bxjFvx1MYQ2TGL2q2pZZtFcdTT7bi/SoZmPjalXoORsoNNJ43KqcFtBZ/nGDoyqbF9CBjp7eeeHvdQ7muAzpdNlv8vOdAWrcS6L4TyotiQ05mgd1VRxLQQBHieujBTeOiSvy0c8e7u6O18uZ0BHmpaF4oCH2yloQp3MqRnEu+pwnyu5kIB+7w7mpNAowKDFa/qUiZmpjjXtJ6UeYYjz89rOUhXhTRSIb4EC54q6dJc1A1JVWF0teWquJbzrTpVM0UzxQpJIEr5oXDkdoLk3LcZhVOnHGNOuXS1nBN79zzcj05rQwpUQZWF6VGeKmtW1KQ+1M2FzXRTElsM94eoYs74h6D+AW0h6maA1ISFauwy1ZgxI1G3Ljbjs01V5L6q4UzQLruSK1LWn8+Kn70QeFVw9lIuGXBy7YVtCN0RWC372FpwoarDTHQvwQMpc8Y3IKoGsopw7dVQynRJn426qq5kErzYRCkL8JoZeWvZO9mslvcNuH0cjKBJi25Inof6yT5zx4old+F6P6dtVvdsn/OtZZS5q1YmamZ/EK0UkmYENYnnNUgAAVhujfSfh0N+zo0Pfpvx0XDTjfbIiysqHQ12pyIHLZ8du5PRghM3u+ZE9ies5XiUEtjMlt1BRUHOgPY0y9FNShdDv3gZD2ZL5MdmkYw4jX7xW1xFX6SzpRgFTae3NGeDp9y0NWM8mc4WkyLPR8dtqwiS3pjvxdO+KrrjEUITbD9RwOryRkvkBLO3JXza6ABxFeiqPITy1nUlnxCY722vJOzpqkTIC1Uhk4WFIE+hLD9JCi9q2qbr0RNbnqczeqQqkhOQNp3NpR5UVgIvkkkBa7E6mEwXrAzoXJJpDanrajPuqb9EK20UGPMEZof5JqRpIB+03kbNXFstGeAo2ZQnp4ivpAqcWeNDH+SD+Qugj5oT9KdtOGPzKbPLx567Ou/c1Y4MxXw4OqYBg7nxwDGFUGxR0QxJV2Hret5yVZmxemDv88N6b+eiQWZ2CY4MXtK7GpjloggHVxs2IJNjs5C2qiBd4iswVy1Ci9N66WEzHPljQ0oJadMHumzXDPgrx0qKVT5z7ChADX7lmHTlmAQ3xyelJdKYexEOeJG5vCwdteZ82G8fgLYc7ir8U5dyEz9ojMNWZgyeFvQ5a3pbbbFoK6InPIUb02PXCQ+swtZQf9eUfX0nhi+N4KwOVY2b+VRwBlt0zPCwMlLoUGKToku14/SJ36/8fVGwDWa2n0zTkzKzBpg+e+vjop1tJ70XiorlM1c0Vyetu4xs8/oe+XpJ3o3Xa5R6vGA/3cA36TVN11tkJ7dl+R5WxGqXvByt5M8yrrT4Tn1zce0cSi2IExQmtfcyqpRwnZQIPd/pkDfndc2/sJzUYukXINJSu9mWQAPQXQBBs90GtNi+ab0rii8QhSjc+GWtUsxeX9Z/BmjvO14UOCiuR5v6Dp1rf0hYtqs6ipJxOI7hJkHxg+6lv+jeUlX8NtHXZ7eaxMfxSwdcluERaRv6RluzN239FQvzvQanbvmhc/Lt+1Tvqp+oRiIsLsoaEylztJ6d5/R0Sktp3WmWoikmOoSiKcBQU2SnRPmcjWiHQuqegvoXzXnb9dfCd/tneGnihdOEEHZPCFO9LP/+vfEpmvQzQXnynU0IyBdGWfyPHyF2xy79iHlCfrIodu5Yv8v1UIdALg+bH7rlqhSL55+UL7l+57sdkbQ+OXBR/Jj8uwTfFf9svPfrjiVJYn+dJuj3T6rlSXqrWbYdpWGiiLWL4fF0X3Am5wPq/HT6Jc1Frn3o7xz/Vn8v1eHU9tDeqt19/b871/3L5G1EorB/wfJWy8mXJCkeug+3yQfAxwsFtmlA0y9NmmUEhpboTxcKx8B7Az/t5P0X86+Wh55+pfb7/wA=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="f1bc91db-d525-48b7-9255-110e098291d9">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
              <con:password/>
              <con:domain/>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:A9101167132C21E1E0401F0A222259052A"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID-CaseTesting" disabled="true" id="3cfc546a-fe6a-49a7-8524-8cca9c8c6f46">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet byTokenID-CaseTesting" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdbd6LKEn73V7jcj1kJDXhfk6zVXCSoqCBeX86CpgUUQWkQ9NefBqNjMpnZc85Dol3W5auqj6L6B7H2AdeFhOA48aOwqkqvNauN7U5nU3+2WvRfHTn0m8Vvnh27bndQx+6AFqhVVUJSrIYkscLktcYBln0G7WeWMznQrXe6oPPS5hvrWnWOY0I9U5UXapXvg5B0y6ivtTQOu5FFfNINrT0m3QR1p1Abdqlm17pBqr39uIIsA8ZvXpIcugyDXhyMcBCgFxTtmR/MJ50fDulOfTe0kjTGHzEd8lr7sM2y7CXjX6LYZTgAAAM6DNVxiO/+U3ur3Iyxo4ab6HoWrTAKfWQF/sUqQGk48SKnCgM3iv3E2//GNcuwoHD9jHP0jNh6+E+N+RmgRPeXnj6BjIn1TDyLvTkz8AbHOES4OjPU19o/f9XAq6kZWyHZRPGefDn/b4hweMJBdMDOM7kldgP39x6/qdbbD4y6aoiClPgnPCpYcrAQJtVJjDd+PvQJ5Z5DqmX3qzm5EQyj/6UjP5hHnBQ2801lJN/FJPl/2vXYqquXuRWk+G0+lXnD1MU4Qjo4eW19rfCsl537LngtITwqX0HdO/1x/srTO60+jJy+xIt2OAdrbpjBgXWaxJ41Rk/ntWYtVqN56/ykjVOFjzxWH0dq22LqYMgN08WJG0s4HUSzdmhrzWRzPlgVsX8MhfOJxYFk8HJoGO9y1OgnhrHltkEH12O0ZNvLpYHwYChMlHoGNu/Y7i22uNUXeH+pEjRpGVMw8kir0hyHiglW6VqUg8yPmvWn7PVnTo85FHkN8LlMsvi+bICOZCXW/SAWg2JDn84Ev2mqKqUXUYTnqQszVYAu/dvCkeDujt7OVzoZEKCu96AkCsFWHmpwp0B2JgueJs7nWi5eYF9wR3NqaFZgsBY0Q86kbCXNdf1dzjzTUeZnWwnS9UUeaZCUxqKnyYY8lwxT1jQYXWW5JtlKvtWmWqbqK6lCHUhyfrg4SifBSu4jTm1o0wa3mjbS9XJO5b3zcD862aYcaKKmiNOjMlVtXtLlPjRWC8T1Ump7Ge4PUWU1Ex6M+ge8hbiXARoTXjRzl2nmjBtJhlXKzM8yTVX6mk4yUS+zUipy1p/PLj9rIQqa6OzlXDbh5FoLZIq9EVgv+8RaNELNgJnklsYDOXPGNyCaDrKKeK3VUM4M2ZiNepqhZjIsZZKcBcTmRp6teCfE63nfhNvHxoi6vOiF9PfQOKFz41ixlB6093MW8YaH/IZvLaPMXbczSV/1B9FapW5GUJcFQYcUEIBFarT+AhwK88b44Hc4Hw83vWiPvbiisdFgd7rkoO3zY3cyWjSkza41UfwJbzkeowaI2/I7qKrYGbCebjnGijGk0L80x4PZEvvx6pKMGjrb9NuNirFIZ0spClrO+3I1GzzlK6Sb48l0tphc8nx03LYvQfI+Ft7jaV+T3PEI4wlBTwyweoLZlhri6n1L+bQxAG5UoKsJECpb15V9SmDhfXsl4buhyZS8UBMzRVyIyhQqypOsCpKub3oeO0HKPJ2xI02VnYCW6bxaGkFlLQoS7RSwFuvDiuuBtQmd0plel3uuPms89Zd4rY8Cc57A7DDfhCwLlIP+vtEyF2kFAxw1mwr0KRIqqQpn1vjQB/lg3gTsUXeC/rQDZ3w+5Xb52HPX55273tGmrB4enZUJg7n5wDGVUmxR0U3Z0GD7+rzlmjrjjQDt84O9R7lk0p6VxpEpyEZPB7NckuDgKiMm5HKyushbTZRL+wrMNYvS4mQvPbIKR/7YlFNK2vSBLlubA//KsYJilc8cO4pQh185Jl85JsPN8UltSyxpNMUDWWSuoMhHvTUf9jsHoC+Hu4rw1GPcxA/q47CdmYOnBXvOWt5WXyw6quSJT+Fm5fF2IgDrgnTc37UU39hJYbMenLWhpjdmPhOcwRYfMzKsjFQ2lPnk0mM6cfok7Nf+/nLh69xsP5mmJ3VmDQh79uzjopNtJ+9NhomVc+PSWp/03jJCq+t75OuQvAuvY5R5HLCfJvBt9Zqm9haj5HYs3sOqVO3Rl6OV/HmNKyS+87wpVbuHYhckCQ6T2lthVaxw3ZQuer7TpW/O6xnWOz2uLfS4JlvnGvW2DOqA7QEIGp0O4Jq92653RfEFohiFG7+IVSyz15f1nwGifdfGVozj2h88FXWqqqFBt48oJNiMXmv/sW0A7A3PI9uyWdxptC3QBnWeb7VtvmnbLN+kuOus3eZr1VGUjMNxDDcJjh92Zf7rrmxg5B98XCzUH2sFSWhNjtYpTQL25WS9hDilG3dcLL1drt5uMMTfHwJcIGf2kZMG+OXgHcoKMeT6yT1biJRSB2+sNEieyaFcen6b7tffbpWhOo5fKJAiIwHTruJfVv92t3FL55e0uW+vCDf3MHX8YrehZU5iH12RfP7pJ2sKutwpA1qd9g3zXfWvTTu/mjJ/QMR8LcY9knPyH+LeLjB0J6drW3lvIbSjR+vl+JKeTmnZw1axksbUPcMygJlilNK18mxGOxwydw/M3yz0d8xf4t7ln9GliRdOEzoN9pRu1fL475e5T9a0AAnOk+9kYkCvb0XwP97wUBcVelQ8oR9ZFDs/6/6Nr4c4FHIxyfzQLU7FJn7+3N6Px6SLIurVp8Msih99f2f/XezPwnu57lASygo7TfDvf6kWU4peqRGK0jBRpVopeJycJebkfMDdn0q/uClX4Y+7Tf67iyzLLLXhFHl4b9Xuuv6/Kz/7ZeMRplbEL7G81nJ6S6fBQ/dhUn8A/H5Yg943wxreC/gpk7dfxL9KHmr6ldlv/wU=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="2125d221-e5c1-489c-a3fe-48e8b86f7956">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:a49f28bf260f2548e0401f0a0599026a"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:DEce:b6331cc03cfd1a3be0401f0a2222595915"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="BasicAuth-RightsTokenGet.d" disabled="true" id="b4a261a1-64f9-4a63-8e0c-778592e167d6">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="BasicAuth-RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="aa25319f-f138-442c-9440-2e32d3da9973">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>schfau1</con:username>
              <con:password>Password1</con:password>
              <con:domain>DECE</con:domain>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:B63430FA5E97FC0EE0401F0A0599303B"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDeleteRequest</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyLockerViewAllConsent</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>fa6d2717-203f-4f4a-a739-1be1766d57e5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Get Information" searchProperties="true" id="f120e6c0-73cf-4367-bb22-403b899fd07a">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenGet Response" id="e5be2c91-b048-4283-ba75-e4efe826dd19">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def Resp_RightTokenObj = Val_RightsResXml.children().collect{ it[0].name()};
testCase.setPropertyValue("RTObjType", Resp_RightTokenObj[0]);
log.info Resp_RightTokenObj[0];

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus[0] == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
}
else{
log.info " RightsToken Get failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
callingTCase.setPropertyValue("RTObjType",testCase.getPropertyValue("RTObjType"));
def expectedHeader=callingTCase.getPropertyValue("expectErrTypeRTGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

if ((RightsResHeader.ETag.toString()=="null")||(RightsResHeader.ETag.toString()==''))
{
testProject.setPropertyValue("ETag","*");
}
else
{
log.info "ETag Value=="+RightsResHeader.ETag.value[0].toString();
testProject.setPropertyValue("ETag",RightsResHeader.ETag.value[0].toString() );
}


//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">The account ID does not match.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001/RightsToken/urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>201</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDeleteRequest</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Error</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Response Validation" searchProperties="true" id="22c4f6ba-dd71-42d5-b9a7-58e52dbafb3b">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenGet RESPONSE" id="cbd23711-0c44-4a5b-9489-ff3cf6853009">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode","nothing");
testCase.setPropertyValue("errorReason","nothing");
testCase.setPropertyValue("errorID","nothing");

def QAResp_ErrorID;
def ValerrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));

testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
testCase.setPropertyValue("expectErrTypeRTGet",CallingTCase.getPropertyValue("expectErrTypeRTGet"));
testCase.setPropertyValue("RTObjType",CallingTCase.getPropertyValue("RTObjType"));


myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName("RightsTokenGet byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName("RightsTokenGet byTokenID").httpRequest.response.getResponseHeaders();
def errorRespType = testCase.getPropertyValue("expectErrTypeRTGet");

def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");
def Res_RTObjType = testCase.getPropertyValue("RTObjType");

log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
log.info Resp_HTTPcontentlength[0];
log.info errorRespType;

// Error Validation Flags &amp; Values


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "$DeceUrl:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";


switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport'&amp;&amp; Res_RTObjType == 'RightsTokenFull'){
               
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$Res_RTObjType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$Res_RTObjType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	QAResp_ErrorID = "ForbiddenAccountNotActive"
	ValerrorID = 1;
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;


	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
			
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID  = 1;
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = ""
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;

	case "CONTENTPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	ValerrorID = 1;
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	QAResp_ErrorID = ""
	break;
	
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	QAResp_ErrorID = "BadRequestLicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;

	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

 }


testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;

if(ValerrorID.toString() == '1') {
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError2 Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length

log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
assert Resp_HTTPcontentlength[0].toInteger() > 0; 

//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype[0];
assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10020_RightsTokenGet_RTL_FUNC_DiscreteMediaRightCreate_PERM_Access_Control_Rights_Positive</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenGet_ByRightsTokenID_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:DECDCC6C2A2911F6E0401F0A2222593AA5</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:DECDC85B1177C9B3E0401F0A05992F94</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:DECDCC6C2A2911F6E0401F0A2222593AA5" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenFull ContentID="urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt" ALID="urn:dece:alid:file:RTGET_R3_EXAMPLE_ALIDVersion_244299.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <DiscreteMediaRightsRemaining FulfillmentMethod="urn:dece:type:discretemediaformat:bluray:packaged urn:dece:type:discretemediaformat:dvd:cssrecordable urn:dece:type:discretemediaformat:dvd:packaged urn:dece:type:discretemediaformat:securedigital">1</DiscreteMediaRightsRemaining>
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2013-06-10T13:32:12.090Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") ModificationDate="2013-06-10T13:32:12.095Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <PurchaseInfo>
         <NodeID>urn:dece:org:org:dece:222259</NodeID>
         <RetailerTransaction>transcation</RetailerTransaction>
         <PurchaseAccount>urn:dece:accountid:org:dece:DECDC85B1177C9B3E0401F0A05992F94</PurchaseAccount>
         <PurchaseUser>urn:dece:userid:org:dece:DECDC85B1186C9B3E0401F0A05992F94</PurchaseUser>
         <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
      </PurchaseInfo>
      <RightsLockerID>urn:dece:rightslockerid:org:dece:DECDC85B117FC9B3E0401F0A05992F94</RightsLockerID>
   </RightsTokenFull>
</RightsToken>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value>nothing</con:value>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value>nothing</con:value>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RightsTokenFull</con:value>
        </con:property>
        <con:property>
          <con:name>QAerrorID</con:name>
          <con:value>null</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Pem" searchProperties="true" id="ede399c4-6e38-4548-81d9-06051c9fd59b"><con:settings/><con:testStep type="groovy" name="Set Pem" id="c4447a82-e5e0-4589-b5b1-1c030c151e9b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenDeleteRequest</con:value></con:property><con:property><con:name>sName</con:name><con:value>Common Test Steps</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDeleteRequest" searchProperties="true" id="f5444885-2082-4441-95d5-2a6b9e4b457e">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="e5ffb661-8c21-4fc0-83b5-5a7a1a3d9b00">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
testCase.setPropertyValue("assert",CallingTCase.getPropertyValue("assert"));

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

//SetUp test properties
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));

if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}	
else
{
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
}	
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsTokenGet API to have the ETAG" id="a2f44739-0007-45b1-9d94-7c59e969383f"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

//Extractthe Response and Set the ETag Value at the Project Level Properties
RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request

def headers = new StringToStringMap()
headers.put("If-Match",etagValue);
//headers.put("Authorization","SAML2 assertion="+ testCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Exact the ETag Details" id="a2ee37ff-0f54-4037-9caa-d60d034a41e0" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//Extractthe Response and Set the ETag Value at the Project Level Properties
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request
if (etagValue.toString()!="null")
{
def headers = new StringToStringMap()
headers.put("IF-Match",etagValue);
//headers.put("Authorization","SAML2 assertion="+ callingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
}
assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="pem set" id="39c35bc0-d9ba-4150-b332-e251c7b6f114">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDeleteRequest");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenDeleteRequest" id="0e8ae918-ed71-4b0a-a0da-2dd8a5c28f0c">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="If-Match" value="*" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="restrequest" name="RightsTokenDeleteRequest_with_NULL_trxid" disabled="true" id="e70a9a19-1ae3-45d5-afad-68e89b58c23c">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest_with_NULL_trxid" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdbd6LKEn73V7jcj1kJDXhfk6zVXCSoqCBeX86CpgUUQWkQ9NefBqNjMpnZc85Dol3W5auqj6L6B7H2AdeFhOA48aOwqkqvNauN7U5nU3+2WvRfHTn0m8Vvnh27bndQx+6AFqhVVUJSrIYkscLktcYBln0G7WeWMznQrXe6oPPS5hvrWnWOY0I9U5UXapXvg5B0y6ivtTQOu5FFfNINrT0m3QR1p1Abdqlm17pBqr39uIIsA8ZvXpIcugyDXhyMcBCgFxTtmR/MJ50fDulOfTe0kjTGHzEd8lr7sM2y7CXjX6LYZTgAAAM6DNVxiO/+U3ur3Iyxo4ab6HoWrTAKfWQF/sUqQGk48SKnCgM3iv3E2//GNcuwoHD9jHP0jNh6+E+N+RmgRPeXnj6BjIn1TDyLvTkz8AbHOES4OjPU19o/f9XAq6kZWyHZRPGefDn/b4hweMJBdMDOM7kldgP39x6/qdbbD4y6aoiClPgnPCpYcrAQJtVJjDd+PvQJ5Z5DqmX3qzm5EQyj/6UjP5hHnBQ2801lJN/FJPl/2vXYqquXuRWk+G0+lXnD1MU4Qjo4eW19rfCsl537LngtITwqX0HdO/1x/srTO60+jJy+xIt2OAdrbpjBgXWaxJ41Rk/ntWYtVqN56/ykjVOFjzxWH0dq22LqYMgN08WJG0s4HUSzdmhrzWRzPlgVsX8MhfOJxYFk8HJoGO9y1OgnhrHltkEH12O0ZNvLpYHwYChMlHoGNu/Y7i22uNUXeH+pEjRpGVMw8kir0hyHiglW6VqUg8yPmvWn7PVnTo85FHkN8LlMsvi+bICOZCXW/SAWg2JDn84Ev2mqKqUXUYTnqQszVYAu/dvCkeDujt7OVzoZEKCu96AkCsFWHmpwp0B2JgueJs7nWi5eYF9wR3NqaFZgsBY0Q86kbCXNdf1dzjzTUeZnWwnS9UUeaZCUxqKnyYY8lwxT1jQYXWW5JtlKvtWmWqbqK6lCHUhyfrg4SifBSu4jTm1o0wa3mjbS9XJO5b3zcD862aYcaKKmiNOjMlVtXtLlPjRWC8T1Ump7Ge4PUWU1Ex6M+ge8hbiXARoTXjRzl2nmjBtJhlXKzM8yTVX6mk4yUS+zUipy1p/PLj9rIQqa6OzlXDbh5FoLZIq9EVgv+8RaNELNgJnklsYDOXPGNyCaDrKKeK3VUM4M2ZiNepqhZjIsZZKcBcTmRp6teCfE63nfhNvHxoi6vOiF9PfQOKFz41ixlB6093MW8YaH/IZvLaPMXbczSV/1B9FapW5GUJcFQYcUEIBFarT+AhwK88b44Hc4Hw83vWiPvbiisdFgd7rkoO3zY3cyWjSkza41UfwJbzkeowaI2/I7qKrYGbCebjnGijGk0L80x4PZEvvx6pKMGjrb9NuNirFIZ0spClrO+3I1GzzlK6Sb48l0tphc8nx03LYvQfI+Ft7jaV+T3PEI4wlBTwyweoLZlhri6n1L+bQxAG5UoKsJECpb15V9SmDhfXsl4buhyZS8UBMzRVyIyhQqypOsCpKub3oeO0HKPJ2xI02VnYCW6bxaGkFlLQoS7RSwFuvDiuuBtQmd0plel3uuPms89Zd4rY8Cc57A7DDfhCwLlIP+vtEyF2kFAxw1mwr0KRIqqQpn1vjQB/lg3gTsUXeC/rQDZ3w+5Xb52HPX55273tGmrB4enZUJg7n5wDGVUmxR0U3Z0GD7+rzlmjrjjQDt84O9R7lk0p6VxpEpyEZPB7NckuDgKiMm5HKyushbTZRL+wrMNYvS4mQvPbIKR/7YlFNK2vSBLlubA//KsYJilc8cO4pQh185Jl85JsPN8UltSyxpNMUDWWSuoMhHvTUf9jsHoC+Hu4rw1GPcxA/q47CdmYOnBXvOWt5WXyw6quSJT+Fm5fF2IgDrgnTc37UU39hJYbMenLWhpjdmPhOcwRYfMzKsjFQ2lPnk0mM6cfok7Nf+/nLh69xsP5mmJ3VmDQh79uzjopNtJ+9NhomVc+PSWp/03jJCq+t75OuQvAuvY5R5HLCfJvBt9Zqm9haj5HYs3sOqVO3Rl6OV/HmNKyS+87wpVbuHYhckCQ6T2lthVaxw3ZQuer7TpW/O6xnWOz2uLfS4JlvnGvW2DOqA7QEIGp0O4Jq92653RfEFohiFG7+IVSyz15f1nwGifdfGVozj2h88FXWqqqFBt48oJNiMXmv/sW0A7A3PI9uyWdxptC3QBnWeb7VtvmnbLN+kuOus3eZr1VGUjMNxDDcJjh92Zf7rrmxg5B98XCzUH2sFSWhNjtYpTQL25WS9hDilG3dcLL1drt5uMMTfHwJcIGf2kZMG+OXgHcoKMeT6yT1biJRSB2+sNEieyaFcen6b7tffbpWhOo5fKJAiIwHTruJfVv92t3FL55e0uW+vCDf3MHX8YrehZU5iH12RfP7pJ2sKutwpA1qd9g3zXfWvTTu/mjJ/QMR8LcY9knPyH+LeLjB0J6drW3lvIbSjR+vl+JKeTmnZw1axksbUPcMygJlilNK18mxGOxwydw/M3yz0d8xf4t7ln9GliRdOEzoN9pRu1fL475e5T9a0AAnOk+9kYkCvb0XwP97wUBcVelQ8oR9ZFDs/6/6Nr4c4FHIxyfzQLU7FJn7+3N6Px6SLIurVp8Msih99f2f/XezPwnu57lASygo7TfDvf6kWU4peqRGK0jBRpVopeJycJebkfMDdn0q/uClX4Y+7Tf67iyzLLLXhFHl4b9Xuuv6/Kz/7ZeMRplbEL7G81nJ6S6fBQ/dhUn8A/H5Yg943wxreC/gpk7dfxL9KHmr6ldlv/wU=" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:B6ACE7F48352D3C9E0401F0A059915EC "/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10018_RightsTokenDelete_FUNC_RTL_with_Invalid_AccountId without DST</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenDelete_without_DST</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
      <con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">The account ID does not match.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E437001/RightsToken/urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>201</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>ETag</con:name><con:value>*</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1584ee73-97f2-474b-955f-c1c6f5a8ea91</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71721bdd-13aa-4a9d-b861-704bd42cc7b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase></con:testSuite><con:testSuite name="Setup" id="d0a5018a-e545-438b-8b0c-0025aa2a81ee" disabled="true"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="31187ede-16b4-4b78-9f3b-8cbb935a43b4"><con:settings/><con:testStep type="datagen" name="AccName" id="0a820c3f-4de1-4474-978d-feb81f10687e"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Rights_Account_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="f062ac09-02a3-41fb-a6d2-d02449f51b55"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" id="1faba15c-dfed-4b9b-a263-dc0bcbc3b4d6"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="e5b4dfd7-790b-469e-8eb1-d3e64474c96a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>${#Project#NODE_OID</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete" searchProperties="true" id="82647afa-e8a7-4271-9022-283ea1d7df77"><con:settings/><con:testStep type="jdbc" name="Delete_Account" id="6d6e8d23-3c68-46b2-95ba-8d25b5160cf9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
accountid ACCOUNT.ACCOUNT_OID%TYPE;
newsfeedid NEWSFEED_EVENT.NEWSFEED_EVENT_OID%TYPE;
BEGIN
select ACCOUNT_OID into accountid from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}';
--select NEWSFEED_EVENT_OID into newsfeedid from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from RIGHTS_LOCKER where ACCOUNT_OID = accountid;
delete from NODE_ACCOUNT where ACCOUNT_OID = accountid;
delete from DRM_DOMAIN where ACCOUNT_OID = accountid;
delete from ACCOUNT_STATUS_HISTORY where ACCOUNT_OID = accountid;
--delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID = newsfeedid;
--delete from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from ACCOUNT where ACCOUNT_OID = accountid;
END;</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ACCID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="fbac34b2-4730-4d51-b491-c5c723cc5a33"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="a8d07b94-3d60-43c3-8641-037dd54b67ac"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn:dece:accountid:org:dece:[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="37412ff0-d6d7-4536-8058-ef34923b02eb"><con:settings/><con:testStep type="datagen" name="UserName" id="3a031a83-dcc7-4e16-b893-4ceed01fc758"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Rights_TokenDelete_User_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="725303f2-dd98-4f09-80e1-163ef224316e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="42b0749b-8936-4adf-a8fa-85d9132df75e"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="847f97b4-5639-425e-a91f-c6cc59d65d19"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="eee470ed-224b-4536-b601-6116ce7dee04"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="4ed45d32-46de-44d8-9e75-d5f0d4cb9d08"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Staging Rights DELETE" id="18a19c4b-475d-4d5a-bf00-ab501d39c1d6" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_With_Valid_AccountId.OLD" searchProperties="true" id="77751362-b657-48b7-b38c-96b3402229db" disabled="true">
      <con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true" id="027bb1a1-603d-4d97-bd7c-898ad3048035">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
		//testCase.setPropertyValue("username","SCHOrg1Full1");
		//testCase.setPropertyValue("password","Password1");
		
		testCase.setPropertyValue("username","jbaisakh");
		testCase.setPropertyValue("password","neustar123");
		
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenCreate Request with Valid Data" id="a49df7bc-1209-4fb6-b449-e46a5c4558e9">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties:

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

//SetUp SAML assertion in Request header
testCase.setPropertyValue("assertionAccountIdFULL", CallingTCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL", CallingTCase.getPropertyValue("assertionUserIdFULL"));

//testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("assert")); //Policy Test Suites
testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("SAMLassertion")); //Other Test Suites
//SetUp SAML assertion in Request header

TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

//testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("SAMLassertion")); 
testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("ALID","urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsBundleID","urn:dece:bid:FILE:mystudio Version_525899.txt");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:highdefinition");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:standarddefinition");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:portabledefinition");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","https://dl.bestbuy.com/p/bb93827398sdjdhds");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("PIRetailerTransx","RetailerTransaction_1_node222259_RetailerNode");
testCase.setPropertyValue("PIPurchaseAccount",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("PIPurchaseUser",testCase.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03");
testCase.setPropertyValue("VCAllowedUser",testCase.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Create request" id="15e4bc59-12a8-4bee-a281-fce5711b864d">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Created" id="c260c565-0f3e-47af-9c7e-67d455ddcc9c">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Create Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DB with new RightsTokenData" disabled="true" id="49a297e1-13ac-46dd-9cce-c18433f96897">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights Create Data Validation")

RTdataVal.setPropertyValue("TCaseName",testCase.getName());
RTdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return RightsToken Information" id="1193a6f1-8d89-4f37-98d1-b897796a59c0">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Return RightsToken properties:

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

CallingTCase.setPropertyValue("rightstokenid", testCase.getPropertyValue("rightstokenid"));
CallingTCase.setPropertyValue("DBrightstokenid", testCase.getPropertyValue("DBrightstokenid"));
CallingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
CallingTCase.setPropertyValue("RTC_rcStatusHistory",testCase.getPropertyValue("RTC_rcStatusHistory"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A1C0C00EDD42CF8AE0401F0A0599345D</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>9A9CCCF1157B8279E0401F0A05992F65</con:value>
        </con:property>
        <con:property>
          <con:name>ALID</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>0d99e6d9-2783-40a5-b9e7-4f5b0906110b</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" Destination="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php" ID="urn:dece:org:org:dece:neustar:idp" InResponseTo="540699118D0EC49827D96F32BF39A541" IssueInstant="2011-02-10T22:52:45.508Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://c.decellc.com/</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="0fb72503-716a-4247-af69-0e6760d0076b" IssueInstant="2011-02-10T22:52:45.508Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#0fb72503-716a-4247-af69-0e6760d0076b">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>rDxTH1IHVxZEgu69Ahd+QLvyYfY=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
jlaXM/Teq3A/B2h3omFiRugUvnS3PcAv5B2hTertneoQ+PJ1w1YXjvC03sEVyx/dhzuJqzwia5Ka
RYxg/JC6iJ6Vs1H8FI48LUnuJ1PmOFqon39rpW8jLAt82JEqITDtQZ0bX5xE2kz6E38I0X1rnf9Y
N+rjAhiOuiJx9/mwdvI=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="540699118D0EC49827D96F32BF39A541" NotOnOrAfter="2011-02-11T22:52:45.508Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2011-02-10T22:52:35.508Z" NotOnOrAfter="2012-02-10T22:52:45.508Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:0702</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:222259</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/0/9/SecurityToken/Assertion/0fb72503-716a-4247-af69-0e6760d0076b</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2011-02-10T22:52:45.508Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:107006</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2p:Response>]]></con:value>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>A64F159FD55FBEE7E0401F0A22225966CC</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>107002</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>9A9CCCF13ABCD94FE0401F0A05992F63</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>neustar123</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>25223</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2011/06/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1305</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:A64F159FD55FBEE7E0401F0A22225966CC</con:value>
        </con:property>
        <con:property>
          <con:name>RRSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdZc6pME773V1iey5RhUVSsk1QNq6igIK53CCOgbLII+uu/AaPRnJzl/S5SZprunme6H5pnfiaG75F9kCQwTt0wqEvcW8MgIezs2kazZ2x3zTaB483eFraaRKtNkzvcMLuw16hLSZJBKUhSI0jfGiROEE280yRJnaD6ON4nqFea6m4a9QWME5QZubzijXrhe0HSr3Z9a2Rx0A+NxE36geHDpJ+a/RmQx33k2TdukBrvP68gqw3jdydNoz6Gma8WNKHnma9m6GM/sSefn1bSn7l2YKRZDD/2tJK3xkdsnuevees1jG2MxHEcw2kM+ViJa/9ovNduwdCSgl14XbNGEAauaXjuxShByTB1QqsOPDuM3dTxf5OawAi8TN2Ehdk0iXbwo4F9blCh+8dMTyDjxGgmjkHckmlwB2MYmLA+16S3xo9/auA1VI+NINmFsZ98Wf83RDA4QS+MoNVMbge7gfv3jN9U6/0nNPtSYHpZ4p6gUrIkMkyY1Kcx3LnF2E0Q96ykXnW/XiQ3gkHzv3TkJ/aIE8HGvqkM59owSf+fdj226pplYXgZfC8EZcAvPFKeBgW1Dh060eJ1PpBHgfRWQXh0voK6d/pj/ZWnd1p9BLk0DU6qMoZtLxqZxPpCYoOJSDME67uxzxOdmSMKQ77V9lfWfBNORrORPuH2Lt8mW2dHH5PM3PUykraVM11Lz/ngRHBYoujS/miL4TonFxFdOLzJEsTAZw4MlR5cwValfE/PfG3RHfbMoaIdhu3RJT3Mo+2QWUztlZ0uapews6YuK14jX6yZUxS4m799nunxDOW5RvBcHbL8f0XhNGekxn3BloNih97OFL7LksRlF5YF55kNcokBNvrbA4WxD0fn4Ip0jjNAVQXAsYy358cyOIiAmPOMI7OLhVywFzBkbGWBAvUa8DaMrPE5l6+5haoO+NzRLXFx3opetrnwigySKph1ZF7jF5ym87IMwqutkLmtWOzlmZxL6pqroQQcX0QXS6RTKBauSUqUPKPI9YzKNqsFsgvnsa+ctjrvyawssrOjOJO2LU7lh0BbL01SyFDsZexHYW09Zx6ChhHcAyjkONoTXGT9kMv6nFQ4zahs+rNNlsShrCY5q1anEmt8PlzML5+1YBmZtXy+4HUwvdbC1FlBwTerYWIsqUDWQM7ZVfCIz63JDYis4nmNvdZqzOcar80VQdaknAeVjeNzL9mSirMVnZPZUouhDvaPjWFVfikE6HmgncwzdawZogC2/oIwW5pjupRrrMLc3vRyTl0PR+FGQmkUoPIMowIECAfl0VD9GTBmFtQkcmnSheOdEPrQiWsyEY4Op0uB99zWxJ4qS4rbHbpT0Z22DMvBJM8k960DkCRojQhHNSxtjWlc4F46k9F8Bd14fUkVSiU6bo+qactsvuJCr2sNVuv56KVYm6o+mc7my+mlKJTjvnfx0sGEGcSzoczZEwXCaWK+YLghMHqPo9j1YI/4tNNwSNWALTMAiHvb5l1EYGawv5JwoMk8Ii+Q2Vxkl6w4A6L4wksMp6o7wSGmprjI5oQiS7zloTKd1yvNq21YhkOdwo3lJlqTAr7RgVUlU9s8ejXn1MtwBTeq4umLFOTRYhcQBC5G6mAn57YplwywpHzGoLeIqWUSmBuTaIgXo0UHJ46q5Q1nNJi3ihl5KCaOvTkf7M0BNWX98OqsdeAt9AeOSYhiy5qq85oMetf3rZCleUvzTL+Itr5ZcDrqWRUc6gyvCSo+LzgOjK62RAdkkawv/F5m+Sq+BgrZQLQ4bVdOsg4Ud6LzGSJt9kCX/ZbE/8qxkmK1Z44dWaCCrxzjrxzjwe74IvU4IqE6bJQsc5sR+aPaXYyHdISrq/GhxrwImJ26XnsS9HJ99LIkznnX2avLJS1xDvsS7NZOa5syuHExVTg8dEVXO3BBp+2d5bGsUnMX8874Hh7zZFxTJCLgW+lFwOg4e2H8jetfLq02Ofens+wkzY1RQpyd7XFJ5/vpoINhsXimLt3NSRVWobm+fke+Dsm78TpGsccB+zSBb9Jrlm330Exvy/I7LHF1AX0cjfTPMq60uFZzV7n2o1ILJikM0sZ7GVVKuH6GhJ5r9dGX87oGBIvzXIfGeZzokaTA422cEHCAd2m6xVH8TetdUXyByIbBzi33KsXs9WP9Z4Cm399CI4Zx4w+ZyjrVpUBD6iMMEqiHb41uD4HjqB5B0V0e4RU6oMe0WFZoM6RAEnSjroTpJJjEYJfC+EEgt74KZA2abuTCUkV/aIkkRYU4Gqcs9YjXk/EawAzJ7LhUun2y3aOqAmBW5kcmeoCmWxyFSfoaOVElZn57jK/PbidGPpZbOiQlaAaibsFvJD1+Q/zLychvpf8tPcgst9QsqHxp7JpXJM+PPtlQ0uBOhbLlN8x316+Gp7TY1xPdd7JOrnkn9P3CgwQz0lTVpSJBlT8ar8fX7HTKqlp3S70Yo/QYgeHYDJoZ0nxnPTzAALtnwP5Fbd8xf9n3bn9Gl6VOMEvRq+ojWtSr5d9vWk/RqAApLNLvbKyH7lbl5n+8fpl9s/RD5in6ycPY+qz7N7ke9kGQyzHjBna5KmXy+bm9H3TumyHK6qJJE8aPub+L/27vZ+O9XHcoKWLFNkvh75/UyxGC7rumGWZBKnGNyvA41irM6TmC/U+nX9JUOvXj4lEkv714rOTxzHSgbzTuvu7fnZtu1XgToqjErbC8NQp0hUabB/bDGP0A+O0k5QThT5P0+STvv5h/tTzU9Cuz3/8H</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-20 19:34:21.0</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsBundleID</con:name>
          <con:value>urn:dece:bid:FILE:mystudio Version_525899.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10029 - RightsTokenDelete - Policy - BlockUnratedContent - US - MMPA - PG - with negative PG-13, R and NC-17 CID rating</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>jbaisakh</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A1C0C00EDD47CF8AE0401F0A0599345D</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>9A9CCCF13ABDD94FE0401F0A05992F63</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_With_Valid_AccountId" searchProperties="true" id="6924e324-c99d-4247-9aa7-1f010c7d62a4">
      <con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="SetUp the UserCredentials" disabled="true" id="1bf10314-192d-4fcd-b347-fa14b7126c7d">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

log.info testCase.getName();

testCase.setPropertyValue("nodetype","retailer");
//testCase.setPropertyValue("nodeid",testProject.getPropertyValue("NodeID"));
testCase.setPropertyValue("username","SCHOrg1Full1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("assertid",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("loopuntil","25");
testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get SAML Assertion from STS" disabled="true" id="a59810dd-a28c-446e-9f9c-7f7db1bf245a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetSTS = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authorization Information Extraction via STS")

GetSTS.setPropertyValue("tName",testCase.getName());
GetSTS.setPropertyValue("sName",testSuite.getName());

def runnerTC = GetSTS.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed RightsTokenCreate Request with Valid Data" id="34488e70-2b7a-4638-9f41-907517467bed">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//RightsToken Request and properties:
def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

testCase.setPropertyValue("nodetype","retailer");
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

def CallingNodeid = "urn:dece:org:org:dece:" + testCase.getPropertyValue("nodeid");


testCase.setPropertyValue("assertionAccountIdFULL", CallingTCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assertionUserIdFULL", CallingTCase.getPropertyValue("assertionUserIdFULL"));

//SetUp SAML assertion in Request header
//RightsToken Request and properties
TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));


testCase.setPropertyValue("assert",CallingTCase.getPropertyValue("assert")); 
testCase.setPropertyValue("AccountID",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("ALID",testProject.getPropertyValue("alid"));
testCase.setPropertyValue("ContentID",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby",CallingNodeid);
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03");
testCase.setPropertyValue("RSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");
testCase.setPropertyValue("PINodeID",CallingNodeid);
testCase.setPropertyValue("PIRetailerTransx","RetailerTransaction_1_node"+ testCase.getPropertyValue("nodeid")+ "_RetailerNode");
testCase.setPropertyValue("PIPurchaseAccount",testCase.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("PIPurchaseUser",testCase.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03");
testCase.setPropertyValue("VCAllowedUser","urn:dece:userid:org:dece:12222599");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsToken Create request" id="2e9dfa30-c030-4897-a02f-2b4e3dbad00a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Information on RightsToken Created" id="dcb01472-2159-4733-b06e-b35f025002fe">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Create Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return RightsToken Information" id="3c0e2163-9de3-442d-9043-0b1ec98fc0da">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Return RightsToken properties:

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

CallingTCase.setPropertyValue("RightsTokenID", testCase.getPropertyValue("rightstokenid"));
CallingTCase.setPropertyValue("DBrightstokenid", testCase.getPropertyValue("DBrightstokenid"));
CallingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
testProject.setPropertyValue("RightsTokenID", testCase.getPropertyValue("rightstokenid"));
testProject.setPropertyValue("DBrightstokenid", testCase.getPropertyValue("DBrightstokenid"));
testProject.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ALID</con:name>
          <con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>144F0E592E130AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>ns3.google.com</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_nodeRET_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:hd</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:sd</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:pd</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2015/03/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt" ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt">         <ns4:SoldAs>                     <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>                      <ns4:ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ns4:ContentID>         </ns4:SoldAs>   <ns4:RightsProfiles>                       <ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd">                                         <ns4:CanDownload>true</ns4:CanDownload>                                         <ns4:CanStream>false</ns4:CanStream>                           </ns4:PurchaseProfile>                                                                </ns4:RightsProfiles>      <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>         <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type">                               <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                          <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>                            <ns4:Preference>1</ns4:Preference>         </ns4:FulfillmentWebLoc>                 <ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">                           <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>                 <ns4:Preference>3</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>                 <ns4:Preference>1</ns4:Preference>                 </ns4:FulfillmentManifestLoc> <ns4:PurchaseInfo>                       <ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID>                   <ns4:RetailerTransaction>RetailerTransaction_1_nodeRET_RetailerNode</ns4:RetailerTransaction>                       <ns4:PurchaseAccount>urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</ns4:PurchaseAccount>                       <ns4:PurchaseUser>urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</ns4:PurchaseUser>                             <ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime>            <ns4:TransactionType>urn:dece:type:transaction:category1</ns4:TransactionType></ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>278</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:144F0E592E130AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10018_RightsTokenDelete_FUNC_RTL_with_Invalid_AccountId without DST</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenDelete_without_DST</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="TestSuite Utility Test Cases" disabled="true" id="dd017fc8-595c-4e42-aa59-7537e358eac2"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="40afe38a-9679-4a2b-8a5c-78cb6571dff2"><con:settings/><con:testStep type="groovy" name="Establish Test Case properties" id="b05ecdc2-5faa-4420-ba60-7b1d19bec129"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("expectErrType",null);
testCase.setPropertyValue("XMLbody", null);
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);
testCase.setPropertyValue("assertionUUID",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="bbadb6a7-0c4b-4672-9d40-f1855426bcc9"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="add9da18-3844-4acc-9864-63ddd497e4af"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('POST - STS');

def expXML = tStep.httpRequest.response.getResponseContent();


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody",expXML);
testCase.setPropertyValue("status",status);
//testCase.setPropertyValue("connection",connection);
testCase.setPropertyValue("contentType",contentType);
testCase.setPropertyValue("contentLength",contentLength);
testCase.setPropertyValue("contentLocation",contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="7766eff2-9e95-4b08-a45e-a955de267fef"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
def url           = testProject.getPropertyValue("Provision_HostName");
def urnacct       = testProject.getPropertyValue("urnaccount");
def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
//boolean doContentLocaton  = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/rest/1/06/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/06/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="d1cf1645-77ce-4d33-91c3-6380f33f339e"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:properties><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_3baa8ff4-f122-4b18-948d-bde8505caca6</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Retailer_Work_Flow</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01000 - STS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="91ac7cd2-1ea8-4e3a-9115-5e9738dd458d"><con:settings/><con:testStep type="groovy" name="Establish Test Case properties" id="dea6faa1-b03a-42b7-8667-a153184547f6"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("expectErrType",null);
testCase.setPropertyValue("XMLbody", null);
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertionUUID",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="57eec819-ae15-4715-9666-251fb8e4cafb"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
testCase.setPropertyValue("status", null);
testCase.setPropertyValue("connection", null);
testCase.setPropertyValue("contentType", null);
testCase.setPropertyValue("contentLength", null);
testCase.setPropertyValue("contentLocation", null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="7618e440-ddda-4bc2-8f0e-3fefe91c6982"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = callTC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
//testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
//testCase.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="fc1f4ca4-be36-4b68-9a88-782c95c7fda5"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="bhavins code" disabled="true" id="6489db4a-4627-4650-afd5-8c1c76c63552"><con:settings/><con:config><script>def XMLbody = testCase.getPropertyValue("XMLbody");

List lines = XMLbody.readLines();
List newList;
//String XMLassertion = "";
StringBuffer XMLassertion = new StringBuffer();
Integer startLine;
Integer endLine;

for(i = 0; i &lt;= lines.size; i++)
{              
     line = lines[i];
          try {
                                if(line.trim()[0..16] == "&lt;saml2:Assertion ")
                                {
                                                startLine = i;
                                                //log.info startLine;
                                }
                                else if(line.trim()[0..17] == "&lt;/saml2:Assertion>")
                                {
                                                endLine = i;
                                                //log.info endLine;
                                }              
          }
          catch(Throwable e){
                                //Do Something
          }              
}
for(j = startLine; j &lt;= endLine; j++){
	XMLassertion.append(lines[j]);
}

this.log.info XMLassertion;

testCase.setPropertyValue("XMLassertion",XMLassertion.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Extract out &lt;Assertion> XML block" disabled="true" id="d11cb70f-d2e9-4fab-854e-74d50c3357cc"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbody.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbody.indexOf("&lt;/saml2:Assertion>");

testCase.setPropertyValue("XMLassertion",XMLbody.substring(startAssert, endAssert + 18).toString().trim());


this.log.info testCase.getPropertyValue("XMLassertion");</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="c16bc329-c370-485f-8623-b9588d450e85"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);

testProject.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="ff4e1707-3eaa-42f9-bd03-f8ac41111ab0"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value>http://c.decellc.com/Pdb0CZGBUrsvWFkIuYgs3qsXOaI=NILp5IJSyPaupxlJH92/ICZ5XkLovBzBB73wfUAIErYCKQEg5pr69oEAm3JpY5vh6OAzp0c3eEAj pligdNHt+af7dbgRIKbCXYjZ6g/jnGhmtEMIur9d/kRcSdiJzYxxsLIq4xVdOiQEQcAkD1DQ/ArW GbulJlyxMr0N9E9UszU=MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85 RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5 AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=94B6AE0F85AFC20DE0401F0A222259081Furn:dece:org:org:dece:80080010https://qa.q.uvvu.com:7002/dece/SecurityToken/Assertion/eed91199-941b-4565-b26d-e9063f83fd50urn:oasis:names:tc:SAML:2.0:ac:classes:Passwordurn:dece:org:neustar:coordinator94B6AE0F85ADC20DE0401F0A222259081F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>TestSuite Utility Test Cases</con:value></con:property><con:property><con:name>status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Generic STS GET</con:value></con:property><con:property><con:name>XMLassertion</con:name><con:value><![CDATA[<saml2:Assertion ID="92d22367-197d-4773-9057-74c89ccfda3c" IssueInstant="2010-11-15T19:46:20.197Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">        <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>        <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">           <ds:SignedInfo>              <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>              <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>              <ds:Reference URI="#92d22367-197d-4773-9057-74c89ccfda3c">                 <ds:Transforms>                    <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>                    <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">                       <ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>                    </ds:Transform>                 </ds:Transforms>                 <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>                 <ds:DigestValue>NtffQXv952YAnSnOQOJsjwSVhiQ=</ds:DigestValue>              </ds:Reference>           </ds:SignedInfo>           <ds:SignatureValue>L4l13e+/2KysklswaFIS5jY23RXvukUwbkoRxnf7VV6wThY1WiwZ+D5vEDVwQXXN4dDvYfEKHzfX 7HAq7IzxtAq4MuaWPysx0W7MGQ/uyRnRxb6bRQksqLjOwKsDA9H+cRG3hlgYkIfIz1AsjbZz6rOn Spq5Md0E/NIGNK+N3MI=</ds:SignatureValue>           <ds:KeyInfo>              <ds:X509Data>                 <ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85 RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5 AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate>              </ds:X509Data>           </ds:KeyInfo>        </ds:Signature>        <saml2:Subject>           <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">94B6AE0F85AFC20DE0401F0A222259081F</saml2:NameID>           <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">              <saml2:SubjectConfirmationData InResponseTo="C1BC299971F8420086E881CD885E93FF" NotOnOrAfter="2010-11-16T19:46:20.197Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/>           </saml2:SubjectConfirmation>        </saml2:Subject>        <saml2:Conditions NotBefore="2010-11-15T19:46:10.197Z" NotOnOrAfter="2011-11-15T19:46:20.197Z">           <saml2:AudienceRestriction>              <saml2:Audience>urn:dece:org:org:dece:80080010</saml2:Audience>           </saml2:AudienceRestriction>        </saml2:Conditions>        <saml2:Advice>           <saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/dece/SecurityToken/Assertion/92d22367-197d-4773-9057-74c89ccfda3c</saml2:AssertionURIRef>        </saml2:Advice>        <saml2:AuthnStatement AuthnInstant="2010-11-15T19:46:20.197Z">           <saml2:AuthnContext>              <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>              <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>           </saml2:AuthnContext>        </saml2:AuthnStatement>        <saml2:AttributeStatement>           <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">              <saml2:AttributeValue xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">94B6AE0F85ADC20DE0401F0A222259081F</saml2:AttributeValue>           </saml2:Attribute>        </saml2:AttributeStatement>     </saml2:Assertion>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Core Identity Information Extraction" searchProperties="true" disabled="true" id="05afb9b0-6745-44ef-9144-fb39f2cd4ab2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d6a321da-a7a4-4b6d-88a6-20b001e86b43"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("username",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("nodeaccountid",null);
testCase.setPropertyValue("nodeuserid",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="c0e1b384-3d56-41f0-9669-d4868f7f15bf"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));


</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information" id="b1c85319-7d7d-4265-9d53-0524145b22c1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid
   
   


</con:query><con:assertion type="XPath Match"><con:configuration><path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:properties><con:property><con:name>uname</con:name><con:value>${#TestCase#username}</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>${#TestCase#nodeid}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="11b5be4c-c29f-4a67-9e7f-4a1673b42f08"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>accountoid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath><con:targetType>accountoid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false"><con:name>useroid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath><con:targetType>useroid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" entitize="false" transferToAll="false"><con:name>nodeaccountid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_ACCOUNT_ID[1]</con:sourcePath><con:targetType>nodeaccountid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>nodeuserid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_USER_ID[1]</con:sourcePath><con:targetType>nodeuserid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase" id="5833249b-56e7-41b5-a961-5c027d9d1082"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def toTCName = testCase.getPropertyValue("tName");
def toTSName = testCase.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = testCase.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodeid":
			case "username":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,testCase.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_01000 - STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS_Creation_Coordinator_Nodes</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>Rights_TokenDelete_User_20130920_063141</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="f89d4128-6e92-4a82-80d6-0fc5d4f725a4">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="58105210-d33c-4b88-a324-96b8ad4777b5">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1f28fb16-fe74-4893-8e4d-858c2833bfa1">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

testCase.setPropertyValue("audienceList",testProject.getPropertyValue('audienceList'));
//testCase.setPropertyValue("audienceList","");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="536f145a-fb30-40c9-80a5-294ab0e256f6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="URL_Builder_with_AudienceList" id="f516ed73-7464-4c76-ad32-f84a86577cb5"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def urlParam;

log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+(testCase.getPropertyValue("audienceList").replaceAll(":","%3A"));
//def urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");
else
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");

log.info "urlParam=="+urlParam;
testCase.setPropertyValue("tokentype",urlParam);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="dc9186a2-5033-4209-80c2-d7841686242a"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" id="cfaadafb-1927-4563-8394-72a5a1127f24" accept="" sslKeystore="RET_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:restRequest></con:config></con:testStep>
      <con:testStep type="restrequest" name="STS - POST1" disabled="true" id="17d00835-d247-4198-ae7e-55145a3c7bc7">
        <con:settings/>
        <con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST1" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="7e1a3ed8-cd55-4aa4-aee6-7c9f0d11d1d0">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert+1, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="8b06c08b-12d5-49af-9556-227e42f5c1be">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	////assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="fe9b4ef5-e66d-4074-94d1-8b0385f80c27">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="6dd6054b-cf4a-4c70-a298-7fdea3fb29b0">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>E2E_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_c198d75c-cba7-46b1-833b-60e87e7ac2ed</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword&amp;audience=urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150422_1429701882971</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/plain; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_c198d75c-cba7-46b1-833b-60e87e7ac2ed</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value>HTTP/1.1 201 Created
Date: Tue, 13 Aug 2013 13:12:47 GMT
Server: Apache
x-Transaction-Info: t=1376399567 UgowzwofmIgAAGVfJDwAAAAp urn:dece:org:org:dece:222259 10.31.153.241
Cache-Control: no-cache, no-store
Location: https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cc15420e-dbff-466f-9e67-6cfc22af731e
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/plain; charset=UTF-8

</con:value>
        </con:property>
      <con:property><con:name>expectErrTypeSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generic STS GET" searchProperties="true" id="48841a1d-dce3-412d-b2cc-239cfcee05c8">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="d0a07d12-3e8b-4d02-ba59-786ff80d8c5a">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="afa2de5a-f0d3-409b-8745-189eb4de942e">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="6846914b-f1c5-4186-afb9-2b8172a475cc">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" disabled="true" id="532876c9-ef55-4dc0-9791-2145a31f0052">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="1ccb029c-e803-429c-b16d-a6fe00534601">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="db4638ff-40c8-4384-af04-e3d49375e071">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="5da4aaf6-c1fa-44e7-806f-36d2969e5169">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="cdb76aa4-218c-4b82-ae67-b5d29e0cbf4d">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="9fcab35c-3090-4994-a413-fb16fb1f883d">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="63ee1a66-f8dd-4b6a-bfa3-10dea54a778b">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="6ac711fc-15f3-4574-87fb-6acf13c0b8be">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb5gMHgCMwbMqaekTSA0KS8ZIS+g1JaJJHPJr69kwAVyOTR58mi9l29Xn3b3kqMktj2fc2CCpLS0TmLKvVza1DJGvRRxwj2KEuCewN7Qv+p7dtn00N5EK4XdpvaArUY9cqtYxxPk6k5tYun1SmWi10you+AibEMkVTnPIKRcICqamm1aVd10dNu+tSzPdjzHKdcazlgr/QTGpW+pUja1Hag1b2pzIRaeYaxWq/KqUk7ZzLBN0zLur/pDPIcEaa3LbUZ5INba6eNyBBjiGJdxmhiXxpHOZcS9IZlRJDIGu1jRW7FMw2wYUifiZPZFK2whCuk0zY8dRFNKMIrJM1L1uQIxT6OSH89SRsQ8eTMJy1SOdVjLGloO/aIZx9DOdHSEkHGk8zmydr4GMAUGFENpNAib2pfzbi03vWWI8mnKEn58/Dc8QJcQpwuIdL5PawftfIevVKp1CdgLKY4zTpbwXZF1gTDw3W0CPt9V6ZrBlKz7hEuCrrlCZxzCOzluq9ElM+DiIxd0cDlbJz9RnEFrdDd5rGTzcD11DHbxS8CaNG66AwvCVTMHcKicC4qr3R5PSFmQaGuRbG5cGG9odIHjycgR8dd2vxMOUK86Cpf92v2d3Z2OSDa0Kt+SXuOK3GDWyUzszu/tkYlXK/Sjt7iqPa6/BSYMxu4vPA/T2bQ2ri9qo2ny7WITMJu1yTx4vAqxASK7CbM6Jk8Xg7unx99rGowfzXCC+CgYh1nfD69/rysXPcvttVnUabf5NXf/e77/Or6fBM0inQP8x7L9mx9mk0fAYn9UNAi7pZ68JSTeb2ZKQiJ9mqt6C9V8uAAqtJayUr3Dy2S7I5En73B7thynV/GdatVtW2694wRmtWJWGw2rZ/qm79f2TWaL4gRiJ6VTomKplrulzfsAceJxoBEwfZlmstNx7R2PXSRQKaQD+QhSyuE2le0ZnnFkW+vNittITCaLSjwlz6tlqpW+p+IH/cH8qQB23JKdo5Y8AEwWBFTfVrTmktdcyFI8oWUmYqu8RGUKmezsTDVZaVqvGpwkixgUUCNJoyyG8mK+yAtj8O3X1hHmuXQQ3OaP7c20Tv/tKyB1IqIUuMqlDfIW4ZXZUtkn8nbC7mHCe/d+FhH1rmQ5BSN4i+T411+WKHoUFPE7nWDYGe5hF9r/YP1R427fH15/xvahM3ywPurg46E/F7j/iaz7n81a8veT5i8tjXcoaJyyvwgULclB2P2eJie+nBGt/dt9Qlb5qZwtl1n+XB2nYjDp3lDvwTBtYwg4k1Nsc5v+BmoUXoyzVoYC+EnwQn4MMRNzOhRIQCLbSyk/nrEjDoGrHTGUbXF97gJ6FFKWTg5W8ZqsE8v9ViF+dwXGHlZ6UnwtP6uU/U38NV8HcWSeckUUhM7USa0Lmzd4gVPplshBl7JD5685eC34sbAocoFFSEJNMgFv/ympCdbUEMZpRkXY1XLB4VTNcYrNAry/Si/c5IO72OTJ/6/yOskpgEHu/5zk/tVC5qknQGcHk3kX9HQ4m0G1YXftwPQD63A4u4FTKYpyhK71QvxSclCnU463/gA=</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_c198d75c-cba7-46b1-833b-60e87e7ac2ed</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">144F3A4557B178C4E05305991F0A0AA6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_c198d75c-cba7-46b1-833b-60e87e7ac2ed</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>E2E_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_c198d75c-cba7-46b1-833b-60e87e7ac2ed" IssueInstant="2015-04-22T11:24:44.694Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_c198d75c-cba7-46b1-833b-60e87e7ac2ed"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>UWbj3uhIxf4/r+Ytexi9QDR1eIw=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>myQ7eZynd+clbU4tlHBLCIRaF5UIvL6XW2DfUiuS13KmF9MiQcrCu0c7hX2U0cwwaOFpM6jxKE0eRZ7YchIogf6Z8p6UfmK+yEr2rBihEjMIc/etuQIu8ciq+RWqjkxnEZj0IbasUEZIuLAIPkx3+F17FBrdCBBsPs7GzXHZXbE=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:144F3A4557B178C4E05305991F0A0AA6</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_ezcd21xyws2atbbp3lfizwvo" NotOnOrAfter="2015-04-22T14:24:44.694Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-04-22T11:24:34.694Z" NotOnOrAfter="2015-04-22T17:24:44.694Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:ACCESCS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:ACCESS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_c198d75c-cba7-46b1-833b-60e87e7ac2ed</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-04-22T11:24:44.694Z" SessionIndex="_c198d75c-cba7-46b1-833b-60e87e7ac2ed"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:144F0E592D2E0AE1E05305991F0A7E43</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API DHost" searchProperties="true" id="c8a232d2-0f15-4d11-a3b2-a7a3c11554c7">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="e5bd0b17-377c-4004-af40-589b5649c7f5">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="9331bea1-d044-47df-b2f1-d35ff86dae13">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

testCase.setPropertyValue("audienceList",testProject.getPropertyValue('audienceList'));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="01082862-92cf-42ef-9975-f6bffb3aee75">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="URL_Builder_with_AudienceList" id="fee7a320-d464-40fa-b10f-082464c5ff5e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+(testCase.getPropertyValue("audienceList").replaceAll(":","%3A"));
//def urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");
else
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");

log.info "urlParam=="+urlParam;
testCase.setPropertyValue("tokentype",urlParam);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="dbc9a2d3-2f0b-490a-b56c-1fdedb7f00dc"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" id="cfaadafb-1927-4563-8394-72a5a1127f24" accept="" sslKeystore="DEV_CS_1_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:restRequest></con:config></con:testStep>
      <con:testStep type="restrequest" name="STS - POST1" disabled="true" id="e099bfc4-be72-4c4b-9b48-e2de5d8b6cc3">
        <con:settings/>
        <con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST1" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="585ea9ea-c065-47fc-94a2-cb6af60ba03d">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert+1, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="e7b71758-1cad-4a8c-9918-16e76ae4e9f1">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	////assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="8f235e7a-a65f-494f-a776-13dc1f4d4174">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="606e501e-8e02-4188-b63b-517e4d830207">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS_Creation_Device_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword&amp;audience=</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425117576234</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/plain; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_8303c8f3-0eb7-4d16-8b04-536ff167be51</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value>HTTP/1.1 201 Created
Date: Tue, 13 Aug 2013 13:12:47 GMT
Server: Apache
x-Transaction-Info: t=1376399567 UgowzwofmIgAAGVfJDwAAAAp urn:dece:org:org:dece:222259 10.31.153.241
Cache-Control: no-cache, no-store
Location: https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cc15420e-dbff-466f-9e67-6cfc22af731e
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/plain; charset=UTF-8

</con:value>
        </con:property>
      <con:property><con:name>expectErrTypeSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Git\Certs\QALP1/DEV_CS_1_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generic STS GET DHost" searchProperties="true" id="c3087bec-6fc0-4557-b9ec-1f7ee6054f6c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="7051f9da-2e5f-4a40-9ba4-c64444680a00">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1d5e14d8-b83a-4a24-a58f-fdebc7a2b756">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="b09369c8-ff60-4eb8-b965-6c6bb1048322">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" disabled="true" id="2329bbb0-ac98-46f8-8a1d-380484db1be3">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="68db938f-f5fc-46f6-aebd-65ddedb996ab">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="DEV_CS_1_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="a7dd63d4-8b28-480b-ae74-841d89660f85">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="b8566601-5b04-4678-8028-fa18ae075a3a">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="b0ae5882-89aa-499e-ab64-7a453a169861">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="02d623ba-7e60-4865-8dfb-cdefc6ec7f72">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="4f878f12-f000-49f1-8369-7f519878b26d">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="9e4f14b5-2125-4676-9490-51d5f0785cd8">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVdrT+JMFP7ur2i6HzelN66NkEApu1VE16Ku+2UzTE9htJ1CZ4rVX/9OC0VA8HU1MSFzei7PuR9PGYpCw+oyBgknMZXcflv+2zQ1EzcDU9Fg0lCqvl5XmhOtqtTMehDo9cYEarosuYyl4FLGEeVt2dD0qqKZiqGP9bpVMyxTrzTM5h9ZuoWECdWCpaLJUhaFlFmF2bacJtSKESPMoigCZnFsed2LoSU4LVRikjunK5SFwaQz43xuqSqu+IAhDHEFx5F6qu7wnPrM8siUIp4msLbps7a8ln16eqo8mZU4maqGpmmq1lIFj8/I9JvcOSmFwXdpEK/eNqIxJRiF5AXloC6Az2Jf6obTOCF8Fh1Rrau6lqtWIMMK1qv0m6y+GijQfVDTDsiEIYXNkF4qu4YAEqAYpJtrty1/+1gGV7LjBFEWxEnE9t7/BgnoEsJ4Dr7CSs9KdB/XeCBcnVPAlktxmDKyhFFeJnOEgUlXCQQkGxImis9nUpF+KWPij5RVBvhf0nKqbmMV0NUD0emTKTD+mZxt52ul5RaFKXSiBO6chwe3Rp9/RNkiG5EL2tAeL1172i4gbDOvQG3SvX7vF+umttZCIzUeYZujP/dOI4i9Rv1XMLgPfrbOH389Dmchb2Y24tnM7fkPiYPDVjr7+eKe8+/PGJYOWTa+Z+oLqMQfPISTk7uzP71e/PtxTn/3z25fgmfntm6Y5Mx7SLXGeRj98M/ZucDfg8Uv8/4mfMnsl6r2c0xG9t3ldHjfm96N5mPeNdPF9UnrRzQJvg8WT/GdEy2G58Orm/arT9s+7BLLkeClkwfAvHzm5eH2pYHIF+Lvj5ecQnwlKFiteT6jGAfK5U4ulY8WKxUDiPiWSObqPagZut53BqKJWppd7TlaVdMHWlertVqC5pQzaIViD6Id04DktvIpu6qf9wHiyGJAfUiUZZziGTD5HY19xJHk0mvRHDFlMI7FFNcGrVrV7FabhtnT7brT7LZajlbvV1vVnun067I0ivklvUy6AYdkd4K3dib4NWAyJ5CP+bzOmSh0xkVIFmiZ8lCvLFGFQioWQZLPYsuoNmsqI9E8hBywGsV+GkJlPpsXAVLZ6tdQEGYFte/c/rW9v3rRhEd93P9WhkPw+CRnYLlDPRAphQP7yCi9Oeq1YWx7Xarvpj7Je03ElicEr5DsfnotmbxWNvXStW3Hs70S9ob7H6Q/K9wfdr2rr8gW+fisgs+b/prh4Re8Hn7V62tn/KWgrXvgrbj6Th2q+y2wseYvyZbt8pYS54FYHp2yixeosqiky2Va9G0jX4yJUK/qqtZQPcCp2G7P4/gRqLpRoX7ouNig3rO8oe/iS/mMehxxiMSUkYrnBy5LD1h+WbpiSmYfPVt3TIq4ccj4IZodigM0R/zujYotnPMJ8pX4eYoT/zVdB3Rt2RF+inOSEzrNX/kZ8XykMnAs1BKx9+JkW/khBYeM7xI3Qd5g4aKaJimH41+kfKG1ZYRxnFLu9uWCsL1kC5z8eQ7WK9MbNcUiX19mGTt6mf2+GHpi3UVI3vCS/2dWSFEuGOT8ACywtOVM/KMhjNPp1lJfAzyy12vv7fVdTzpvyG8pWzHd74fOfw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_8303c8f3-0eb7-4d16-8b04-536ff167be51</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F5211DEF53650C4BE0401F0A0599536E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F5211DEF53690C4BE0401F0A0599536E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_8303c8f3-0eb7-4d16-8b04-536ff167be51</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3490</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>DEV_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS_Creation_Device_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:F5211DEF53650C4BE0401F0A0599536E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:F5211DEF53690C4BE0401F0A0599536E</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_8303c8f3-0eb7-4d16-8b04-536ff167be51" IssueInstant="2014-03-21T16:52:31.738Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_8303c8f3-0eb7-4d16-8b04-536ff167be51">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>mreWEjjI5nyGmxqxNiMn70kOICg=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
N/oNcCtaZYE7foS76QfFYfH9KkQkLhlt8xCatxhIBdjrEcl9uhHzIKt+ycevEiv7+x/ze/idFjlb
WJZBBoXkpnXDJVzfyEV623iJSju07KlmGdKsK0kOBeqQ3YUlzxCz40HTiNCWOgLYBgWNpTtA3uqR
9Gmbf+FqwoWEmqLKLPU=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F5211DEF53690C4BE0401F0A0599536E</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_0F9543A4823B1C6E8A99E06D494B3ED6" NotOnOrAfter="2014-03-21T19:52:31.738Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/DEV_CS_1"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-03-21T16:52:21.738Z" NotOnOrAfter="2014-03-21T22:52:31.738Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:ACCESCS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:ACCESS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DEV_CS_1</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_8303c8f3-0eb7-4d16-8b04-536ff167be51</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-03-21T16:52:31.738Z" SessionIndex="_8303c8f3-0eb7-4d16-8b04-536ff167be51"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F5211DEF53650C4BE0401F0A0599536E</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\certs\DEV_CS_1_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API Portal" searchProperties="true" id="8cebc94b-11ba-4d62-bc4a-4f7469f25eb1">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="66a82435-44a2-4a7a-a84e-db2f47d4aedc">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("SAMLassertion",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="5ce01461-2335-4feb-b2a7-3dcc2163dd0c">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
testCase.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));

testCase.setPropertyValue("audienceList",testProject.getPropertyValue('audienceList'));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="97ebba21-602d-433c-b8d9-c36328e166e0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="URL_Builder_with_AudienceList" id="8ae20d07-68b3-4637-a828-fdbf54c9ddcf"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+(testCase.getPropertyValue("audienceList").replaceAll(":","%3A"));
//def urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");
else
	urlParam = URLEncoder.encode(testCase.getPropertyValue("tokentype"),"UTF-8")+"&amp;audience="+testCase.getPropertyValue("audienceList");

log.info "urlParam=="+urlParam;
testCase.setPropertyValue("tokentype",urlParam);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="a774a95d-4bbe-4ad7-9937-18517ed12673"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" id="cfaadafb-1927-4563-8394-72a5a1127f24" accept="" sslKeystore="iscportalcs1_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
          <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:restRequest></con:config></con:testStep>
      <con:testStep type="restrequest" name="STS - POST1" disabled="true" id="76d58419-454f-48b7-97aa-0381d5559898">
        <con:settings/>
        <con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST1" mediaType="application/xml" postQueryString="false" sslKeystore="222259_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="305bbd0c-a35b-4947-9aae-4b5e0df45780">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def tStep  = testCase.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

testCase.setPropertyValue("status",status[0]);
//testCase.setPropertyValue("connection", connection[0]);
testCase.setPropertyValue("contentType", contentType[0]);
testCase.setPropertyValue("contentLength", contentLength[0]);
testCase.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert+1, strVal.size());
     
	testCase.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="fc3e3b00-d43c-43f1-95ab-aa5cbfdd83b2">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	////assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="0a613674-9246-47f2-bd8d-b59f04f8c201">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="c8e602a7-67f5-4bae-b87d-dcbc421a2189">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS_Creation_Portal_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>iscportalcs1</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword&amp;audience=urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>RLDGbyList_firstuser20150228_1425120010366</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 201 Created</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>text/plain; charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_0c144bdb-e9e7-418e-8f9d-39e71f710756</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value>HTTP/1.1 201 Created
Date: Tue, 13 Aug 2013 13:12:47 GMT
Server: Apache
x-Transaction-Info: t=1376399567 UgowzwofmIgAAGVfJDwAAAAp urn:dece:org:org:dece:222259 10.31.153.241
Cache-Control: no-cache, no-store
Location: https://qa.q.uvvu.com:7001/rest/1/06/SecurityToken/Assertion/_cc15420e-dbff-466f-9e67-6cfc22af731e
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/plain; charset=UTF-8

</con:value>
        </con:property>
      <con:property><con:name>expectErrTypeSTS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Git\Certs\QALP1/iscportalcs1_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generic STS GET Portal" searchProperties="true" id="e7310ab2-9915-42f7-9519-88ef3b363795">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="25587f25-b469-4b21-a06f-2262281b760e">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertId",null);
testCase.setPropertyValue("assertionAccountId",null);
testCase.setPropertyValue("assertionUserId",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d68f3035-8d80-4aad-9fee-d7a307d951a2">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="76c07fe3-c94a-44e2-ab87-8d9cd65a00fe">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay 3" disabled="true" id="80109e9e-88d3-4401-b679-124056e2de8b">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="48dd53f5-d340-47f4-977a-35f0a9e11474">
        <con:settings/>
        <con:config service="STS" methodName="STS - GET" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="iscportalcs1_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#DeviceHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="ASSERTION" value="${#TestCase#assertionUUID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="aa727e0b-a611-42ef-b467-a4dda3078dc4">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep  = testCase.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

testCase.setPropertyValue("XMLbody", XMLbody);
testCase.setPropertyValue("status", status);
testCase.setPropertyValue("connection", connection);
testCase.setPropertyValue("contentType", contentType);
testCase.setPropertyValue("contentLength", contentLength);
testCase.setPropertyValue("contentLocation", contentLocation);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="361291cd-5b82-481d-9672-7cb8642d44d2">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers" id="a2ddadaa-3186-4a45-9cf7-294eb523001b">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def url           = testProject.getPropertyValue("targetURL");
//def urnacct       = testProject.getPropertyValue("urnaccount");
//def urnstream     = testProject.getPropertyValue("urnstream");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = testCase.getPropertyValue("XMLbody");
def nodeaccountid = testCase.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = testProject.getPropertyValue("versionMajor");
//String minor = testProject.getPropertyValue("versionMinor");
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	testCase.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("status");
assert testCase.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("connection");
	assert testCase.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert testCase.getPropertyValue("contentLength").toInteger() == 0;
} else {
	////assert testCase.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert testCase.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert testCase.getPropertyValue("contentLocation") != null;
	
	def b = testCase.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	testCase.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert testCase.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="4a145ac6-c8ee-41f4-bc68-1680c85f6927">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def XMLbody       = testCase.getPropertyValue("XMLbody");
def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			testCase.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			testCase.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			testCase.setPropertyValue("assertionAccountIdFULL",accountId);
			testCase.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + testCase.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + testCase.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="39767ed6-a124-4fe6-a46b-f2f69e314a6c">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def expectErrType = testCase.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = testCase.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = testCase.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
testCase.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
testCase.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="cc930bfc-8d2b-432d-9e92-a4743e6c7439">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",testCase.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZbb5tKEH7vr0D0scLcY4NiSzbUCrnXdqM2L0ebZQyb4l3CLsTpr++CA7EdJ02PZMmaYXbmm8t+s8ccrTLLH3MOhSCMKlE4VP8zsOk4d/GdBh70NcccgDZYerFmS9Fc9k2j7x6pSsR5CRHlAlExVC3DdDRD/gYL0/Jd0zePen3XulWVGyi4dC1NeoaqrFcZ5X4TdqiWBfUZ4oT7FK2A+wL78/HFuS8tfdRiUkfHG5RNwGKUCpH7uo57MWDIMtzDbKUf6zs2xzH35yShSJQFPMeM+VB9Pvv4+Nh7tHusSHTLMAzd8HRpE3OSfFZHn9rDEEd0yTZygCijBKOM/EY1qAsQKYuVcZawgoh09YZrUzeN2rUGa6zJqtLPqv4SoEH3QU87IAuONJ4is3U2gyUUQDEo32fRUP38sQ5uzi4KRPmSFSu+J/8bJKAVZCyHWONtZi26j3s8UK7RMWA/ojgrOangsh6THGHgynUBS7I+J1wOX8yVpv3KmssfaacM8L+05Vjfxiqh6weqE5IEuPg/Pdvu18bLDcpKGCU3Xlbd90V+Wc2AXTMEZILGjm3zn8MGwrbxBlTX7md5f1i72Xo+dFGEDBvjs3uvyuiXk8JFq9vZmf5jirLFb/v0zGV3lYi9E1z+Wn8p4YkmC5xGubd6PFpG0751UoRpYC0Hv4Pb8acbQb6cpFfFr9uTvLxMROok39PyzJvq94vrWZKGi+m6Ov9W2bl5lRwh57RaXnk/sx/eHE+wcYWi3D0Vp5ffQvPu5NMcFqf62PZOq0llZ0GkXyTDl5y2c9hVtpQwL+/uAYtWrMcjCpWp7BcS79NLrSGxtmxM/bzmKC6ACnVUn6qpxS8lAZHYl83cyLYdut7UmlpHpuM6pnE0sF3Xdh3PGZhTbzxoOWiDYg9iwOiS1LFqlt3Mz/sA8crnQGMotIqVOAWuvuMxRAIpEZ3Jy8EohwWTLG5NHM80J0YQBPZXb2pPg+nXwA5MY9AP+33LUZVLJq7oVTFeCih2GdzdYfAZYJITqGm+nnMuB50LWZIHVJUiM3sV6lEo5SIoai72LWfg6pys8gxqwPqKxWUGvTzNmwLpfPNvaQjzRks4zlkhUIa52VzEN/Pc/9aWRNrEpDbgdVITkG2FAzvJaDN6lbl7cHe17sdlTOr7JusrCoI3SHY/vYxNPS/dzGyn1mLvjuwrdtzr+5l1EeOK4O4GdKtbMr/khVHboAfUe+iVVVU2LenXnFdI97qkPlOfAy4lcT0t2C+geudC/9De6FDvRe70u/hKkdK5QAJWcoCURvzAo2EOvH40RPICrD/6ItkJKesmYC0O6YJMvi1qxO8+P7CPazupvpZ/j6yIX9p1wNdWHJmnfCkIQpNaqjfE0xvTgZl0SySlsWLb+SEHh4LvKrsid1iEnKa7UsDbX5Saq4YqwpiVVESh2ii2+bPBKZ5y8F+MXrlpOPp56a75m0v3x8X5XDLZCqmdLfm7sUaaccGg1ru9wTJU1/INKYPTZIuvnwFuU3Zohu7kaxD+jbJ3Mxm9Ur/WbNV0/z6M/gA=</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_0c144bdb-e9e7-418e-8f9d-39e71f710756</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D1D5BECD26145410683553549481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">33D59F2F26145410683553549481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_0c144bdb-e9e7-418e-8f9d-39e71f710756</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2941</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=UTF-8</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>iscportalcs1</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>STS_Creation_Portal_Nodes</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01000 - STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:D1D5BECD26145410683553549481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:33D59F2F26145410683553549481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_0c144bdb-e9e7-418e-8f9d-39e71f710756" IssueInstant="2014-04-08T12:51:16.752Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0c144bdb-e9e7-418e-8f9d-39e71f710756">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>gV9lvj7tpNvReoPoaeiBaA433sY=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
MrDoc0AKj9vln+Hr5amZRK/XFalTz3JK5obvtd9Hcukx+ueyngTchIp9mw6fIF72HrDhC2f8zCZA
Vti+HhOrkZHpuNgth4gUhuK9F/jTPRghDTFxvLQv3p1Og6a4JvfO9YlX9ScBc0OaIp5JtJNQD1bH
SeTJ/A39JvBv3lCI/Mg=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:33D59F2F26145410683553549481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_2B4911B0CCC3E9F3FCFEC3C1087D7724" NotOnOrAfter="2014-04-08T15:51:16.752Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/iscportalcs1"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-04-08T12:51:06.752Z" NotOnOrAfter="2015-04-08T12:51:16.752Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:iscportalcs1</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_0c144bdb-e9e7-418e-8f9d-39e71f710756</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-04-08T12:51:16.752Z" SessionIndex="_0c144bdb-e9e7-418e-8f9d-39e71f710756"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:D1D5BECD26145410683553549481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\certs\iscportalcs1_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="STS_Creation_Coordinator_Nodes" disabled="true" id="45fa21e9-60c3-4120-9188-fc9acfe19608"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000 - STS" searchProperties="true" id="154c5693-66b2-4e4d-83cc-b3efeecadeba"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ed94371b-546c-4199-8946-343671b502b1"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = context.expand( '${#Project#UserName}' );
//def node_OID = context.expand( '${#Project#PORTALCS_NODE_OID}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username",userName);

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
//testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);

testCase.setPropertyValue("nodeid",testSuite.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="b21f5f6e-7a5e-4b32-a792-0d98e556e348" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Core Identity Information Extraction")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST" id="2a2e2b12-b50b-4e41-b49f-a7b2bca29bf3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="5c522d84-2ca0-4815-a35b-53daf0730542" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testProject.getPropertyValue("PORTALCS_NODE_OID");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {

	case "DABD1A709AAD9052E0401F0A2222596E9F":
	keyStorePath = "/opt/dece/certs/iscportalcs1_concat.pem";
	break;
	case "222259":
	keyStorePath = "C:\\DECE\\certs\\" + nodeId + "_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS1" disabled="true" id="b2c3434b-8673-472d-b2a2-0908414f55c1"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS1" mediaType="application/xml" postQueryString="false" id="2d23fd7d-42c2-4066-a537-e17979f93163" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500501;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" disabled="true" id="52eb998e-7894-419a-b4d3-87c41a6167e3"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="222233_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500500;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body" disabled="true" id="1198522a-2450-48e5-8c52-750dba97e7f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

//testProject.setPropertyValue("SAML",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="14458d77-4975-405d-9fb3-b798f08b3ddd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML_2",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert_2",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId_2",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId_2",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId_2",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL_2",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL_2",testCase.getPropertyValue("assertionUserIdFULL"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties" disabled="true" id="bbc2ffff-410c-462c-8848-1d86f51d92dc"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));

def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));

def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));

def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" disabled="true" id="d1447524-66a3-45b6-9338-623971adbf61"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" disabled="true" id="9b9763a4-a0e0-43dc-ab2b-11bb977d6218"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>https://qa.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" disabled="true" id="ac330aa7-c101-4470-8ee4-ba727e44ca7b"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="75bc613e-7b32-4b88-89b0-bad6d84110ac"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" disabled="true" id="20f3f482-2083-4f77-8a7d-4b39f08a9174"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true" id="fd81c0c4-7746-4b93-9e79-48707301d68d"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbcuI4EP0VyvM4ZXzDGFyBKgK4FiaEDGSY7LxsCbkBbWzZSDKXfP1KBjyYkCy7Ty61W92nu4+OdMdRHNl+h3NggiS0sosjyv3c2tIyRv0EccJ9imLgvsD+tDN68O2q6aPTFq0y6LW0v2pOc+5Ylqd7Tr2u16yGqc/BqetzPDfBNcFpLDzpynkGA8oFoqKl2abl6qat241ny/Rtzzedqlu3f2mVGTAuY0uXqqkdQe14S1sJkfqGsd1uq1unmrClYZumZbyMHqZ4BTHS2neHivJErH30x9UQMEQRruIkNu6Mks9dyP0pWVIkMgbHXOFHuUzDbBrSJ+Rk+UUr9kI4oIskX3YRTSjBKCJvSPVnBGKVhJVOtEwYEav4wyIsUwXWYYd1bNXoF80oQ7sxUAkh40jnK2QdY01gAQwohsqPyaClfbltavnWZ4YoXyQs5uXlf8MDdANRkkKo81NZR2i3B7zSqfYdYH9AcZRxsoFHRdYUYeDHaQK+PVTlicGC7B4IlwTdcYXOOId3sTx0o0eWwMX/GdDZcA5BZijKoP3te7CKxT6izacasWpokfa7X1nycz8atXIA5865oRjtYXlByoJEhx2jAc/wfAJ/DsXzfPkyMYd48hI1Y8f9sQ7cLOvxwGvWxgu0nS63WKTz2Agt4dCvm8H6x/ixGaytXn84DEXiDZO+U0+70c9eYzaboWEn8OZPm+Wvt/741/c9f9ri9cveQ+iVfeu449EYD6LhZEQfU26jsFEfB29/BM891q3R4JuXzfAb470e77zOrHWfrfn3VlHOGf6y7XTmp9n8b8DitFQ0GPQqgZwSEp+LmbKQUF/krn6qxIcLoEJrq11KO/xMyh0JfTnDw9oy7Vq9aQb3/XvXuveCvuk6ptdsWoHZ6dzfN08ic0BxAbGb0AVRuZTkHmjzOUAc+xxoCEzfJJlUOq59ErGHBKoM6EQegoRyeE6kPFtrO4vf6KtFa7vN+tWWf9Kw6SYNrfKYiDEds85CACtrslPS5AlgkhJQwq14zSWxuZC9WKNNJiKrukFVCpmUdqZU1rdrDdfgJE4jUEiNOAmzCKrpKs07Y/DD19YR5rkVJwkLfXw4ch8Wd/nv1AfpExLlwFVB9yBnCe9umLrvnqp5V3X96k10Ct/JQqJOl2yqYAQfkJR//eaKIklBlFNZJ9yF+6WhFNq4rKrIFm4ILihfXNxSz6UCtE+DWaPqupptNlk+Ck8pHZPhDdUPw7SNKeBMatT+OXkFahRRjJsuhAL4RfLCXoaYiRWdCiQgltyp5MsbXgBT4OoFMJCk3936vCillK0TsBPXbN1Ivl4U4k8fONjHyk+an+RnK6f4e2JXYp3lkXXKB4AgdKlW6jLYf0YOImUsYefBrwW4lrxsLJpcYBGSUPNMwMd/KkqfWhrCOMmoGPS03HCumTlOsU/B/+30Lkwuy8U7jfz7Q00nOQUwyNcdJ3l8dd366gjQ5ZnuHpNekV6va9ZcM3CdXHrdg/R6za5TNKWErv3O/N5y1qdLjrf/AQ==</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_439b3117-7366-4180-be36-bcb0e50e38f7</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>10246907C0450F53E05305991F0A79C3</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:10246907C0450F53E05305991F0A79C3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1024690FBEB51B7FE05307991F0AABB9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1024690FBEB51B7FE05307991F0AABB9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_439b3117-7366-4180-be36-bcb0e50e38f7</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>coordcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150228_1425119309357</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_00012 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Coordinator_CS without DST</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>RightsTokenDelete_without_DST</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_00012 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Coordinator_CS without DST</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>RightsTokenDelete_without_DST</con:value></con:property><con:property><con:name>country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>coordcs</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="STS_Creation_Device_Nodes" disabled="true" id="b50a6101-cb11-4df2-887a-64370ae4749a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000 - STS" searchProperties="true" id="8e3c5b6b-f3f1-40cd-84f1-8d50d92003d9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e9e3b1fd-4b83-40ed-910a-2fc8d64efaa9"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = context.expand( '${#Project#UserName}' );
//def node_OID = context.expand( '${#Project#PORTALCS_NODE_OID}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username",userName);

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
//testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);
testCase.setPropertyValue("nodeid",testSuite.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="66e5cf7c-a78b-434e-a2b5-6c34f5363bdf" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Core Identity Information Extraction")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST" id="6580cfec-4d15-42d3-b4de-9f283571bb75"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API DHost")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="df0b58ba-d52b-4286-b02a-1146a8b061a9" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testProject.getPropertyValue("PORTALCS_NODE_OID");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {

	case "DABD1A709AAD9052E0401F0A2222596E9F":
	keyStorePath = "/opt/dece/certs/iscportalcs1_concat.pem";
	break;
	case "222259":
	keyStorePath = "C:\\DECE\\certs\\" + nodeId + "_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS1" disabled="true" id="dc00c5c3-db27-407d-8677-6d9f7f13d279"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS1" mediaType="application/xml" postQueryString="false" id="2d23fd7d-42c2-4066-a537-e17979f93163" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500501;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" disabled="true" id="6d961dd6-1b06-4cde-9e78-b00172107f80"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="222233_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500500;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body" disabled="true" id="209ae2cf-0e0a-40f5-b6bd-cf0e793637e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

//testProject.setPropertyValue("SAML",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="14ec6078-7b21-4d00-a6cf-5cb2f6b4190c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET DHost")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML_2",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert_2",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId_2",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId_2",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId_2",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL_2",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL_2",testCase.getPropertyValue("assertionUserIdFULL"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties" disabled="true" id="9a7941d4-8afc-4ab3-bc5b-14fa4659a736"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));

def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));

def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));

def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" disabled="true" id="974f4620-3ad8-4347-a973-00c4979ebbf0"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" disabled="true" id="f44921df-dbf0-4298-8599-a9d2a149253a"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>https://qa.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" disabled="true" id="a3138b45-cf59-4869-b316-bedcae9549d5"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="b1401d1f-d456-4924-99dd-56320beafb29"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" disabled="true" id="15b0a068-2a9a-49ed-8ddc-267949bbcc39"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true" id="219d055b-f149-403c-b462-9e74aca81328"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_8303c8f3-0eb7-4d16-8b04-536ff167be51</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>F5211DEF53650C4BE0401F0A0599536E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:F5211DEF53650C4BE0401F0A0599536E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>F5211DEF53690C4BE0401F0A0599536E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:F5211DEF53690C4BE0401F0A0599536E</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_8303c8f3-0eb7-4d16-8b04-536ff167be51</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150228_1425117576234</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10013 - RightsTokenDelete - PERM - SecurityRoleInvalid - Invocation with Device</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R1_RightsTokenDelete_Invocation_ByPermission_TestCases</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_00011 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Device-CS node without DST</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>RightsTokenDelete_without_DST</con:value></con:property><con:property><con:name>country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV_CS_1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="STS_Creation_Portal_Nodes" disabled="true" id="19dbecc1-d90e-4922-aa5d-00f5835e5985"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000 - STS" searchProperties="true" id="5f9d99ff-e7c2-43d0-8276-09ce3eedb425"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="901c57f5-a7ed-444f-9ea3-478add4f6d0a"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = context.expand( '${#Project#UserName}' );
//def node_OID = context.expand( '${#Project#PORTALCS_NODE_OID}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username",userName);

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
//testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);
testCase.setPropertyValue("nodeid",testSuite.getPropertyValue("nodeid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" disabled="true" id="62d13f8c-c353-4b59-a8d2-8a685c0536bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Core Identity Information Extraction")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST" id="0b8c8f78-2db8-4196-b7ca-864abacdf220"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API Portal")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" disabled="true" id="b96dca08-ee21-4d4f-8af5-aa3948b92ec8"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testProject.getPropertyValue("PORTALCS_NODE_OID");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {

	case "DABD1A709AAD9052E0401F0A2222596E9F":
	keyStorePath = "/opt/dece/certs/iscportalcs1_concat.pem";
	break;
	case "222259":
	keyStorePath = "C:\\DECE\\certs\\" + nodeId + "_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS1" disabled="true" id="8b643d40-2dca-4713-b8bf-1a02698c15e3"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS1" mediaType="application/xml" postQueryString="false" id="2d23fd7d-42c2-4066-a537-e17979f93163" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500501;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" disabled="true" id="7111a45c-115d-4406-9eb0-a4609beaef07"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="222233_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#SchemaNameSpace}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="urn:dece:org:org:dece:500500;urn:dece:org:org:dece:500502"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body" disabled="true" id="00d4f265-6f87-4e73-b353-1e1b15d3427e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS Response Validator")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runner = myTC.run( null, false );

//testProject.setPropertyValue("SAML",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get" id="e63bff68-b38a-4468-b7f0-923e6445aca3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET Portal")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML_2",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert_2",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId_2",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId_2",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId_2",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL_2",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL_2",testCase.getPropertyValue("assertionUserIdFULL"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties" disabled="true" id="5b7b70dc-3201-47d5-860f-a691bf828556"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));

def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));

def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));

def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" disabled="true" id="833a6500-dbe8-4f0e-ad7a-d87e3c900d5f"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" disabled="true" id="c19543ef-39ce-4988-a02b-6612fece0eae"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>https://qa.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" disabled="true" id="ab674f2b-fe73-4fc4-b158-968da0d034bd"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="df4d630b-ae47-4834-be0e-a30fbb5b48f9"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" disabled="true" id="4eede6d4-aa50-49a3-bb13-3115c986f266"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true" id="79765416-06e5-468b-996e-a2e7243d507d"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="iscportalcs1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#SchemaNameSpace}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_0c144bdb-e9e7-418e-8f9d-39e71f710756</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>D1D5BECD26145410683553549481F9A8</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:D1D5BECD26145410683553549481F9A8</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>33D59F2F26145410683553549481F9A8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:33D59F2F26145410683553549481F9A8</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_0c144bdb-e9e7-418e-8f9d-39e71f710756</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150228_1425120010366</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_00008 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Coordinator_CS without DST</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>RightsTokenDelete_without_DST</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_00015 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Portal without DST</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>RightsTokenDelete_without_DST</con:value></con:property><con:property><con:name>country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="E2E_TestCases" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_AccptTest_00001_AccountCreate_API_Invocation_from_Retailer" searchProperties="true"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="AccountNameAndUserNameGeneration"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def today= new Date().format( 'yyyyMMdd_hhmms' );

testProject.setPropertyValue("AccountDisplayName","accname_"+today);


def uname= "RLDGbyList_firstuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

testProject.setPropertyValue("UserName",uname);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("nodeIdRTL"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("Account_Create");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);



</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
                <DisplayName>${#Project#AccountDisplayName}</DisplayName>
                <Country>${#TestSuite#country}</Country>
                <UserList>
                                <User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
                                                <Name>
                                                                <GivenName>${#Project#UserName}</GivenName>
                                                                <SurName>surname</SurName>
                                                </Name>            
                                                <ContactInfo>
                                                                <PrimaryEmail>                                
                                                                                <Value>${#Project#PrimaryEmail}</Value>
                                                                                <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
                                                                </PrimaryEmail>
                                                </ContactInfo>
                                                <Credentials> 
                                                                <Username>${#Project#UserName}</Username>     
                                                                <Password>Password1</Password>
                                                </Credentials>
                                </User>
                </UserList>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def acct      = testCase.getPropertyValue("nodeaccountid");
//def urnnode   = testProject.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = testCase.getPropertyValue("streamhandleFULL");
//def nodeid        = testCase.getPropertyValue("nodeid");
//def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = testCase.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	log.info "urlStr=="+urlStr;
	
	def decodedAccountID = URLDecoder.decode(urlStr,"UTF-8");
	log.info "decodedAccountID=="+decodedAccountID;

//Changes made for Account User Policy API
//	//assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
//	assert decodedAccountID.matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
//	
//	/*int lastColon = urlStr.lastIndexOf(':');
//	int lastSlash = urlStr.lastIndexOf('/');
//	accountid     = urlStr.substring(lastColon + 1);*/
//
//	int lastColon = decodedAccountID.lastIndexOf(':');
//	int lastSlash = decodedAccountID.lastIndexOf('/');
//	accountid     = decodedAccountID.substring(lastColon + 1);
//	
//	//streamidFULL = urlStr.substring(lastSlash + 1);
//
//	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";
//
//	testProject.setPropertyValue("NODEACCID",accountid);
//		def encodedNodeAccID = "urn:dece:accountid:org:dece:"+accountid;
//		log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
//		if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
//			testProject.setPropertyValue("encodedNodeAccID",URLEncoder.encode(encodedNodeAccID,"UTF-8"));
//		else
//			testProject.setPropertyValue("encodedNodeAccID",encodedNodeAccID);
//						
//	//testCase.setPropertyValue("streamhandleFULL",streamidFULL);
//} else {
//	assert context.expand( '${#TestCase#httpLocation}') == "";
//}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;


def urlStr1 = b.getPath();

                if (testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
                {                              
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");                             
                } else {
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
                }

                urlStr1 = URLDecoder.decode(urlStr1);
                def arrayString = urlStr.split("Account/");
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]

       int lastColon = arrayString[1].lastIndexOf(':');
       accountid     = arrayString[0].substring(lastColon+4);
       userid     = arrayString[1].substring(lastColon +1);
       def useridfull = arrayString[1];    
       def accountidfull = arrayString[0];       
                                         
                                testCase.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                                testCase.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);

                                testCase.setPropertyValue("NODE_USER_ID",userid);
                                testCase.setPropertyValue("NODE_USER_ID_FULL",useridfull);

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

}</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:17B1224324774230E05305991F0A8728/User/urn:dece:userid:org:dece:17B1224324784230E05305991F0A8728</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\UltraVioletGit\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>AccountName</con:name><con:value>accname_20150101_033336</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17B1224324774230E05305991F0A8728</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17B1224324774230E05305991F0A8728</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>17B1224324784230E05305991F0A8728</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:17B1224324784230E05305991F0A8728</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3f3e8c09-0ec0-4582-9364-7ee82f493271</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f5bc192-1dae-4de1-bd17-61f54f69165d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_AccptTest_00002_FirstUserCreate_API_Invocation_from_Retailer" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="UserNameGeneration"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def uname= "RLDGbyList_firstuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

testProject.setPropertyValue("UserName",uname);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("nodeIdRTL"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def tStep  = testCase.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

testCase.setPropertyValue("XMLbody", expXML);
testCase.setPropertyValue("httpStatus", status);
testCase.setPropertyValue("httpConnect", connection);
testCase.setPropertyValue("httpContentType", contentType);
testCase.setPropertyValue("httpContentLength", contentLength);
testCase.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def acct      = testCase.getPropertyValue("nodeaccountid");
//def urnnode   = testProject.getPropertyValue("urnNode");

//def sh            = testCase.getPropertyValue("streamhandleFULL");
//def nodeid        = testCase.getPropertyValue("nodeid");
//def account       = testCase.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = testCase.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + testCase.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + testCase.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	log.info "urlStr=="+urlStr;
	
	def decodedUserID = URLDecoder.decode(urlStr,"UTF-8");
	log.info "decodedUserID=="+decodedUserID;	

	//assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	assert decodedUserID.matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	/*int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);*/

	int lastColon = decodedUserID.lastIndexOf(':');
	int lastSlash = decodedUserID.lastIndexOf('/');
	userid     = decodedUserID.substring(lastColon + 1);

//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	testProject.setPropertyValue("NODEUSERID",userid);
	//testCase.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:16E5FF98294828B5E05305991F0A947D/User/urn:dece:userid:org:dece:16E5FF98295428B5E05305991F0A947D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Code_Repo\API\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9339b89b-edaa-4754-993d-48c0b757afdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000 - STS" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = context.expand( '${#Project#UserName}' );
def node_OID = context.expand( '${#Project#nodeIdRTL}' )

testCase.setPropertyValue("tokentype",testProject.getPropertyValue("urntokenType_userpassword"));
testCase.setPropertyValue("username",userName);

//testCase.setPropertyValue("username","shikha_user_add_user1");
testCase.setPropertyValue("password","Password1");
testCase.setPropertyValue("nodeid",node_OID);
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("assertXML",null);
testCase.setPropertyValue("assertIdL",null);

testProject.setPropertyValue("thirdPartyAudienceList","urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdRTLCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdAccportalCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdAccportal")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDLASPCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDSP")+";urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeIdDSPCS")+";")
testProject.setPropertyValue("audienceList",testProject.getPropertyValue("thirdPartyAudienceList"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_POST"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountestCaseonsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = testProject.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

def assert1 = context.expand( '${#TestCase#assert}' );


testProject.setPropertyValue( "SAML", "SAML2 Assertion="+assert1);


testProject.setPropertyValue("assertXML",testCase.getPropertyValue("assertXML"));
testProject.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testProject.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testProject.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));
testProject.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
testProject.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
testProject.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));

myAccount = new dbAccount(log,testProject.getPropertyValue("targetSystem"));
accountID = myAccount.accountGetfromNodeAccountId(testProject.getPropertyValue("assertionAccountId"))
rightsLockerID = myAccount.accountGetRightsLockerId(accountID).toString();
log.info "accountID==="+accountID;
log.info "rightsLockerID==="+rightsLockerID;

myUser = new dbUser(log,testProject.getPropertyValue("targetSystem"));
userID = myUser.userGetfromNodeUserId(testProject.getPropertyValue("assertionUserId"))
log.info "userID==="+userID;

testProject.setPropertyValue("accountOID",accountID);
testProject.setPropertyValue("rightsLockerID",rightsLockerID);
testProject.setPropertyValue("userOID",userID);
</script></con:config></con:testStep><con:testStep type="groovy" name="Encoding_URL_Properties"><con:settings/><con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def encodedAssertionAccountIdFULL = testProject.getPropertyValue("assertionAccountIdFULL");
log.info "URN Should be Encoded:"+testProject.getPropertyValue("encodeURN").toUpperCase()
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",URLEncoder.encode(encodedAssertionAccountIdFULL,"UTF-8"));
else	
	testProject.setPropertyValue("encodedAssertionAccountIdFULL",encodedAssertionAccountIdFULL);

def encodedAssertionUserIdFULL = testProject.getPropertyValue("assertionUserIdFULL");
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedAssertionUserIdFULL",URLEncoder.encode(encodedAssertionUserIdFULL,"UTF-8"));
else
	testProject.setPropertyValue("encodedAssertionUserIdFULL",encodedAssertionUserIdFULL);


def encodedTermsofUse = "urn:dece:type:policy:TermsOfUse";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedTermsofUse",URLEncoder.encode(encodedTermsofUse,"UTF-8"));
else
	testProject.setPropertyValue("encodedTermsofUse",encodedTermsofUse);
	
def encodedULC = "urn:dece:type:policy:UserLinkConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedULC",URLEncoder.encode(encodedULC,"UTF-8"));
else
	testProject.setPropertyValue("encodedULC",encodedULC);
	
def encodedMUC = "urn:dece:type:policy:ManageUserConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMUC",URLEncoder.encode(encodedMUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMUC",encodedMUC);
	
def encodedMAC = "urn:dece:type:policy:ManageAccountConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedMAC",URLEncoder.encode(encodedMAC,"UTF-8"));
else
	testProject.setPropertyValue("encodedMAC",encodedMAC);
	
def encodedUDUC = "urn:dece:type:policy:UserDataUsageConsent";
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testProject.setPropertyValue("encodedUDUC",URLEncoder.encode(encodedUDUC,"UTF-8"));
else
	testProject.setPropertyValue("encodedUDUC",encodedUDUC);</script></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Version"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def tOUUrl;
def dBHost = context.expand( '${#Project#targetSystem}' )
def targetPort = context.expand( '${#Project#targetPort}' )
def versionMinor = context.expand( '${#Project#versionMinor}' )

String country = context.expand( '${#TestSuite#country}' );

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
             consent_version            
             from
             CONSENT
             where
             CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
             and
             COUNTRY = '""" + country + """'
             order by
             consent_version desc)
             where rownum &lt; 2""";

log.info sql;

results = a.SelectFromDB(sql,dBHost);

assert results.length() > 0;
log.info "results" + results;

def myXML = new XmlSlurper().parseText(results);   

log.info "consent_Version==="+myXML.ResultSet.Row.CONSENT_VERSION.text();
                
def consent_Version = myXML.ResultSet.Row.CONSENT_VERSION.text();

if (versionMinor == "06") 
	tOUUrl = context.expand( '${#Project#TOUUrl}')
else
	tOUUrl = context.expand( '${#Project#TOUUrl}')	

testProject.setPropertyValue("TOUVersion",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');
log.info "TOU_Resource==="+testProject.getPropertyValue("TOUVersion");</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#TOUVersion}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERIDSAU}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedTermsofUse}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedULC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="222259_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#Project#assertionAccountId}</dece:Resource>
      <!--dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>
      <dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->  
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMAC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:ManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedMUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" disabled="true"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserDataUsageConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserDataUsageConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#assertionUserId}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#assertionUserId}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="ACCT" value="${#Project#encodedAssertionAccountIdFULL}"/>
  <con:entry key="POLICYCLASS" value="${#Project#encodedUDUC}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="USER" value="${#Project#encodedAssertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>B49E51860A52F2EFE0401F0A05996433</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_719b7a62-ceaf-4fdf-b465-24e497da9183</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>17B1224324774230E05305991F0A8728</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:17B1224324774230E05305991F0A8728</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>17B1224324784230E05305991F0A8728</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:17B1224324784230E05305991F0A8728</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_719b7a62-ceaf-4fdf-b465-24e497da9183</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>B49E51860A4DF2EFE0401F0A05996433</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>B49E54F2DDBFC209E0401F0A059966E1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>RLDGbyList_firstuser20150604_1433421966819</con:value></con:property><con:property><con:name>useroid</con:name><con:value>B49E54F2DDC4C209E0401F0A059966E1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\UltraVioletGit\uv-coordinator-api-regression\Certs\QALP1PC/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ddbb4895-c469-4d7a-b677-0ab8bcbd6c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10001_RightsLockerDataGet_RTL_FUNC_byDownloadQuery_with_ValidData</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R1_RightsLockerDataGet_byDownLoad_Query_RTL_TestCases</con:value></con:property><con:property><con:name>country</con:name><con:value>US</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest"){
log.info("################################################################################");
log.info("Logging Request and Response for rest teststep : '" + testStepResult.getTestStep().getName());           

//Get request  byte array and convert it to string and log
byte [] tempByteArrRequest = testStepResult.getRawRequestData();
String tempRequest = new String(tempByteArrRequest);
log.info("-----------------------------Request--------------------------------");
log.info(tempRequest);

byte [] tempByteArrResponse = testStepResult.getRawResponseData();
String tempResponse = new String(tempByteArrResponse);


log.info("-----------------------------Response--------------------------------");
log.info(tempResponse);

log.info("################################################################################");

}
else{
                log.info("TestStep type  : " + testStepResult.getTestStep().config.type)
}
</con:script></con:eventHandlers><con:sensitiveInformation/>
</con:soapui-project>