<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="StreamViewLLP" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Linked LASP Test Cases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="true"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="TC_DECE_15110 - StreamView - LLP - LASP can view stream created by organizational attached DLASP CS node - 200 OK"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Documents and Settings\ashwin.tikle\Desktop\Reports\Reports 106.2.3\LP1_R3\Stream View"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Coordinator APIs" type="rest" basePath="" id="5f5fa9bb-9b9e-4f14-aedb-0c6213f2720d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyGet I" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="d919ec56-229d-4382-a3dd-dbb25acce2fe"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="beb8a3d0-cab4-4ebf-a142-6007361fd910"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyGet I" mediaType="application/xml" id="10b74fb0-a069-442d-84a1-782f60bae25f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="4f96f872-af4f-497c-8a1b-a7f5f16c4ff3"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="5afa490c-0dbb-4b17-b971-e2a534588528"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyGet User" mediaType="application/xml" id="341d4480-57b6-4a46-b4ad-d587a3fb4e58"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="cc0e876d-768d-451f-a388-b7ba161e2463"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="227599bc-11f1-491a-9d0b-fda90c4b7006"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:PolicyList</con:element></con:representation><con:request name="PolicyGet Account" mediaType="application/xml" id="d7950e51-8123-41fb-afb9-f9b8d3974242"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policies" type="rest" basePath="" id="c6e738c0-1829-4898-a27b-a36c90bf1905" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyDelete Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="d6a052b4-a5d8-4db7-b764-6f937898642b"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="6d2a100d-d63c-4874-a8f7-b629aa2e29b9"><con:settings/><con:parameters/><con:request name="PolicyDelete Account" mediaType="application/xml" id="04bd0030-8141-4295-b655-c9e3d112f5bb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyDelete User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="61b070ca-1d53-4746-af74-120fe4e192d3"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="b688d139-184a-4307-bae1-82e784254a01"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/082012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyDelete User" mediaType="application/xml" id="98657050-24bd-437c-a9ce-df5f0ed8c8a6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="StreamDelete" type="rest" id="3bab5b17-0c06-4b38-b20e-561326dcc969" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="StreamDelete" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="7c5d9e81-01a2-4048-ae3a-6a76e0d1f49a"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="80cc0fea-c553-4069-b20e-c15dd1d5b818"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:request name="StreamDelete" mediaType="application/xml" id="1e675de9-4a80-429a-b0fa-47987ce2875e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenCreate" path="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" id="c695dddc-a9b3-4c24-9d4a-26e0b6cff04a"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="3d0aa5ce-307a-408b-9fa8-94d3ba33f2b2"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="0912_concat.pem" id="2046d574-d9f5-4ed7-a4c0-8b14c9902ca1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#rtrassert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:RightsTokenData xmlns:dece="http://www.decellc.org/schema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema dece.xsd ">
  <dece:ALID>${#Project#alid}</dece:ALID>
  <dece:CID>${#Project#cid}</dece:CID>
  <dece:SoldAs>
    <dece:DisplayName Language="en">Avatar</dece:DisplayName>
    <dece:CID>${#Project#cid}</dece:CID>
  </dece:SoldAs>
  <dece:RightsProfiles>
    <dece:PurchaseProfile Profile="urn:dece:type:mediaprofile:highdefinition">
      <dece:BurnsLeft>0</dece:BurnsLeft>
      <dece:CanDownload>true</dece:CanDownload>
      <dece:CanStream>true</dece:CanStream>
    </dece:PurchaseProfile>
  <!--  <dece:RentalProfile>
      <dece:AbsoluteExpiration>2001-12-31T12:00:00</dece:AbsoluteExpiration> 
      <dece:DownloadToPlayMax>PT1004199059S</dece:DownloadToPlayMax>
      <dece:PlayDurationMax>PT130S</dece:PlayDurationMax>
    </dece:RentalProfile> -->     
  </dece:RightsProfiles>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/aaaa</dece:Location>
    <dece:Preference>2</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/bbbb</dece:Location>
    <dece:Preference>3</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:FulfillmentWebLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/cccc</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentWebLoc>
  <dece:FulfillmentManifestLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/dddddd</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentManifestLoc>
  <dece:PurchaseInfo>
    <dece:RetailerID>urn:dece:org:org:dece:${#Project#rtrorgid}</dece:RetailerID>
    <dece:RetailerTransaction>99-${=(int)(Math.random()*100000)}-${=(int)(Math.random()*100000)}</dece:RetailerTransaction>
    <dece:PurchaseAccount>urn:dece:accountid:org:dece:${#Project#rtrnodeaccountid}</dece:PurchaseAccount>
    <dece:PurchaseUser>urn:dece:userid:org:dece:${#Project#rtrnodeuserid}</dece:PurchaseUser>
    <dece:PurchaseTime>2010-11-29T08:44:01Z</dece:PurchaseTime>
  </dece:PurchaseInfo>
  <dece:TokenInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}"   LastModifiedDateTime="2001-12-31T12:00:00">
    <dece:TransactionInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}" LastModifiedDateTime="2001-12-31T12:00:00">dece:TransactionInfo</dece:TransactionInfo>
  </dece:TokenInfo>
  <dece:ViewControl>
    <dece:AllowedUser></dece:AllowedUser>
  </dece:ViewControl>
</dece:RightsTokenData>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="f195fd7c-4240-4e8d-8743-22856f69d6f4"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="c6ae0ef6-f49c-4f84-b3f7-6d063e816b9b"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamCreate" mediaType="application/xml" postQueryString="false" id="775308b6-2d1c-4309-b5db-200c08964321"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="http://www.decellc.org/schema" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <StreamClientNickname>${#TestCase#nickname}</StreamClientNickname>
 <TransactionID>${#TestCase#transactionid}</TransactionID>
 <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#streamcreaterequestuser}</RequestingUserID>
 <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>
</Stream>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="64bdbc35-7dc1-4cf8-bbd9-0e0be0c121c3"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="51922b05-acee-47d7-80f5-5a9cc37b8eff"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 403</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamView" mediaType="application/xml" id="f3136f88-3763-438a-a127-fa05b81dcf6d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS" path="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" id="3d795ea8-6f60-4ef9-864e-442706ba776d"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="b5deb562-2a40-4013-86ac-a1ac1cabd8c7"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#tokentype}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>201 0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS" mediaType="application/xml" postQueryString="false" id="389a5cb5-95eb-42a2-bef7-0f3e9c63f83e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="http://www.decellc.org/schema">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS GET" path="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" id="56c13e1a-64c7-4cd6-8880-2813a56846e9"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUUID}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="5067c2f3-31b0-4ade-b5a6-ed3938ee992b"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS GET" mediaType="application/xml" id="1bb4b011-4f7d-4bb5-948a-3536be80c97f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="d992a4cd-41d1-409a-9a6f-6e6d960dd22b"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="PUT" method="PUT" id="32682728-b26e-4ffa-96bd-91cc3b44afd4"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:Stream</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>404 403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamRenew" mediaType="application/xml" postQueryString="false" id="fe9df75d-2842-4cbc-b20d-7b7f74c85f15"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="fa69b414-fafa-4974-a5c0-926959d6200e"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="5f82aa80-cda2-4f08-b07e-3d6a07f0ca98"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:request name="PolicyCreate Account" mediaType="application/xml" postQueryString="false" id="8efec9a9-83a8-4c1b-ac57-88eb9404c874"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="5d2f7259-a3fe-4be0-9f30-389b5e09ba81"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="f6c22916-c188-4ac4-a376-ed2e130e39c4"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="PolicyCreate User" mediaType="application/xml" postQueryString="false" id="39a828d2-a7d0-403a-a40e-23d3da4ead4b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView1" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="717c5c43-bc39-4ce6-9ab2-2c9959b16165"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter></con:parameters><con:method name="HEAD" method="HEAD" id="5c9d9738-69db-4853-b2ca-a7f1722225fb"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamView" mediaType="application/xml" id="3bba1561-82bb-41ac-8330-782843421f6c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamViewQHost" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="bae94481-87dc-4bdb-ae8f-75b00dc5f038"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="0793f42d-2005-4d05-b9f1-68d59ac46c4f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="StreamView" mediaType="application/xml" id="ae6cfd9d-eabd-4fcb-867c-01671edbaf94"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" id="4834475f-d8fd-49b0-ab18-e1c4f444382e"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:value>${#TestCase#streamhandleFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9c864a18-95a1-450c-a0d0-a43928cd0d84"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="347b2682-604c-429d-b0cf-c0d5f92d5c69"><con:settings/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2E" type="rest" basePath="" definitionUrl="C:\Documents and Settings\ashwin.tikle\Desktop\E2E_1_1.wadl" id="96be61ee-61be-486b-a585-16357eb9fcaf" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/ashwin.tikle/Desktop/E2E_1_1.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/ashwin.tikle/Desktop/E2E_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="E2E"/>
  <resources base="">
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="UserCreate">
      <doc xml:lang="en" title="UserCreate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserCreate">
        <doc xml:lang="en" title="UserCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="STSCreate">
      <doc xml:lang="en" title="STSCreate"/>
      <param name="tokentype" default="urn:dece:type:tokentype:usernamepassword" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="audience" default="${#TestCase#audienceList}" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="STSCreate">
        <doc xml:lang="en" title="STSCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="ASSERTION" default="${#TestCase#assertionUUID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="STSGet">
        <doc xml:lang="en" title="STSGet"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreateUser">
      <doc xml:lang="en" title="PolicyCreateUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateUser">
        <doc xml:lang="en" title="PolicyCreateUser"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyCreateAccount">
      <doc xml:lang="en" title="PolicyCreateAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateAccount">
        <doc xml:lang="en" title="PolicyCreateAccount"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="AccountCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="52f53a27-8740-421b-8f00-d6e1cdb8c926"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="0dad099c-622c-4d05-b2bd-3855daae2585"><con:settings/><con:parameters/><con:request name="Request 1" id="54461de8-68c4-4fd4-a568-d944bccf95a4" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="f372e6d3-e6bc-4144-8d01-bc2d37a50e1b"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="be614274-8715-4b19-89bd-e190870167dd"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="4c7f8bf2-e272-4a1f-b247-7b6102172c89" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="1e5d646e-dae4-49c6-a447-3c95097c3e8c"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#tokentype}</con:default></con:parameter><con:parameter><con:name>audience</con:name><con:value>${#TestCase#audienceList}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#audienceList}</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="588c0b9c-8ce8-497c-bed1-1f71c3d5ec60"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8d2fe641-f390-49d2-a78b-e6c419bc2bd3" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="24a53b2b-b335-49d8-af6b-b3b56eb57de3"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>${#TestCase#assertionUUID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUUID}</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="a0afb856-fb17-401e-9462-8ff65488d65e"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ac20ad4a-882a-43f1-9197-1c0d38ced08e" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateUser" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="9af0bb11-bc7f-45b8-9e68-1b253d2d4c60"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateUser" method="POST" id="b16c768a-edbb-42e6-b501-61806c0fc5e7"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="3396c672-1b00-4c76-be86-a385c2dc4963" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateAccount" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="d0052c78-c4fb-4d47-a56e-98795195d231"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateAccount" method="POST" id="d302f3b5-3d82-4dd3-9ad9-276410c98596"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="975bf743-4f91-4757-9a68-2dd0fa7dfa3b" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy" type="rest" basePath="" definitionUrl="C:\Users\sourabh.verma\Desktop\Policy_1.wadl" id="9b394e9f-f71d-4ded-9bd4-399adc157461" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/sourabh.verma/Desktop/Policy_1.wadl"><con:part><con:url>file:/C:/Users/sourabh.verma/Desktop/Policy_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Policy"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreateSinglePolicyUser">
      <doc xml:lang="en" title="PolicyCreateSinglePolicyUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateSinglrPolicyUser">
        <doc xml:lang="en" title="PolicyCreateSinglrPolicyUser"/>
        <request>
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#Coordinator_Schema}"/>
        </request>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#Coordinator_Schema}"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="412">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyCreateSinglePolicyAccount">
      <doc xml:lang="en" title="PolicyCreateSinglePolicyAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateSinglrPolicyUser">
        <doc xml:lang="en" title="PolicyCreateSinglrPolicyUser"/>
        <request>
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#Coordinator_Schema}"/>
        </request>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#Coordinator_Schema}"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/List" id="PolicyCreateListUser">
      <doc xml:lang="en" title="PolicyCreateListUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateListUser">
        <doc xml:lang="en" title="PolicyCreateListUser"/>
        <request>
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </request>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/List" id="PolicyCreateListAccount">
      <doc xml:lang="en" title="PolicyCreateListAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateListAccount">
        <doc xml:lang="en" title="PolicyCreateListAccount"/>
        <request>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#Coordinator_Schema}"/>
        </request>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#Coordinator_Schema}"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyGetSinglePolicyUser">
      <doc xml:lang="en" title="PolicyGetSinglePolicyUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="PolicyGetSinglePolicyUser">
        <doc xml:lang="en" title="PolicyGetSinglePolicyUser"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404 500">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyId}" id="PolicyUpdateSinglePolicyUser">
      <doc xml:lang="en" title="PolicyUpdateSinglePolicyUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="PolicyUpdateSinglePolicyUser">
        <doc xml:lang="en" title="PolicyUpdateSinglePolicyUser"/>
        <request>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </request>
        <response status="400">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="412">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyId}" id="PolicyGetUserPolicyId">
      <doc xml:lang="en" title="PolicyGetUserPolicyId"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="PolicyGetUserPolicyId">
        <doc xml:lang="en" title="PolicyGetUserPolicyId"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyId}" id="PolicyGetAccountPolicyId">
      <doc xml:lang="en" title="PolicyGetAccountPolicyId"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="PolicyGetAccountPolicyId">
        <doc xml:lang="en" title="PolicyGetAccountPolicyId"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyGetSinglePolicyAccount">
      <doc xml:lang="en" title="PolicyGetSinglePolicyAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="PolicyGetSinglePolicyUser">
        <doc xml:lang="en" title="PolicyGetSinglePolicyUser"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404 500">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{ListId}" id="PolicyGetListUserListId">
      <doc xml:lang="en" title="PolicyGetListUserListId"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ListId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="PolicyGetListUserListId">
        <doc xml:lang="en" title="PolicyGetListUserListId"/>
        <request/>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{ListId}" id="PolicyGetListAccountListId">
      <doc xml:lang="en" title="PolicyGetListAccountListId"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ListId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="PolicyGetListAccountListId">
        <doc xml:lang="en" title="PolicyGetListAccountListId"/>
        <request/>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/List" id="PolicyGetAccountList">
      <doc xml:lang="en" title="PolicyGetAccountList"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="PolicyGetAccountList">
        <doc xml:lang="en" title="PolicyGetAccountList"/>
        <request/>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/List" id="PolicyGetUserList">
      <doc xml:lang="en" title="PolicyGetUserList"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="PolicyGetUserList">
        <doc xml:lang="en" title="PolicyGetUserList"/>
        <request/>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{ListId}" id="PolicyDeleteListUserListId">
      <doc xml:lang="en" title="PolicyDeleteListUserListId"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ListId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="PolicyDeleteListUserListId">
        <doc xml:lang="en" title="PolicyDeleteListUserListId"/>
        <request/>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{ListId}" id="PolicyDeleteListAccountListId">
      <doc xml:lang="en" title="PolicyDeleteListAccountListId"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ListId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="PolicyDeleteListAccountListId">
        <doc xml:lang="en" title="PolicyDeleteListAccountListId"/>
        <request/>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyId}" id="PolicyDeleteSinglePolicyAccount">
      <doc xml:lang="en" title="PolicyDeleteSinglePolicyAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="PolicyDeleteSinglePolicyAccount">
        <doc xml:lang="en" title="PolicyDeleteSinglePolicyAccount"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404 500">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyId}" id="PolicyDeleteSinglePolicyUser">
      <doc xml:lang="en" title="PolicyDeleteSinglePolicyUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="PolicyDeleteSinglePolicyUser">
        <doc xml:lang="en" title="PolicyDeleteSinglePolicyUser"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404 500">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyId}" id="PolicyUpdateSinglePolicyAccount">
      <doc xml:lang="en" title="PolicyUpdateSinglePolicyAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="PolicyUpdateSinglePolicyAccount">
        <doc xml:lang="en" title="PolicyUpdateSinglePolicyAccount"/>
        <request>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </request>
        <response status="400">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="412">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{ListId}" id="PolicyUpdateListUserListId">
      <doc xml:lang="en" title="PolicyUpdateListUserListId"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ListId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="PolicyUpdateListUserListId">
        <doc xml:lang="en" title="PolicyUpdateListUserListId"/>
        <request>
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </request>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403 404 500">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{ListId}" id="PolicyUpdateListAccountListId">
      <doc xml:lang="en" title="PolicyUpdateListAccountListId"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ListId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="PolicyUpdateListAccountListId">
        <doc xml:lang="en" title="PolicyUpdateListAccountListId"/>
        <request>
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </request>
        <response status="415">
          <representation mediaType="application/octet-stream;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#schemaNameSpace}"/>
        </response>
        <response status="400 403 404 500">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="" id="PolicyGet">
      <doc xml:lang="en" title="PolicyGet"/>
      <method name="GET" id="PolicyGetAccountPolicyId">
        <doc xml:lang="en" title="PolicyGetAccountPolicyId"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="PolicyCreateSinglePolicyUser" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="9dc7c71d-7ebe-474a-88bb-b64f3de19f87"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateSinglrPolicyUser" method="POST" id="ba76e8fa-dada-4364-9c96-0bc31c1deff5"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="26737cac-c614-46d8-9621-e126ea5c101f"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyGetSinglePolicyUser" method="GET" id="535c46f3-5bea-4a28-a4f4-ec8b23a50f7d"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="01086fca-f43d-4b15-bd36-247bae57389c"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateSinglePolicyAccount" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}{NodeUserId}" id="76018298-e819-4434-ae65-e9b3cf4b6f4b"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateSinglrPolicyUser" method="POST" id="3d33b74a-fed5-48cd-bc5e-7838bbbc889f"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="a340bd34-25d4-445c-a550-a71ebecfdf54"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateListUser" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/List" id="b89370dd-2f0a-43d3-9a45-c8953331781f"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateListUser" method="POST" id="4313f722-3dc6-4154-a473-3b1faa7defd4"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="ab4b08e8-8566-42a5-ac76-fe97ee78b9b8"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyGetUserList" method="GET" id="270d4e25-d594-4dfd-b50b-3ca3f1a59235"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="deb7ab83-7612-48b3-bc0c-344a7807f0dc"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateListAccount" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/List" id="c3d5b0d6-b2ee-4777-8cd8-03143f04dc10"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateListAccount" method="POST" id="8f6fe474-2e1d-4a57-b7b1-05bb7fead278"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" id="277d768f-2b3f-45fb-b833-a824755f8525"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyGetAccountList" method="GET" id="8dbfdc89-e9d1-49b0-8493-0481d3168b14"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="8df3a226-0444-4475-86eb-032e66596620"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyUpdateSinglePolicyUser" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyId}" id="0e8b905a-7a22-455a-8034-7efa32b0c466"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>PolicyId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyUpdateSinglePolicyUser" method="PUT" id="52f43de9-c91b-4c91-a7b5-77a477ca29fa"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" id="92a85397-f879-47b2-b1c2-94faa1350ae3"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyGetUserPolicyId" method="GET" id="cf3f4d92-c76d-4b22-b2a8-18bb4506f300"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="c816c060-0a91-4528-b58f-12b3059906e4"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyDeleteSinglePolicyUser" method="DELETE" id="d9229d0e-5adb-45b3-a589-3a60d7e6ecb9"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="43d6d741-15fb-4456-98e0-9fcd0b2d68d6"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGetAccountPolicyId" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyId}{PolicyClass}" id="2164f45c-0bf1-4d14-bb95-73411d2b0255"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>PolicyId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyGetAccountPolicyId" method="GET" id="01e7dea8-7ea4-437b-9c3d-162cfd141d94"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="736201a0-ca17-4ab4-8817-1d480337b511"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyDeleteSinglePolicyAccount" method="DELETE" id="220ca773-f999-40bd-8001-e7ed4be0ed37"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="d22aafd0-77c9-4a88-9cd5-c667e20bef69"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGetSinglePolicyAccount" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="82b42f47-3418-4fcf-904e-1ecd721008bb"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyGetSinglePolicyUser" method="GET" id="b1c4c5d3-9538-4461-ac80-fbeca9bbd4da"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="7b4b886c-19bb-4769-8558-fd91c2272304"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGetListUserListId" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{ListId}" id="80916f86-b947-4cff-9c67-7f659e8db8be"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>ListId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyGetListUserListId" method="GET" id="cd07ad0c-dc5d-4223-bd6e-4854ca4d3fc7"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="d4f6daca-eff3-4ea3-9919-58eaab1439fe"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyDeleteListUserListId" method="DELETE" id="0c8edca6-f3c0-4822-a6d3-ae18beefff83"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="11c05fbf-43d5-4072-8d98-d9e5b9466551"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyUpdateListUserListId" method="PUT" id="195bf698-5879-4c6f-89e4-2c1dcf5f78b2"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="c9c04e64-3271-4fe6-a40e-ba171ef5a483"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGetListAccountListId" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{ListId}" id="8a93fa4f-6d50-4b7b-9c99-61c7caab2d17"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>ListId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyGetListAccountListId" method="GET" id="6adfc209-dc61-4ee2-b3da-b55dcf6d02de"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="d2fb829e-026d-4a5e-8d6b-29afa2ede918"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyDeleteListAccountListId" method="DELETE" id="2a96c25b-0eb0-45f6-94b0-889b8dee551b"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="e682fc3a-42dd-4e50-9d85-401141c5b2c6"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyUpdateListAccountListId" method="PUT" id="530e11a5-dddb-418d-a535-3898cbb3f98c"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="c9088e7f-f46a-45f7-8ea4-607565ae2ebe"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyUpdateSinglePolicyAccount" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyId}" id="3fcd1d25-d9fa-4db2-86c2-70283a2f06cb"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>PolicyId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PolicyUpdateSinglePolicyAccount" method="PUT" id="98a8891a-c291-4ae6-be7d-ab63190c118c"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#schemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" id="689e6d47-1e2c-434e-b59c-3478b0bdaccc"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet" path="" id="899b3d4a-8068-4f5b-82b4-cdadbb712ca6"><con:settings/><con:parameters/><con:method name="PolicyGetAccountPolicyId" method="GET" id="054865ac-6280-431f-99d0-0fedd1eaa26c"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" id="f414b539-ee5b-4b0e-9519-86e095eac7ee"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="00SetupScripts" id="3bc30bb3-be51-4150-b1a1-a11af62dbd4c"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="1b85bd47-8237-4cf7-9741-1fe9b77dd0d3"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="2294e0ec-9ac6-47a0-ad28-271deb6a20a7"><con:settings/><con:config><script>	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();

	log.info("Set Environment properties!!!");
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def projectPath = groovyUtils.projectPath
	log.info("Project Path : '" + projectPath + "'");

	def eNV = context.expand( '${#Project#ENV}' )
	log.info("Environment: '" + eNV+ "'");

	def propertiesPath = null;

	if (System.properties['os.name'].toLowerCase().contains('windows')) 
		{
				log.info "it's Windows OS!!";
				File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
				propertiesPath = temp.getCanonicalPath();
		} 
	else 
		{
				log.info "it's Linux OS!!";
				File temp = new File(projectPath + "/../../../Properties/");
				propertiesPath = temp.getCanonicalPath();
		}
		
	log.info("Properties File Location : '" + propertiesPath+ "'");


	def propMap=[:]
	BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
	log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
	String line;
	while ((line = reader.readLine()) != null)
		{
			if (line.trim().length()==0) continue;
			if (line.charAt(0)=='#') continue;

			int delimPosition = line.indexOf("=");
			String key = line.substring(0, delimPosition-0).trim();
			String value = line.substring(delimPosition+1).trim();
			propMap.put(key, value);
		}

	propMap.each{ k, v -> tP.setPropertyValue(k,v)}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="543f736f-8594-4cf5-abdf-c0983e5747b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("VersionMinor");

def v2 = context.expand( '${#Project#VersionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));
assert a.cidSetStatusActive('urn:dece:cid:file:STREAMS_CIDVersion_828445.txt')==1</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="819dfebe-1409-4088-841a-ea6e1aa82896"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="ceb08435-aab3-484b-91db-279dbf1de9c8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" disabled="true" id="779bfd51-ee7a-42cc-8fe9-81e4a5a303ca"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" id="38655ba3-2e29-46e7-8b8b-c04388dce31c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )


String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");
</script></con:config></con:testStep><con:testStep type="groovy" name="MicroService Enable/Disable Testcases" id="69adde69-f126-4b25-81e5-77b0940878d8"><con:settings/><con:config><script><![CDATA[
//TestCase
def testCase  = testRunner.getTestCase();
def microService = context.expand( '${#Project#microService}' ).toString();
ArrayList<String> Suit_lst=new ArrayList<String>();
//Get Arguments
 
def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {
log.info suiteName.name;
Suit_lst.add(suiteName.name);
  
}

//log.info "suit"+Suit_lst.get(1);





ArrayList<String> Tstep=new ArrayList<String>();

def TStep1  = "Remove Account's StreamHandles";
def TStep2 = "Verify STREAM_DATA_HISTORY row";
def TStep3 = "Verify STREAM_DATA, STREAM_HISTORY row counts for the Account";
def TStep4 = "Post Test Cleanup";
def TStep5 ="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts"
def TStep6 ="Verify STREAM_DATA row"
def TStep7 = "Remove account's stream handles"
def TStep8 =  "Post Test Execution cleanup"

Tstep.add(TStep1);
Tstep.add(TStep2);
Tstep.add(TStep3);
Tstep.add(TStep4);
Tstep.add(TStep5);
Tstep.add(TStep6);
Tstep.add(TStep7);
Tstep.add(TStep8);

for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i <= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
                if(targetTestCase.isDisabled() == false)
                {
                                for(j = 0; j <= testStepCount - 1; j++)
                                {              
                                	      def q=0;  
                                                try
                                                {     
                                                          for (String T_step : Tstep)	
					                                {
                                                                if (testStepList[j].name == T_step) {
                                                                                
                                                                                targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
                                                                                //targetTestCase.removeTestStep(targetTestStep);
                                                                                if(microService=="ON")
																				{  
																				   targetTestStep.setDisabled(true)
																				   log.info "Disabled Step " + testStepList[j].name;
																				}
																				else
																				{  
																				   targetTestStep.setDisabled(false)
																				   log.info "Enabled Step " + testStepList[j].name;
																				}
                                                                         }
													q++;
																  
												}
                                                                
                                                                //stepScript = testStepList[j].getScript();
                                                                //stepScript = stepScript.replace(oldString, newString);
                                                                //targetTestStep.setScript(stepScript);                  
                                                }
                                                catch(Throwable e)
                                                {
                                                                log.info "ERROR:" + e;
                                                }              
                                }
                }
    } 
}                                                                                             
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Identify Flaky Testcases" id="a2555d4b-86b9-4c78-8f5f-16298619b519"><con:settings/><con:config><script>//Project Level Variable name – FLAKYSELECTOR.
//Possible Values – all, only_flaky, without_flaky
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tc_condition  = context.expand( '${#Project#FLAKYSELECTOR}' ).toString();
log.info tc_condition

tP.getTestSuiteList().each
{
      if(!it.getName().toLowerCase().contains("setup") &amp;&amp; !it.isDisabled())
       {
                it.getTestCaseList().each
         {
             if(tc_condition.toLowerCase()=="all")
             {
                                
                 if(it.getName().toLowerCase().contains("migrated"))
                       it.setDisabled(true);  
                   else 
                         if (!it.isDisabled()) {
                               it.setDisabled(false);
                           }
                                                                                                              
                }
                                                                
             else if(tc_condition.toLowerCase()=="only_flaky")
               {
                  if(it.getName().toLowerCase().contains("flaky"))
                                                it.setDisabled(false);  
                  else
                         it.setDisabled(true);
                }
                else
                {
                   if(it.getName().toLowerCase().contains("migrated") || it.getName().toLowerCase().contains("flaky"))
                                           it.setDisabled(true);  
                   else
                        if (!it.isDisabled()) {
                                it.setDisabled(false);
                                 }
 
                }
           }
        }
}

</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>396d1d6b-33dd-48d6-b41d-40fc4be4bc57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="P0_StreamViewLLP" id="08a02ac2-abf1-45a3-ac7b-075bb712dd07"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30000 - StreamView - LLP - StreamHandleInvalid - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="678909df-1576-4b3d-9d84-dac0004f899e"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Create data for retailer,lasp and non lasp" id="f6d09fd5-9295-4a01-92f3-083fd5337eef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTC = myTS.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="947e029c-50dc-4127-8656-7404363cd989"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0379abd5-a0fc-461f-9234-53e0a708b0e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="ba9891e9-e098-4fde-ba91-45c10b412d0e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="89b6266a-ff3d-4def-b226-e1f7a7323414"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="6c97fc53-96bf-4d02-bc37-77c1926bb170"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="fd133d69-6d16-4e85-b4ef-2267b743829b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3c75cd81-5d30-4d69-8638-cf9da7f29a23" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>1578A8F35CA11574E05307991F0ACFCC</con:value></con:property><con:property><con:name>useroid</con:name><con:value>157873F89F3F79C4E05307991F0A289E</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVbrcto8EH0Vxv35DfhKAE9gxoHQ0pCQYprbn46QF1CxZSPJXPL0lQy4mJB8tJ1hhtF6tXt292h3LzmKQsv1OAcmSExL6yik3M2kTS1l1I0RJ9ylKALuCuz63m3ftSqGi/ZXtFKv09R+gIMcpxbUyzAOqmWnZk/K9Qaqls2xbdl1GxnYsKQq5yn0KBeIiqZmGWa1bMhfbWRcuEbVte3KRb32opUegHFpW6pUDG0Has2b2kyIxNX11WpVWdmVmE11yzBM/em27+MZREhrXW4jyhyx1k4fVwLAEIa4guNIv9QLOpcBd30ypUikDHa+gvd8GbrR0KVOwMn0k5bfhaBHJ3F2bCMaU4JRSF6Rys8tiFkclLxwGjMiZtG7QZiGMlyGNS5j06GfNL0I7UxDBYSMozKfIXNnawgTYEAxlL4Pe03t03lVy66OGKJ8ErOIF49/hgfoEsI4gaDM92HtoJ1v8ESmWpeA3R7FYcrJEu4UWROEge+qCfh8U6V7BhOy7hMuCbrmCp1+CO/ouM1Gh0yBi78p0EFxtkYeUJhCKwxuBtP1Kkqi6MXXB18ex4Mnn7cdZOFmBuBQORPkpd0ej0iZk2h7ox9HiC426GHTWKK499h5Yt3ukG0GXuSkqTkfNq5mt58v2syEzuQFTZPX4M58mVvfvlwN7p+vzc3m4gKc9lNY/zpm63X1ET0/zRbdQXirv1hmY/6ZP49uRtzc+A/42rup4WcvueuTzUb3q19u+6MXzzG+fhuZZPzIB/Ofw/+WV2n/+2N90/82ee7C5t7uzchzdTG/mTfzcA7wF2X7N++n45+Axf6oaNDrlLqySkh83MyUhATlSabqJqr5cAFUaC11S/UON5XtjgSurOH2bFZr9ZrdrTe69nWt0Xaujapt1BoNs2t4Vr1xvW8yWxRHENsxnRDlS7XcLW0+BogjlwMNgJWXcSo7Hdc+sNhBApV6dCgfQUw5jGLZnjlZ2AlzGEqnqRkw4xWMn3GystZa6S4WAzpg3kQAK/bkRqEnDwGThIBq3IrXXBKbC5mLBVqmIjQrS1ShkMrWzlSXdS2nXtU5iZIQFFI9ioM0hEoyS7LM6Hz7b5UR5pl0eD3KXtu7cR1/26dA6gREKXAVyxXIMsKJ4WLtA3kT8MXJIbQ376UBUQ9L5lMwgrdIip9+00TxI+dIp+/593vQue4f3P3R9n+Yf2mg/w/O+//qXNby7U39g3zqx6XMHQVLcuB2v3XI+SU7XmtPxAUyK4tKulymGfccx9aZNK8rEuiGpfuAU9mTN6N4DlTPrehnDcAc+JHzXF6EmIoZ9QUSEMm3UsqOZ2w8PnC18fTkI1+fu04VXMrUCViLU7J2KLc1hfjDhQ67WOlJ8b38W8Us+F2xE7YO/Mg45cIjCJ2qkxp+m3d4gWNplsi2HbND46cMnHJeFOZJzrEISahxKuD9LyXVj5sawjhOqeh1tExwOCMynGKTgPtb6Y2ZbAzleyn5/8W0TDIKYJDbLCeZfbVeuOoJ0OnBnNk5PR41Xr1rV9uepE+tMGra3XY7T0oBXeuN+K3kIE/HHG/9Ag==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value>1578A8F35CA81574E05307991F0ACFCC</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:1578A8F35CA81574E05307991F0ACFCC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_36200 - StreamView - LLP - Full user can StreamView Stream created by Full user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fc1e46e9-e4bc-4acb-b734-52e28fb6c523"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2d9bc4e4-c7d7-4170-b31a-4fe170040ba5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9dde3e1b-314c-4a69-851e-af2c570c189a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="4f51f6c1-9295-446d-bd6b-cbea8c7a0ea2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3696ce20-1cc3-4a49-8958-e48ff509e63a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="72a2bca9-8c42-4a8e-9f38-9739fb77aeb1"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c28acc86-2857-4b54-a637-b311d381b26b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="4e64a92e-2694-43e7-bed6-5cf818e662b2"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="00a846e8-ea45-461f-b8de-bcc3a2f19d1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7efe0510-9412-4177-943b-967b5a41603a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="acde8ebb-e6ef-401b-beee-5e1e9ce607b6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c98f0ce3-3b01-438f-9c0d-34638889906e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20141226_050616</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3ac82959e6f04908bb22dac692ea66f0</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B1DE836CAFB6C40E05305991F0AB273</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B1DE8B4FEFC6C3CE05305991F0A9C13</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFvuYQsC7VLQKUTduTDYJxmz2JTUOjYyBAZnBS379mUElXpIcd/eJmqbn668v092XDIVBybQYg4STiBZWYUCZmUlbSppQM0KMMJOiEJjJselYN0OzVNRNtLuiFAbdlvLiefU6ataxWkYNV614UFYnjWZZ1ZsGNipNFyrViVBlLIUBZRxR3lJKulFRjZJaqo0MwyxXTd0oNhrN30phDAkT2EKlqCtbUivWUnzOY1PTlstlcVkuRslUK+m6of26GTrYhxAp7cuNR5mhpL3Vx0UXMAQBLuIo1C61A51Ll5kOmVLE0wS2ttzPbOma3tSEjsvI9JuS3wV3QL0oO9qIRpRgFJA3JONzA9yP3IIVTKOEcD/81AlDl8AqrLAqIka/KdohtTOBDhgmDKnMR8YW6wE8SIBiKDw+DFrKt/Oyll0dJYgyL0pCdnj8Mz5AFxBEMbgq27m1pXY+4AeRal8CNgcUBykjC7iVxRojDGybTcDnQxXuEvDIakiYKNAVk+y0fXpHx000umQKjP9NgvaSswEZoyCFNrpbea+v3Ub4fWiNaK22hPE1uZjGDf++lRHYV84EeWo3x6OizItoc8Nz50y3r4OHdd+KuhffoXE/x7NBrzr3fnnkObhpXl/1rhK90XBmt0ObvC3nk+fpkzMf0+fAKDeXNhv68/vxemxU0S1F42GDv1J/dPe7N5lY0/vO7M3qzDp99jp2H7FVLs9in/+ojp9upk9x6e3H+qpm16f9tX+xnIcD54nA70rYuXEcJ6jR7tPzbP52+zr+5en+Yyt3Z4//oWz35p10MgPMd0dZBoNuoS+yhPjXzUxKiKt6maoZy+bDOFCutOUt2TvMVLQ74poih5uz3jG6vUan0u/1OzW7bPf0almvNptGX7eatlHeNZkNiyOKdkQ9Im3Jlrspm68J4tBkQF1I1EWUik7HlC8Qu4ijwoA+iEcQUQajSLRnY+EmMS7hemAEqVGvT9YkqtaX4pkrhduI/6Q/E8vjkBw25cpBU34ATGICsnPLwmaishkXwZijRcoDo7hARQqp6O2JbLNmqdKoaoyEcQCSqhZGbhpAMfbjLDQa23xLKsIskz70Rtlz+9Sx43+7GAgdl0gFJn3pgMgjnEyXilndOXLicPXDKbSDt1KXyJclAsoTgjdMDn+914kskLxIukPLuduRznX/4O6L7bwYfwkw/Afjw381LnJ5elP7Ip7acSpzQ+6C7JndrR1igImW194VYlycF9PFIs0qry47eyLQNZlbTS9pDuBU9OT1KHoFquUg2lkDMOd9ZDuXHzJMuU8djjiE4qkUsuMZG48DTG48A/HIV+euUwcmReQ4rPhHMjsQ25pk/OVCh00s9YT4TnyWUeK+J+wDrD07wk+x8HBCp/Ikh9/6k7LAkYAlom1HyT74RwAfGT8U5kHOuXBRT5OUw+d/CrIftxSEcZRSPugqmWB/RmQ8+ToG813pBCYbQ/leSv5/MVVJVgIYxDbLSIYv1wtTvgA63ZszW6Ono6Zcs62+VbMr+v6o6ZTq+ag5ZNc+EZ9K9uJ0XOPt/wA=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B1DE8B4FEFB6C3CE05305991F0A9C13</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B1DE836CAFA6C40E05305991F0AB273</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B1DE836CB026C40E05305991F0AB273</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0B1DE8B4FEFB6C3CE05305991F0A9C13</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0B1DE836CAFA6C40E05305991F0AB273</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>0B1DE8BC90A56C5EE05305991F0A2D22</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:0B1DE8BC90A56C5EE05305991F0A2D22</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3ac82959e6f04908bb22dac692ea66f0</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:0B1DE836CB026C40E05305991F0AB273</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>3ac82959e6f04908bb22dac692ea66f0</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:3ac82959e6f04908bb22dac692ea66f0</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0B1DE8B4FEFC6C3CE05305991F0A9C13</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0B1DE8B4FEFC6C3CE05305991F0A9C13</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="LASP Linked Test Cases" id="cb9d07f9-8d90-477d-96ff-3a8da3779bc2"><con:description/><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\ashwin.tikle\Desktop\Reports\Reports R3_1.0.6.1.G\LP1_R3\Stream View</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30000 - StreamView - LLP - StreamHandleInvalid - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="122913dd-8d1e-4c6a-95ab-b10560f72629"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Create data for retailer,lasp and non lasp" id="79da9151-a430-4809-b95c-4b7e8efff7ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTC = myTS.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="bc9b85d2-72d0-4cf4-bffd-9420cd77441d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="c4b40514-e19e-4b45-9c25-2c9bac12b0d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="a2450590-8588-4c7f-8fa7-00630148620e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="32754945-fcac-43e2-84e1-1dd917d6a9f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="be4a4b7f-72c1-4eb2-99b3-19db957f40c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="b5ef33c2-da34-4f94-84b8-4c6601702c74"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="92d80623-5202-4d4b-a1c2-b2dbf06e7bc6" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_024738</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>11A194D0F2B57705E05307991F0A50B1</con:value></con:property><con:property><con:name>useroid</con:name><con:value>11A194B65C4576F2E05307991F0A7F47</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVbdcto8EH0Vxr1kjP8wjj2BGQih4xZICiRf2puOIq9BqS07lmwgT1/JgAOE5KPtlUfr1e7ZH53dS4biyPS6jEHGSUJrqziizCulbSXPqJcgRphHUQzM49ibdkdDz2zoHtpdUWp+v638bD0+ui0jtFUXXF1tIsdRxdlSL2zXDkxXd8AMhCpjOfiUcUR5WzF1w1Z1SzXcme56hu1ZVuNCd38otXvImLAtVBq6sgW1Ym1lwXnqadpyuWwsrUaSzTVT1w3tYTSc4gXESOlcbiIqHWWdrT5uBIAhinADJ7F2qR3oXAbMm5I5RTzPYOsreM+XrumuJnQCRuaflOouBD4Nk/J4hWhCCUYReUEyPyPgiySodaN5khG+iN8NwtClYRVWWMVGk35StENoZxo6QJgxpLIFMra2JhBCBhRD7W7it5VP51WtvDrLEGVhksXs8PhneIAWECUpBCrbhbWFdr7BE5nqXAL2fIqjnJECxrJZU4SBbasJ+HxTtdsMQrIaEiYadMUkOm0f3tFxk40+mQPjf1OgveJsjNyjKIfOePR8PXn8MsAv+dPDUxoPlk/aiqzr4+VFuwSwr1wKqtJujkdNWTXR5sZg3NTC5RrZdfj2+eblR/1aL9ZPqWuN8Hie+Gw0qq9Ddzi0Jp9vH+bf5zf9IvChWNj4S2alLGffv30NA+v5zrj2nVWKpuNouk7CRY/28bq+nN0BoF99e3bfrTsX977VW392abef9KKvvYeReY/NR8ha+Q+tdVOfXV13Xy4GD2uYzQat4rY7aCb17+5/Nw+Lr008b1fh7OE/lO3e/DR/fALMd0fZBn6/NhBVQvxjMpMSEqhhqeqlknwYB8qVjrwlucPLBd2RwBM13JwNo2u4zV7Lvmo2ndbAvNZtS3dc1xjoXWfQdHYks0FxBPEqoSGRviTlbtrmY4A49hjQADK1SHLBdEz5wGIfcVTz6UQ8goQymCWCng30ElprJ7ZMO9SN5QIvQl60sD4X/D1O+A29ybohh+yAlA3zgJQngElKQDK3bGwmOptxkYxnVOQ8MhoFalDIBbdnkmY9s3lha4zEaQQSqhYnQR5BI12kZWo0tvmaKsKslE6uZ+Vzezew43+7HAidgEgFJmPpgagjnJgu5i6QNwG3Tk6hnfluHhD5skRCeUbwBsnhr9c+kQ1SNUl/2J3e7kBXun9w9+fV9KfxlwaG/+B8+K/ORS3f3tQ+yKd2XMrKUVCQPbe7tUMMMEF5nV0jPqPGcyMvirxsPUdSeybMa7IJNN3UpoBzQcrrWfILqFZZ0c6agBXwI+eV/BBizhd0yhGHWLyVWnk8Y+WZApMrjy9e+ercferApUgdhxU/JbuKxLomEX+40WEPSz0hvhWfZZK9Bn7K1p4fEafYeDihc3mS02/9Tl/gRJglgreTbN/4KQOnnB8KqyRXWLhoqMecw/t/apKQ2wrCOMkp9/tKKdgfEiVOvk7Be1V6Y6acQ9ViSv5/M1VJ2QIYxDrLSGlf7heefAJ0vjdotk7fzpq+PjB7TcfR7f1ZY+u91zd6gK7zRvxWspen4x7v/AY=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:11A194B65C4476F2E05307991F0A7F47</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>11A194B65C4476F2E05307991F0A7F47</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>11A194D0F2B47705E05307991F0A50B1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:11A194D0F2B47705E05307991F0A50B1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value>11A194D0F2BC7705E05307991F0A50B1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:11A194D0F2BC7705E05307991F0A50B1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30050 - StreamView - LLP - AccountIdUnmatched - Node AccountID in URL is null - 403 Forbidden_MIGRATED" searchProperties="true" id="46bfc095-b3e9-4e1e-9f31-575f021f2875"><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="82c3e6a4-8a31-4e16-b755-a9e4014db44d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_ACCOUNTID_MISMATCH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="40bc63c7-16a3-4b1c-9b76-b84b914ceb2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="8a9ffd9e-23d3-46e1-a686-36923a84bf31" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Change URL in account to another account" id="e00f2d4d-0685-4b3e-92d2-be493fb8bbc9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("assertionAccountIdFULL");

a += "A32";

tC.setPropertyValue("assertionAccountIdFULL", a);</script></con:config></con:testStep><con:testStep type="groovy" name="Set URL node accountId null" id="672265da-1e35-41ee-9893-a63989979b04"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionAccountIdFULL",tP.getPropertyValue("urnaccount"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7aac18f3-2925-41a7-9a1f-d4b88b8889f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="6e9b0cc2-001a-4a27-b605-4dc55d81dee0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30052 - StreamView - LLP - AccountIdUnmatched - nodeaccountid and URL accountId mismatch - 403 Forbidden" searchProperties="true" id="6e37dc55-9278-4e57-8906-d4a56bda854a" disabled="true"><con:description>This test case will verify proper response from the StreamCreate API when the supplied SAML assertion references a node account that is in pending status</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a6d24ad1-d681-4183-b18c-ca70131bf6b0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_ACCOUNTID_MISMATCH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="61752d34-c01a-4d25-9b49-6b1dd796ec13"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="2dbf19e0-4931-4a1a-a77b-f9c2e5bc02e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Change URL in account to another account" id="75801494-5488-4d04-be9d-e6d0e71632f8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("assertionAccountIdFULL");

a += "A32";

tC.setPropertyValue("assertionAccountIdFULL", a);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="5614f27f-9d6d-4bab-b4fa-db4021214c79"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0e9284fe-aebb-4843-a1c9-b65da8a2dc95"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35000 - StreamView - LLP - StreamNotFound - Stream supplied does not exist - 404 Not Found_MIGRATED" searchProperties="true" id="5f3dd972-eac1-4479-8901-f25d861b8732"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has no active nor deleted streams associated with it.  The stream handle will be properly formed, yet, nonexistent. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7e9b8f75-2497-4811-903a-b5ab9e16190e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","35");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7f15386c-8d4d-4f72-a4c1-2c3fb561780f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="278e173e-5764-4a50-8f8b-ef9b9846c540" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Get nonexistent Stream Handle value" id="046593f2-14a9-4687-a3ff-1e2335892bad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new generalUtils.generalUtils(log);

String urn  = tP.getPropertyValue("urnstream");
String hexy = a.randomHexString(40);

this.log.info "urn[$urn] - hexy[$hexy]";

tC.setPropertyValue("streamhandleFULL",urn + hexy);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="0534f70d-027f-4a72-956b-2d43962e8d97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="095731d3-df52-431e-83e6-5a1443dd380c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="56b47dcd-e3ee-40ad-a941-e2e98dae3b68"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil").toInteger();
def counter   = testCase.getPropertyValue("counter").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("counter",counter.toString());
    testRunner.gotoStepByName( "Get nonexistent Stream Handle value");
}





</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>35</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35001 - StreamView - LLP - Stream supplied is in deleted status yet not expired - 200 OK_MIGRATED" searchProperties="true" id="10408585-7376-4414-a399-b0b66780b5eb"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7cd1e21c-3cc4-4a37-8a7a-7734f7f1dbfe"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f41af9c1-e8c6-4970-a224-8d021812d9ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="53de71ef-a559-45e9-9ada-2552b45c04e9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="1354c592-185d-4b05-836a-1b36898ed7ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a5c3bcbb-7d05-45f8-968c-a04a231bb04e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="4ffa91f6-38a2-4d74-abfd-5d7030c2f482"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="433876a0-4237-4bc4-b8c0-4630ffab400c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f83024a0-a0b7-49c6-8812-9ecc5a00bded" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="7baf27b2-3715-4270-98e2-742d278533b1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_024738</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A5EEBFAF7F71416C87595CBD5C7ADD17</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A194D0F2B57705E05307991F0A50B1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A194B65C4576F2E05307991F0A7F47</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr1kjP8wjj2BGQih4xZICiRf2puOIq9BqS07lmwgT1/JgAOE5KPtlUfr1e7ZH53dS4biyPS6jEHGSUJrqziizCulbSXPqJcgRphHUQzM49ibdkdDz2zoHtpdUWp+v638bD0+ui0jtFUXXF1tIsdRxdlSL2zXDkxXd8AMhCpjOfiUcUR5WzF1w1Z1SzXcme56hu1ZVuNCd38otXvImLAtVBq6sgW1Ym1lwXnqadpyuWwsrUaSzTVT1w3tYTSc4gXESOlcbiIqHWWdrT5uBIAhinADJ7F2qR3oXAbMm5I5RTzPYOsreM+XrumuJnQCRuaflOouBD4Nk/J4hWhCCUYReUEyPyPgiySodaN5khG+iN8NwtClYRVWWMVGk35StENoZxo6QJgxpLIFMra2JhBCBhRD7W7it5VP51WtvDrLEGVhksXs8PhneIAWECUpBCrbhbWFdr7BE5nqXAL2fIqjnJECxrJZU4SBbasJ+HxTtdsMQrIaEiYadMUkOm0f3tFxk40+mQPjf1OgveJsjNyjKIfOePR8PXn8MsAv+dPDUxoPlk/aiqzr4+VFuwSwr1wKqtJujkdNWTXR5sZg3NTC5RrZdfj2+eblR/1aL9ZPqWuN8Hie+Gw0qq9Ddzi0Jp9vH+bf5zf9IvChWNj4S2alLGffv30NA+v5zrj2nVWKpuNouk7CRY/28bq+nN0BoF99e3bfrTsX977VW392abef9KKvvYeReY/NR8ha+Q+tdVOfXV13Xy4GD2uYzQat4rY7aCb17+5/Nw+Lr008b1fh7OE/lO3e/DR/fALMd0fZBn6/NhBVQvxjMpMSEqhhqeqlknwYB8qVjrwlucPLBd2RwBM13JwNo2u4zV7Lvmo2ndbAvNZtS3dc1xjoXWfQdHYks0FxBPEqoSGRviTlbtrmY4A49hjQADK1SHLBdEz5wGIfcVTz6UQ8goQymCWCng30ElprJ7ZMO9SN5QIvQl60sD4X/D1O+A29ybohh+yAlA3zgJQngElKQDK3bGwmOptxkYxnVOQ8MhoFalDIBbdnkmY9s3lha4zEaQQSqhYnQR5BI12kZWo0tvmaKsKslE6uZ+Vzezew43+7HAidgEgFJmPpgagjnJgu5i6QNwG3Tk6hnfluHhD5skRCeUbwBsnhr9c+kQ1SNUl/2J3e7kBXun9w9+fV9KfxlwaG/+B8+K/ORS3f3tQ+yKd2XMrKUVCQPbe7tUMMMEF5nV0jPqPGcyMvirxsPUdSeybMa7IJNN3UpoBzQcrrWfILqFZZ0c6agBXwI+eV/BBizhd0yhGHWLyVWnk8Y+WZApMrjy9e+ercferApUgdhxU/JbuKxLomEX+40WEPSz0hvhWfZZK9Bn7K1p4fEafYeDihc3mS02/9Tl/gRJglgreTbN/4KQOnnB8KqyRXWLhoqMecw/t/apKQ2wrCOMkp9/tKKdgfEiVOvk7Be1V6Y6acQ9ViSv5/M1VJ2QIYxDrLSGlf7heefAJ0vjdotk7fzpq+PjB7TcfR7f1ZY+u91zd6gK7zRvxWspen4x7v/AY=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11A194B65C4476F2E05307991F0A7F47</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A194B65C4476F2E05307991F0A7F47</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A194D0F2B47705E05307991F0A50B1</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A194D0F2BC7705E05307991F0A50B1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11A194D0F2B47705E05307991F0A50B1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>11A195149D65468AE05305991F0ADDCE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:11A195149D65468AE05305991F0ADDCE</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>A5EEBFAF7F71416C87595CBD5C7ADD17</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:11A194D0F2BC7705E05307991F0A50B1</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>A5EEBFAF7F71416C87595CBD5C7ADD17</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:A5EEBFAF7F71416C87595CBD5C7ADD17</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>11A194B65C4576F2E05307991F0A7F47</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>11A194B65C4576F2E05307991F0A7F47</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35002 - StreamView - LLP - Stream supplied is in deleted status and expired - 200 OK_MIGRATED" searchProperties="true" id="88a1cf07-2fbe-413d-8c11-855f494bf62c"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1a6695a8-8a31-4257-9a03-8cdc50bc0155"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="071ee233-3ee7-48fa-b7bc-5d7e5f6fc15e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="31af86d8-36f7-44a2-94a9-72998a306415" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a4e46e36-9665-4921-b135-81c6f43b13db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2f7e93c3-6410-40c4-80cf-4e4dbfc2e375"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="c5cbb009-dee1-4800-9c48-83d1660ac20b"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="7614576f-115e-4e73-a14e-f19522fde723"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="53615cde-de98-42aa-a9c2-a7880b11409e"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Expire the Stream" id="475598bb-9a85-44ab-b3ec-b52820d2d030"><con:settings/><con:config><script> def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");


a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamExpireYears(tC.getPropertyValue("streamhandle"),1);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b00e1f0a-2dad-4ba8-b33c-1f027e4da576"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7328fd46-8d1a-4eb7-b27a-2d37916aa2cf" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c31b977a-0574-4214-8c91-f3562d5028b6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954893A64682E05305991F0AED8A</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_024738</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:1A92048A87E94DFA8B9CFED254F2164A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>1A92048A87E94DFA8B9CFED254F2164A</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:11A1956EEFFB772CE05307991F0AA4C6</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>11A1956EEFFB772CE05307991F0AA4C6</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954BC08F46A4E05305991F0A38A8</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11A1954893A54682E05305991F0AED8A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954893A54682E05305991F0AED8A</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11A1954BC08746A4E05305991F0A38A8</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954BC08746A4E05305991F0A38A8</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdc9o6EP0rjPvYMbINBOMJzDiQ3HGv06RA2ty+dIS8BgVbMpYMJL++kgEXCMml7ZNH69XZsx/a3UuB08TxfCEgl5Sz2jpNmPBKadcocuZxLKjwGE5BeJJ4I/829Jy65eHdFaMWDLrGjwisCKLJxMQTC5vNeNIx3bYDZtzsNFwSu44zaShVIQoImJCYya7hWHbLtBqm3RlbHc+xPKdTv+g0vxu1r5ALha1U6paxJbUWXWMmZeYhtFqt6qtGnedT5FiWjR5vwxGZQYqN3uXGo9JQ3tvqk3oEBJKE1AlP0SU60LmMhDeiU4ZlkcPWVvSWLQtZHaR0IkGnH4zqLkQBi3l57GPGGSU4oS9Yx+cW5IxHNT+Z8pzKWfqmE7algU1YE5PYTfbBQIfUzgQ6YJgLbIoZtrdYQ4ghB0ag9jAMusaH87JWXh3nmImY56k4PP4eH2BLSHgGkSl2bm2pnQ94IlK9SyBewEhSCLqEz7pYM0xAbLMJ5Hyo2n0OMV2HVKgCXQvNDu3TOzpuojGgUxDyTxK0l5wNyFecFNBjL+PbkJA+d+wn5BRZklyxG/59cXv10C0J7CuXgiq1m+NRUVZFtLmxtIJ5et+wAoSw/29wEQ98eHxwckCNBe9/yT/dhs/PE6f/aKVXN23iNIO7cRZa7OOw/9UK29fcmpJhNJwX83BGBg3xsJh9fHD9cJzB/U0nHsgQPS0eO/9heFx9c9HH+IXxIYqDF2v4xVk3126n0ZpbfkARHSfpyz8zlOPhGpajJpbj76vkU/at/ZQ/vHxz5t3KnT3+h7Ldmx8VkycgcnfUZRAMajcqS1i+38y0hEZmXKp6mW4+QgKTRk/f0r3DK1S7o5Gncrg527Zvd1pN5Ynfal64zrXValitTse+sfzrgevvmsyGxRHFPmcx1bZ0y92UzfsESeoJYBHk5pIXqtMJ4x3EAZa4FrChegScCRhz1Z7trC3Wi6jJ3TbMbTuJF4mYXsxX66VR+8zlHbvL/VhCftCUbeegKQ+B0IyC7ty6sIWqbCFVMBZ4WcjEri9xnUGhenuu26znNN0WEjTNEtBUUcqjIoF6NsvK0CCx+TomJqKUDq/H5XN707Hjf7sYKJ2IagWhfbkClUc4MV3snSOvHL44OYV28H4RUf2yVEBlTsmGyeGvX3WiC6QqkkHoj+53pCvd37j7oz/6Yf8hQPgXxsO/Na5y+fomeiee6DiVlaFoSffM7tYONcBUy+vtCnGB64t6sVwWZem1dWvPFTzSRYAsB42AFKopP4/5HBiqUNBZE7AifmS8kh9SLOSMjSSWkKq3UiuPZ6w8IxB65QnUK1+fu08dmFShk7CWp2T9RK1rmvG7Gx3xiNZT4nv1WfE8+pWxE1h7dpSfauORlE31SU+/5zfqgnAFS1Xf5vk++CmAU8YPhVWQKy5SFdSkkPD2n5puyF0DE8ILJoOBUQr2h0TJUz5n4P1SegVTzqFqMaX/v5matCwBAmqdFbTE1/uFp58Am+4Nmq3RE7Pmqm+57eaF39yfNQ3Xd6ugHLDrvRK/luzF6bjGez8B</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954BC08846A4E05305991F0A38A8</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:11A1954BC08F46A4E05305991F0A38A8</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>1A92048A87E94DFA8B9CFED254F2164A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:1A92048A87E94DFA8B9CFED254F2164A</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>11A1954893A64682E05305991F0AED8A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>11A1954893A64682E05305991F0AED8A</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35003 - StreamView - LLP - Stream supplied is in active status and expired - 200 OK_MIGRATED" searchProperties="true" id="d6537561-97db-47c1-8e36-70b359a094be"><con:description> This test case will verify proper response to a StreamView API invocation with an account that has a single active stream and no deleted (historical) streams. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="714aa93e-06c2-4cb6-84b5-fb3393ec31f8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="fa09fdcf-f9c0-461f-a803-2e4ca27e5d61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="652dcf47-8c24-40e8-a471-ac98b37b6777" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b4ad1765-b048-403f-a5f5-b7791350a4d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4a93ed5e-2f4e-4f43-a0bd-def3ff1ce8a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Expire the Stream" id="80a48971-c1a9-46e3-a6a2-df5ce3f27abb"><con:settings/><con:config><script> def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

tC.setPropertyValue("expectDBDeletedBy","0");
tC.setPropertyValue("expectDBDeletedBy_" + cnt,"0");
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBStatus_" + cnt,"active");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamExpireYears(tC.getPropertyValue("streamhandle"),1);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b1a0c490-98b7-4cf7-aa8d-7c4f2976603b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="2ba0a1c5-7627-4867-93f2-d656ff7a38af" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="61fab147-4491-49de-9b34-adf1cbcd282d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="24f1e0f5-50dd-45ff-8557-da7037f67a25" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010E983A86A03A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010E983A86A03A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010E983F073F3A18E05305991F0AA4FA</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>0</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010E983F073F3A18E05305991F0AA4FA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010E983F073F3A18E05305991F0AA4FA</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35007 - StreamView - LLP - Single StreamView following StreamDelete - 200 OK" searchProperties="true" id="d487c1e6-4043-49ea-a72d-e74be20c6d87"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cd59dfe6-2007-464c-a2bf-1452a29d693f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="df90b8b2-346f-4e2c-a928-a37949092aef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="8d45636c-79d4-47f9-8465-edf7fedba1ac" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="0e47ceca-9cff-4e21-913a-080d27673bb6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f5ad0a31-47c6-4d29-83a3-b9a898fd748a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="8577b781-d6eb-4ca7-bd8a-7f5ca3b8738b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="fe40a857-ace6-42f7-bf11-d6ef2f197caf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="1bb4c6f7-f1f7-477e-a871-5e9e4754b2a1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c18f64cf-71a5-4379-80a3-3fbde6310b7e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="598e1b92-520b-45cf-916f-cabeb55f5ae3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_025241</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:96B49E7911864C9F8E900BFCCBA60C90</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954BC08846A4E05305991F0A38A8</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954893A64682E05305991F0AED8A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdc9o6EP0rjPvYMbINBOMJzDiQ3HGv06RA2ty+dIS8BgVbMpYMJL++kgEXCMml7ZNH69XZsx/a3UuB08TxfCEgl5Sz2jpNmPBKadcocuZxLKjwGE5BeJJ4I/829Jy65eHdFaMWDLrGjwisCKLJxMQTC5vNeNIx3bYDZtzsNFwSu44zaShVIQoImJCYya7hWHbLtBqm3RlbHc+xPKdTv+g0vxu1r5ALha1U6paxJbUWXWMmZeYhtFqt6qtGnedT5FiWjR5vwxGZQYqN3uXGo9JQ3tvqk3oEBJKE1AlP0SU60LmMhDeiU4ZlkcPWVvSWLQtZHaR0IkGnH4zqLkQBi3l57GPGGSU4oS9Yx+cW5IxHNT+Z8pzKWfqmE7algU1YE5PYTfbBQIfUzgQ6YJgLbIoZtrdYQ4ghB0ag9jAMusaH87JWXh3nmImY56k4PP4eH2BLSHgGkSl2bm2pnQ94IlK9SyBewEhSCLqEz7pYM0xAbLMJ5Hyo2n0OMV2HVKgCXQvNDu3TOzpuojGgUxDyTxK0l5wNyFecFNBjL+PbkJA+d+wn5BRZklyxG/59cXv10C0J7CuXgiq1m+NRUVZFtLmxtIJ5et+wAoSw/29wEQ98eHxwckCNBe9/yT/dhs/PE6f/aKVXN23iNIO7cRZa7OOw/9UK29fcmpJhNJwX83BGBg3xsJh9fHD9cJzB/U0nHsgQPS0eO/9heFx9c9HH+IXxIYqDF2v4xVk3126n0ZpbfkARHSfpyz8zlOPhGpajJpbj76vkU/at/ZQ/vHxz5t3KnT3+h7Ldmx8VkycgcnfUZRAMajcqS1i+38y0hEZmXKp6mW4+QgKTRk/f0r3DK1S7o5Gncrg527Zvd1pN5Ynfal64zrXValitTse+sfzrgevvmsyGxRHFPmcx1bZ0y92UzfsESeoJYBHk5pIXqtMJ4x3EAZa4FrChegScCRhz1Z7trC3Wi6jJ3TbMbTuJF4mYXsxX66VR+8zlHbvL/VhCftCUbeegKQ+B0IyC7ty6sIWqbCFVMBZ4WcjEri9xnUGhenuu26znNN0WEjTNEtBUUcqjIoF6NsvK0CCx+TomJqKUDq/H5XN707Hjf7sYKJ2IagWhfbkClUc4MV3snSOvHL44OYV28H4RUf2yVEBlTsmGyeGvX3WiC6QqkkHoj+53pCvd37j7oz/6Yf8hQPgXxsO/Na5y+fomeiee6DiVlaFoSffM7tYONcBUy+vtCnGB64t6sVwWZem1dWvPFTzSRYAsB42AFKopP4/5HBiqUNBZE7AifmS8kh9SLOSMjSSWkKq3UiuPZ6w8IxB65QnUK1+fu08dmFShk7CWp2T9RK1rmvG7Gx3xiNZT4nv1WfE8+pWxE1h7dpSfauORlE31SU+/5zfqgnAFS1Xf5vk++CmAU8YPhVWQKy5SFdSkkPD2n5puyF0DE8ILJoOBUQr2h0TJUz5n4P1SegVTzqFqMaX/v5matCwBAmqdFbTE1/uFp58Am+4Nmq3RE7Pmqm+57eaF39yfNQ3Xd6ugHLDrvRK/luzF6bjGez8B</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11A1954893A54682E05305991F0AED8A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954893A54682E05305991F0AED8A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954BC08746A4E05305991F0A38A8</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A1954BC08F46A4E05305991F0A38A8</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11A1954BC08746A4E05305991F0A38A8</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>11A194BAD0757708E05307991F0AAD9F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:11A194BAD0757708E05307991F0AAD9F</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>96B49E7911864C9F8E900BFCCBA60C90</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:11A1954BC08F46A4E05305991F0A38A8</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>96B49E7911864C9F8E900BFCCBA60C90</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:96B49E7911864C9F8E900BFCCBA60C90</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>11A1954893A64682E05305991F0AED8A</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>11A1954893A64682E05305991F0AED8A</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35114 - StreamView - LLP - Stream handle that is 29 days post CREATED_DATE is displayed - 200 OK_MIGRATED" searchProperties="true" id="105ffe0d-e3b2-49c1-9ccf-894bc92f862a"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="57fca205-d281-453b-a953-6abf010d6559"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","100");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
tC.setPropertyValue("streamViewIgnoreDateDiff","true");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
tC.setPropertyValue("streamViewIgnoreCreateDateDiff","true");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0ed01e77-cc78-4049-b869-3e745b2b1608"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="b4c361be-5133-4eaa-a135-bd566b10c0d3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="381da9cb-7245-43a6-9961-6a11dbee7ffd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="dc640293-7d14-4cc0-bbbc-21bce42ad061"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="75350b7a-bdcc-44b6-be82-2a57a4af3c9d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="9c72c143-1b3f-43da-8159-649e0076a92a"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.CREATED_DATE in the past" id="d455f938-bf6e-4236-9b00-061434ccb7c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

a.streamSetCreatedDate(tC.getPropertyValue("streamhandle"),-29);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="03a1d3d2-199b-4129-b4e5-182f6cfc19e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="9c166f7a-7dbf-4263-828a-b72b5264fc09" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct  = tC.getPropertyValue("accountoid");
def count = tC.getPropertyValue("counter").toInteger();  

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>100</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010E984F75E125BCE05307991F0A6DEF</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010E984F75E125BCE05307991F0A6DEF</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010E983A86DA3A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>true</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010E983A86DA3A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010E983A86DA3A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35121 - StreamView - LLP - StreamHandleIDNotValid - Stream handle supplied is malformed - 400 Bad Request_MIGRATED" searchProperties="true" id="42b4e92e-659d-4bca-8850-6f41cf0d67fb"><con:description>This test case will verify proper response with the supplied stream handle malformed.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="be39238d-139d-44e4-b9a4-0916cda1ae7d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_HANDLE_ID_NOT_VALID");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="5179bc02-4c07-45f5-86ca-9fecbdc6a292"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1956088f-2ea8-449a-b8d9-6d2e27b6083c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of malformed stream handles" id="16d2f43e-7d96-474e-a57b-5502e026662a"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">b&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">C&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">D&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">ee&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FF&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">gG&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AAAAaaaBBBBBccccc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">13332a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">a322212&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">332232a3232&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2232-232-111&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!!!!!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhndleid:org:dece:3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:streamhandleid:org:dece:3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece::streamhandleid:org:dece:33&lt;/con:entry></row></con:configuration></con:dataSource><con:property>sh</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="4482f54e-21f7-4969-98ef-2179786b0289"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>sh</con:sourceType><con:sourceStep>Data grid of malformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="ce14cb93-ff94-4b3e-abdf-adb9b60aad73"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get the next malformed stream handle" id="4e63c706-1e37-4b71-8b3d-54a529042689"><con:settings/><con:config><dataSourceStep>Data grid of malformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_HANDLE_ID_NOT_VALID</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35122 - StreamView - LLP - StreamHandleIDNotValid - Stream handle supplied is malformed with special characters - 400 Bad Request_MIGRATED" searchProperties="true" id="66fdb0ca-5af2-48c0-a742-cc24f35835c0"><con:description>This test case will verify proper response when the StreamView API is invoked with a malformed stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6779b7c6-3e8e-4fd3-96dd-0e79a2b59f7e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_HANDLE_ID_NOT_VALID");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="11793bad-47f9-40ff-887e-1a79eac50a9a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6108c1b7-cffc-405e-97a9-2e6b62bd0dd8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of malformed stream handles" id="3694755c-0b12-474e-81a2-8f8c8e0eb6e9"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">@&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">(&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">)&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">_&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">_&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">=&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">:&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:=&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:......&lt;/con:entry></row></con:configuration></con:dataSource><con:property>sh</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="9db32ed9-7f74-4ba3-b306-a59482c87b11"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>sh</con:sourceType><con:sourceStep>Data grid of malformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="3da0ea86-18b2-4ba3-a0e4-d89d21bd1792"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get the next malformed stream handle" id="cc607dbc-b03e-4d17-9508-be8ee9e82a47"><con:settings/><con:config><dataSourceStep>Data grid of malformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_HANDLE_ID_NOT_VALID</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35135 - StreamView - LLP - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'deleted' displayed - 200 OK_MIGRATED" searchProperties="true" id="eb0952ad-f7e6-4f61-a738-04e6a59d936c"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of deleted will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a0379e42-3007-42e6-9ef6-6260040ed6a3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9c701f6a-6957-486f-9fbc-9be576418432"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="87d34644-f117-4dad-87b3-97bc3d5ed174" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="94eb5fb2-e38b-4062-a916-d90f7c57871f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2bb8c8b4-6638-4f74-a480-26084e8ee296"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="fa4d4804-e7f9-4efc-ac1d-360cd216004b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusDeleted(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="3b746f53-f87d-4814-ad68-371d5355f3b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="13263b3b-22d1-4e7a-ba93-60db22cf5243" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e7928551-2c9c-4f8a-986f-11a0baf3ddb3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="51698bb9-4625-470e-8e47-fe2698d958fa" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010E98411B4825B8E05307991F0A850E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010E98411B4825B8E05307991F0A850E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010E98411B5325B8E05307991F0A850E</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010E98411B5325B8E05307991F0A850E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010E98411B5325B8E05307991F0A850E</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35136 - StreamView - LLP - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'suspended' displayed - 200 OK" searchProperties="true" id="447cd00e-7051-4b4d-9863-8585b471818c"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of suspended will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c092e523-4e78-4194-a7fd-34f378a01a52"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="c12f31eb-8602-4901-9406-3a47f15eb770"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ae15941d-7d6a-430d-b7c8-3077ba2dd79d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a412eff5-dd17-4d5c-85a2-864f98f5beb5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6d77defc-ba9a-4d25-a4cd-7427dff566be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="ef68c136-92b6-4e43-ac86-40ad16d787b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusSuspended(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="62a4977c-096a-41a1-ae40-19e81addb47f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="9b5114c4-70fa-4833-a2df-16842d4d97de" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="97d6c58f-ae87-48c2-a1f5-8f2726a2073d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9d46acca-d035-4ec4-a21a-e9f5cbe5fbc8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010E984384743A2DE05305991F0A2537</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010E984384743A2DE05305991F0A2537</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010E98411B7125B8E05307991F0A850E</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010E98411B7125B8E05307991F0A850E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010E98411B7125B8E05307991F0A850E</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35137 - StreamView - LLP - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'other' displayed - 200 OK" searchProperties="true" id="9bc3f9e5-2333-4bfb-8a6c-e2a93834a8b0"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of other will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2b62a298-ba6c-452c-b3f1-a13aeb6a2427"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a736f04e-f8d3-449c-b07c-1731b67fa2a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="2492565c-e0ec-4a80-a03c-c9b2b56c9b01" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="eede0515-9f20-4052-90a4-6128d392efc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6e3f960c-a832-4e1d-b8fa-7477cd411918"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="7698d558-dcbb-480c-b1e7-37c3fb68f468"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusOther(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7dbcabca-79c7-4e2f-9dd0-c5c933bad6d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="56179709-e727-40d4-97f8-a1f95b80fb1b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b5a19c8d-8fd0-4999-9186-7327786aa723" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="dab8c634-1bd1-46d6-b58c-9252ad7db1c4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010E984E96E83A35E05305991F0A5545</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010E984E96E83A35E05305991F0A5545</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010E983B2A6A3A1AE05305991F0A4C91</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010E983B2A6A3A1AE05305991F0A4C91</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010E983B2A6A3A1AE05305991F0A4C91</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35138 - StreamView - LLP - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'pending' displayed - 200 OK" searchProperties="true" id="2c04c06c-ffad-4b02-8a87-4ffb7144d094"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of pending will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c0bd6a58-3037-4357-b6fd-d358a73205f4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b0890b6a-11b9-427e-a9be-37380fb4fd4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9a0f05a0-53f9-45c5-a08d-b90082b25e23" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f1e0a012-3e78-4f9a-b643-85278598a66c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="3b860f40-3d01-4acb-befa-0b3fb2be289a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="11fb96e6-07ce-4102-a9c6-e3932f604b04"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusPending(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="cbeb171c-3a53-493c-9910-139eedd30a74"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="99a610d8-506f-4374-a6be-a093819342fd" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ca556809-944b-4171-8e14-e140f96a3b24" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8122b422-816a-4b92-a359-903780c95a8b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010E98411BFB25B8E05307991F0A850E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010E98411BFB25B8E05307991F0A850E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010E9849277B25BEE05307991F0A9BA7</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010E9849277B25BEE05307991F0A9BA7</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010E9849277B25BEE05307991F0A9BA7</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35139 - StreamView - LLP - Stream with RightsToken RIGHTS_TOKEN.STATUS_ID of  'other' displayed - 200 OK" searchProperties="true" id="897d3d83-e15a-42b1-b3ef-0c5d1f278a66"><con:description> This test case will verify that an active stream associated with a RightsToken that has a status of other will still be returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d2d20fac-948c-4ac3-a0ae-c66b19ba283c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="2dec6f58-4869-42d2-91c2-dea61fe7768d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ae5cd7f2-ed88-4dc8-9596-378bfbd46f66" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="88128990-c6f9-462d-b9b1-cfae8d78a131"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f3f08a07-b3cd-4650-bae7-9231691d48a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RIGHTS_TOKEN.STATUS_ID" id="c04f4c35-c395-4f36-b389-6591df9a28e7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenSetStatusOther(rt) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e40ddbef-1212-438b-8132-4a6499eb9e0f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="36fcea2e-fdc8-4d2b-9175-a0a675bb0c95" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b99347bb-1e89-49b4-ba76-f815349f9965" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="578ff321-f399-4196-bfe8-097eea57d252" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010E983F080D3A18E05305991F0AA4FA</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010E983F080D3A18E05305991F0AA4FA</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010E983A87DD3A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010E983A87DD3A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010E983A87DD3A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35141 - StreamView - LLP - Stream with RightsToken PURCHASE_PROFILE.STREAM of  'N' displayed - 200 OK" searchProperties="true" id="adaa474e-dcb2-44a1-93ef-8182fc3366f3"><con:description> This test case will verify that an active stream associated with a RightsToken that has PURCHASE_PROFILE.STREAM of  'N' displayed</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6b5bc8ca-f464-4834-9875-5fd759c76a14"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8537ff4f-e0b1-4141-a832-05766e23ece7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d570fea8-2ac9-4eff-9db6-7f122a54a008" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="2cc5ef12-fa26-4fb6-929d-71647770c18e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="5c047fd0-e989-4074-bcf0-ea20674582b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RightToken's PURCHASE_PROFILE.STREAM to 'N'" id="c1f5a494-9ae7-46d1-85d8-2600640d06a1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOff(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="0514e1cf-e4a4-42c4-8d84-3068a0f54e59"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="19a2a470-e295-485e-a525-8f57fd724071" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="9e7a8387-f288-4986-a7a9-9176163042d3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="b9c47910-6d18-4511-adc6-d699440ad027" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010E983A88103A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010E983A88103A14E05305991F0AE5FD</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010E984F779925BCE05307991F0A6DEF</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010E984F779925BCE05307991F0A6DEF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010E984F779925BCE05307991F0A6DEF</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35142 - StreamView - LLP - Stream with RightsToken whos RENTAL_ABSOLUTE_EXPIRATION has expired - 200 OK" searchProperties="true" id="67df8c39-86d9-46bf-a7fc-7b88e74e76d4"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c3d8f61e-c9f7-4e29-8eda-fa8eae00695b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="56ba0bd8-17bb-4491-92bc-935fcb4f6d40"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="08728f43-3409-4b6e-ae2d-ee3df40f4493" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c0963e59-b889-4704-9b11-e1d84bbad249"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c8bbb785-5c1d-449a-98da-5ce3c6cf7b35"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RightToken's RENTAL_ABSOLUTE_EXPIRATION to past" id="87d8855b-7422-4c7a-8ae5-fa9112fcc668"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsTokenExpireYears(rt,1) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="62250587-24f6-4ae0-8ccd-97acf237e387"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="820d6209-89ac-4829-b7ad-b5794b756567" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="10706d66-99a7-4c27-a2fc-4e0e29cde890" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="4467a007-558c-47a8-992c-6244e3567872" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03EF7C011975E05307991F0AA8B2</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03EF7C011975E05307991F0AA8B2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03DA19D324DDE05305991F0AB4F3</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03DA19D324DDE05305991F0AB4F3</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03DA19D324DDE05305991F0AB4F3</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35150 - StreamView - LLP - StreamClientNickname verification when value is NULL - 200 OK_MIGRATED" searchProperties="true" id="733e1f33-b416-477a-ac2d-c4ec1431b533"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b8549be4-185f-41a8-99a2-453c8b64829f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e07d3156-dc28-491c-a1da-66eac24f8ed5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a2fe8735-754d-407c-aef8-db45fb839331" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="068c2c67-d804-4c84-8fce-d768374741aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b609d70e-5d8f-4ada-bb91-143d5202885a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="24c3fa02-f13a-468a-acd0-cbe265ea9500"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="675b426e-7b44-4c28-9b31-9b5034e3b3f2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="668f52d9-da8f-40c7-a1b6-1dfea10739f7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="bb2cd5a5-47d9-4e1b-bab6-b5da1f772b18" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6JME773V1jupWU4KPFQSaqGo6ioIB7vEEZAEZABQX79N2A0JpvN7vtdWMk0fXi6+6HpeUHG0aN7ACEYxW7gV2X+tba1mpTxTFONbteCjRaz7TSwyGpYRqtDQ8uwOma3VpURSqDso9jw49caTVJUg2w2qGed7PYYusd0n0iG3NSqCxgh7BmrPJG1anb0fNQro77WksjvBQZyUc83jhD1YrM3A8qohzV7xg1S7e3lCrIMGL05cRz2CMJ8sqAJPc98MoMj8UJ80nmxUG/m2r4RJxF8j2mh19q7bZqmT2nzKYhsgiZJkiC7BNaxkGv/qr1VbsbQkv1dcD1zhh/4rml4bm4UoBQYO4FVBZ4dRG7sHP/gmiIosnDdgJnZMKmW/6tGfAQo0f2jp08gI2Q0kGNQN2ca3MEI+iaszjX5tfbrnxp4NdUjw0e7IDqiL+f/hgj6Z+gFIbQa6JbYDdy/e/ymWm8v0OzJvuklyD3DccGS0DAhqk4juHOzkYsw9yxULbtfzdCNYND8Lx15IR5xYtjEN5XhXRui+P9p12Orrl4WhpfAt1XO7OTNMxHP27y+R/tztHfkiRIoaP1aQnhUvoK6d/r9/JWnd1q9Gx3rk+Nk5p0v3HboU1ta6vSbpOtqgbM5EaLVdtAs1+Y0sEx0Vup5eBLzCdjk4c5OdZWk5sNLOG7WDyOfvJwqyioayiTFWuP+erwddR3QGeWd9YyzjnnbZAly1JH56crq9mfSfsZt2nk2YALdoenp1l4991sTbrJchExbQLsK3x4I0JS68aAlhMt4QQnq60dOjzkUeQ3hpUyy+H/FkF3eiI37gSsGxQ6/nTF8U2SZT3KOA5eZDVKZBTb+7cGYtQ8n5+BK3ZRkgaqKgOdYby+MFHCQADUXWEfhFgsl43IwYO3xAhvqFeBtWEUTUj5d8wtV7Qupo1vS4rKVvGSTC2MFoNKYcxRBExa8pguKAoKrLFP4rZTtlZmSyuqar2AHvJCFuYVzhlLmmrTMKDOGXs+YZLNaYLl4GR3H560ueAqnSNzsJM3kbZNXhQHQ1kuTFhNsm4+OYVBZz9kHo0EI9wCKKYljglzRD6miz+kxrxmlTP8sU2RpoKgo5dQyK6kipIPFPP+oBccquKVCJuhgeq2FqXPimNysBshYMr6igZS3S+OhkFqTGxBFJdMKd63VSEg1QZuPRUWTUwGUMl5IPbSlx85Wcs5mU80GOtg/NoZThaXo4+e+djYvzKliSCLYHheU2dQc02VcYxWk9qaT8up6MAw2MnYzBqrAsirAgEhQpIbrz4IRu2AmodulXTjaicEROlFFoYLh4ZxnZMdtTuzpeMnwu0N7KrnTpmE5hOyZ9L55ALIMrSHlqIalrQmN9938eTKcr6AbrfN4zKjUs9thKtoyma/4wGtb/dV6Pqxna1PVJ9PZfDnNs2x82ndyL+5P2H40Gyi8PRlDOEVmnSANkdU7PMOt+3vMp51GQqYCbIUFQNrbtuBiArP9/ZWEfU0RMHmBwqUSt+SkGZCkuiCzvKruRIeamtIimVNjRRYsD5fpsl5pXmXDsTzuFGksN+GaFsmNDqzSmdoSRFudM/XBCm7UsacvYpCGi51PUaQUqv2dktqmUjDAktMZi98itpLIYG5MwgGZDRfPJHVSLW8w64J5M5vRh2zi2JvLwd4ccFPWD6/OWgfeQn/gmIwptqyouqApoHN93zJFnjc1zzxm4fZoZryOe1YaBzoraKJKzjOeB8OrDOmAztA6F/YKJ5T2FZApBqbFebty0NofuxNdSDBpkwe67Lc0+VeOFRSrfObYiQMq+Mox4coxAexOdbnDU4h55kK0TG1WEk5qezEadENSXY0OFbYuEnbseq2J30n1YX1JXdK2s1eXy67MO1zd362d5jZmSSM3VTg4tCVXO/D+c8u7KCNFZeYu4V3IPTylaFQZy5QvNONcJLpRUmePG/eY580WPT9OZ8lZnhtDRF2c7WnZTffT/jNBRNKFydubsyquAvP9O/J1SN6F1zFKPA7YTxP4tnrNku0emvHtWHyHZb4q4o+jEf+8xhUS12rsStVeWOyCKIZ+XHsrrIoVrpfgRc+1evjLeT13hU6bY9piC9CtttBqCWSLpEQSkEy3S7Nk87brXVF8gcgF/s4tYhXL7PVj/TNA89jbQiOCUe0HT0WdqrKv4e0j8BHUg9caS7FNgeNbZLMldjsAiBSDf60m3QXPTbol1qrjIJ74kwjsYhg9LMjtrwuyBk03dGGxRb/vEijGhTgZ5yT2qKez8eTDBK/ZUbHp9uhWhykLQFjJMTTxAzzdojBA8VPohOUy88c0vj67ZYx1LLdQQAVoFuJuwW9W+tYN8W+Z0d+u/jf3ILHcYmfB5Ysj17wi+fzogw0FDe5UILtU64b5rvpvpl2Kev7dlPgBEfG1GPdI1tl9iHu7mOBdG69j5X0E4aadjKfTU3I+J2Wb2iRJExF2T1AEScygmeB18aIHB+gTdw/Evyzqd8xf4t7ln9ElsePPYvyWHzGjquXx75e0T9a4ADHM4u9knIevZUXwH29uZs8s9LB4iv+kQWR91P0bXw9xMORiQrm+XZyKDfvyub3vb0LPDLBXFw+pIHr0/Z39d7E/C+/lukOJMSu2SQz//KRaTJ/XmmGaQeLHMl8rBY8TscQcX0LY+1D6zU254r7fWTL0xzvLShnNTAcejdpd1/27csMtG29CbIXcEstrLcO3bxzctx8m8DvAPwxh+qch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03CD1AD424EDE05305991F0A716F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03CD1AD424EDE05305991F0A716F</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03A8F737196EE05307991F0A2FA9</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03A8F737196EE05307991F0A2FA9</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03A8F737196EE05307991F0A2FA9</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35151 - StreamView - LLP - StreamClientNickname verification when value is single character - 200 OK_FLAKY" searchProperties="true" id="7f422a4f-784a-4942-925f-3df7aee6c0ef" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="07f0391c-a0fe-483c-b42a-a4106d9c0760"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ddab468c-80a6-42b9-8eb5-ab35e208fe39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="0efeccc8-48dc-4304-a38a-471678e67e3f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="9933a2d2-8cf1-447d-92a7-508381749391"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="844ded7c-af28-4af8-9995-ff8c73b67d0e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nickname","a");
def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="08bced26-9904-4d3c-8276-d91724faf011"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f7a0a31e-cf43-421f-a6cb-76aa881907ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="5a1db448-b471-457b-b315-b9804603d6e8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7258023e-1449-437f-bcd8-f3b34d040097" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150505_03165</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">a</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:6619879D4737436DB6F7DE9DB035D289</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533A049595416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533E7A47FB4170E05305991F0A6A60</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZpb+I8EP4rKP1YhSQkFIgKUrjepaLHcq76pXKdCbgkTogdrl+/doCUq33ZXQkJeTKeeWbm8czcMxT4BdthDGJOQppbBT5ldiqtKklM7RAxwmyKAmA2x3bfeezahbxuo/0VJddpVpU31ygXDQ8sFenlimp5rquiApRU09Nd0zPfS7hSEaqMJdChjCPKq0pBN4qqLn8DvWJbpl0085Zhviq5EcRM2BYqeV3ZgVqxqjLlPLI1bblc5pdmPownWkHXDe3XY7ePpxAgpXa/jSh1FNd2+jjvAgbfx3kcBtq9dqRz7zK7TyYU8SSGnS/3K1+6plc0oeMyMrlRsrvgdqgXpscGoiElGPlkg2R+HoFPQzfn+JMwJnwafBmEoUvDKqywig2L3ijaMbQrDR0hjBlS2RQZO1s98CAGiiE37HWqys11VUuvDmJEmRfGATs+/hkeoAvwwwhcle3D2kG73uCFTNXuAdsdiv2EkQU8SbJGCAPbVRPw9aZyLzF4ZNUlTBB0xSQ67RDeyXGbjSaZAON/U6CD4myNjJCfQG38HsCy5bnDcX9Bey8TpIe3CR71Zku9mgI4VE4FWWm3xxNSZiTa3ohRd0y80YLXo3rpp2kkemAyLa43W5OBUSmN/yu0np0fLb3ZGz3ceq3h0B2jweSBEvCagwmOjcH0ln/g9rhXduaz4ab50DWKZdp7tX5E7Y63fp7+WuPE+bmZPTSHyV2n3JuauvYxx/0wmj/yx1ax6bw+bVbz21LRfRovezM00JJ1a4HbFaCreZdvzNtRyQj8WTUL5wD/sWz/5vvJ+wdgvj9KGnSaubaoEuLfNzMpIa7qpap2JJsP40C5UpO3ZO+wE9HuiGuLGm7PRrFomq2SY5XajmWU9JZeNPVipWK0defOudP3TWaL4gRiI6Qekb5ky93S5nuAOLAZUBdidREmotMx5RuLTcRRrkN74hGElMEgFO254otmHUWbebSJjPnCc5FZSt4JZkruKeTP9Dl2PA7xUU82Ckc9uQeYRARk45a8ZoLYjItczNEi4b6RX6A8hUS09lh2WbtglYsaI0Hkg0SqBaGb+JCPplGaGY1t/wsqwiyV9lqD9LV9Gdfpt30KhI5LpAKTsdRBlBEuDBdrH8hZwHcXh9DevJO4RD4skU8eE7xFcvzpkyaSHxlHml2n/7IHnen+wd23Rv/N+EsD3X9w3v1X56KW5ze1b/KpnZYyc+QuyIHb/dYh5pfoeLU9EefIyM/zyWKRpNyzLFOLhXlNkkDTC1ofcCJ68noQzoBqmRXtqgGYAT9xnsmPISZ8SvsccQjEW8mlxys2nj4wufF0xCNfXbtOHbkUqeOw4pdkDV9saxLxtwsdtrHUE+IX8bcMY/ezYhdsHfgRcYqFhxM6kSc5/NZf8AKHwiwRbTuMD41fMnDJ+bEwS3KGhQtCvSccvv6Sk/24qiCMw4TyTlNJBYczIsXJ1xHYn0pnZtIxlO2l5P8XU5WkFMAgtllGUvtyvbDlE6CTgzmzc3o2ahzdqhQrlmXcNQ5HjdGo17OkHKGrnYnPJQd5OuV47Tc=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15533E7A47FA4170E05305991F0A6A60</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533E7A47FA4170E05305991F0A6A60</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533A049594416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533A04959C416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:15533A049594416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>15533A0497FA416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:15533A0497FA416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>6619879D4737436DB6F7DE9DB035D289</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:15533A04959C416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>6619879D4737436DB6F7DE9DB035D289</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:6619879D4737436DB6F7DE9DB035D289</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>15533E7A47FB4170E05305991F0A6A60</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>15533E7A47FB4170E05305991F0A6A60</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35152 - StreamView - LLP - StreamClientNickname verification when value is max allowed - 200 OK" searchProperties="true" id="57c65077-fc49-4796-8df5-dd1b55341c0f"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="06669f83-564a-46e9-a9b6-7d3852fe6c2a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="af8a505a-acd1-40ba-8037-43c2761791e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="19d8ebdc-a7b2-4d7d-92a0-89ac51c83c3f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b70672de-b598-4dbe-8b6d-caa95a18ef79"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="fa672be1-f0c5-404a-9337-4d78016770bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nickname","kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxxx");
def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="c2cabfb9-c6ad-42e3-8ea3-3602212386fa"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9f57b4c8-138f-4dda-bc2d-3aa2b771bf09"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a20decd4-9aba-43be-9c41-b38a3add70f1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d472d469-f149-44f1-8080-b01e5b5bb997" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03A84AA224EBE05305991F0AAD51</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03A84AA224EBE05305991F0AAD51</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03A935C31973E05307991F0AEE2E</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03A935C31973E05307991F0AEE2E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03A935C31973E05307991F0AEE2E</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35153 - StreamView - LLP - StreamClientNickname verification when value contains special characters - 200 OK_FLAKY" searchProperties="true" id="1d41606a-b4c1-4a13-b09a-16bf42df1329" disabled="true"><con:description> This test case will verify that an active stream associated with a RightsToken that has expired is returned. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c5a9a7a8-71ae-4f5a-90df-1d767a61c654"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="2c63e58a-0127-47b3-be60-600e4a0a30e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="415557eb-c887-4e7c-b499-2201a5ba1e11" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="17626a46-d10a-4afe-a9eb-c2875947bbfd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of special character nicknames" id="57ebe835-075e-4466-b55f-eb53db07fcf9" disabled="true"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!---100&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">abc-299!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1|2|3|3&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1000-(aaa3)&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">34%a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1@@@@@@1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">400*&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">?&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">800#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">[34]&lt;/con:entry></row></con:configuration></con:dataSource><con:property>nickname</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Nickname" id="808d5c3a-14f8-4711-9792-5a418acbf580" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>nick</con:name><con:sourceType>nickname</con:sourceType><con:sourceStep>Data grid of special character nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b1773ad9-a335-4939-b482-a234a0bf86a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tC.setPropertyValue("nickname","1@@@@@@1abc-299!1|2|3|3");
def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="c12192ab-b3ce-4586-8af1-38cca2582fdb"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b6270473-bb50-4aec-93c2-24b21358a615"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c97b145d-96c0-4a76-8998-f49fb543d2e2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="51253bfa-ccfd-47c2-a7a4-325a46ac82c9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="cde0ed23-385f-4ea0-935b-3505baf4ca3f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next nickname" id="e2422320-0712-43eb-8efb-3f3b221d0573" disabled="true"><con:settings/><con:config><dataSourceStep>Data grid of special character nicknames</dataSourceStep><targetStep>Property Transfer Nickname</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150505_03165</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1@@@@@@1abc-299!1|2|3|3</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:044875FEAADD47D981A96C0F662B6D6A</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533A049595416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533E7A47FB4170E05305991F0A6A60</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZpb+I8EP4rKP1YhSQkFIgKUrjepaLHcq76pXKdCbgkTogdrl+/doCUq33ZXQkJeTKeeWbm8czcMxT4BdthDGJOQppbBT5ldiqtKklM7RAxwmyKAmA2x3bfeezahbxuo/0VJddpVpU31ygXDQ8sFenlimp5rquiApRU09Nd0zPfS7hSEaqMJdChjCPKq0pBN4qqLn8DvWJbpl0085Zhviq5EcRM2BYqeV3ZgVqxqjLlPLI1bblc5pdmPownWkHXDe3XY7ePpxAgpXa/jSh1FNd2+jjvAgbfx3kcBtq9dqRz7zK7TyYU8SSGnS/3K1+6plc0oeMyMrlRsrvgdqgXpscGoiElGPlkg2R+HoFPQzfn+JMwJnwafBmEoUvDKqywig2L3ijaMbQrDR0hjBlS2RQZO1s98CAGiiE37HWqys11VUuvDmJEmRfGATs+/hkeoAvwwwhcle3D2kG73uCFTNXuAdsdiv2EkQU8SbJGCAPbVRPw9aZyLzF4ZNUlTBB0xSQ67RDeyXGbjSaZAON/U6CD4myNjJCfQG38HsCy5bnDcX9Bey8TpIe3CR71Zku9mgI4VE4FWWm3xxNSZiTa3ohRd0y80YLXo3rpp2kkemAyLa43W5OBUSmN/yu0np0fLb3ZGz3ceq3h0B2jweSBEvCagwmOjcH0ln/g9rhXduaz4ab50DWKZdp7tX5E7Y63fp7+WuPE+bmZPTSHyV2n3JuauvYxx/0wmj/yx1ax6bw+bVbz21LRfRovezM00JJ1a4HbFaCreZdvzNtRyQj8WTUL5wD/sWz/5vvJ+wdgvj9KGnSaubaoEuLfNzMpIa7qpap2JJsP40C5UpO3ZO+wE9HuiGuLGm7PRrFomq2SY5XajmWU9JZeNPVipWK0defOudP3TWaL4gRiI6Qekb5ky93S5nuAOLAZUBdidREmotMx5RuLTcRRrkN74hGElMEgFO254otmHUWbebSJjPnCc5FZSt4JZkruKeTP9Dl2PA7xUU82Ckc9uQeYRARk45a8ZoLYjItczNEi4b6RX6A8hUS09lh2WbtglYsaI0Hkg0SqBaGb+JCPplGaGY1t/wsqwiyV9lqD9LV9Gdfpt30KhI5LpAKTsdRBlBEuDBdrH8hZwHcXh9DevJO4RD4skU8eE7xFcvzpkyaSHxlHml2n/7IHnen+wd23Rv/N+EsD3X9w3v1X56KW5ze1b/KpnZYyc+QuyIHb/dYh5pfoeLU9EefIyM/zyWKRpNyzLFOLhXlNkkDTC1ofcCJ68noQzoBqmRXtqgGYAT9xnsmPISZ8SvsccQjEW8mlxys2nj4wufF0xCNfXbtOHbkUqeOw4pdkDV9saxLxtwsdtrHUE+IX8bcMY/ezYhdsHfgRcYqFhxM6kSc5/NZf8AKHwiwRbTuMD41fMnDJ+bEwS3KGhQtCvSccvv6Sk/24qiCMw4TyTlNJBYczIsXJ1xHYn0pnZtIxlO2l5P8XU5WkFMAgtllGUvtyvbDlE6CTgzmzc3o2ahzdqhQrlmXcNQ5HjdGo17OkHKGrnYnPJQd5OuV47Tc=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:15533E7A47FA4170E05305991F0A6A60</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533E7A47FA4170E05305991F0A6A60</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533A049594416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">15533A04959C416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:15533A049594416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>15533A04995A416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:15533A04995A416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>044875FEAADD47D981A96C0F662B6D6A</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:15533A04959C416CE05305991F0A1CBB</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>044875FEAADD47D981A96C0F662B6D6A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:044875FEAADD47D981A96C0F662B6D6A</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>15533E7A47FB4170E05305991F0A6A60</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>15533E7A47FB4170E05305991F0A6A60</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_35154 - StreamView - LLP - StreamClientNickname verification of escaping of &amp;, &lt;, and > - 200 OK" searchProperties="true" id="05a64e39-80d8-44cd-84d2-45c18a902c10" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test case verifies the proper XML escaping is performed on the STREAM_CLIENT_NICKNAME. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="72a7faca-ddf7-4e1d-997d-35c9ad962a79"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");

tC.setPropertyValue("StreamCreateCount","12");


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="030b79a4-fc2e-47f0-b0dc-718af028af2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c4446dc6-d586-47da-a08e-86f1f3d4ba22" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fd36a90e-1cad-4d75-96e9-ab90f830f707"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Data grid of special character nicknames" id="1384af99-6612-4a11-875e-a11f5ffaed27"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Testing&amp;amp;&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#100&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">This is greater than >&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">&amp;lt;time of day>&lt;/con:entry></row></con:configuration></con:dataSource><con:property>nickname</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Store newly selected nickname" id="81e110de-b797-44da-8ed3-64593e65b5bf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>nick</con:name><con:sourceType>nickname</con:sourceType><con:sourceStep>Data grid of special character nicknames</con:sourceStep><con:targetType>nickname</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Escape the special characters the nickname string" id="afc122df-426e-4daf-b87a-22a2b716a155"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();

def datarowcntBefore = testCase.getPropertyValue( "nickname" );

testCase.setPropertyValue("nicknameBefore",datarowcntBefore);

//this.log.info "datarowcntBefore is " + datarowcntBefore;

datarowcntBefore = datarowcntBefore.replaceAll("&", "&amp;");
datarowcntBefore = datarowcntBefore.replaceAll("<", "&lt;");
datarowcntBefore = datarowcntBefore.replaceAll(">", "&gt;");
//datarowcntBefore = datarowcntBefore.replaceAll("'", "&apos;");
datarowcntBefore = datarowcntBefore.replaceAll("\"", "&quot;");
//this.log.info "datarowcntBefore is after" + datarowcntBefore;

testCase.setPropertyValue( "nickname", datarowcntBefore );

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="247c7fec-36d1-4193-95f1-83c82d93f514"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="bb642fa8-42b1-4754-b1f9-333bd80588c8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Restore the Nickname for StreamView Body Validation" id="e01455f0-bdd3-4b99-a353-75b880dd560b"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();

testCase.setPropertyValue("nickname",testCase.getPropertyValue("nicknameBefore"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="0ae71a41-4a45-43a3-b5fa-1bde40e2c8d6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="1ce1c6e0-0da4-4447-a3cc-414f902ba97d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="63778e3d-6205-4679-a82f-8f5e8f219413" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the newly created Stream Handle" id="dd0ddd7e-1e7a-41ca-a1de-9c4b9e326534" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next nickname" id="dbcda4b3-a64a-4f0a-960a-3b6dd6ef529a" disabled="true"><con:settings/><con:config><dataSourceStep>Data grid of special character nicknames</dataSourceStep><targetStep>Store newly selected nickname</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03A936161973E05307991F0AEE2E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03A936161973E05307991F0AEE2E</con:value></con:property><con:property><con:name>nicknameBefore</con:name><con:value>&lt;time of day></con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03D9FFA324F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03D9FFA324F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03D9FFA324F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_36010 - StreamView - LLP - Stream view for account with single stream handle present - 200 OK" searchProperties="true" id="4a8839ca-f168-4596-b959-12956fdfdf08" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="26fb7b6b-d78f-4b85-8876-c88030ac2eb9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="03d3c102-b78d-4dfe-a406-2c975ac20d6c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="07064b9b-d30f-4a82-81b4-df9af7a5e13b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="2a24c559-619f-4b48-8703-dbdba836364e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a11a9043-b472-4f19-99b8-f8bf21316545"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="09f35443-7d62-4cf5-a6b7-ff3da80900f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="1ed95b27-90fc-4378-a64b-e037b99d0674" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="77c7a6ee-6996-462d-8f80-2d0919a01dc8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
 
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d4d651ca-c003-4b43-a1fe-e1b18e27abb9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03CC3504198DE05307991F0A746C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03CC3504198DE05307991F0A746C</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F042BD61E1977E05307991F0A18AD</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F042BD61E1977E05307991F0A18AD</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F042BD61E1977E05307991F0A18AD</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_36100 - StreamView - LLP - API invocation following StreamRenew - 200 OK_FLAKY" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="cb8ccdc0-257f-47a0-bb27-6e76f088b0f7"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2aa9184c-966a-4cbb-81c3-9230768444b0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d1a83121-c662-4a7e-8d00-ecbde1066637"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="69942e32-753f-4052-8641-5f6eb741d6a7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b62c7e37-c9c6-4fe8-aba9-f68f14b39b9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="c69d8984-9758-47e5-bcc7-510c3de44be9"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e5da3184-a94a-458d-bc57-4b853e99dbb0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;





</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="790f4051-3249-4d62-8d11-76656781c222"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="e6cbaa0b-b8e0-47aa-a48e-aa57e34453a5"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);

log.info"S expiration date $s";




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView before StreamRenew" id="93d00a1f-9107-439f-bf46-4c73f08aa43b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment DLP" id="103a4015-652e-461c-9138-215389cd7fb1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="26d7919f-413e-4234-a6ee-ce06a969c141"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="5d254925-1db7-4e98-be6b-b6fdd80169fb"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="2ac31ac9-7ff9-4953-b8ab-bc60d9288795"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="39c2a03b-12a7-4e33-851d-93b4a7c41578" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1de2c394-24e9-4187-ad2f-4ea8c8945963" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>1568449A4CD42E88E05307991F0A86FE</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZ/b9o8EP4qKPuzgvxmSVSQoEDHSn+MsJbtn8o4DpglNtgOZP30rx0gBUr7sk1CQr6c7567e3x3lxykiRW0OEdMYEoqeZoQHhTShpYxElDAMQ8ISBEPBAzC1u0gsGpGAHZXtEq/09CebceOoTGxq27sTKrOxHKrk7oNq9D0nciPfM/wgVTlPEN9wgUgoqFZhulWDfmrj0wjcPzA8mueb/zUKo+IcWlbqtQMbQsq5w1tJsQi0PX1el1b2zXKprplGKY+vh2EcIZSoDUvNxEVjlhzqw9rEYIoSWAN0lS/1A90LiMehHhKgMgY2vqK3vNl6IavS52I4+knrbyLoj6JaXG8AoQSDEGCX4DKzy0SMxpVWsmUMixm6btBmIYyXEW5SppDPmn6IbQzDR0gZBxU+QyYW1tDFCOGCESV78N+Q/t0XtWKqyMGCI8pS/nh8c/wILJCCV2gqMp3YW2hnW/wRKaalwgGfQKTjOMVulNkXQCI+LaaCJ5vqvLAUIzzAeaSoDlX6PR9eEfHTTY6eIq4+JsC7RVnY+QRJBlqAu/+8fPVPP8Cv9ov0c2TePlV7wzAWP+6bhQA9pULQVnazfGIlCWJNjfSVT5w+3R2cx0abpfBAcO9LvtGE7a6tXru94zd2T9HP3i3bV+AeGBfvExyl+ce6hnm53TmxeHjepmswq93Trvt6VhmrHtD4/b4tnOf9rz5OM+X4wfjhyDuTWh+YbfD7uy+1baih3geLXNv+fRlNnevr8c5sB8T3Rv3htcvF99GnNPFjf3taSraw/jpYvrYazXKcPbwH8p2bz7MJnMExe6oaNDvVHqySkB83MyUBEfVuFANFqr5cIGI0JrqluodQSbbHY4CWcPN2XTrnu36tmN2O4bjdbuGaxuu75s9o+W7XXPXZDYojiBeURJj5Uu13A1tPgYI04AjEiFWXdFMdjqufWCxAwSo9MlQPgJKOBpR2Z7rBibWfEXBZPFizjx37S6X8zSljla5o+Ke3LNWLBA77Mn2QU8eIogXGKnGrXjNJbG5kLlYglUmErO2AjWCMtnameqygeV4rs5xukiQQqqnNMoSVFvMFkVmdL75t6oA8kI67I6K1/ZuXMffdimQOhFWClzF0kayjOjEcDF3gbwJuH5yCO3Mt7IIq4cl8ykYhhskh59eaaL4UXKkM2iFDzvQpe4f3H2+Cp/NvzQw+Afng391Lmv59qb+QT7141KWjqIV3nO72zrk/JIdr7kj4hKYtWUtW62ygnuOY+tMmtcVCXTD0kMEM9mTf4/oL0T00op+1gAsgR85L+WHEDMxI6EAAqXyrVSK4xkbT4i42nj68pHn565TBy5l6gTKxSnZVSK3NYX4w4UOBlDpSfGD/FtTFr1W7IStPT8yTrnwCEym6qSG3+93eAGpNItl26Zs3/gpA6ecHwrLJJdYhCTUJBPo/S8V1Y8bGoCQZkT0O1oh2J8RBU7xe4GCV6U3ZooxVO6l+P8X0youKACR3GY5Luyr9SJQT4BM9+bM1unxqHEcv+VcdWyr63nFqPm8GTVevdctk3KArvlG/Fayl6djjjf/Aw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1568449A4CD32E88E05307991F0A86FE</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1568449A4CD32E88E05307991F0A86FE</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1568359341ED048EE05305991F0A95E1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1568359341ED048EE05305991F0A95E1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1568359341EE048EE05305991F0A95E1</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1568359341EE048EE05305991F0A95E1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value>1568449A4CDB2E88E05307991F0A86FE</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:1568449A4CDB2E88E05307991F0A86FE</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>156974E4EE3B463FE05305991F0A84ED</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:156974E4EE3B463FE05305991F0A84ED</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:E70C45F9B814D6DDE0401F0A05993F99</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>E70C45F9B814D6DDE0401F0A05993F99</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>3A850865B4394E7E865393F45897AE03</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3A850865B4394E7E865393F45897AE03</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:3A850865B4394E7E865393F45897AE03</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>3A850865B4394E7E865393F45897AE03</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150506_042135</con:value></con:property><con:property><con:name>useroid</con:name><con:value>1568359341EE048EE05305991F0A95E1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>93d00a1f-9107-439f-bf46-4c73f08aa43b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>103a4015-652e-461c-9138-215389cd7fb1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_36101 - StreamView - LLP - API invocation following Two StreamRenews - 200 OK_FLAKY" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="75d18931-f1e1-4c62-a721-d3d6eb0bc7d4"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3ac5de45-7209-4a5a-a662-77b6f9c77e9a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0bf11930-e756-4a0b-ba6a-91bd94fa9ca7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="b918399a-9adc-4b97-b1a9-6098ffcfbf97"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="551b2ce2-3950-4957-8ead-b9ce81edbcbc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="8bb99493-c2a3-486f-9835-d0c4b61c61b4"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="22bb95eb-92b0-41c2-8d26-bab5a2994d99"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="697f9c2b-206d-42e3-a4c0-2def953b7c83"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal" id="28ddc0c1-c158-49cc-8992-1545402f6292"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="fdf9dd77-32df-4f5f-bc37-812415aeb235"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="9bf149d4-bbca-410c-92f6-c74f1ec40efd"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Update STREAM_DATA.EXPIRATION_DATE for renewal again" id="df4c0aa2-c2c0-4ab4-a5c6-0b4db68cc5b9"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+10800000);
	}
else
	{
d=new Date(new Date().getTime()+54000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew II" id="a494ed6c-350f-4fd8-8ceb-53e706117fe3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 4" id="85cfe534-418e-49f8-925d-58acdcb578be"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f2fdd8b9-ad3f-4147-baa9-9d6ba88452d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="216034f3-86a2-487b-9eec-6e1076f1c326" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9d5215e1-12c5-4a80-97ad-ab92c948a60d" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A2001B2FFA0F54E05307991F0A8B0A</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMbKNuXkCM4RLS0oKEwfa8NJR5MWoNZKxZC799Ucy4AAhObR98mi92v1299Pu3gi8iByvJQQkknJW2CwiJrxM2jDShHkcCyo8hhcgPEk8v3U/8Jyi5eHDFaPQ7zSMH2AFpAxQMYnj1k23bDlmDWqOaZXtUvBszxyloFSFSKHPhMRMNgzHssumVTLt+qNV99yaV64Ua44zNQoTSISyrVSKlrEHtRENYy5l7CG0Xq+L61KRJyFyLMtG3+8HPpnDAhvNm11EmaOkudcnxQAIRBEpEr5AN+hE5yYQnk9DhmWawN5X8JYvC1l1pHQCQcMPRn4Xgj6b8ezYxowzSnBEf2Odn3uQcx4UWlHIEyrnizeDsC1t2IQNMYntsg8GOoV2paEThInApphje2/rAWaQACNQGD/0G8aH66qWXX1MMBMznizE6fHP8ABbQcRjCExxCGsP7XqDFzLVvAHi9RmJUkFX8FWTNcYExL6aQK43VRglMKObARWKoBuh0aFjeGfHXTY6NAQh/6ZAR8XZGZngKIVmr9+ORvUIDZffyGo6hTt/ZreTuFNp1xoZgGPlTJCXdnc8I2VOot2Nbdt25X231wqstCVcm7W6aPJrG/Y+Bp+tEp/+HLqLRZzejb5VqzavDT+uw3E0G0+63bgznj1/Cqzx99h5Cj9Xyfju08ZGTulLPA0DCNnmy/Zz7c53nrpV9Pil50wmE3/e+bmtcjaotq1oE4z9dF1BtfYofVpWB7z3MIw/repo+nt6D7XoNx0tZx2XDCvotkskb+ThHOE/lR3evJ8+/wQiD0dNg36n0FNVwvL9ZqYlNDBnmaoX6+YjJDBpNPUt3Tu8VLU7Gniqhruzbbc0gUpVp1Oyuk6la5VLVrVet3tWy62X3UOT2aE4g9jmbEa1L91yd7R5HyBZeAJYAIm54qnqdMJ4x2IHS1zoswf1CDgT8MhVe7br82pI1mtGcHlpM47rQeCUttty2Sh85XLIhklrJiE5acq2c9KUH4DQmILu3JrYQjFbSJWMJV6lMrKLK1xkkKrenug26zlurYwEXcQRaKhowYM0gmI8j7PUILH7OiYmIpM+dB+z5/ZmYOf/DjlQOgHVCkLHcguqjnBhuriHQF4FXLk4hQ7mW2lA9ctSCZUJJTskp79eeKIJkpOkM2j5owPoXPcP7v5o+z/svzQw+Afng391rmr5+iZ6J5/ovJS5o2BFj9we1g41wFTLax6IuMTFZTFdrdKMelXd2hNlHmkSIMtBPpBUNeXtI/8FDOVW0FUTMAd+5jyXn0JM5Zz5EktYqLdSyI5XrDw+CL3y9NUr31y7T524VKmTsJGXZO1IrWsa8bsbHfGI1lPikfqsefIS+CVbR35UnGrjkZSF+qSn3/YNXhCuzFLVt3lybPySgUvOT4V5knMsUhHqOZXw9p+CbsgNAxPCUyb7HSMTHA+JDKfcxuC9KL0yk82hfDGl/7+ZmjSjAAG1zgqa2df7haefAAuPBs3e6YVZc+v0enWrV3aPZ03t1mrlSTlB13wlfi05ytM5x5v/AQ==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A2001B2FF90F54E05307991F0A8B0A</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11A2001B2FF90F54E05307991F0A8B0A</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A2001372D30E26E05307991F0A4954</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11A2001372D30E26E05307991F0A4954</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A2001B30010F54E05307991F0A8B0A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A2001B9AA90FD7E05307991F0A622C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:11A2001B9AA90FD7E05307991F0A622C</con:value></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:D573E8DFCA2CEDFEE0401F0A0799365B</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>D573E8DFCA2CEDFEE0401F0A0799365B</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AA1A69450AEC4A05AC78516222DAFD8A</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:AA1A69450AEC4A05AC78516222DAFD8A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:AA1A69450AEC4A05AC78516222DAFD8A</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>AA1A69450AEC4A05AC78516222DAFD8A</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">done</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_03114</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A2001372D40E26E05307991F0A4954</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:11A2001B30010F54E05307991F0A8B0A</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>11A2001372D40E26E05307991F0A4954</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>11A2001372D40E26E05307991F0A4954</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>df4c0aa2-c2c0-4ab4-a5c6-0b4db68cc5b9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_36104 - StreamView - LLP - API invocation following StreamDelete by DLP-CS - 200 OK_FLAKY" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b44f681c-c993-4de9-ab87-8ab15a8597a0"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains three active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="596ee434-f104-44f4-8052-57991cc739ab"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a91cbf98-981d-41b2-8bde-ba345e1d0d43"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="e9e1507b-c589-497c-877d-f9be37f4f29c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="33b821cc-cf9d-4ec5-b959-439738b73978"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="287c50a9-0658-499d-adb8-3e99bd995bed"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="0ee70f62-310d-4c25-84cf-a9f26fa9fb27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="63528ff7-0b4f-42ca-b7bd-fd8eb5f65271"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="77084438-0181-42f2-aa60-d3173684bdf0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="8eeb9525-e620-4844-9646-44f02569a6c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLP" id="0225d49f-b972-49a5-bea1-589d5a273703"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="d3c624fa-312d-4a6e-bcaf-58c6b5236b2e"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d8e6a317-ebdb-4457-af89-50a5d76d52aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def count = tC.getPropertyValue("counter");


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e4916138-3da1-4ff3-b93a-360d9225f658" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct = tC.getPropertyValue("accountoid");
def c = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == c;
assert b.streamGetStreamDataHistoryRowCount(acct) == c + 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="7b6bceb8-34e2-4c71-b8f1-cd316f3feb23" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBUpdatedBy_1</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:D573FBAF11690D0CE0401F0A079957A0</con:value></con:property><con:property><con:name>rightstokenid_1</con:name><con:value>D573FBAF11690D0CE0401F0A079957A0</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03D9D3E1250BE05305991F0AEED7</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03D9D3E1250BE05305991F0AEED7</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_36200 - StreamView - LLP - Full user can StreamView Stream created by Full user - 200 OK" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="897c2679-6dcd-486a-ad7a-8bd27f00aab6"><con:description>This test case will verify proper invocation/results of a StreamView request on an account that contains a single active stream handle</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a9db90ba-ed3a-4206-964a-28d3501bd272"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","50");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="c0f5bcff-397d-4b21-b963-2b3a534ce8fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3863d816-3723-4bf1-9c32-96a9951d3ce1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="0d7d626a-f015-4b58-93b7-6b5c554fceb2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="4ad09535-da0c-4b9e-bedc-a7714239eb57"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="9cff62bf-c391-4458-9deb-2dc10fcd444c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="2cc2d04d-1276-480c-a03a-56e3e9736a1c"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d9223d13-43f5-474c-ba9f-01e3e864085d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="4d23bc93-5d0a-4ef1-b8d8-6e7e8bb0c2c3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="1d47c9d8-200f-4e29-b7ba-732534362716" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ca11ac2b-43e2-4b66-8a50-832d343b77c5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>50</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03A8F853196EE05307991F0A2FA9</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03A8F853196EE05307991F0A2FA9</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03CC353D198DE05307991F0A746C</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03CC353D198DE05307991F0A746C</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03CC353D198DE05307991F0A746C</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39001 - StreamView - LLP - AccountNotActive - ACCOUNT.STATUS of deleted - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="515f4c97-97b5-4a2e-8270-5d4ddf25a427"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b33f0753-c41c-4237-85d2-458f506b9611"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamview","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="05768fa3-e821-4d70-9e16-5dbc568910e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="9f42c244-60c2-441c-bc54-542e4d02321e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="f481b5e9-5e4f-4744-a5de-6daa206c73ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="db2e9a72-0704-4e17-9da1-afa58d98773a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="5fd9b734-6226-4af9-857b-4896786be7f5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9355f54a-dd1b-4d8e-8653-ffbb1373ab81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="56038ee6-d7b6-4eae-82fe-cbd8076c421b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamview</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03A7530224E7E05305991F0AAA98</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03C4E919197BE05307991F0A7E6F</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81705</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03C4E919197BE05307991F0A7E6F</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03C4E919197BE05307991F0A7E6F</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39007 - StreamView - LLP - AccountNotActive - ACCOUNT.STATUS of blocked - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="15fa2fba-8159-4574-8b53-171d153c0c84"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="721ead68-f6a1-49bc-9255-46f021a02f51"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamview","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="84f679cf-c517-44d7-b0d4-b12d10fab39b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="9c0fd5a6-a8bf-4485-b41f-2a4cffd1ff26" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="413839a6-ad53-4732-aedc-6e6cc448977b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="d74a0fc4-d96e-49eb-8533-35f83239ee30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked" id="8167ed03-ee5b-4ecf-92e3-8a48e997b115"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="de7f58d7-5367-4bfc-afde-d6c07bcddf24"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="79631e94-0b6e-4a53-9657-07cf356e6ca3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamview</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03D842DA250DE05305991F0A9C3E</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03DA01B724F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81711</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03DA01B724F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03DA01B724F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39051 - StreamView - LLP - UserNotActive - ACCOUNT_USER.STATUS of deleted - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4ab271fa-7797-4d37-8fb1-17e4c44860e4"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="581e6128-6ac2-43f1-a30a-cd481e425aa0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","UserNotActive");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a004a2e5-fb61-4ffe-b287-763e1aa5cc93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="ac109fc3-1023-491f-aaa3-0b6d27f00497" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="f26756ff-7c96-452e-82f5-164df8682c22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="64b62a0f-9479-429c-bf11-11167034ecfa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to deleted" id="d4fbc3e2-75f2-4ba3-a062-c7a61c434af9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="dbcce1ed-dcdb-4037-8c91-91908c372d57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="54192a56-7799-4724-a03b-54f336470746"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="4a3ce257-598c-4840-ad2d-c7695c643345" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03A9372F1973E05307991F0AEE2E</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03D9D50C250BE05305991F0AEED7</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03D9D50C250BE05305991F0AEED7</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03D9D50C250BE05305991F0AEED7</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81713</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_29102 - StreamView - LLP - Stream view by dlp_ManageAccountConsentPresent - 200 OK_MIGRATED" searchProperties="true" id="10a8b895-4cc4-4551-8941-297ccbe636da"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="36d9282b-52a4-4a86-b599-56fb2867c268"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="fceb3c5b-dc72-4787-ae50-955f02a27924"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9351ddae-ca52-4833-ae1e-0091d5ed244d" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="f718c880-d138-4fdc-a499-40333c3f2085"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="5fcb1519-e5f3-4052-8313-270ac658fbbc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8d34160e-9035-48f5-8216-482b69f09683"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="5f2bdb26-3c02-46b3-aa9d-ed76deb145fc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="28baf670-30a4-4209-8544-d3830f912800"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="2b1ee01b-be57-43cb-8797-bc1e5c17b6bd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="4da2eba0-a60f-4455-8f42-95ebaf43c0ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a6b6d5cd-8333-4df4-9c86-d3737ecceb5c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="db28a702-180f-417e-82c7-76de38e9cfc7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c674469a-f509-470b-af9a-dd9f703b635b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6B6B66E6BFAE35E0401F0A079962BD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6B6B66E6BFAE35E0401F0A079962BD</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6B6BA906B6C3D5E0401F0A059978BA</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6B001EB6264879E0401F0A0799733B</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6B001EB6264879E0401F0A0799733B</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6B6BA906B6C3D5E0401F0A059978BA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6B6BA906B6C3D5E0401F0A059978BA</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_29103 - StreamView - LLP - Stream view by dlpcs_ManageAccountConsentPresent_sameOrg - 200 OK_MIGRATED" searchProperties="true" id="308c9cc1-6a59-4489-abb5-829454f6e404"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6866b97e-9912-4d75-b87c-f5b1608cba2f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="166f0d5a-5026-499e-a936-4207cbe654d2"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="8117e7e0-6694-4a2a-b1a0-e22a0d0668d6" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fe4695f4-25ef-46a1-9ada-73b36e133f51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e6b8bbc0-be0e-4540-bbde-8649db60ca02"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="472f04ae-8707-49db-a8d0-e2e61b951507"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="a86dcba9-8dad-4ff0-8173-84c278d10321"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLPCS" id="16b7cc77-d4a1-4b46-b05b-3a1e78cf8827"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="6f3ed63d-8476-4b4b-9e5f-758362742bd8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="76d68bc6-fe4f-40d9-83b0-aeaa1bd9480c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="cfb3ea20-f05a-402b-acbd-bd4239ade076"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="34195d88-e3de-4fba-8ae0-d37f0808ca53" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f88fd7aa-67cc-4b0b-8f57-ea3c67154f4d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="260f1fa7-92bc-4279-ae5d-e9c13b567723" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6rMFn33V1iex5RhUJwqSVUzSFBRQXB6w6YFFEFpEPTX3waj0SRn+O5DyvRmD6v3XjSrX7C189kOwBhFsRcGZUV8raxotm2trVbVQhys1uvsqrpaw1aVq7OcVavZTLNdq5QVjBOkBDi2gvi1wtIMU6VrVaZh0O0O1+iwrec6TS8r5SmKMMlMXJ7pSjnb+QHuFFVfK0kUdEILe7gTWDuEOzHsTIA66BDPjnWFVHl7uYAsCkZvbhzvOxQFn20Eke/DZxjuqBfqwefFxp2J5wRWnEToo6aNXysfsWmaPqe15zByKJamaYpuU8THxp7zq/JWugYjWwnW4WUtWEEYeNDyvbOVg1JR7IZ2GfhOGHmxu/tNaoZi6Dx1FWWwCpl68KtCfRYo0P1jpgeQEbaq2LWYazIdrVGEAojKpq68Vn790wAvoUZkBXgdRjv8Zf3fEKHgiPxwj+wqvm7sCu7fM/7QrbcXBDtKAP0Ee0c0zFmytyDC5XGE1l428DDhno3LxfTLGb4SDMH/MpEX6h4ngU390BnRcxCO/59x3Y/qkmVq+Ql6A+6yazAyXxOpk+sMlIPlytqCX6tD87WAcO98AXWb9Mf6K09vtPoIQj1jnDH+4J1WM7t+qG/i9WE0OPQPK8m22HG9udk8RbXTacs3665rLk7brs8256u6H6tbtDiZp8MqPotwP8DrkhDBFSdF9Wwyex97x8xlnlrjUdhzdjOB0k7aHjrJELKKegz183Tc8lPNOy6n1lq1a5nQZs0Z47s8ng8aLbtkmLPFeEApW9Gwe9JJbvrw9XNP93vI99VHp2KT+f9zjm6LVmzdFkJ+UKzJ2xmjN1VRxOQsCOA0cUCq8MAhfxsw5J3twd16cjuleaBpXSAKvL+RBirYyoAxJd5VhelUzYQz6PHOcEoCjRLwl7yqS6mYLsSppr1LqWvY8vS0kv1keZaGKsBFsOCqki5NRd2QVBWEF1umiis526gTNVW0hVgiCUQp259tuR0jOfNIozh1wrGLCZcs51Ni754Gu+FxZUi+KqiyMDnIE2VVEzWpB/TFDLLdhMSeB7t9WFqY/F1Qb482AHVTmtQEZ9XYpqphskNRtwqb8WhTFbmnajgVtGJXcklKe1Pz/NkLgVcFeydlkgHGl15AQ+gO6eW8h60ZF6g6SEWnCO5LqT26AlE1Oi0Jl14NpFSXdHPYVXUllUBhE6XUxyt26K5k9whrWtYzwOZ+MIImzboBeR7oR3jiDiVL7oLVbsrAmu5Cj/OseZg6y1YqaoteP1wqJM0QaBLPa4AAokG+NdJ/Hgz4KTfae23WQ4N1N9whNyqpTNjfHs8Z3fJqI2c8nHHietscy964ZtkupfiQ3dS2QFGQ3WdczbL1BaWLgXdujPrmHHnR4hwPOY1peC2upM8Scy6GftN+ny/M/lO2gJoxGk/M2ficZcPDpnX24/cR/x5NeqrojIYIjTF8omiryxstkRMW7xvCp7VOI64EHJUHQN44juQRAvPvmwsJ33VVIuQFqpDKwkyQJ0CWnySFFzVt3XWZMZSnickMVUWyfdKm02Ku+6WlwItkUrQ1W+4XbJdeGsAukml1qetoJvfUm6OlNvSNaQzS/XQdMAwt77X3tZo6UM0ZYCvphCdvEV9KFGBao32PzvrTBs0cNNvvTdrArGUTdpuNXGd52jrLLRnK4u7VWRjAnxp3HFMIxWYlzZB0FbQu71umKmZN9+Eu2692MBMNMrMiODR4Se9qtJmJIuhfbNgAbIYXZ2mjClIRXwKZahFaHFdzFy+CoTcypISQNrmjy2bF0n/lWE6x0iPHDgLQwFeOSReOSWB9eFJaIoO5hrDHs9ThZemgNaeDXntPa/PBtsQ/dSkn9vz6KGilRv9pxpzSprvRZrO2IrrCU7BeuLVVzNPWGWqot23Knr4Vg0bdP6kDVeNMj/JP9AYdUjwoDRUmkGrxuUu1o+SJ3y293flcq7PmbjxJjopp9TFzcleHWTvdjN8bFBXJJ+7cXB617jyEi8t35OsheTNejlHq/oB9OIGv0muSrDYIxtdl/h1WxHKXfByt+M8yLrd4dnVduHb2uRbEMQriylselUu4TkKEnmd3yJfzsm5LTabJCF2pSXO1bgNIdJ1mujSguXabkbjGVetdUHyBKITB2str5WL28rH+M0C466yQFaGo8odMeZ/KSqAT9REGGBnha4VpEXzNmgAYgWZBk6txAkNzRGHV680Gzzcr5WEYj4JRBNYxiu4EcvOrQNYR9PYeylX0h5bAMWnEwTomsc88H63nACVEZke50u2w9RZXNICyk90ekgfkdIv2IY6f9+6+EDO/3cbXZ9cdEx/byx1wDppHZFroB0nPXBF/2xn7o/S/pgeJ7eWahbQvjjx4QfL46JMNOQ1uVKDbDH3FfHP9t9A2w3DfQ6k/IKK+NuNWyT56d3WvFxOitYkcK+4jmAztYD0fnpPjMSnG1KRplopIeoqhaGqCYELk4skItyigbhmofxHqN8xf6t7sj+iS2A0mMXnLd4RR5WL590vaQzRpQIyy+Ceb4JNrWV78jzc32IG5HzGPyU8aRvZn33/IdVeHQM5PKC9w8lWusE+P4/14EzowJFk9ckiF0X3un+J/qv1ovLXrBiUmrFglMfr9k3J++rxWLAjDJIgVsVIY7k/EAnN82qPOp9O3NIXE/bizZPi3d5a5OphAF+2sys3X+7tz1SsGDxGJwl6B5bWSkds3KR44dyfwB8CHQ7hNk2S3Nj3gfftm/m6569xX/r79Dw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03D84351250DE05305991F0A9C3E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03D84351250DE05305991F0A9C3E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03DAFDC324E3E05305991F0AD4DF</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03DAFDC324E3E05305991F0AD4DF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03DAFDC324E3E05305991F0AD4DF</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f3ed63d-8476-4b4b-9e5f-758362742bd8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a86dcba9-8dad-4ff0-8173-84c278d10321</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_29103 - StreamView - LLP - Stream view by llpcs_ManageAccountConsentPresent_SameOrg - 200 OK_MIGRATED" searchProperties="true" id="f12cbd04-3f37-46a5-b310-f344696d2cf7"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="99335ffd-7132-4e04-b123-1927d03ab061"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="97833cde-2424-4a3b-99ee-b523eb7bd3f5"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7714a306-1c7f-465f-8f1f-f3507d1fa239" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="56f749bb-28d6-4275-a602-7338af97c94b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="eb12c6ed-367a-4601-870d-3a8b779e494a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="b9b3c7dc-c4a8-464c-8754-f37f8eafba1a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="e6446883-1ee5-4e4a-891d-e3674d150678"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as LLPCS" id="7032195f-1bad-40b8-84fb-e7c8358ff946"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent for llpcs" id="f5c985a2-aed4-40e4-8f44-fe9c2b1c665c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="b39677b6-f2b0-4c85-b160-51bc09d6f411"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9465a3ea-1be1-4a7e-9713-42d3af700957"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c10bc445-fbd1-451d-8a99-f7920bc995ee" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="263037c7-561a-4b19-8d65-b3137347b322" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="b4652870-1413-449b-b794-fb5701506b85" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03C08BA324F9E05305991F0AA0DF</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03C08BA324F9E05305991F0AA0DF</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03DA01E424F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03DA01E424F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03DA01E424F3E05305991F0AD2C4</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f3ed63d-8476-4b4b-9e5f-758362742bd8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a86dcba9-8dad-4ff0-8173-84c278d10321</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_29104 - StreamView - LLP - Stream view by llpcs_ManageAccountConsentPresent_ActiveStream_diffOrg - 200 OK_MIGRATED" searchProperties="true" id="f724f1ba-2a03-4913-b95c-f910189edd2d"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="419f3695-938c-4fc8-be21-2406bf6e8a9f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f5f620a2-afab-4932-b8c1-e58d064964d3"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="e464c567-4465-4a9b-bc4e-77ba1dafe89a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="535585e7-88fd-4697-9a61-fb4c85305462"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a8151ed9-ec45-4562-8e8e-bbfb1d8b278a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="7ebaaf34-e42f-450b-adf0-38aed7f17cdd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as LLPCS" id="bfa83339-cf8a-41ba-8800-686b81ce8377"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="b68642dd-533e-42dc-8bed-48fb6281bf6b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="bd2b0d87-e13e-41ae-8329-639afffc8030" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="bf1ec3e0-f617-45fc-8b5e-37a4f561fd6c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="3fa5ca1f-eb5e-41a5-9353-8e1d62f72083"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d9cdf279-b8ba-461f-bdf9-988f7ee6ef2f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="975846ce-e291-4e55-9cca-0171327463d8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="83d79ac2-1937-4ab4-b120-86301a29cb7f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6rMFn33V1iex5RhUJwqSVUzSFBRQXB6w6YFFEFpEPTX3waj0SRn+O5DyvRmD6v3XjSrX7C189kOwBhFsRcGZUV8raxotm2trVbVQhys1uvsqrpaw1aVq7OcVavZTLNdq5QVjBOkBDi2gvi1wtIMU6VrVaZh0O0O1+iwrec6TS8r5SmKMMlMXJ7pSjnb+QHuFFVfK0kUdEILe7gTWDuEOzHsTIA66BDPjnWFVHl7uYAsCkZvbhzvOxQFn20Eke/DZxjuqBfqwefFxp2J5wRWnEToo6aNXysfsWmaPqe15zByKJamaYpuU8THxp7zq/JWugYjWwnW4WUtWEEYeNDyvbOVg1JR7IZ2GfhOGHmxu/tNaoZi6Dx1FWWwCpl68KtCfRYo0P1jpgeQEbaq2LWYazIdrVGEAojKpq68Vn790wAvoUZkBXgdRjv8Zf3fEKHgiPxwj+wqvm7sCu7fM/7QrbcXBDtKAP0Ee0c0zFmytyDC5XGE1l428DDhno3LxfTLGb4SDMH/MpEX6h4ngU390BnRcxCO/59x3Y/qkmVq+Ql6A+6yazAyXxOpk+sMlIPlytqCX6tD87WAcO98AXWb9Mf6K09vtPoIQj1jnDH+4J1WM7t+qG/i9WE0OPQPK8m22HG9udk8RbXTacs3665rLk7brs8256u6H6tbtDiZp8MqPotwP8DrkhDBFSdF9Wwyex97x8xlnlrjUdhzdjOB0k7aHjrJELKKegz183Tc8lPNOy6n1lq1a5nQZs0Z47s8ng8aLbtkmLPFeEApW9Gwe9JJbvrw9XNP93vI99VHp2KT+f9zjm6LVmzdFkJ+UKzJ2xmjN1VRxOQsCOA0cUCq8MAhfxsw5J3twd16cjuleaBpXSAKvL+RBirYyoAxJd5VhelUzYQz6PHOcEoCjRLwl7yqS6mYLsSppr1LqWvY8vS0kv1keZaGKsBFsOCqki5NRd2QVBWEF1umiis526gTNVW0hVgiCUQp259tuR0jOfNIozh1wrGLCZcs51Ni754Gu+FxZUi+KqiyMDnIE2VVEzWpB/TFDLLdhMSeB7t9WFqY/F1Qb482AHVTmtQEZ9XYpqphskNRtwqb8WhTFbmnajgVtGJXcklKe1Pz/NkLgVcFeydlkgHGl15AQ+gO6eW8h60ZF6g6SEWnCO5LqT26AlE1Oi0Jl14NpFSXdHPYVXUllUBhE6XUxyt26K5k9whrWtYzwOZ+MIImzboBeR7oR3jiDiVL7oLVbsrAmu5Cj/OseZg6y1YqaoteP1wqJM0QaBLPa4AAokG+NdJ/Hgz4KTfae23WQ4N1N9whNyqpTNjfHs8Z3fJqI2c8nHHietscy964ZtkupfiQ3dS2QFGQ3WdczbL1BaWLgXdujPrmHHnR4hwPOY1peC2upM8Scy6GftN+ny/M/lO2gJoxGk/M2ficZcPDpnX24/cR/x5NeqrojIYIjTF8omiryxstkRMW7xvCp7VOI64EHJUHQN44juQRAvPvmwsJ33VVIuQFqpDKwkyQJ0CWnySFFzVt3XWZMZSnickMVUWyfdKm02Ku+6WlwItkUrQ1W+4XbJdeGsAukml1qetoJvfUm6OlNvSNaQzS/XQdMAwt77X3tZo6UM0ZYCvphCdvEV9KFGBao32PzvrTBs0cNNvvTdrArGUTdpuNXGd52jrLLRnK4u7VWRjAnxp3HFMIxWYlzZB0FbQu71umKmZN9+Eu2692MBMNMrMiODR4Se9qtJmJIuhfbNgAbIYXZ2mjClIRXwKZahFaHFdzFy+CoTcypISQNrmjy2bF0n/lWE6x0iPHDgLQwFeOSReOSWB9eFJaIoO5hrDHs9ThZemgNaeDXntPa/PBtsQ/dSkn9vz6KGilRv9pxpzSprvRZrO2IrrCU7BeuLVVzNPWGWqot23Knr4Vg0bdP6kDVeNMj/JP9AYdUjwoDRUmkGrxuUu1o+SJ3y293flcq7PmbjxJjopp9TFzcleHWTvdjN8bFBXJJ+7cXB617jyEi8t35OsheTNejlHq/oB9OIGv0muSrDYIxtdl/h1WxHKXfByt+M8yLrd4dnVduHb2uRbEMQriylselUu4TkKEnmd3yJfzsm5LTabJCF2pSXO1bgNIdJ1mujSguXabkbjGVetdUHyBKITB2str5WL28rH+M0C466yQFaGo8odMeZ/KSqAT9REGGBnha4VpEXzNmgAYgWZBk6txAkNzRGHV680Gzzcr5WEYj4JRBNYxiu4EcvOrQNYR9PYeylX0h5bAMWnEwTomsc88H63nACVEZke50u2w9RZXNICyk90ekgfkdIv2IY6f9+6+EDO/3cbXZ9cdEx/byx1wDppHZFroB0nPXBF/2xn7o/S/pgeJ7eWahbQvjjx4QfL46JMNOQ1uVKDbDH3FfHP9t9A2w3DfQ6k/IKK+NuNWyT56d3WvFxOitYkcK+4jmAztYD0fnpPjMSnG1KRplopIeoqhaGqCYELk4skItyigbhmofxHqN8xf6t7sj+iS2A0mMXnLd4RR5WL590vaQzRpQIyy+Ceb4JNrWV78jzc32IG5HzGPyU8aRvZn33/IdVeHQM5PKC9w8lWusE+P4/14EzowJFk9ckiF0X3un+J/qv1ovLXrBiUmrFglMfr9k3J++rxWLAjDJIgVsVIY7k/EAnN82qPOp9O3NIXE/bizZPi3d5a5OphAF+2sys3X+7tz1SsGDxGJwl6B5bWSkds3KR44dyfwB8CHQ7hNk2S3Nj3gfftm/m6569xX/r79Dw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03CD1E2C24EDE05305991F0A716F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03CD1E2C24EDE05305991F0A716F</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03A8FADC196EE05307991F0A2FA9</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03A8FADC196EE05307991F0A2FA9</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03A8FADC196EE05307991F0A2FA9</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f3ed63d-8476-4b4b-9e5f-758362742bd8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a86dcba9-8dad-4ff0-8173-84c278d10321</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b68642dd-533e-42dc-8bed-48fb6281bf6b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_29104 - StreamView - LLP - StreamOwnerMismatch - Stream view by llpcs_ManageAccountConsentPresent_DeletedStream - 403 Forbidden-_MIGRATED" searchProperties="true" id="b1e9424a-8c20-4956-b44a-fcdbd7875234"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="96d74a28-9dbe-48f1-b184-4aaabf143a7a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f80e2de9-3a74-481d-9b07-708e84d80ff7"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ae6e0cf0-b0b6-408b-9822-1257decf211b" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="7b4bf7d1-7e3b-4100-9ac6-b0dbb63000f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c4d7d412-6e47-4a81-a1b8-c1d1080fe3b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="438177c7-1b97-4562-9a9e-c46a03a18d9e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="b0e6f2b1-6169-4b2c-a5b0-1efcb415d0f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as LLPCS" id="d151f147-6283-43b8-bf3b-a198ca3aad06"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="2568453e-83a9-401c-a7f7-00045a2eec08" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="badcf14f-03fe-478e-9307-fb7c8e75c5b2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="7c0d35d5-746c-44b7-b53b-2b011d4469ff"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d01a2873-25f1-4467-b6b2-b10353e5fc61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="5fc86152-e08b-4168-9a6c-5ce108ce18b4" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="cf8858a1-4fd5-4fda-bd15-d7cf2cbb861c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e3b4076d-7c8d-4f3c-9975-b0f705c69629" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1578A8F35CA11574E05307991F0ACFCC</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157873F89F3F79C4E05307991F0A289E</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrU+o6FP0rTP14pjQtLY+OMFMBvRwBUQQ9fHFiGiDYppikBfz1JylQKYqXe2eYYbK7s/baj6zkksMwsFyPc8wEiWhhHQaUu6m1rsWMuhHkhLsUhpi7ArlDr9d1rSJw4X6LVui06tpLrVSt2pUS0gGANd0ulR296pSB7ltOBdjVquWXTenKeYw7lAtIRV2zgOnoQP4qj6DsAse17SIo2xOtMMaMS2zpUgTajtSa17W5EEvXMFarVXFVKkZsZlgAmMZzrztEcxxCrXG5zSgNxBo7f1T0McJBgIooCo1LI+dz6XN3SGYUipjhXSz/VCxggJohfXxOZhdathf7HTqN0mUT0ogSBAPyAVV9eljMI7/gBbOIETEPTyZhAgWs4zXSkWnTC83IUzsTKMeQcajzOTR3WA94ihmmCBdGD526dnFe19KtjwxSPo1YyPPL/8YH0wQH0RL7Ot+ntaN2PuA3lWpcYuR2KApiThLcV8O6hAjzXTcxOh+qMGB4StZdwuWArrliZxzSO1puq9EiM8zF/2nQQXO2IGMYxLjRbj45f8JNb9T6ALe3zyPyMQ3uaNT9Z8brKYFD59SQtXa7PBrKbIi2O0Lmr8jo96LZ6yfoevXq41+T2HwetOf3CS/dWGwMKuLWgs6oW/KuBoL6V+V+1ZjOvHB62+lOK9awF4zvJ0HnA3T7Zm1O38aPy4/7zeZ+Yq36dBNMmwPWthKv8jZZs16ysFni3JjzZej0ayP2TCa/x57PW9edwarbD9+tm6fVYOHdzUTzqvSrUnv687RohaM16NWzdA745237Mz+MXxcYif1SjUGnVbiWXYLiZzFTFuLr09TVXSrx4QJToTXULqUdbizljviu7OF2bTqVatn2nLZVblnt6+s2cEqgUquZ18AD1StzLzJbFkcUmxGdEhVLSe52bH4miEKXY+pjpidRLJWOaz8gtqCAhQ59kIcgohw/RlKeo83CjsqvcfA2FRia5ep8AZK5LyW5H4k7esc8aWd5Sa7lJPkBI7IkWOm2Gmsu55oLWYp3mMQiMIsJLFIcS2VnSmRdy646BifhMsCKqBFGfhzg4nK+TAtj8O2/pUPEU2u36w0HL83hi5WeuZPZHX/bF0L6+EQ5cJXSFZbNxN9cMaV9Pifyrh5dRXt4L/aJOl6yqoIRtGWS//Q5LGpKskn5TGzPPNtwbMiBG8d5ZfH8hKBs6rO7W0q6FIHGvjnv0Cy+F+MkidN+2HbJYBLeUJkawDKGGMVSpjaP0RumRoZinHUnZMSPgmf2PMVYzOlQQIFDOT+FdHnGI2CIuXoEdOTcr899YeRCytIJvBbf2ZqBfMAoxj++cZCLlJ80D+TfKmL+Z8e+wTqII/OUbwBB6Eyt1H2wOTEeKJKwRCpZxA7BvwP4LnjemBU54yLkQL3GAp/+UlASVdcgQlFMRaelpYZD2Ux5is0Su59OX2BSZc6eauTf32o6SUcAYfnA4yTFVzeuq44AnR1I7y7oCfW9+kl98+waX8xfLQd1Op7xxl8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1578A8F35CA81574E05307991F0ACFCC</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1578A8F35CA81574E05307991F0ACFCC</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>157873F89F3F79C4E05307991F0A289E</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>157873F89F3F79C4E05307991F0A289E</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f3ed63d-8476-4b4b-9e5f-758362742bd8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a86dcba9-8dad-4ff0-8173-84c278d10321</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2568453e-83a9-401c-a7f7-00045a2eec08</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_29104 - StreamView - LLP - StreamOwnerMismatch - Stream view by dlpcs_ManageAccountConsentPresent_DeletedStream - 403 Forbidden_MIGRATED" searchProperties="true" id="5aca1489-a368-4cc6-a1d1-8bb5ee4a1030"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a3d0b6d2-98aa-4614-b50e-9c059046a7b7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7dc561fa-ac92-423b-8e0b-0073afb989c5"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="04e4c3fb-df15-427a-92fd-f03fc9cfca44" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c6d0e4f1-48a0-4de1-8d6c-e693c37f3b08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="5df21db9-cb22-4507-bf6f-4ccaab89e4cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="0a91fe4e-e888-41e6-b9ad-4415788f1986"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="c8a9669f-0c53-4e7b-9cde-ab2e3913e623"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLPCS" id="83c72f4e-d6e0-4c0d-a70c-8c7cb464d929"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="8a32ad49-bdf1-47ed-8223-4bbf6e90d3b0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="6f9add07-fba4-40b0-9318-296422ec9a2d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="c3860c57-e59b-4bcc-ab4d-45a68f859997"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="454f62ed-0351-4004-92f0-51a980168d2d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6eac98c1-0665-49e6-a833-721685bdc8ef" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b4c37243-e3d2-4436-bcd8-b9b58fd309e9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="869f8dd7-ed7a-4ee9-97af-eb26557c2765" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20140905_095748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6rMFn33V1iex5RhUJwqSVUzSFBRQXB6w6YFFEFpEPTX3waj0SRn+O5DyvRmD6v3XjSrX7C189kOwBhFsRcGZUV8raxotm2trVbVQhys1uvsqrpaw1aVq7OcVavZTLNdq5QVjBOkBDi2gvi1wtIMU6VrVaZh0O0O1+iwrec6TS8r5SmKMMlMXJ7pSjnb+QHuFFVfK0kUdEILe7gTWDuEOzHsTIA66BDPjnWFVHl7uYAsCkZvbhzvOxQFn20Eke/DZxjuqBfqwefFxp2J5wRWnEToo6aNXysfsWmaPqe15zByKJamaYpuU8THxp7zq/JWugYjWwnW4WUtWEEYeNDyvbOVg1JR7IZ2GfhOGHmxu/tNaoZi6Dx1FWWwCpl68KtCfRYo0P1jpgeQEbaq2LWYazIdrVGEAojKpq68Vn790wAvoUZkBXgdRjv8Zf3fEKHgiPxwj+wqvm7sCu7fM/7QrbcXBDtKAP0Ee0c0zFmytyDC5XGE1l428DDhno3LxfTLGb4SDMH/MpEX6h4ngU390BnRcxCO/59x3Y/qkmVq+Ql6A+6yazAyXxOpk+sMlIPlytqCX6tD87WAcO98AXWb9Mf6K09vtPoIQj1jnDH+4J1WM7t+qG/i9WE0OPQPK8m22HG9udk8RbXTacs3665rLk7brs8256u6H6tbtDiZp8MqPotwP8DrkhDBFSdF9Wwyex97x8xlnlrjUdhzdjOB0k7aHjrJELKKegz183Tc8lPNOy6n1lq1a5nQZs0Z47s8ng8aLbtkmLPFeEApW9Gwe9JJbvrw9XNP93vI99VHp2KT+f9zjm6LVmzdFkJ+UKzJ2xmjN1VRxOQsCOA0cUCq8MAhfxsw5J3twd16cjuleaBpXSAKvL+RBirYyoAxJd5VhelUzYQz6PHOcEoCjRLwl7yqS6mYLsSppr1LqWvY8vS0kv1keZaGKsBFsOCqki5NRd2QVBWEF1umiis526gTNVW0hVgiCUQp259tuR0jOfNIozh1wrGLCZcs51Ni754Gu+FxZUi+KqiyMDnIE2VVEzWpB/TFDLLdhMSeB7t9WFqY/F1Qb482AHVTmtQEZ9XYpqphskNRtwqb8WhTFbmnajgVtGJXcklKe1Pz/NkLgVcFeydlkgHGl15AQ+gO6eW8h60ZF6g6SEWnCO5LqT26AlE1Oi0Jl14NpFSXdHPYVXUllUBhE6XUxyt26K5k9whrWtYzwOZ+MIImzboBeR7oR3jiDiVL7oLVbsrAmu5Cj/OseZg6y1YqaoteP1wqJM0QaBLPa4AAokG+NdJ/Hgz4KTfae23WQ4N1N9whNyqpTNjfHs8Z3fJqI2c8nHHietscy964ZtkupfiQ3dS2QFGQ3WdczbL1BaWLgXdujPrmHHnR4hwPOY1peC2upM8Scy6GftN+ny/M/lO2gJoxGk/M2ficZcPDpnX24/cR/x5NeqrojIYIjTF8omiryxstkRMW7xvCp7VOI64EHJUHQN44juQRAvPvmwsJ33VVIuQFqpDKwkyQJ0CWnySFFzVt3XWZMZSnickMVUWyfdKm02Ku+6WlwItkUrQ1W+4XbJdeGsAukml1qetoJvfUm6OlNvSNaQzS/XQdMAwt77X3tZo6UM0ZYCvphCdvEV9KFGBao32PzvrTBs0cNNvvTdrArGUTdpuNXGd52jrLLRnK4u7VWRjAnxp3HFMIxWYlzZB0FbQu71umKmZN9+Eu2692MBMNMrMiODR4Se9qtJmJIuhfbNgAbIYXZ2mjClIRXwKZahFaHFdzFy+CoTcypISQNrmjy2bF0n/lWE6x0iPHDgLQwFeOSReOSWB9eFJaIoO5hrDHs9ThZemgNaeDXntPa/PBtsQ/dSkn9vz6KGilRv9pxpzSprvRZrO2IrrCU7BeuLVVzNPWGWqot23Knr4Vg0bdP6kDVeNMj/JP9AYdUjwoDRUmkGrxuUu1o+SJ3y293flcq7PmbjxJjopp9TFzcleHWTvdjN8bFBXJJ+7cXB617jyEi8t35OsheTNejlHq/oB9OIGv0muSrDYIxtdl/h1WxHKXfByt+M8yLrd4dnVduHb2uRbEMQriylselUu4TkKEnmd3yJfzsm5LTabJCF2pSXO1bgNIdJ1mujSguXabkbjGVetdUHyBKITB2str5WL28rH+M0C466yQFaGo8odMeZ/KSqAT9REGGBnha4VpEXzNmgAYgWZBk6txAkNzRGHV680Gzzcr5WEYj4JRBNYxiu4EcvOrQNYR9PYeylX0h5bAMWnEwTomsc88H63nACVEZke50u2w9RZXNICyk90ekgfkdIv2IY6f9+6+EDO/3cbXZ9cdEx/byx1wDppHZFroB0nPXBF/2xn7o/S/pgeJ7eWahbQvjjx4QfL46JMNOQ1uVKDbDH3FfHP9t9A2w3DfQ6k/IKK+NuNWyT56d3WvFxOitYkcK+4jmAztYD0fnpPjMSnG1KRplopIeoqhaGqCYELk4skItyigbhmofxHqN8xf6t7sj+iS2A0mMXnLd4RR5WL590vaQzRpQIyy+Ceb4JNrWV78jzc32IG5HzGPyU8aRvZn33/IdVeHQM5PKC9w8lWusE+P4/14EzowJFk9ckiF0X3un+J/qv1ovLXrBiUmrFglMfr9k3J++rxWLAjDJIgVsVIY7k/EAnN82qPOp9O3NIXE/bizZPi3d5a5OphAF+2sys3X+7tz1SsGDxGJwl6B5bWSkds3KR44dyfwB8CHQ7hNk2S3Nj3gfftm/m6569xX/r79Dw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>010F03A937741973E05307991F0AEE2E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:010F03A937741973E05307991F0AEE2E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>010F03D8436F250DE05305991F0A9C3E</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>010E985C867825D4E05307991F0A7949</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>010F03D8436F250DE05305991F0A9C3E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:010F03D8436F250DE05305991F0A9C3E</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f3ed63d-8476-4b4b-9e5f-758362742bd8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a86dcba9-8dad-4ff0-8173-84c278d10321</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8a32ad49-bdf1-47ed-8223-4bbf6e90d3b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="LASP Linked Test Cases without_MAC" id="2004f67d-09f6-4181-9405-89dc58ecd348"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39306 - StreamView - LLP - Stream view by dlp_ManageAccountConsentNotPresent - 200 OK" searchProperties="true" id="fdddb5a5-c87c-4bb3-ab03-a27261d28da1"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish data and LLP without MAC" id="9c3879a1-1d32-4009-91a0-00be9155a2fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E_without_MAC");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="4f16c1ed-6c24-4adf-9746-f4efb86da85f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f638d93a-0625-448f-9225-88218b70b0ce"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="019aa3d3-816f-467d-8bbd-3ec2c948ad00" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="3306e105-461b-4da1-8155-4490c0e3ce4b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="479ac25d-8c1a-4f47-b745-43c26f384bb3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e8e03faf-c47c-4cbf-8e24-19103778ebfe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="45fbd335-9d34-4211-b40e-f4c16b23e59d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="81dee7a5-763e-49d0-b7e6-56f3df304091"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="8687d071-17b6-443d-8b4c-95befdcb0a22"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b6d2f5aa-908a-4e06-9f1d-b57453f43f94"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="87637ffa-4841-471f-acf2-28d5b55d7214" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e221c030-9b64-4ced-aee2-e1084f3af3e0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c81ca805-cd93-491c-8f9c-aa6f635b83c4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150506_061547</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:6783CF62BD034791BF85A0FAA4ACB00E</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCEF52C1E05305991F0A3145</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPrYCblzyRRmUi5n6QItl+327MuOcQS4TRywHUj7648dLguU9rC7TxkrsvRJ+izphqM4sv2Ac2CCJLSQxRHlfi6taSmjfoI44T5FMXBfYH8U9Lq+XTR9tLuiFTrNmvYThx7ywMS66zkT3S2VSjqqOFXd9ExcLpeqk9D1pCrnKXQoF4iKmmablicVdLM0tmzfdXzHKXoV+4dWeATGpW2pUjS1LaiM17S5EAvfMNbrdXHtFBM2M2zTtIynXneE5xAjrX6ziSh3xOpbfVwMAUMU4SJOYuPGONK5Cbk/IjOKRMpg6yv8yJdpmFVD6oSczK60/V0IO3Sa5McGogklGEXkDan89EDMk7AQRLOEETGPPwzCMpVhHTKsY8ulV5pxDO1CQ0cIGUc6nyNra2sIU2BAMRS+DTs17eqyquVXxwxRPk1YzI+Pv4cH6AqiZAGhzndhbaFdbvBMpuo3gP0OxVHKyQr6iqwLhIFvqwn4clOFBwZTknUJlwTNuEJnHMI7OW6y0SQz4OJPCnRQnI2RRxSlUG+8PUaVydvg4a7tPZfT2OqiAB6z8G5p1nIAh8q5YF/azfGElHsSbW5Qp3I/oOb9pPV8v/w+srpmiw1c0YqskQ3VHh8/LWZuBs9fBl+f6Den2+mus9a1NUon4+UAddO+UZmPnV7bybzkpfFSGXaDddBu/fNjcHv9HRvzb+yO9SnvPE2WfaPhjp7K31dvXvYSL5yp+aXc8Ja30yc8u17zzrjX7D+6xjjuMW9xOxn0CB7+W4b7KQTtoFLahnuC/1i2e/MS3jNgsTsqGnSahbasEhKfNzMlIaE+zVX9hWo+XAAVWl3dUr3DT2W7I6Eva7g5W16p2nLLjXajHXh2w2qZnmN61arVNgPHcr1dk9mgOIHYSOiUKF+q5W5o8zlAHPscaAhMXyWp7HRc+8RiEwlU6NChfAQJ5TBOZHu27Hm6DuPncLmkUyvjbhxNzOqKgWzK/UTc03sWTAWw46bsHTXlIWCyIKA6tyI2l8zmQiZjiVapiKziChUppLK3M9VmfduteAYn8SICBdWIkzCNoLiYL/LUGHzztXWEeS4dtsb5c/swsNN/uxxInZAoBa5iuQVZRzgzXexdIO8CLp2dQjvzQRoS9bJkQgUjeIPk+NcvniiC7EnS7Aajhx3ove5v3P3ZGP20/tBA9y+cd//Wuazl+5vGJ/k0Tku5dxSuyIHb3dohB5hsefUdEZfIKi6L6WqV5txzXcdg0ryhSGCYtjECnMqm/DpOXoAaeyvGRRNwD/zE+V5+DDEVczoSSEAs30ohP16w8oyAq5WnI195duk+deRSpk5AJs7JGpFc1xTiTzc67GOlJ8UP8rNOWPirYmdsHfiRccqNRxA6Uyc1/V4/4AVOpFki+3bCDo2fM3DO+bFwn+Q9FiEJNUkFfPynoBpyTUMYJykVnaaWCw6HRI5TvC7A/6X0zkw+h/aLKfn/zVQnOQUwyHWWk9y+2i989QTo7GDQbJ2enzWt1mez5hhd/Z34veQgT6ccr/8H</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1569E47CFCFA52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCFA52C1E05305991F0A3145</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCEE52C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1569E47CFCEE52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>1569E47CFD8D52C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1569E47CFD8D52C1E05305991F0A3145</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>6783CF62BD034791BF85A0FAA4ACB00E</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>6783CF62BD034791BF85A0FAA4ACB00E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:6783CF62BD034791BF85A0FAA4ACB00E</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a69e6d59-447d-4fb1-804d-f7619e8e0771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bf5b4eb-d548-49d7-bf05-8b45c5218198</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7637421c-4c33-417b-a644-20a54b0fd077</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89072f11-baf2-4986-95b8-d5eaf193048b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39307 - StreamView - LLP - Stream view by llpcs_ManageAccountConsentNotPresent_SameOrg - 200 OK" searchProperties="true" id="3f78941f-0042-47f6-b485-cfa786039f79"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e77d1617-d0fc-4cbf-8c2c-5dcbc963d04a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d82a2f3b-49a8-46a4-b89f-c644acc96884"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="32cad478-1fae-480a-bef0-80f49d2e9196" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="f092d07c-59ff-45b0-85d3-c9bcc9f69424" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4a7203ec-9682-4846-9826-c1329638f6df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="92b0fe8f-ad4a-47d9-bc63-29a89c1b165e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="d3503ee6-bac0-4eea-bfad-9f5f4116c6d2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="5f245b34-b615-48b7-8dd6-f111ee1b7c49"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="e286cfba-e1c3-4dc6-9d16-f7d9696ff242"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as LLPCS" id="3f520f6c-6181-46bc-b3c9-6eda179236c5"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="3271f602-7113-431c-a1a8-1c3eed6e5600"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="9227d18b-a532-436e-b722-1c8b107dd1c4" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="095328c1-efe2-4209-b2b4-0284a2572ec6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="5b9759b5-1c54-4696-83c1-60b057fd74f1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150506_061547</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0F798A8FC7DE4D96B71ADC530BEC0D08</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCEF52C1E05305991F0A3145</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPrYCblzyRRmUi5n6QItl+327MuOcQS4TRywHUj7648dLguU9rC7TxkrsvRJ+izphqM4sv2Ac2CCJLSQxRHlfi6taSmjfoI44T5FMXBfYH8U9Lq+XTR9tLuiFTrNmvYThx7ywMS66zkT3S2VSjqqOFXd9ExcLpeqk9D1pCrnKXQoF4iKmmablicVdLM0tmzfdXzHKXoV+4dWeATGpW2pUjS1LaiM17S5EAvfMNbrdXHtFBM2M2zTtIynXneE5xAjrX6ziSh3xOpbfVwMAUMU4SJOYuPGONK5Cbk/IjOKRMpg6yv8yJdpmFVD6oSczK60/V0IO3Sa5McGogklGEXkDan89EDMk7AQRLOEETGPPwzCMpVhHTKsY8ulV5pxDO1CQ0cIGUc6nyNra2sIU2BAMRS+DTs17eqyquVXxwxRPk1YzI+Pv4cH6AqiZAGhzndhbaFdbvBMpuo3gP0OxVHKyQr6iqwLhIFvqwn4clOFBwZTknUJlwTNuEJnHMI7OW6y0SQz4OJPCnRQnI2RRxSlUG+8PUaVydvg4a7tPZfT2OqiAB6z8G5p1nIAh8q5YF/azfGElHsSbW5Qp3I/oOb9pPV8v/w+srpmiw1c0YqskQ3VHh8/LWZuBs9fBl+f6Den2+mus9a1NUon4+UAddO+UZmPnV7bybzkpfFSGXaDddBu/fNjcHv9HRvzb+yO9SnvPE2WfaPhjp7K31dvXvYSL5yp+aXc8Ja30yc8u17zzrjX7D+6xjjuMW9xOxn0CB7+W4b7KQTtoFLahnuC/1i2e/MS3jNgsTsqGnSahbasEhKfNzMlIaE+zVX9hWo+XAAVWl3dUr3DT2W7I6Eva7g5W16p2nLLjXajHXh2w2qZnmN61arVNgPHcr1dk9mgOIHYSOiUKF+q5W5o8zlAHPscaAhMXyWp7HRc+8RiEwlU6NChfAQJ5TBOZHu27Hm6DuPncLmkUyvjbhxNzOqKgWzK/UTc03sWTAWw46bsHTXlIWCyIKA6tyI2l8zmQiZjiVapiKziChUppLK3M9VmfduteAYn8SICBdWIkzCNoLiYL/LUGHzztXWEeS4dtsb5c/swsNN/uxxInZAoBa5iuQVZRzgzXexdIO8CLp2dQjvzQRoS9bJkQgUjeIPk+NcvniiC7EnS7Aajhx3ove5v3P3ZGP20/tBA9y+cd//Wuazl+5vGJ/k0Tku5dxSuyIHb3dohB5hsefUdEZfIKi6L6WqV5txzXcdg0ryhSGCYtjECnMqm/DpOXoAaeyvGRRNwD/zE+V5+DDEVczoSSEAs30ohP16w8oyAq5WnI195duk+deRSpk5AJs7JGpFc1xTiTzc67GOlJ8UP8rNOWPirYmdsHfiRccqNRxA6Uyc1/V4/4AVOpFki+3bCDo2fM3DO+bFwn+Q9FiEJNUkFfPynoBpyTUMYJykVnaaWCw6HRI5TvC7A/6X0zkw+h/aLKfn/zVQnOQUwyHWWk9y+2i989QTo7GDQbJ2enzWt1mez5hhd/Z34veQgT6ccr/8H</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1569E47CFCFA52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCFA52C1E05305991F0A3145</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCEE52C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1569E47CFCEE52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>1569E47CFDC652C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1569E47CFDC652C1E05305991F0A3145</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0F798A8FC7DE4D96B71ADC530BEC0D08</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>0F798A8FC7DE4D96B71ADC530BEC0D08</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:0F798A8FC7DE4D96B71ADC530BEC0D08</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a69e6d59-447d-4fb1-804d-f7619e8e0771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bf5b4eb-d548-49d7-bf05-8b45c5218198</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7637421c-4c33-417b-a644-20a54b0fd077</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89072f11-baf2-4986-95b8-d5eaf193048b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39307 - StreamView - LLP - Stream view by dlpcs_ManageAccountConsentNotPresent_sameOrg - 200 OK_MIGRATED" searchProperties="true" id="f416fdd8-c8eb-4b39-bdb5-ad6d3b8927ad"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7e25a604-b298-4ee8-a0e8-4b4ef47e47fb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="636f11f8-339d-4f04-b830-0d114b74f34f"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="35a00630-ddd5-42bc-b1c0-c93948f6de9e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="d176dada-097e-4c29-a1ac-cfdd6e8e5a3c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d6c68661-2a73-4e44-bff3-acdd5610a8c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="538dafa6-aed9-4b06-85c3-e1c05ef4c84e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="d9e3752f-4c51-43fd-9d6f-17809e977e80"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="b02bd777-35f8-4f33-9894-0d66a26d8bc8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="6f0cf325-e47d-4f29-9f72-1bdfc49b0d0b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLPCS" id="26a16369-c1aa-442d-9152-370cfca13abb"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7ad16f67-c805-423b-aec5-b3cb16dea7d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="5556fdd1-a239-4869-ab01-7970500e1659" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d3b63d41-44b8-488b-b68c-65802ec532eb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e5ef723f-ae6e-4a68-9910-2c875b4f2571" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150506_061547</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:523ED6E869B646DDA2555066C1B57469</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCEF52C1E05305991F0A3145</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPrYCblzyRRmUi5n6QItl+327MuOcQS4TRywHUj7648dLguU9rC7TxkrsvRJ+izphqM4sv2Ac2CCJLSQxRHlfi6taSmjfoI44T5FMXBfYH8U9Lq+XTR9tLuiFTrNmvYThx7ywMS66zkT3S2VSjqqOFXd9ExcLpeqk9D1pCrnKXQoF4iKmmablicVdLM0tmzfdXzHKXoV+4dWeATGpW2pUjS1LaiM17S5EAvfMNbrdXHtFBM2M2zTtIynXneE5xAjrX6ziSh3xOpbfVwMAUMU4SJOYuPGONK5Cbk/IjOKRMpg6yv8yJdpmFVD6oSczK60/V0IO3Sa5McGogklGEXkDan89EDMk7AQRLOEETGPPwzCMpVhHTKsY8ulV5pxDO1CQ0cIGUc6nyNra2sIU2BAMRS+DTs17eqyquVXxwxRPk1YzI+Pv4cH6AqiZAGhzndhbaFdbvBMpuo3gP0OxVHKyQr6iqwLhIFvqwn4clOFBwZTknUJlwTNuEJnHMI7OW6y0SQz4OJPCnRQnI2RRxSlUG+8PUaVydvg4a7tPZfT2OqiAB6z8G5p1nIAh8q5YF/azfGElHsSbW5Qp3I/oOb9pPV8v/w+srpmiw1c0YqskQ3VHh8/LWZuBs9fBl+f6Den2+mus9a1NUon4+UAddO+UZmPnV7bybzkpfFSGXaDddBu/fNjcHv9HRvzb+yO9SnvPE2WfaPhjp7K31dvXvYSL5yp+aXc8Ja30yc8u17zzrjX7D+6xjjuMW9xOxn0CB7+W4b7KQTtoFLahnuC/1i2e/MS3jNgsTsqGnSahbasEhKfNzMlIaE+zVX9hWo+XAAVWl3dUr3DT2W7I6Eva7g5W16p2nLLjXajHXh2w2qZnmN61arVNgPHcr1dk9mgOIHYSOiUKF+q5W5o8zlAHPscaAhMXyWp7HRc+8RiEwlU6NChfAQJ5TBOZHu27Hm6DuPncLmkUyvjbhxNzOqKgWzK/UTc03sWTAWw46bsHTXlIWCyIKA6tyI2l8zmQiZjiVapiKziChUppLK3M9VmfduteAYn8SICBdWIkzCNoLiYL/LUGHzztXWEeS4dtsb5c/swsNN/uxxInZAoBa5iuQVZRzgzXexdIO8CLp2dQjvzQRoS9bJkQgUjeIPk+NcvniiC7EnS7Aajhx3ove5v3P3ZGP20/tBA9y+cd//Wuazl+5vGJ/k0Tku5dxSuyIHb3dohB5hsefUdEZfIKi6L6WqV5txzXcdg0ryhSGCYtjECnMqm/DpOXoAaeyvGRRNwD/zE+V5+DDEVczoSSEAs30ohP16w8oyAq5WnI195duk+deRSpk5AJs7JGpFc1xTiTzc67GOlJ8UP8rNOWPirYmdsHfiRccqNRxA6Uyc1/V4/4AVOpFki+3bCDo2fM3DO+bFwn+Q9FiEJNUkFfPynoBpyTUMYJykVnaaWCw6HRI5TvC7A/6X0zkw+h/aLKfn/zVQnOQUwyHWWk9y+2i989QTo7GDQbJ2enzWt1mez5hhd/Z34veQgT6ccr/8H</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1569E47CFCFA52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCFA52C1E05305991F0A3145</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCEE52C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1569E47CFCEE52C1E05305991F0A3145</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>1569E47CFE0C52C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1569E47CFE0C52C1E05305991F0A3145</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>523ED6E869B646DDA2555066C1B57469</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>523ED6E869B646DDA2555066C1B57469</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:523ED6E869B646DDA2555066C1B57469</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a69e6d59-447d-4fb1-804d-f7619e8e0771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bf5b4eb-d548-49d7-bf05-8b45c5218198</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7637421c-4c33-417b-a644-20a54b0fd077</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89072f11-baf2-4986-95b8-d5eaf193048b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39309 - StreamView - LLP - ManageAccountConsentRequired - Stream view by dlpcs_ManageAccountConsentNotPresent_DeletedStream - 403 Forbidden_COORD-5920" searchProperties="true" id="c195a5a6-95c6-49d3-9884-ef047f735ff1"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4ef225cf-276e-4109-a74e-b2d6a11d9119"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="5d4f2226-c631-47fb-8432-d890c259e09b"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="26fe40e4-a4e7-4963-aea4-fc717ec33b90" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="e3805715-7e05-403b-a9cd-366e47cd7874" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="04cbe753-39b5-4fa0-a249-52dd9dccc873"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6d18c943-e581-4b03-a19d-a1289fa1bc29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="d4377387-651d-428a-8b4a-19df92d07f4c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="5d71ac9d-97c8-4bbd-bcea-a6b1bd648d1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="efa17849-240a-4ae6-b750-e88e0467ffe0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Check Manage Account Consent for llpcs" id="ee0de744-5192-418e-977a-3b695e10e360" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DLPCS" id="56956883-bd85-4fb7-8061-1514ac7a498b"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="58879bee-358f-4a15-9733-6c5f6a3a650a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3fb7f036-9d2c-4397-95a0-f6b16458398b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="43e993c0-c828-4b08-9376-296535516126" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ff170151-f067-43d7-83b1-03223a93e048" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>1569E47CFCEF52C1E05305991F0A3145</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVbbbuI6FP0VlHmsgpNAKEQFiVtnmNKWW5l2XirjOME0cWhsB+jXHztASij0cI6EhLyzvfbaFy/7hsEwsJwmYzjmJKKFdRhQ5qTWuiZi6kSQEeZQGGLmcOSMm/d9xyoaDtxv0Qq9Tl17nZVKLi55M700m0G97JZnOqx4nl6rlCyvUjahB13pypjAPco4pLyuWYZp64b8VSam5ZRLTrlWrNrWX60wxTGT2NKlaGg7UmtW1+acLx0AVqtVcVUqRrEPLMMwwfN9f4zmOIRa42abURoobuz8UdHFCAcBKqIoBDcg53PjMmdMfAq5iPEulnsulgGMGpA+LiP+Dy3bi90e9aJ02YY0ogTBgHxAVZ97zOeRW2gGfhQTPg/PJmEaCljHa6Qjs0x/aCBP7UKgHMOYQZ3NobnDGmEPx5giXHga9eraj8u6lm6dxJAyL4pDll/+Nz6YJjiIltjV2T6tHbXLAU9UqnGDkdOjKBCMJPhBDesSIsx23cTocqjCIMYeWfcJkwO6ZoodOKR3tNxWo0N8zPj/adBBc7YgUxgI3HiBbaszCbrTQa2y8O1f3OgYLV4NxcavpwQOnVND1trt8mgosyHa7vjzXLmNJpOn0XpadoclELdsNuPhqpuMzU119OuhNTUXpDtsDd82s5cRugsTMRn5g7+1OPn9WGJD3nzb/Fn3FmiyEKO7yaD6NLx+H1z7P6/6w4d7ccXWYPrkf8CHu3s+Xpg2QjZYD8D8FrRHz9Mu425/YPv48Xfs0buRbUb0qmdProbNIIZuOBSVlyb4SdyZ/VTP0jngn7ftz/xYzBYY8f1SjUGvU7iVXYL8ezFTFuLqXurqLJX4MI4p1xpql9IOR0i5I64je7hdm3al1m1dlyvtpl2u3la7hl0yrms189Zo2l2ruxeZLYsjiu2IekTFUpK7HZvvCaLQYZi6ONaTSEilY9o3iB3IYaFHR/IQRJThSSTlWZgeTHhiGobvvhkfvEKZL64p0woPEX+kj3HT4zjOS7Kdk+QRRmRJsNJtNdZMzrVsI0bvMBE8MIsJLFIspLLHSmQdq1y1ASPhMsCKKAgjVwS4uJwv08IAtv23dIhYau30m+PBa3v8aqVn7mx2x9/2hZA+LlEOTKXUwrKZ+MQVU9rn8yXvysmraA/fFC5Rx0tWlccEbZnkP30Oi5qSbFI+E9szzzYcG3Lg4DivLJ6bEJRNfXZ3S0mXItDYN+cdmsX3okgSkfajXJbHXMIDVRFgWGCMkZAytZlEb5iCDAVcdCdkxI+CZ/Y8RcHndMwhx6Gcn0K6vOARMMZMPQJ6cu7Xl74wciFl6The81O2diAfMIrxt28c5CDlJ80D+beK4s/ET2EdxJF5yjcAJ9RXK3UfbM6MB4okLJFKFsWH4KcATgXPG7MiZ1y4HKiZ4Pj8l4KSqLoGEYoE5b2OlhoOZTPlyTdL7Hw6fYFJlTl7qpF/f6vpJB0BhOUDj5EUX924jjoC1D+Q3l3QM+pb+k598+waX8xfLQd1Op7xxj8=</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1569EB746CA348F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1569EB746CA348F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1569EB746CA548F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1569EB746CA548F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value>1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>1569E47CFE3C52C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1569E47CFE3C52C1E05305991F0A3145</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>BB10034667404269A2087D51A0397E12</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:BB10034667404269A2087D51A0397E12</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:BB10034667404269A2087D51A0397E12</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>BB10034667404269A2087D51A0397E12</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150506_061547</con:value></con:property><con:property><con:name>useroid</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a69e6d59-447d-4fb1-804d-f7619e8e0771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bf5b4eb-d548-49d7-bf05-8b45c5218198</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7637421c-4c33-417b-a644-20a54b0fd077</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89072f11-baf2-4986-95b8-d5eaf193048b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c3879a1-1d32-4009-91a0-00be9155a2fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee0de744-5192-418e-977a-3b695e10e360</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39308 - StreamView - LLP - ManageAccountConsentRequired - Stream view by llpcs_ManageAccountConsentNotPresent_DeletedStream - 403 Forbidden_COORD-5920" searchProperties="true" id="e770b259-b5cc-4bab-be48-29599b37b307"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="479e6302-d1fd-451a-973a-bb3d5aa24b4e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","MANAGE_ACCOUNT_CONSENT_REQUIRED");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBModifiedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="6efbbd35-d2c6-4714-85da-091a0ea88e4d"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9639e521-0818-414d-aef4-e96b40ba1533" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="1d740f58-3931-4910-848c-db641ae1fc47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="9d0b3f80-c2bf-431f-af1b-89f5d80c9f3b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="bddf7361-635b-46e3-928f-ea8ad3cbc7b5"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="3ea61754-73f8-4a33-b2f1-e0dfb6980647"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="5b388f03-5230-484e-a231-0952a0116fdc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as LLPCS" id="bb706bba-d9f0-43dc-bc18-0d471787fccc"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="dfed3650-43e2-4af9-8b56-e886625f9480"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Get ManageAccount Consent" id="22f9d8b0-c019-4f9c-9223-5233da030d19" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy List get" id="c992db76-87ce-4b33-974c-b610cf9fb37b" disabled="true"><con:settings/><con:config service="Policy" methodName="PolicyGetAccountList" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/List" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy List get" mediaType="application/json" sslKeystore="LLASP_CS_2_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="NodeAccountId" value="urn:dece:accountid:org:dece:1569EB746CA348F8E05307991F0A5E2E" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="aa97d857-2fce-4da1-bd25-0aa6b44a7fb7" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a5981f10-02fd-46d8-aa29-2044a0518036" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1ddcafe9-40e5-413a-b54b-9daace6543e8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>1569E47CFCEF52C1E05305991F0A3145</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVZrb+I6EP0rKP24gjwIr6ggUaBbtkChodxtv1SuMwHTxIbYAbq/fu0AKaHQy71SVeTJeObMzPGxrzkKA8tpcg6RIIzmNmFAuZNY61ocUYchTrhDUQjcEdhxm/2eYxUMB+23aLluu669GmW7+IbL5byHMc7bJhj5WgWb8h/yDLuETGRVpSvnMXQpF4iKumYZZilvyL/y2LQcu+jYZqFSMV603AQiLmNLl4Kh7UBteF2bCbFwdH29XhfWxQKLprplGKb+u99z8QxCpDWutxUliaLGzh8XPMAQBLiAWahf6xmfa487LplSJOIIdrm8c7kM3ajp0sfjZHqlpXvB61KfJcsWoowSjALyB6n+9EHMmJdrBlMWETELzxZhGipwHjY4j02bXml6FtqFgTIII47yfIbMXaxH8CECiiH39Nita1eXTS3ZOo4Q5T6LQp5d/jc8QFcQsAV4eb4vawft8oAnOtW4Bux0KQ5iTlYwUGRdIAx8N03Al4fKDSPwyaZHuCTohit0+iG8o+W2G20yBS7+z4AOhrMNMkFBDI2ne/N3uzoZhRtTuILWJs/CNOK5G/ijegLg0DkxpKPdLo9ImZJou2MxiYJuTCcv3qj3XpwES3vyY74aVePNi9dE87ZYwqDKOnhqjsjMJvow/DX7Rf8pdry7GXmavrQ4HQ8HVqm1DlnwMvBMn/Xvmv640nlvh2/d283N/RhG+KbJev6fuze/Rsnj5B7z52f35mEcu54fTObWw/KpXx30/Jk9HJEfrZ/9XnX68FypGu7Pbuz3XTEOo2k9LecAf9a2P/Nu/DYHLPZLRYNuO3crp4TE92KmLMTL+4mrs1DiwwVQoTXULqUdTizljniOnOF2bZbKtc5NxS63miW7elvtGKWiUanVzFujWepYnb3IbFEcQWwx6hOVS0nuljbfA8Shw4F6EOVXLJZKx7VvIraRQLkufZSHgFEOYybl2UMf/P1t82GV5kVzPY3K5Q03ipXVXMsNmHigD1HTFxBlNbmU0eRHwGRBQAm34jWXxOZC9mKJVrEIzMIKFSjEUtojpbKOZVdLOifhIgCFVA+ZFwdQWMwWSWd0vv218gjzxNrrNd3ha8t9tZJDd7a842/7TkgfjygHrkq6ATlNOHHHFPf1nKm7cnQX7cM3Y4+o8yXbKiKCt0iynz7ZomiSUuWzsD3ydMOxIRNcP64rzeetCE5pn17eUtOlCjT2w1kis7AsxKtVnMzDtot6JMPrqlLdsHQXcCx16mPM3oHqaRT9okshBX6UPLVnIcZiRl2BBISSP7lkecErwAWuXgFdSfzNpU+MTErZOgEbccrWCuQLRiH+9pGDHaz8pHkof9Ys8j4ndiLWQR5Zp3wECEKnaqUuhI8z9MBMhiVSylh0GPxUgFPJs8a0ySkWIQn1Fgs4/yWnNKquIYxZTEW3rSWGQ91McIqPBTifTl/CJNKcvtXIvz/W8iShAAb5wuMkia+uXEcdATo90N5d0jPyW/xOfrPoGl/MXy0HfTrmeOMv</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1569EB746CA348F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1569EB746CA348F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1569EB746CA548F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1569EB746CA548F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>MANAGE_ACCOUNT_CONSENT_REQUIRED</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03EF82831975E05307991F0AA8B2</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:1569E47CFCF652C1E05305991F0A3145</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>1569EB746D1148F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1569EB746D1148F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FEF0BD20BB974DA88138AA75F9AC2A6A</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FEF0BD20BB974DA88138AA75F9AC2A6A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FEF0BD20BB974DA88138AA75F9AC2A6A</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FEF0BD20BB974DA88138AA75F9AC2A6A</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150506_061547</con:value></con:property><con:property><con:name>useroid</con:name><con:value>1569E47CFCFB52C1E05305991F0A3145</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a69e6d59-447d-4fb1-804d-f7619e8e0771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bf5b4eb-d548-49d7-bf05-8b45c5218198</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7637421c-4c33-417b-a644-20a54b0fd077</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89072f11-baf2-4986-95b8-d5eaf193048b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f9d8b0-c019-4f9c-9223-5233da030d19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c992db76-87ce-4b33-974c-b610cf9fb37b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_39309 - StreamView - LLP - ManageAccountConsentRequired - Stream view by llpcs_ManageAccountConsentNotPresent_ActiveStream - 403 Forbidden_COORD-5920" searchProperties="true" id="11f5a7f9-d803-48ae-87bc-b7334ca569af"><con:description>This test case will perform a StreamView API directly after a StreamDelete has been issued against the stream handle
</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e2cea308-d411-42d8-9b1f-176d3b47b0c2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","MANAGE_ACCOUNT_CONSENT_REQUIRED");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBRenewedBy","");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="62d2135f-64d3-44e1-81fb-b5a8cd3d4e6e"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="4880345a-40ad-46dc-8eb3-7eccb494ae85" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.streamDeleteAccountOid - $e";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove ManageAccount Consent" id="da1c7bb3-0118-4a34-9caa-6eeee69be438" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="03b35b49-f83c-442e-9585-13d52a5f2a31"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="68c4a5c7-7287-4c64-aba1-bbfca6e64920"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="dae0aab1-10ad-4074-829a-2db1d8514d27"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="689cbac7-068f-4279-9623-bf4d368e11e7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as LLPCS" id="77ca709a-37ea-4007-b945-ad4e5de2faed"><con:settings/><con:config><script> import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7edd799d-d67b-4d77-8085-70beea51414c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="48052091-255b-46d6-b4be-d8e802b9f631" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="cb7b15b7-deb1-460a-b73b-b99bb1b5e92a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ba3c62ea-ca0d-40e6-9181-d968c6a279f9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_060442</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F0F63FDDD12C4360AAC129061A00E2BC</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A46BFEA6BC6754E05307991F0A8966</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A46C7AB7C9674CE05307991F0A897A</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdc9o6EP0rjPvYMZINBOwJzBAgDSkhuYGmaV86Ql4bJbYMlszXr69kwMGE5HLvk0fr1e7Z3aMjXQoShbbbFgISyWJeWkUhF25mbRppwt2YCCZcTiIQrqTuqH03cO0ydsl+i1Hqd5vGH6DY96vkwqwQmJhVXAXTmdh1c+JULKvhXFQnUFWuQqTQ50ISLpuGja2aiSum5Ywt263UXBuXcb3y2yg9QSJUbOVSxsYO1Eo0jamUMxeh5XJZXlbKcRIgG2MLPd8NRnQKETFal9uKskRJa+dPyx5QCENapnGELlHB59IT7ogFnMg0gV0u76NcGGEHKR9PsOCLke8Fr8/9OFt2CI85oyRkG6L7cwdyGnuldhjECZPT6MMiLKwDm7CiJrWq/IuBitDODFRAmAhiiimxdrEewYcEOIXSj8d+0/hy3tSyreOEcOHHSSSKy/+GB/gCwngGnin2Ze2gnR/wRKdal0DdPqdhKtgChpqsM0JB7KYJ9PxQpYcEfLYaMKEIuhIaHTqEd7TcdqPLAhDy/wzoYDjbIE8kTKHFhs9+bTF/QqPfazH8HrA1oU9fg8Yg+NXMABw6Z4Z8tNvlESlzEm13xL3bwc23JXm9SH+Gzt2KPUh/dH9dvfNv5zgY/RNP6i/fWWQvrzY3uP1yhWejTUqGPRT9eF3eLQcQYsLrlYtvK0RRZ3z/i18xQIETO8GsbwHyBvTmNlqn65/D4e30JxXLznK4mQ7nmI7by3T+/MteiB/98eYZv4598u0r6axr1s3XcMhX/c3D5LuNNpUbb12b7so9wl+07c/8KJ28AJX7paZBv1u6VlMi8nMx0xbmmX7m6s60+AgJXBotvUtrh5squWOeq2a4XVtWu1rr9HoNx65ajWqvh2sVXHMc6xq3e93O9V5ktiiOIHZi7jOdS0vuljafA6SRK4B7kJiLOFVKJ4xPInaJJKU+f1SHIOYCxrGSZ8rlFCY1wbwXbDVSlQesi+m6bhmlYSzv+X3S9iUkRU2uFTT5ESibMdDCrXktFLGFVL2Yk0UqQ6u8IGUOqZL2RKusa1cbNSRYNAtBI0VR7KUhlGfTWdYZJLZf2yRUZNbBoD16+NMZ/bGzQ/dhecf/9p1QPh7TDkKXdAVqmnDijrH29Zyu28ZHd9E+fDv1mD5fqq0yYXSLpPjrjS2aJjlV3grbI883HBsKwdFxXXk+b8FoTvv88laarlSgtR/OnJTn5XSxSLNx1LXaJSo80pUibKMR0FTp1HocvwJHeRR01qWQAz9KntuLEFM55SNJJESKP6VsecYrYARCvwL6ivirc58YhZSqdRJW8pStE6oXjEb86SOHulT7KfOD+izjxHub2IlYB3lUneoRIBkP9EpfCOsP6EFjFZYpKYuTw+CnApxKXjTmTc6xSEWoSSrh4z8lrVFNg1Aap1z2u0ZmONTNDKdcz8B9c3oXJpPm/K3G/v2xZrKMAhTUC0+wLL6+cl19BHhwoL27pO/kt1fvdGpOpYqdRia/9a38VqxuL29KAV3rnfm95aBPxxxv/QU=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>MANAGE_ACCOUNT_CONSENT_REQUIRED</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11A45CEE8924184EE05305991F0AEDCF</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A45CEE8924184EE05305991F0AEDCF</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A45E7CC5934098E05307991F0A31DE</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A46BFEA6C36754E05307991F0A8966</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11A45E7CC5934098E05307991F0A31DE</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>11A45E85B806409EE05307991F0A3D37</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:11A45E85B806409EE05307991F0A3D37</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F0F63FDDD12C4360AAC129061A00E2BC</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value>9e9703ca-0eac-4e5e-a966-1c8be4523c00</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>0e60aeb5-654b-459f-bb1e-c62f9dda1e32</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value>2011/01/07</con:value></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/01/24</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:11A46BFEA6C36754E05307991F0A8966</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>11A45E7F0CD440B7E05307991F0A88FD</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>11A45E7F0CD440B7E05307991F0A88FD</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>F0F63FDDD12C4360AAC129061A00E2BC</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:F0F63FDDD12C4360AAC129061A00E2BC</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1b3059ff-6ae9-4bff-acae-0ebf505325f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b48a93c9-320b-42e7-bfbe-d1446be32c1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a69e6d59-447d-4fb1-804d-f7619e8e0771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bf5b4eb-d548-49d7-bf05-8b45c5218198</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7637421c-4c33-417b-a644-20a54b0fd077</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89072f11-baf2-4986-95b8-d5eaf193048b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c3879a1-1d32-4009-91a0-00be9155a2fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Test Configuration/Setup" disabled="true" id="c7c35a56-02d5-44b3-bf8d-62679464cd53"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true" id="f0cda837-204b-43ee-8d88-5979157fae51" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Data Setup when Stream Count Greater then 12 for Stream Service ON" id="3502b052-6633-4e8f-8cf9-8ca7696a9389"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

int StreamCreateCount = Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));

log.info "Stream Count from Project level......:" + StreamCreateCount;
log.info "Not required to create test data...."

def temp_username = callTC.getPropertyValue("username");

log.info "temp_username ... " + temp_username;

                if (temp_username == tP.getPropertyValue("UserName_FAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_FAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_FAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_FAU2");
                }
                else if (temp_username == tP.getPropertyValue("UserName_SAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_SAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_SAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_SAU2");
                }
                else if (temp_username == tP.getPropertyValue("UserName_BAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_BAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_BAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_BAU2");
                }

log.info "UserName property from Test Case ... " + tP.getPropertyValue(tC.getPropertyValue("UserName_Property"));

//run E2E when Stream count reached to 12 in the Account

if(StreamCreateCount>=12)
{     

                StreamCreateCount = 0;

                //update StreamCreateCount to Zero at project level.
                tP.setPropertyValue("StreamCreateCount",StreamCreateCount.toString())
                                
                def myTS = tP.getTestSuiteByName("E_2_E");
                
                def runnerTS = myTS.run( null , false )
                
                assert runnerTS.status == Status.FINISHED;
}

//Setting the desired user from the testcase
tC.setPropertyValue("username",tP.getPropertyValue(tC.getPropertyValue("UserName_Property")));

log.info tC.getPropertyValue("username");

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Properties from calling test case" id="3898fb83-555e-4306-9b38-c10fb2917677"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("nodeid", null);
//tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
//	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Authentication Context" id="5ecb9587-631f-497f-861d-ff0155ade789"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def dbAcct;

int lastColon;
def nodeID = tC.getPropertyValue("nodeid");
String userID = tC.getPropertyValue("username").toString();
String rturn = tP.getPropertyValue("urnRightsLocker").toString();
String useroid = "";
String acctoid = "";
String uuid = "";
String assertionAccountIdFULL = "";
String assertionUserIdFULL = "";
String assertion = "";
String rightslocker;

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
callTC.setPropertyValue("rightslockerFULL",null);
callTC.setPropertyValue("rightslocker",null);

/*
*  LP2 security contexts
*/

log.info "---- PROCESSING nodeID[$nodeID] userID[$userID]";

	switch (nodeID) {
		case tP.getPropertyValue("nodeoid10"):  // Retailer node
		case tP.getPropertyValue("nodeoid11"):  //Linked LASP CS
		case tP.getPropertyValue("nodeoid12"):  //Dynamic LASP
		case tP.getPropertyValue("nodeoid13"):	//Dynamic LASP CS	
		case tP.getPropertyValue("nodeoid14"):	//Linked LASP
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_1").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

          case tP.getPropertyValue("nodeoid30"): // Coordinator CS		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_3").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid20"):  // dece cs		
          if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_2").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
		case tP.getPropertyValue("nodeoid40"):
                                                   // Dynamic lasp and his/her customer service node		
		     if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_4").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_4").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_4").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_4").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid50"):
          case tP.getPropertyValue("nodeoid51"):
                                                 // Linked lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_5").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_5").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_5").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_5").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
		default:
			log.info "ERROR - NodeID supplied is not configured!";
			assert 1 == 2;
			break;
	}

log.info "---- PROCESSING COMPLETE";
/*
*  Get the account's rightslocker
*/
try {
	dbAcct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount - $e";
	assert 1 == 2;
}
finally {
	try {
		rightslocker = dbAcct.accountGetRightsLockerId(acctoid);

		log.info "rightslocker: $rightslocker";
	}
	catch(Throwable e) {
		log.info "ERROR - dbAcct.accountGetRightsLockerId - $e";
		assert 1 == 2;
	}
	finally {
		assert rightslocker.length() > 0;
	}
}
/*
*  If we are here then we lived.  Now we will populate all the other 
*  generic values everyone gets.
*/
callTC.setPropertyValue("accountoid",acctoid);
callTC.setPropertyValue("useroid",useroid)
callTC.setPropertyValue("assertId",uuid);
callTC.setPropertyValue("assertionUUID",uuid);
callTC.setPropertyValue("assertionAccountIdFULL",assertionAccountIdFULL);
callTC.setPropertyValue("assertionUserIdFULL",assertionUserIdFULL);
callTC.setPropertyValue("assert",assertion);
callTC.setPropertyValue("rightslocker",rightslocker);
callTC.setPropertyValue("rightslockerFULL", rturn + rightslocker);

lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
lastColon = assertionAccountIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 3));
lastColon = assertionUserIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 3));
}
else
{
lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish other account/user related data" disabled="true" id="1468ff89-c5b1-44b9-aa0e-8c3187a059f7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctoid = tC.getPropertyValue("accountoid").toString();
String nodeID = tC.getPropertyValue("nodeid").toString();
String userID = tC.getPropertyValue("username").toString();
String rightslocker = "";
String useroid = "";
String accountoid = "";

assert acctoid.length() > 0;

/*
*  useroid
*/
try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}

try {
	def a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	rightslocker = a.accountGetRightsLockerId(acctoid);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
finally {
	callTC.setPropertyValue("rightslocker",null);
	callTC.setPropertyValue("rightslockerFULL",null);
	
	log.info "rightslocker[$rightslocker]";

	callTC.setPropertyValue("rightslocker",rightslocker);
	callTC.setPropertyValue("rightslockerFULL",tP.getPropertyValue("urnRightsLocker").toString() + rightslocker);
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_29104 - StreamView - LLP - StreamOwnerMismatch - Stream view by llpcs_ManageAccountConsentPresent_DeletedStream - 403 Forbidden_FLAKY</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81597</con:value></con:property><con:property><con:name>UserName_Property</con:name><con:value>UserName_FAU1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3502b052-6633-4e8f-8cf9-8ca7696a9389</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" id="b9270ec3-ab68-4fc6-9942-28b611a158e1" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Properties" id="2067ab0a-dd94-4379-bf2b-3559d7bf75a6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("userrowoid",null);
tC.setPropertyValue("accountrowoid",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="c6db654d-bb9f-487e-8749-8cf3a878ea1e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish whether login is necessary for node/user combo" id="d121b619-6f60-4227-b4e8-14decdb48818"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node      = tC.getPropertyValue("nodeid");
String user      = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser       = node + "_" + user;
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid    = node + "_" + user + "_accountoid";
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";
String prop      = tC.getPropertyValue(propUser);
String asstuuid  = tC.getPropertyValue(propAssertUUID);
String assbinary = tC.getPropertyValue(propAssertion);
String assAccountId = tC.getPropertyValue(propAssertion);
String assUserId = tC.getPropertyValue(propassertionUserId);
String assAccountIdFULL = tC.getPropertyValue(propassertionAccountIdFULL);
String assUserIdFULL = tC.getPropertyValue(propassertionUserIdFULL);
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asstuuid[$asstuuid] - assbinary[$assbinary]";
this.log.info "propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID] - propUser[$propUser]";

if (prop == null) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	} else if (prop != tday) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	tC.setPropertyValue("nodeuserid",null);
} else {
	// Check the UUID property
	if (asstuuid == null || asstuuid == "") {
		log.info "assertionUUID is null/empty";
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	// Check the assertion binary property
	} else if (assbinary == null || assbinary == "") {
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	} else {
		int lastSlash = assUserIdFULL.lastIndexOf(':');
		
		tC.setPropertyValue("doSTS","false");
		tC.setPropertyValue("assertionUUID",asstuuid);
		tC.setPropertyValue("assert",assbinary);
		tC.setPropertyValue("accountoid",propAccountoid);
		tC.setPropertyValue("useroid", propUseroid);
		tC.setPropertyValue("assertionAccountId",assAccountId);
		tC.setPropertyValue("assertionUserId",assUserId);
		tC.setPropertyValue("assertionAccountIdFULL",assAccountIdFULL);
		tC.setPropertyValue("assertionUserIdFULL",assUserIdFULL);
		tC.setPropertyValue("nodeuserid",assUserIdFULL.substring(lastSlash + 1));
	}
}
log.info "doSTS is " + tC.getPropertyValue("doSTS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="525d0cba-14e5-474a-add9-253055de1ea4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser = node + "_" + user;

log.info "propUser[$propUser] - propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID]";

def doSTS = tC.getPropertyValue("doSTS");

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	if (runnerTC.status != Status.FINISHED) {
		tC.setPropertyValue(propUser,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAssertion,null);
	} 

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS GET" id="5e20dc4c-e118-4470-afa5-b83ebbbbe35f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def doSTS = tC.getPropertyValue("doSTS");

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
	
	tC.setPropertyValue(propassertionAccountId,tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue(propassertionAccountIdFULL,tC.getPropertyValue("assertionAccountIdFULL"));
	tC.setPropertyValue(propassertionUserId,tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue(propassertionUserIdFULL,tC.getPropertyValue("assertionUserIdFULL"));
} 


</script></con:config></con:testStep><con:testStep type="groovy" name="Store assertionUID for the node/user" id="f55dd1f6-2f41-4fc8-b5c6-0343a84f3c6e"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String prop = tC.getPropertyValue(node + "_" + user);
String asst = tC.getPropertyValue(node + "_" + user + "_assertUUID");
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asst[$asst]";

if (prop == tday) {
	tC.setPropertyValue(node + "_" + user + "_assertUUID", tC.getPropertyValue("assertionUUID"));
	tC.setPropertyValue(node + "_" + user + "_assertion", tC.getPropertyValue("assert"));
} else {
	tC.setPropertyValue(node + "_" + user,null)
	tC.setPropertyValue(node + "_" + user + "_assertUUID",null);
	tC.setPropertyValue(node + "_" + user + "_assertion",null);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract OID level User/Account Information" id="50b5b91f-c450-4f4d-803b-7a76cde4b18b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());


String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID, to_char(rawtohex(a.USER_OID)) USER_OID, 
to_char(rawtohex(b.NODE_USER_ID)) NODE_USER_ID, to_char(rawtohex(c.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID, 
to_char(rawtohex(b.ROW_OID)) ROW_OID, to_char(rawtohex(c.ROW_OID)) ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = '$uname'
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = '$nodeid'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);

	accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();
	useroid = myXML.ResultSet.Row[0].USER_OID.text();
	nodeUser = myXML.ResultSet.Row[0].NODE_USER_ID.text();
	nodeAccount = myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text();
	userRowId = myXML.ResultSet.Row[0].ROW_OID[0].text();
	acctRowId = myXML.ResultSet.Row[0].ROW_OID[1].text();
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	log.info "accountoid[$accountoid]";
	log.info "useroid[$useroid]";
	log.info "nodeUser[$nodeUser]";
	log.info "nodeAccount[$nodeAccount]";
	log.info "userRowId[$userRowId]";
	log.info "acctRowId[$acctRowId]";

	tC.setPropertyValue("accountoid", accountoid);
	tC.setPropertyValue("useroid", useroid);
	tC.setPropertyValue("userrowid", userRowId);
	tC.setPropertyValue("accountrowid", acctRowId);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store the ACCOUNT.ACCOUNT_OID lockerId" id="82024d1a-fe9a-4c93-980b-aac620e039cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid = node + "_" + user + "_useroid";

tC.setPropertyValue(propAccountoid,tC.getPropertyValue("accountoid"));
tC.setPropertyValue(propUseroid,tC.getPropertyValue("useroid"));

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

def x = a.accountGetRightsLockerId(tC.getPropertyValue("accountoid"));

this.log.info "x[$x]";

tC.setPropertyValue("rightslocker",tP.getPropertyValue("urnLocker") + x);


</script></con:config></con:testStep><con:testStep type="groovy" name="Setup base node-level information based on calling Node type" id="dfdd5e46-ff7f-4fad-bbf0-cb12dcdffeb7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def baseNodeType = tC.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
tC.setPropertyValue("deceorgid",tP.getPropertyValue("deceorgid"));

if (tP.getPropertyValue("targetPort") == "443") {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
} else {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
tC.setPropertyValue("nodeaccountid",tC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("nodeuserid",tC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase" id="9a24a67a-a2b4-421b-bb07-ded160cd43f1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String usernodeConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username");
String usernodeUUIDConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username") +	"_assertUUID";

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "assert":
			case "assertionAccountId":
			case "assertionAccountIdFULL":
			case "assertionUserId":
			case "assertionUserIdFULL":
			case "assertionUUID":
			case "cid":
			case "deceorgid":
			case "rightslocker":
			case "targetURL":
			case "useroid":
			case "accountoid":
			case "nodeaccountid":
			case "nodeuserid":
					toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="8fb25a6e-0cd8-4ac0-b9a7-179ef3ca3f0f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="af811e31-74a8-43b2-8bcd-928468f8b74d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" id="9c0241a0-59ff-4edc-940e-410ece68d1e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="8a9d50b6-2977-484d-b850-2b340005e5b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="09fe02c2-069e-4983-ac9a-eb92ac2f1521"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="3b978cb8-2b19-4c1c-8d9c-d6d1663eff4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" id="6cfc1ec7-b62d-4279-af67-07a59e3cfbb1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" id="65907da2-6d5a-4239-a9e1-bd0c3f2a5039"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" id="c3010117-8fb2-4730-a7fc-aa18faa1db49"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" id="88b5d7fe-28d8-4fdc-b17e-dc8eb209ecaf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="10484d8e-34a3-454c-953a-9924bb35e0eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="3ef83430-b5c4-4427-a013-ebdccb428f0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties 1" id="0992d84a-0d5d-4b32-a011-e67f0d32bfa3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties 1 1" id="b97fb0c9-4e4f-4c7b-ad21-92491bc6f951"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties 1" id="31dfcfec-cdd8-48cf-847b-3ac0253697c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:properties><con:property><con:name>0910_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Basic1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>10_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>20_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full2_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgOrg1Standard1_useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9E87C57F4A237E44E0401F0A05992B03</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_24.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_24.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>true</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>urn:dece:rightslockerid:org:dece:9E7171CFE6FC3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic Test Cases</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_36210 - StreamView - DLP - Full user can StreamView Stream created by Standard user</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9E87C57F4A257E44E0401F0A05992B03</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0912_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>25_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0910_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertUUID</con:name><con:value>b029afa8-ae5c-442b-bfc8-5425a33d1793</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0910_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionAccountId</con:name><con:value>990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionUserId</con:name><con:value>9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:990200</con:value></con:property><con:property><con:name>0910_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E7171CFE7053F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0910_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertUUID</con:name><con:value>96fcd296-05f7-46cd-94a7-424fa059b403</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertion</con:name><con:value>nVdZc6pME773V1iey1TCJm51kqphEVFBQcTlDmFYFEEZEPTXfwNGY3Jylve7SMVpenmm+5menp/I2od0DyAEkzSIo7osvDa6Ldd26G7rmWTd9nOzZTvP3aaFf9FN1yLZ7qZJMo26jFAG5QilVpS+NmiSop5J5plqGWS3xzI9knqhmu11o27CBGHPWOWFbNSLfRihXhX1tZElUS+2UIB6kbWHqJfavRlQxj2s2bNukBpvP68gq4DJm5+mhx5B2C8OtGEY2i92vCd+Ep90fjqoNwu8yEqzBL7HdNBr4902z/OXnHmJE4+gSZIkyC6BdRwUeD8ab7WbMXTkyI2va96K4iiwrTC4WCUoBaZ+7NRB6MVJkPr737imCIosXT/Dwn62qWb0o0F8BKjQ/aOnTyATZD0j36JuznTowgRGNqzPdfm18eOfCng1NRIrQm6c7NGX9X9DBKMTDOMDdJ7RbWM3cP/u8Ztsvf2Edk+O7DBDwQmqJUsOlg1RfZpANyjGAcLcc1C9qn69QDeCQfu/VOQn8YgTwya+yYwQeBCl/0+5Hkt19WJaYQbf4kFr0Tb78wHpUt0jkZjLVUduJ0uHIF8rCI/KV1D3Sr+vv/L0Tqt3o+VqOFmqypo8nxUY+6lJssakbUFKSPdmbmuetRkQ640hPu2kzLVYuiUom4T21OnJO04X/RWz9TzfiTWWCWqjXdpRXReNm6pKK6w5Z2Yt1eGW+XKxA+cuYZGU4Abz8Zoc0iOtKy8m3HKhkDtiuTDBAPV3KAyX6sEcTpSw9hRARaUKa24jPxi3mI7YfP3Y0+Meyn2N4LnaZPl7yZJdwUqt+4IvG4WLT2cK3xRZFrILz4PzzAO5zAEP/22Bynm7o78LpG5OckDT+kDguXArjhWwkwA1Fzlf4U1TKfgLGHKeamJDowbCNafoYi7kK8HUtIGY+4YjmeeNFGbri6gqAFXGvK+IumgKuiEqCoivskIRNlKxVWZKLmsroYYdCGJxuDhSN4VSEdi0zCozll7N2Gy9NLG8fx7v1RMuRqjwisTPjtJM3jCCJg6BvlrYdD/Dtpfx/hDXVnPuwWh4gFsA+zmJY4KLYuxyxZjTqqBblcz4LFNkaahoKOe1aldSTcyH5vzykQueU3hnLxaiAabXXNgG31fJ9XKIrAUbKTrIBa8yHom5M7kBUTQyr/HXXI3FXBf1udpXdDkXQSUTxDxEG1r1N5J/shmtGBpg+1gYXhMX/Qh/j/STfWaPNUvqg83epGxG9+2ADaxlnHvrTi5oq+EoXsvYjQo0keM0gAGRoNwazj8HxpzJTg5Blw7g2O3He+gnNYWKR7vTpSA7ATPxpuqCFdxdeyoFU8ZyfEIObXrL7IAsQ2dE+Zrl6CtCF6Lg0pqM5ksYJKtLqrIa1Qo6bE1fZPOlEIdtZ7BczUdPxcrWjMl0Nl9ML0WhHredS5gOJtwgmQ0VwZuoEE6R/USQVp8zOgLLrwZbzCdXJyFbA57CASDhoyYGmMDcYHsl4UBXRExeoPC5xC94aQYk6UmUOUHT3L5PTW3JzOaUqsiiE+I0nVdLPayteU7AlSKtxfqwovvk2gBO5Uxrin1Pm7NPwyVca2pomCnID6YbURQpHbSBq+SerZQMcOR8xuFTxNUyGcytyWFIFiOzRVJHzQmHsy6YM8WM3hUT31ufd956h4uyejg6KwOEpvHAMRlTbFHTDFFXQOd63gpFnjN6aO+Lw2ZvF4KBa1YZxwYn6n2NnBeCAEZXGTIAXaDVRdwqvFjZ10ChWJgWp83SR6tIDSaGmGHSZg902W5o8q8cKylW+8yxIw808JVj4pVjInCPT3JHoBDb4g9okXucJB61tjkedg+kthzvatxTn/DSIGxOok5ujJ4W1Dlv+1ttsejKgs8/Re7KZzYpR1oXW4PDXVsK9J0QtZrhWRkrGjsPiPBMbuExR+OaKlORyKSXPtFNsiduvw72lwvTpOf76Sw7yXNrhKizvzkuuvl2OmgRRCKd2Ut7fdL6y9heXe+Rr03yLry2UeKxwX7qwLfRa5ZtttBOb8vyHpaFeh9fjlb65zGulATOs1up9g7lLIhSGKWNt9KqHOF6GR70AqeHb87ruit22jzb7jN8q9UWm02RbJJUnwR4cOnSHMncZr0rii8Q+ThygzJWOcxeL+s/A7T3vQ20Epg0/uCpzFNdjnQ8fcQRgkb82mjRnQ5L9hmG4Zoc0wUtQLGM0OQolqKEbptq1NU4nUSTBLgpTB4G5PbXAVmHdnAIYDlFv88SKMWJOFqnLA2pl5P1EsEMj9lJOen26GaHrRJAONn+YOMPuLslhxilLwf/UA0zv93G12+3HWMdJygVUAmag7ha8JeRnu6xN8S/7Iz+dvS/uQeZE5QzC05fmgT2FcnnTx9sKGlwpwLZpegb5rvqv5lS35oSf0BEfE3GPZJzCh7i3h4meNbG41j1HkG4aEfr5fiSnU5ZVaY2SdJEgt0TFEESM2hneFw8G/EORsTdA/Evg/od85e4d/lndFnqR7MUn/I9ZlS9Wv79kfbJGicghUX6nYwP8bOsDP7Hl5vds0s9LJ7if3mcOB95/8bXQxwMuexQQeSVq3LCPn8u7/tJ6Nkx9hrgJhUnj76/s/8u9mfhPV13KClmxSZL4e+/1Mvu89qwbDvOolQWGpXgsSNWmNPzAfY+lH5xU42472+WAv32zbJUxjPbh3urcdcN/q78HFSFtyG2QkGF5bVR4Nc3Dh55Dx34HeBvmnDzT034807efhH/KnnI6Vdmv/0P</con:value></con:property><con:property><con:name>0912_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionUserId</con:name><con:value>9E87C57F3C667E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E87C57F3C667E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertUUID</con:name><con:value>bd31a621-99de-45b8-bd3d-da482edad8c9</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionUserId</con:name><con:value>9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E87C57F4A247E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>20_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertUUID</con:name><con:value>6ef3bd26-e62b-4433-a8db-845f39dd7130</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>20_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionAccountId</con:name><con:value>9E883D73823AAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionUserId</con:name><con:value>9E883D73823CAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E883D73823AAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E883D73823CAB88E0401F0A059963F5</con:value></con:property><con:property><con:name>20_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertUUID</con:name><con:value>fa6ebc29-e0dd-4830-9e21-398738245e25</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionUserId</con:name><con:value>9E8C05C6707A3EE6E0401F0A0799176F</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8C05C6707A3EE6E0401F0A0799176F</con:value></con:property><con:property><con:name>0914_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertUUID</con:name><con:value>0a11f365-aeaf-479a-9f2c-e3d99c18724a</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionUserId</con:name><con:value>9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8BCDFB2CFD4243E0401F0A07997D62</con:value></con:property><con:property><con:name>0914_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertUUID</con:name><con:value>2f9e0cce-ace5-42d2-b50a-aab314454e53</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>25_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionUserId</con:name><con:value>9E8E512ABEF313DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E8E512ABEF313DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertUUID</con:name><con:value>7adce797-930e-4d5f-8258-0e8f5bc7e248</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>25_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionUserId</con:name><con:value>9E977EBCADC4E996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E977EBCADC4E996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>25_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertUUID</con:name><con:value>df65844c-c946-47e2-9c5e-e7d9ca59753a</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>25_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionAccountId</con:name><con:value>9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionUserId</con:name><con:value>9E977EBCADCAE996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E8E512ABEF113DFE0401F0A059904F0</con:value></con:property><con:property><con:name>25_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E977EBCADCAE996E0401F0A07995384</con:value></con:property><con:property><con:name>25_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgfull1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertUUID</con:name><con:value>56b6c12d-d7d1-42f5-ab00-6cbdaad9ba92</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertion</con:name><con:value>nVdZc6pME773V1ieS8swoLhVkqphEVFRWVzvEEZAEZRFkF//DRiN5uTknPe7SJlpenmmu6fnmddQP7hUF4YhCiLH98oi91ahm5umQVJmzWyZZK1BbemavgGg1jQ2pq6bnY3eoSplMQxjJHphpHvRW4UCJFkD9RrZ1Mhmt052SfBC0a11pTxHQYg9Y5UXUCmnB9cLu0XUt0oceF1fD52w6+kHFHYjo6tCadTFml39Bqny/noFWQQM3u0oOnYJwngxkYFc13gx/APxSjzpvJphV3UsT4/iAH3ENMO3yodtkiQvSf3FDyyCAgAQoENgHTN0rF+V99LNGJmit/Wva1b3fM8xdNfJ9ByUhCLbN8vQtfzAiezDH1yTBAly1zWUGjWDbHi/KsRngALdP3p6AhmEei20dfLmTEFbFCDPQOWZIr5Vfv1TAa+mWqB74dYPDuGX9X9DhLwzcv0jMmvhbWM3cP/u8Ztsvb8ioyt6hhuHzhmN8y456gYKy9MAbZ105IS498ywXFS/nIa3BkPGf6nIK/GIE8MmvskM51gojP6fcj2W6uplrrsxeoctcczMJ0amZumAWM892t6A43RE7+S3AsKj8hXUvdIf6699em+rDyOO40CfgQI9WR/O++YcLH1joB73ycUWgDpV0Biik8saw+rZ5tdndTbzuV7fhyJNTqvUhXWOHVoe9DNiv96VYnIIrCQ4VOlGdb9jD1qdbs/F5bTZYXYdcFnE7mqaNdI6nIqn9kyRBryudMTOOeZGVNCXGpfVkLNNwToNm34pCtqZtp8EgJyeyebRmKLV2+eeHveQ72uILsUm8/+XNOhweqTfF2w+KLb4dEboXRJFLs5YFl5UCyYiAy38t4Njxtqf7L0jdBLAQFnuQY5l3B0/kuBegOSMZ2yJnc+llM3ggLHGc2yolaC7ZiSFT7hkxc1luc8ntmYK88tGcON1xo8lGBbGrC3xCj/nFI2XJOhfZanEbYR0J6lSIsorroQdcHx6zEyhEyEhdQxKpCWVplYqHa+XcyzvXUaH8Xmj8a7ESgKrngRV3NQ5mR9AZbUwqF6MbbPR4eiXVjPmwWhwRDuIegnAMWEmaftE0mbUmFP0QqY9yyRRGEhymLBysSuhxCeD+Sz7zAXLSKx54FNeg9NrLgyN7Y3BejkI9QXtSQpMOKswHvKJObkBkWSQlNhrrkZ8ovDKbNyTFDHhYSHj+MQNN9TY3gj22ajL6UCDu8fCsDK/6Hn4u6ecjQt9KulCD24Oc9KoK7bh0I6+9BNr3U44eTUY+msRuxlDmWcYGWJAAOZbw/ln4IiZ05Oj06EcNNr2/AOyg5JE+sP9OUtB26lPrOl4QXPbfWsqONO6btqE6BrUrr6HoojMIWnLuqmsCIXznKw5Gc6WyAlWWTSmZbLptOmSsohnS853W2Z/uZoNq+nKkLXJVJ0tplmajk+7duZG/QnTD9SBxFmTMULT0KgSQO8xWpuj2VV/h/tpqwBEl6AlMRAKO8viHdzATH93bcK+IvG4eaHEJgK7YAUVCkKVFxlOlrc9m5wawjyekWNJ5E0Xp+myWipuac0yHK4U0Bfr44rqgbUGzcKZ3OB7ljyjq4MlWstjV5tHMDnOtx5JAuEo97dSYhlS3gGmmKgMPkVMKRbhTJ8cByAdzpuAPMmmO1A7cFZPVWqfTmxrfdlb6z0uyurh6Kw06M61hx4TcYstSrLGKxJsX89bKomzuuIah/S4ORgpp+GaFca+xvBKTwazlOPg8CoLNUil4SrjdxLLF/YlmEo6bovzZmmHK2/sTDQ+xk0bP7TLbkOBv/ZY3mKl5x47sVCGX3uMv/YYD7enqtjmyJBussdwkViMwJ/k1nw06ByBvBztS0y1R1iR4zYmXjvRhtUFeUla9k5eLDoiZ7NVb7uy65uIAXpmyGiwbwmOsue8ZsO9SCNJpmcO4V7ADp2ScFQai6TH16OsR3SCuMoc1s4hy+oNanaYqvFZnOnDkLzYm9Oik+ym/SZBBMKFzlrrs9zDo351vUe+Dsm78DpGiccB+zSBb9RLjTc7ZES3ZX4Pi1y5hy9HPfqZxuUSx6xtC9XuMeeCYYS8qPKeW+UUrhtjoueYXXxzXtcdvsNyPabebrB8sw1IHjQA2QMQ0J1Ok29SN653RfEFIut7WyePlZPZ62X9M0Dj0N0gPUBB5QdPeZ7Koqdg9uF7IdL8twrXaDMk3epxsMU2+Tpocq12o82ydZrrsC2mVSmP/WjiTQK4jVDwQJBbXwmyggzn6KCcRedcIsRkIgfyglL9cHRRQSlc33I8YjpRtYKu/BHo12+3PWEd08kVwhwWg3A90DekHdww/Yad+pbc39zD2HRyVoITFAWOcUXy/Omz3nmh78UmwQ3xXfEfDcnfDYkf0BBfE3GPY56dh6i3Zwdm0phsvd8qctJfTi/x+Rznz41uCwCKCLB7giQAoSIjxmTwovl75BF3D8S/0PA75i9x7/JndHFke2qEz/AB90u5WP79CfZkjRMQoTT6Tsa6+NGVB//xXWZ0jVwPi6f4J/ED8zPv3/h6iIMh5/PH8ax8lfPny3NxPRTjvQRdw8deHTyC/ODR93f238V+Ft7TdYcS4a7YxBH685dyPlveKrph+LEXiVylEDzOuwJzdDmi7qfSb24KAvvxIknDP75IltJINWx00Ct3XefvyjWnKLyBsFXoFFjeKil+W+PgnvUwXz8A/mHEsj+N2OedvP8m/l3ykNOvnf3+Pw==</con:value></con:property><con:property><con:name>10_pjgfull1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionUserId</con:name><con:value>9E9CDFB384CE6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9CDFB384CE6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull1org3_useroid</con:name><con:value>9E7171CFE6FE3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0914_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertUUID</con:name><con:value>41fac975-cec2-404e-b436-9ad6f4eda488</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionAccountId</con:name><con:value>9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionUserId</con:name><con:value>9E9D128D12A933F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F4A227E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D128D12A933F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0914_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertUUID</con:name><con:value>3f0f3465-dd16-4299-abfe-b8c5eb9598e8</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionUserId</con:name><con:value>9E9D7D79540C90CBE0401F0A0799570C</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D7D79540C90CBE0401F0A0799570C</con:value></con:property><con:property><con:name>0912_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>0912_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertUUID</con:name><con:value>41a640ba-1796-4064-8ad2-7ed0a78d5093</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionAccountId</con:name><con:value>9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionUserId</con:name><con:value>9E9D128D12E833F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E87C57F3C647E44E0401F0A05992B03</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9D128D12E833F3E0401F0A059901A9</con:value></con:property><con:property><con:name>0912_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgfull2org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertUUID</con:name><con:value>fd997d8c-88a1-466a-aba3-7913aba3ca31</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>10_pjgfull2org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionUserId</con:name><con:value>9E9E90EFC560E713E0401F0A05995E0A</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgfull2org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9E90EFC560E713E0401F0A05995E0A</con:value></con:property><con:property><con:name>10_pjgfull2org3_useroid</con:name><con:value>9E7171CFE7023F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgstandard1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertUUID</con:name><con:value>3b22e769-151c-46bf-8ae0-c50c68ba53b9</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>10_pjgstandard1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionUserId</con:name><con:value>9E9EB4A7B060844FE0401F0A07992A93</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgstandard1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9EB4A7B060844FE0401F0A07992A93</con:value></con:property><con:property><con:name>10_pjgstandard1org3_useroid</con:name><con:value>9E7171CFE7073F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>10_pjgbasic1org3</con:name><con:value>2011/03/16</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertUUID</con:name><con:value>5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>10_pjgbasic1org3_accountoid</con:name><con:value>990200</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionUserId</con:name><con:value>9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>10_pjgbasic1org3_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>10_pjgbasic1org3_useroid</con:name><con:value>9E7171CFE70D3F6AE0401F0A05991E56</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55795</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" id="4f5af39e-6b0a-467f-823c-7fdb651aa701" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="89347f7a-7315-4ef1-b873-e32f8b758b3b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBRenewedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="5beef265-70e1-401c-ac9d-cc3464998cbe"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectDBRenewedBy",callTC.getPropertyValue("expectDBRenewedBy"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));

if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
if (tC.getPropertyValue("expectDBRenewedBy") == "" || tC.getPropertyValue("expectDBRenewedBy") == null) {
		tC.setPropertyValue("expectDBRenewedBy","");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert difference between EXPIRATION_DATE and CREATED_DATE not greater 24 hours" id="1c543ca7-ef74-4a2a-89ef-cd4f1aee3c2c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def streamhandle = tC.getPropertyValue("streamhandle");

a = new dbUtils.dbStreams(log);

assert a.streamHandleVerifyExpiration(streamhandle) &lt;= 24;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA row" id="69786cbd-43bc-45ea-9043-d810ae51150d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA a where STREAM_HANDLE_OID =hextoraw('$sh')""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data" id="11729ea6-4eec-4aa4-b9d7-8c8341f3f3bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody              = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle   = tC.getPropertyValue("streamhandle");
String expectAccountOID     = tC.getPropertyValue("accountoid");
String expectRightsToken    = tC.getPropertyValue("rightstokenid");
String expectUserOID        = tC.getPropertyValue("expectDBCreateUser");

String expectStatus         = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy = "null";
String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");
String expectErrTypeStreamRenew = tC.getPropertyValue("expectErrTypeStreamRenew");
String expectDBUpdatedBy = tC.getPropertyValue("expectDBRenewedBy");

if (tC.getPropertyValue("expectDBDeletedBy") != null) {
	tC.setPropertyValue("expectDBClosedBy",urnnode + tC.getPropertyValue("expectDBDeletedBy"));
	
} 
expectDBClosedBy = tC.getPropertyValue("expectDBClosedBy");

String strcrtnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBCreatedBy")
a = new dbUtils.dbNode(log);
String nodeoidcreate = a.nodeGetNodeId(strcrtnodeid);
tC.setPropertyValue("expectDBCreatedBy",nodeoidcreate);

String strdelnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBDeletedBy")
b = new dbUtils.dbNode(log);
String nodeoiddelete = b.nodeGetNodeId(strdelnodeid);
tC.setPropertyValue("expectDBDeletedBy",nodeoiddelete);
if (expectDBUpdatedBy == "" || expectDBUpdatedBy == null) {
	expectDBUpdatedBy = "null";
}
expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBDeletedBy = tC.getPropertyValue("expectDBDeletedBy");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_BY.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	String dbUpdatedDate  = myXML.ResultSet.Row.UPDATED_DATE.text();
	String dbUpdatedBy    = myXML.ResultSet.Row.UPDATED_BY.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle.toUpperCase() == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
     
     if(tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp")
     {
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID] - streamCreateNodeType[$streamCreateNodeType]";
	assert dbUserOid == expectUserOID;
     }
	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		log.info "Asserting dbClosedDate is null";
		assert dbClosedDate == "null";
	} else {
		log.info "Asserting dbClosedDate is length()";
		assert dbClosedDate.length() > 0;
	}

	//UPDATED_DATE
	this.log.info "Asserting dbUpdatedDate is null ";
	if (expectErrTypeStreamRenew == "SUCCESS") {
		assert dbUpdatedDate == "null";
	}

	//UPDATED_BY
	this.log.info "dbUpdatedBy[$dbUpdatedBy] expectDBUpdatedBy[$expectDBUpdatedBy]";
	assert dbUpdatedBy == expectDBUpdatedBy;
	
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_36200 - StreamView - LLP - Full user can StreamView Stream created by Full user - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_StreamViewLLP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0B1DE836CAFB6C40E05305991F0AB273</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0B1DE8B4FEFC6C3CE05305991F0A9C13</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3ac82959e6f04908bb22dac692ea66f0</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>3AC82959E6F04908BB22DAC692EA66F0</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>0B1DE8BC90A56C5EE05305991F0A2D22</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0B1DE836CAFB6C40E05305991F0AB273</ACCOUNT_OID>
      <USER_OID>0B1DE8B4FEFC6C3CE05305991F0A9C13</USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2014-12-26 17:36:33.707</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2014-12-26 11:36:33.707</CREATED_DATE>
      <CREATED_BY>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0B1DE8BC90A56C5EE05305991F0A2D22</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>C0CEF8E08CD7C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0B1DE8B4FEFC6C3CE05305991F0A9C13</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>0B1DE8B4FEFC6C3CE05305991F0A9C13</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>55796</con:value></con:property><con:property><con:name>expectDBClosedBy</con:name><con:value>urn:dece:org:org:dece:LLASP</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" id="f1efd516-3b73-4fa6-af6f-bfd9ad1bb57b" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="69533735-78a5-4d5a-beab-f5a03ded2e05"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="a0694317-7f30-4562-ad45-73f64d8f0098"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));


if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
if (tC.getPropertyValue("expectDBUpdatedBy") == "" || tC.getPropertyValue("expectDBUpdatedBy") == null) {
		tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row" disabled="true" id="3e54c2f3-bd35-4335-bc8f-dbe47198a39b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status ORDER BY UPDATED_DATE
</con:query><con:properties><con:property><con:name>sh</con:name><con:value>${#TestCase#streamhandle}</con:value></con:property><con:property><con:name>status</con:name><con:value>${#TestCase#expectDBStatus}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" disabled="true" id="966756eb-805e-49e7-95dc-0b866d9e16b6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false"><con:name>a</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep><con:targetType>dbxmlresponse</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row" id="e093a2e5-91ae-4a68-8d71-5d782c787ca1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String status = tC.getPropertyValue("expectDBStatus");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw('$sh') 
 and STATUS = '$status'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;


try {
	def myXML = new XmlSlurper().parseText(results);
	log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
	assert myXML.ResultSet.Row.size() >= 1;
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data" id="b7007ea9-017d-4b2a-811d-3a51fd86fd1e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBUpdatedBy  = tC.getPropertyValue("expectDBUpdatedBy");
String expectDBClosedBy   = urnnode + tC.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType     = tC.getPropertyValue("expectDBCreatedByNodeType");
String expectErrTypeStreamRenew = tC.getPropertyValue("expectErrTypeStreamRenew");
int    counter = tC.getPropertyValue("counter").toInteger();

if (expectErrTypeStreamRenew == "SUCCESS") {
	counter++;
} else {
	expectDBUpdatedBy = "";
}

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	this.log.info "Row size is " + myXML.ResultSet.Row.size() + " counter[$counter]";
	assert myXML.ResultSet.Row.size() == counter;
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == counter;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == counter;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == counter;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == counter;
	assert myXML.ResultSet.Row.STATUS.size() == counter;
	assert myXML.ResultSet.Row.CREATED_BY.size() == counter;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == counter;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == counter;

	for (int i = 0; i &lt; counter; i++) {
		this.log.info "----ROW [$i] ----";
		String dbStreamHandle = myXML.ResultSet.Row[i].STREAM_HANDLE_OID.text();
		String dbAccountOid   = myXML.ResultSet.Row[i].ACCOUNT_OID.text();
		String dbRightsToken  = myXML.ResultSet.Row[i].RIGHTS_TOKEN_OID.text();
		String dbUserOid      = myXML.ResultSet.Row[i].USER_OID.text();
		String dbStatus       = myXML.ResultSet.Row[i].STATUS.text();
		String dbCreatedBy    = myXML.ResultSet.Row[i].CREATED_BY.text();
		String dbClosedBy     = myXML.ResultSet.Row[i].CLOSED_BY_ORG_ID.text();
		String dbClosedDate   = myXML.ResultSet.Row[i].CLOSED_DATE.text();
		String dbUpdatedBy    = myXML.ResultSet.Row[i].UPDATED_BY.text();
		String dbUpdatedDate  = myXML.ResultSet.Row[i].UPDATED_DATE.text();
	
		//STREAM_HANDLE_OID
		this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
		assert expectStreamHandle.toUpperCase() == dbStreamHandle;

		//ACCOUNT_OID
		this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
		assert expectAccountOID == dbAccountOid;

		//RIGHTS_TOKEN_OID
		this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
		assert dbRightsToken == expectRightsToken;

		//USER_OID
		this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
		if (streamCreateNodeType == "llpcs" || streamCreateNodeType == "dlpcs") {
			assert dbUserOid == "";
		} else {
			assert dbUserOid == expectUserOID;
		}

		//STATUS
		this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
		assert dbStatus == expectStatus;

		//CREATED_BY
		this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
		assert dbCreatedBy == expectDBCreatedBy;

		//CLOSED_BY
		this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
		if (expectStatus == "active") {
			assert dbClosedBy == "";
		} else {
			assert dbClosedBy == expectDBClosedBy;
		}

		//CLOSED_DATE
		this.log.info "dbClosedDate [$dbClosedDate]";
		if (expectStatus == "active") {
			assert dbClosedBy == "";
		} else {
			assert dbClosedBy.length() > 0;
		}

		//UPDATED_BY and UPDATED_DATE
		/*
		*  The last row returned will always be the history row that 
		*  StreamCreate made.  Thus, the UPDATED_BY should always be
		*  NULL
		*/
		this.log.info "i[$i] - dbUpdatedDate length [" + dbUpdatedDate.length() + "]";
		if (i == counter - 1) {
			expectDBUpdatedBy = "";
			assert dbUpdatedDate.length() == 0;			
		} else {
			expectDBUpdatedBy = tC.getPropertyValue("expectDBUpdatedBy");
			assert dbUpdatedDate.length() > 0;			
		}
		this.log.info "dbUpdatedDate[$dbUpdatedDate]";
		this.log.info "dbUpdatedBy[$dbUpdatedBy] - expectDBUpdatedBy[$expectDBUpdatedBy]";
		assert dbUpdatedBy == expectDBUpdatedBy;
	}
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_02010 - StreamRenew - DLPCS - Two stream renewals allowed for a stream</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLPCS) Customer Service Test Cases</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>9904BDD1BD5DCB6DE0401F0A0599071B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>9116</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9116</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HISTORY_OID>9904BDD1BD63CB6DE0401F0A0599071B</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>9904BDD1BD5DCB6DE0401F0A0599071B</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>9904BDD1BD4CCB6DE0401F0A0599071B</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>active</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2011-01-05 06:59:37</EXPIRATION_DATE>
            <CLOSED_DATE/>
            <CLOSED_BY_ORG_ID/>
            <CREATED_DATE>2011-01-04 13:05:33.241</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY>9116</UPDATED_BY>
            <UPDATED_DATE>2011-01-04 13:05:39.87</UPDATED_DATE>
        </Row>
        <Row rowNumber="2">
            <STREAM_HISTORY_OID>9904BDD1BD5ECB6DE0401F0A0599071B</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>9904BDD1BD5DCB6DE0401F0A0599071B</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>9904BDD1BD4CCB6DE0401F0A0599071B</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>active</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2011-01-05 13:05:33.242</EXPIRATION_DATE>
            <CLOSED_DATE/>
            <CLOSED_BY_ORG_ID/>
            <CREATED_DATE>2011-01-04 13:05:33.241</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY/>
            <UPDATED_DATE/>
        </Row>
    </ResultSet>
</Results>
]]></con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>9904BDD1BD4CCB6DE0401F0A0599071B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0600</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>0600</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>9116</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55797</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="a3ae4f3c-abb1-49c3-b972-2e5d0f887bfb"><con:settings/><con:testStep type="groovy" name="Rename Test Cases" id="aac6f1d9-9dd0-4fd5-afbb-e4d520749753"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "LASP Dynamic Test Cases";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		//newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = oldTestCaseName.replace(" DLP ", " LLP ");	
		/*	
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
			*/
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="6b8b19f1-742d-4588-b0eb-2264e708c504"><con:settings/><con:testStep type="groovy" name="Set a Property" id="cd97560d-8be6-4c66-9cf5-fe1f8aa484e9"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Portal (PORTAL) Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName != "aaaaaa";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="584298c6-3135-44fa-be39-a360e0f6e6f2"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="f4ef5558-7fb3-4543-802b-897585cef54e"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Authentication and Authorization"; 

def oldString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());""";
def newString = """tC.setPropertyValue("nodeid","5440");""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Establish Requesting Entity Environment") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					
					stepScript = testStepList[j].getScript();
				
					/*
					*  Delete a step
					*/
					//targetTestStep.delete();

					/*
					*  Replaces step's script completely
					*/
					stepScript = """import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
""";
					targetTestStep.setScript(stepScript);		

					/*
					*  Replace a part of the script
					*/
					//stepScript = stepScript.replace(oldString, newString);
					//targetTestStep.setScript(stepScript);		
				}
				
				//targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:testStep type="groovy" name="change test case script" id="7304b82f-c8a7-4663-a892-2516e58b90af"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
//def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "LASP Dynamic Test Cases"; 

def oldString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());""";
def newString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Establish Test Case Properties") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);
					targetTestStep.setScript(stepScript);		

					/*
					*  Delete a step
					*/
					//targetTestCase.removeTestStep(targetTestStep);

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					//targetTestStep.setScript(stepScript);		
				}

			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Property" searchProperties="true" disabled="true" id="147c6c9f-15ea-4b9b-ad2e-517a7b9935a0"><con:settings/><con:testStep type="groovy" name="Remove a Property" id="013253db-b460-4e50-9ddd-d666009390dd"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Portal Customer Support Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	

	for( prop in targetTestCase.properties) {
		/*
		*  This will remove all test case properties
		*/
   		//targetTestCase.removeProperty( prop.value.name )
   		log.info "prop.value.name is " + prop.value.name;
   		if (prop.value.name == "cid" || prop.value.name == "alid") {
   			log.info "Removing " + prop.value.name;
   			targetTestCase.removeProperty( prop.value.name )
   		}
   	}
}
/*	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			/*
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}
*/
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="3a4c4708-a83e-4aa8-bb3e-a2596bc1e562"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="75be4981-375b-4231-ab47-909676412c7f"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Portal (PORTAL) Test Cases"; 
def stepName  = "Change context to DECE";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true" id="83cead91-5bf5-478b-b91c-95f3933ce0e1"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="13758d86-c07d-4459-8e59-7cb9fb666303"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Coordinator Customer Support Test Cases"; 
def stepName  = "Establish Requesting Entity Environment as ACCESSPORTALCS";
def stepNewName  = "Establish Requesting Entity Environment as COORDINATORCS";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove script for all test cases in a suite" id="aad616a6-e38d-418d-b6e6-dd3753509fb3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Link LASP Customer Service Test Cases_P2"; 
def stepName  = "Delay 2";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Allow Adult Policy" searchProperties="true" id="570fd1cd-66c4-4d37-9ae1-e938bdeabc61"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fe29e77e-7f70-443e-ab76-643ea7e9959c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="e008b1ac-e9a8-453e-b573-7de7f9f372ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="eff2bc2e-45e0-458b-93a4-ba16efe12cef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="08c0a86d-354d-4bb6-a363-65ba5b9a1afa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="removepolicies" disabled="true" id="e3f1e60c-860a-443a-a2e4-4d95d86ab3e7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE872334B2B6CA196E0401F0A059919B7</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:E872336DACC4B3C7E0401F0A07990BD2">
      <PolicyClass>urn:dece:type:policy:ParentalControl:AllowAdult</PolicyClass>
      <RequestingEntity>urn:dece:userid:org:dece:E872336DACB8B3C7E0401F0A07990BD2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:E872336DACB8B3C7E0401F0A07990BD2" CreationDate="2013-10-11T06:27:12.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>DECE Customer Support Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_68125 - StreamView - DECECS - Policy - AllowAdult - US - MMPA - Can view stream that IS_ADULT = 'y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77796</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>E872336DACC4B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E872334B2B6CA196E0401F0A059919B7</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Allow Adult Policy Establishment" searchProperties="true" id="12a55081-c12b-4c93-9b16-ce00bd19dc86"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="367a0390-3c4f-40e5-9590-938d72c1a327"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="c428d72c-134e-4c2a-ab8a-3db31c36d2f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="82e404eb-4fe5-47eb-a7bf-64d46b219b37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="f6ca69c4-2e61-40e0-93fb-66abcd013c1e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="cd167452-0c91-4bbb-b24a-cae69b09192f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE872334B2B6CA196E0401F0A059919B7</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE872334B2B6CA196E0401F0A059919B7/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/06/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>DECE Customer Support Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_68125 - StreamView - DECECS - Policy - AllowAdult - US - MMPA - Can view stream that IS_ADULT = 'y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77798</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>E872336DACC4B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E872334B2B6CA196E0401F0A059919B7</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="59b523c2-11a0-4f32-b7da-4cc902164dc6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6ed0605c-37c2-468a-b49a-22807789ad38"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="4cf92922-5fb0-483b-b3c7-9005b3bd31c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" id="14d0ae1a-d57b-4e56-99df-a0b174e7a26f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" id="15a85f73-10d0-4f79-8842-1343ae92fbec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="99905b6b-abb4-4794-80ae-0ad075518aa8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="604b029b-078a-4e37-a0af-fdac51a1a012"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="d6fcadc0-c3cc-4bdc-b6a2-43d3944db93a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="0d48530e-975c-481e-b299-35539ae668c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="260f9ce5-fde0-401f-a94c-72c90f089fe4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="1121c745-d600-41d8-bec8-b4376abdd8ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="a1e03f34-4ae3-44cb-8b1c-134bbb4e5937"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="f37e1758-8a28-4d8b-83ed-922ef3d509ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="c23fe8a8-09dc-4abf-96c8-ede4ab2dfa50"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="089dc866-6bce-488e-9031-82696e4b7485"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_38205 - StreamView - LLP - Policy - Verification ParentalControl:RatingPolicy - US - TVPG - TV-MA rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03A751AD24E7E05305991F0AAA98</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>010E98411A5C25B8E05307991F0A850E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="df23a481-58f1-47d8-98ee-8071aa52cc6c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ec79b3b9-c1c9-4964-88a9-9a1ec8c25692"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="0c03f4a9-2015-4972-b1d1-d9ba47930657"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="b1cfd35d-0520-4e3b-96a5-766a70e51062"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="a5b6b0de-b9c6-4a16-b7f6-306fabb41781"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="099d0358-e002-484f-9a8d-ebf304eb8ad8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="b1330be6-d589-4381-8976-4956551958d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true" id="469e8eb5-fcc1-4e70-b548-59cdff0d0d0e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true" id="c24e7462-f69a-4d7e-acfe-cfec8dc974f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="removepolicies" disabled="true" id="e9700066-c6c4-4fb0-a80a-64b3d0b0ce8c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr1kjP8wjj2BGQih4xZICiRf2puOIq9BqS07lmwgT1/JgAOE5KPtlUfr1e7ZH53dS4biyPS6jEHGSUJrqziizCulbSXPqJcgRphHUQzM49ibdkdDz2zoHtpdUWp+v638bD0+ui0jtFUXXF1tIsdRxdlSL2zXDkxXd8AMhCpjOfiUcUR5WzF1w1Z1SzXcme56hu1ZVuNCd38otXvImLAtVBq6sgW1Ym1lwXnqadpyuWwsrUaSzTVT1w3tYTSc4gXESOlcbiIqHWWdrT5uBIAhinADJ7F2qR3oXAbMm5I5RTzPYOsreM+XrumuJnQCRuaflOouBD4Nk/J4hWhCCUYReUEyPyPgiySodaN5khG+iN8NwtClYRVWWMVGk35StENoZxo6QJgxpLIFMra2JhBCBhRD7W7it5VP51WtvDrLEGVhksXs8PhneIAWECUpBCrbhbWFdr7BE5nqXAL2fIqjnJECxrJZU4SBbasJ+HxTtdsMQrIaEiYadMUkOm0f3tFxk40+mQPjf1OgveJsjNyjKIfOePR8PXn8MsAv+dPDUxoPlk/aiqzr4+VFuwSwr1wKqtJujkdNWTXR5sZg3NTC5RrZdfj2+eblR/1aL9ZPqWuN8Hie+Gw0qq9Ddzi0Jp9vH+bf5zf9IvChWNj4S2alLGffv30NA+v5zrj2nVWKpuNouk7CRY/28bq+nN0BoF99e3bfrTsX977VW392abef9KKvvYeReY/NR8ha+Q+tdVOfXV13Xy4GD2uYzQat4rY7aCb17+5/Nw+Lr008b1fh7OE/lO3e/DR/fALMd0fZBn6/NhBVQvxjMpMSEqhhqeqlknwYB8qVjrwlucPLBd2RwBM13JwNo2u4zV7Lvmo2ndbAvNZtS3dc1xjoXWfQdHYks0FxBPEqoSGRviTlbtrmY4A49hjQADK1SHLBdEz5wGIfcVTz6UQ8goQymCWCng30ElprJ7ZMO9SN5QIvQl60sD4X/D1O+A29ybohh+yAlA3zgJQngElKQDK3bGwmOptxkYxnVOQ8MhoFalDIBbdnkmY9s3lha4zEaQQSqhYnQR5BI12kZWo0tvmaKsKslE6uZ+Vzezew43+7HAidgEgFJmPpgagjnJgu5i6QNwG3Tk6hnfluHhD5skRCeUbwBsnhr9c+kQ1SNUl/2J3e7kBXun9w9+fV9KfxlwaG/+B8+K/ORS3f3tQ+yKd2XMrKUVCQPbe7tUMMMEF5nV0jPqPGcyMvirxsPUdSeybMa7IJNN3UpoBzQcrrWfILqFZZ0c6agBXwI+eV/BBizhd0yhGHWLyVWnk8Y+WZApMrjy9e+ercferApUgdhxU/JbuKxLomEX+40WEPSz0hvhWfZZK9Bn7K1p4fEafYeDihc3mS02/9Tl/gRJglgreTbN/4KQOnnB8KqyRXWLhoqMecw/t/apKQ2wrCOMkp9/tKKdgfEiVOvk7Be1V6Y6acQ9ViSv5/M1VJ2QIYxDrLSGlf7heefAJ0vjdotk7fzpq+PjB7TcfR7f1ZY+u91zd6gK7zRvxWspen4x7v/AY=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11A194D0F2B47705E05307991F0A50B1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11A194B65C4476F2E05307991F0A7F47</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:11A194D0F2B47705E05307991F0A50B1/User/urn:dece:userid:org:dece:11A194B65C4476F2E05307991F0A7F47/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_30000 - StreamView - LLP - StreamHandleInvalid - Test Suite Staging</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77796</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03C22D2D24EFE05305991F0A0288</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>11A194B65C4476F2E05307991F0A7F47</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A194D0F2B47705E05307991F0A50B1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="f08b54d0-1e1f-4e1b-825a-81311eebb325"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b67b8836-aec2-4289-ad06-1aa656dfd7ba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="193e261c-e96f-43b7-8ca6-ac6c982bd6a5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="ea1c7bfa-a11e-4092-a9a5-cee8bc2c904a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="26bc7497-6eb9-4b61-b2a7-b2347e897144"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="aa029591-4006-41a9-b87c-d33d53fd5496"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.w3.org/2000/09/xmldsig#" xmlns:ns3="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E/User/urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:NL:KIJKWIJZER:16</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_39379 - StreamView - LLP - Policy - Verification ParentalControl:RatingPolicy - NL - KIJKWIJZER - 16 rating - Full User</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77797</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03EF82831975E05307991F0AA8B2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>010E98411A5C25B8E05307991F0A850E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="d77f1c8c-e596-4bc8-93f1-ad3495bd3658"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1c6b3d89-18b0-4e26-b0b5-8ffc9dd27ba0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="7719f5f0-5be1-4622-984a-36538498de52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="b90046f4-8818-44eb-b774-e121df75fe76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="e3302833-37bc-4e27-8a31-676292bc38ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="ea622feb-c596-41c8-b6bf-a3514071dc2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.w3.org/2000/09/xmldsig#" xmlns:ns3="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E/User/urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_38125 - StreamView - LLP - Policy - AllowAdult - US - MMPA - Can view stream that IS_ADULT = 'y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77798</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03A8A89A196CE05307991F0A7FFD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>010E98411A5C25B8E05307991F0A850E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Manage account consent policy" searchProperties="true" id="b9326319-acb8-4f9e-8b65-6f3351a064fb"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="240c0d8c-cc2e-4783-a699-d579c4cbbffa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("username",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="6287d95a-9f5c-439e-a3c5-7dc6a04c4d12"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" disabled="true" id="ff0ada3e-42f6-4e01-9070-229e65b8f1e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" disabled="true" id="d39c3afc-85ee-43e1-8d49-a8ed75595639"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" disabled="true" id="4d901a40-3350-48b2-b417-a06552db4d84"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" disabled="true" id="2c1beb96-a4b3-4da3-a195-d45cfea30022"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true" id="6d8aa8a2-23d4-4336-8940-15452dda9c33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true" id="f4389261-c8d9-4680-a487-731c576af191"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Manage Account Consent" id="d4bd3980-f8a4-493b-9d80-78e94fe45da0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" id="24a4039a-b8ac-420f-8e10-9f68ea568573"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def responseXML = tC.getPropertyValue("policyGetXML");
def policyOid=null;

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));

def myXML = null;
if(responseXML != null)
{
                try
                {
                                myXML = new XmlSlurper().parseText(responseXML);
                }
                catch(Throwable e)
                {
                                log.info e;                                                                            
                }
}

// Assert that policyListSize is 2 (EMUC and MAC)

log.info myXML.Policy.size()
for(i = 0; i &lt; myXML.Policy.size(); i++)
{        
	policyOid = myXML.Policy[i].@PolicyID.toString().split(':')[5]; 
log.info policyOid;

a.policySetDeleted(policyOid)
//a.sqlPolicyStatus(policyOid,'deleted')
               
}</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdc9o6EP0rjPvYMZINJNgTmHGAJlDStJDQpC8dIa+NGlt2LRmc/vorGXCBkFzaPnm0Xu2e/dDZvRAkjmzXEwIyyRJeK+KIC7eUdow8425CBBMuJzEIV1J36t2MXbuOXbK9YtSG/Y7xvYF9TEkDTAKObzYpnpsOsagZYPuMNNuAz1uBUhUihyEXknDZMWxstUzcMC3nzrJd68y1rDpuWd+M2gwyoWwrlTo2NqAK0TEWUqYuQqvVqr5q1JMsRDbGFnq4GU/pAmJidC/WEZWOsu5Gn9Z9oBBFtE6TGF2gPZ0LX7hTFnIi8ww2vvzXfGGEHaR0fMHCd0Z1F/whD5Ly2CM84YySiP0iOj83IBeJX/OiMMmYXMSvBmFhbdiEgprUavJ3BtqHdqKhPYSZIKZYEGtjawIBZMAp1O4nw47x7rSqlVfvMsJFkGSx2D/+GR7gS4iSFHxTbMPaQDvd4JFMdS+AukNOo1ywJXzSzZoSCmJTTaCnm6p9ziBgxZgJ1aCF0OjQLryD4zobfRaCkH9ToJ3irI3MSJRDt1n05giNnffp8206yT00er7tTXt2ML/vlAB2lUtBVdr18aApqyZa3xg9esxpP0XBZHYNs1B8Xd3fP8yDR9anq/dk9YACWA0Xvz7RBXkv0t5jYLcn6fXZpOhP6JebR0keofeRD756/etRG6FZ3PqRyo9XvVbuWPZ8fH0JkDm4KNhDuMwWMPvWu7qcz76McONqeDXwZvn1001zMAqdh6tlO2I4bk5HRWjzZYvcRMsRaU1DnJGvt35KO1U4O/j3Zds3P83nP4DK7VG3wbBf+6CqROTbZKYlzDeDUtVNNfkICVwaXX1Lc4ebK7pjvqtquD5blte0Lat97vTP7TPcG+BWA587jvUBewPnzNmSzBrFAcRewgOmfWnKXbfN2wBp7ArgPmTmMskV0wnjDYt9IkltyCfqESRcwF2i6PnJjyH6FWLctny/8ItowRqBr7j1UyJv+W3mBRKyfUZu7THyBChLGWja1l0tVFsLqTLxkyxzGVn1JalzyBWxZ5pjXbvZbiHB4jQCjRPFiZ9HUE8XaZkXJNZf2yRUlNLJ4K58a69GdfhvmwCl4zOtIHQsl6CKCEdGC94G8iLgs6MjaGvey32mn5XKpswYXSPZ//W7SXR3VB3SH3vTz1vQle4f3P3em363/tLA+B+cj//Vuarly5vojXyiw1JWjvwl23G73TnU9FJ819024k9S/1nPl8u8bL1zzeuZMo90EyBsoynQXDHy813yBBxVVtBJ468CfuC8ku9DzOWCTyWREKu3UiuPJ+w7UxB63xmqJ16cukztuVSpk1DIY7JepHY1jfjNdY66VOsp8Wf1WSWZ/7tiR2zt+FFxqnVHMh7qkx59z6/0BU2UWaZIO8l2jR8zcMz5vrBKcoVFqoaa5xJe/1PTbNwxCKVJzuWwb5SC3QlR4pTPKbi/lV6YKYdQtZWy/19LTVa2AAW1ywpW2tfLhaufAA93pszG6ZFBM7g8t9pq0Ax2B43nNS+rpOyh674Qv5Ts5Omwx7v/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:11A4334965AF20D1E05305991F0AED08</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:11A4211879D7260CE05307991F0AE969</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">The account ID does not match.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:11A4334965AF20D1E05305991F0AED08/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases without_MAC</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_39309 - StreamView - LLP - ManageAccountConsentRequired - Stream view by dlpcs_ManageAccountConsentNotPresent_DeletedStream - 403 Forbidden</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>11A2002033780F23E05307991F0AD4AE</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150319_055158</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e49350ab-f189-4e52-ba89-4c768adb0cf7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4bd3980-f8a4-493b-9d80-78e94fe45da0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Manage account consent policy" searchProperties="true" id="4dc5b91a-7023-4536-b55c-1e47197d4faa"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="10ff4760-5050-4faa-95af-20079b0d4bda"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="506db6a0-4901-4492-b8a9-691fbb4fbfde"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" disabled="true" id="bc1d9c3e-93c2-417a-aacc-d30b0332bc19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" disabled="true" id="a6b64083-4566-4d7f-83ac-0cee4c9e5cca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="6030ba7c-72ff-4a8b-99aa-54b48a22e133"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="1b6f90d4-c000-48aa-92fa-2aee9c9b2a03"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageAccountConsent" id="e479fa65-2e27-48e4-82ec-4034dac042f3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageAccountConsent if necessary" id="041fc1ca-0b41-48f5-a65f-343845c6f599" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "ManageAccountConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:accountid:org:dece:"+tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="c6197e60-fe9c-4645-a6cb-2096399e8e3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="d60a657c-99d0-464f-9c3e-59151d835a77"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="25730e2f-252b-4f44-81d1-de3a16eb0eeb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="7072b023-d5ad-4f4c-9df7-c491b66d1f86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" disabled="true" id="a857587a-125c-47ff-beb7-8588a41f7c9a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" disabled="true" id="084713a0-e026-4e57-97b7-1c6fe655d6fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:11F2F571FD4720C3E05305991F0A0336</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:11F2B31232A568A8E05305991F0ACED6</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_39309 - StreamView - LLP - ManageAccountConsentRequired - Stream view by dlpcs_ManageAccountConsentNotPresent_DeletedStream - 403 Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases without_MAC</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPrYCbkRCJnCDJfCYbm0JWy7py8d1xHgbuLQ2Al0f/2xA6SE0h529yljRZY+SZ8lXTEUBqbbYgxiTiJa2oQBZW4mbShJTN0IMcJcikJgLseu1xqPXLOsu2h/RSkNug3lqVZFtYpTeVbBcOZqBZyaiizHV22/DjXb0SuO5QtVxhIYUMYR5Q3F1A1b1S3VtGaG7pqWa9TLtlF9VEr3EDNhW6iUdWUHasMaypLzlatp6/W6vLbKUbzQTF03tB/jkYeXECKlebWNKHMUN3f6uOwDhiDAZRyF2pVW0LnymeuRBUU8iWHny//Ml67pdU3o+IwsLpT8LvgDOo+yYwfRiBKMAvILyfyMgS8jv9QKFlFM+DL8NAhDl4ZV2GAVGxV6oWhFaGcaKiCMGVLZEhk7W1OYQwwUQ+n7dNBQLs6rWnZ1FiPK5lEcsuLx9/AATSGIVuCrbB/WDtr5Bk9kqnkF2B1QHCSMpDCRZF0hDGxXTcDnmyrdxjAnmxFhgqAbJtFph/COjttsdMkCGP+TAh0UZ2vkHgUJNLWXYf/Bv3zxulbKxjc1xzDr/wxxd3mPGxmAQ+VMkJd2ezwiZU6i7Q1cnwb0cTOtV7yu92hUe68sTsb1x15qmEv8csOD1maxrPZn7flwMnqL2pXkjiM0vn/o0cu+YMg0Jvp0NBo9jO/MVj+ZocfFqh8Mw3Xnzp+0q+uxs2mDU4960R0w2FwHqD9KzfZdvz6czCjMXgYPi9l9+1v3h6977REs/MG/v5JHMjTnm/ZsHb7Zk0u8Iuzb90YezgH+omz/5r3k+QUw3x8lDQbdUk9UCfGvm5mUEF+dZ6ruSjYfxoFypSlvyd7hJqLdEd8VNdyeDaNn9uya0etWaqbesa5129Ltet3o6S3dsqr7JrNFcQSxE9E5kb5ky93S5muAOHQZUB9iNY0S0emY8oXFLuKoNKBT8QgiymAWifYc2jylSewsnoGhn1h/rT3bazvGSmkS8Rt6E7fmHOJiS7YKLXkKmKwIyL4tac0ErxkXqXhFacIDo5yiMoVEdPZYNlnXrDi2xki4CkAC1cLITwIor5arLDEa235NFWGWSafXs+yxfRrW8b99BoSOT6QCk7G0QVQRTswWfR/Ih4CrJ2fQ3nwr8Yl8VyKdPCZ4i6T4650lkh45Rbqjlne7B53r/sbdp473ZPyhgdFfOB/9rXNRy483tS/yqR2XMnfkp+TA7X7pEONLNLzmnoivqPxaTtI0yahXk409FuY1SQJNNzUPcCJa8tss+glUy61oZ82/HPiR81xehJjwJfU44hCKt1LKjmcsPB4wufAMxBvfnLtNFVyK1HHY8FOyTiCWNYn4y30Ou1jqCfGt+Kyj+D3wU7YO/Ig4xb7DCV3Ik5x9b5/wAkfCLBFdO4oPjZ8ycMp5UZgnOcfCBaGeEw6f/ynJdtxQEMZRQvmgq2SCwxGR4eRvK3DflT6YyaZQvpaS/99LVZJRAINYZhnJ7MvtwpVPgC4OxszO6fGkaVuGaZktu+q0nMNJ07nu5pOmiK75QfxRcpCnY443/wM=</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value>11F2F571FD4720C3E05305991F0A0336</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>11F2B31232A568A8E05305991F0ACED6</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:11F2B31232A568A8E05305991F0ACED6/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs" disabled="true" id="48e779e3-7e9e-47cf-8014-e78fe27442e4"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="708c4352-be1d-4292-9fd9-ea700194748b" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0f68d732-db2e-4d3c-a5d0-3d4bd086e1e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0430e886-9383-4adb-ae7d-0aec4716333b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0249e4c3-b0f8-4dbd-a800-f048a5de072e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" id="ca59fdb8-ec01-4081-bcbd-d51c3018728d"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="914_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="http://www.decellc.org/schema/2010/10/dece">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="ec73b33c-2cae-4d58-a6ac-6f5785c240d0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('POST - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="34577452-9c2e-43a0-a734-cd8c9bae2b85"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTS");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="36f8fb44-937e-4116-9b07-da1a3738fa4a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="80ca44ec-4de8-4cbd-9474-eba25b05ea36"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>0912_assertion_date</con:name><con:value>2/2/11</con:value></con:property><con:property><con:name>0914_assertion_date</con:name><con:value>1/4/11</con:value></con:property><con:property><con:name>25_assertion_date</con:name><con:value>1/6/11</con:value></con:property><con:property><con:name>26_assertion_date</con:name><con:value>1/7/11</con:value></con:property><con:property><con:name>80080010_assertion_date</con:name><con:value>1/5/11</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>431</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2011/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>0910_assertion_date</con:name><con:value>2/2/11</con:value></con:property><con:property><con:name>10_assertion_date</con:name><con:value>2/10/11</con:value></con:property><con:property><con:name>20_assertion_date</con:name><con:value>2/11/11</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55785</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" id="db207e97-a2da-4820-811a-88d13bb522dd" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6bc66294-31a7-4832-8846-51430626a8ba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="17efd81c-d310-43a2-8731-f634a49f1e23"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="58dd5d14-1ada-4650-b5bf-fab44ec0c4eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STS - GET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - GET" id="405f60ab-48ce-41ae-955a-321514501547"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="10_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="8425f174-98a7-447a-ba08-690df35be570"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
		 	status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="568c8a2f-cb9f-4577-8fd2-e17aa1d7080b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();

			/*
			assert myXML."saml2:Assertion".size() == 1;
			assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
			*/
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size() == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;

			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;

			// ErrorLink
			this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="240da053-916c-4f6c-8190-742aee99819f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";

			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			tC.setPropertyValue("assertionAccountIdFULL",accountId);
			tC.setPropertyValue("assertionUserId",userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			tC.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="e759b4d0-5625-4738-baae-a934a45984d2"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="ef9182a9-7431-4018-8bbb-83678cc31ef4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionAccountId",tC.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",tC.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value>5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9E9EA5B2A3B1ABEEE0401F0A07992116</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>4244</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a" IssueInstant="2011-03-16T18:29:48.129Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>cUBmcLsHvMfQbsz8wyCcVA3FgQU=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
grCNJOvpGhUDbf+We2ulWMum9oWEFG5Zssif+KTJ/XwXZRX75AG0EbqqMqMjRY9uA/WvDCo9HxPd
36UWGPQHA8RwNWEau0hMCG+8GMwG40Rddz5UoQUhN2p6hnYUMgjTvo+W7KaAz6xEv0vyZZlUxw1x
9sZ0acFRAU+oDHC3eqE=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9E9EA5B2A3B1ABEEE0401F0A07992116</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="7DECB57F5AC79ED4A3AE5E4093C0B07E" NotOnOrAfter="2011-03-17T18:29:48.129Z" Recipient="https://saml.example.org/login/POST"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2011-03-16T18:29:38.129Z" NotOnOrAfter="2012-03-16T18:29:48.129Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:10</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:11</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/5de89cc9-0a2e-4ea8-bfb6-f9a828132d5a</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2011-03-16T18:29:48.129Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:9E9CDFB384CC6801E0401F0A05996E62</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55786</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ef5c6130-bba0-4fcc-b5e5-e9e69bf95470" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1e45ae7e-dfb5-4b21-9997-654ac92333c1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
tC.setPropertyValue("expectDBModifiedBy",null)
tC.setPropertyValue("username",null)
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="abde4189-958e-4158-bbd0-5f5c28e1975a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBModifiedBy",callTC.getPropertyValue("expectDBModifiedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="dc7620c4-7f6b-4b14-9a48-b41c80941371"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID = hextoraw('$sh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="5402c972-092f-4d7b-819f-24d1dd98d975"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="d3fff5b6-aede-4a9f-b3ce-a9b4a5b8d2b9"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="LLASP_CS_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="b6385b5b-db6c-4497-9fa6-3c81c9c43bd4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="1830466e-a1b2-408a-9839-dafc15b71138"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "MANAGE_ACCOUNT_CONSENT_REQUIRED":
		errId = "policy:ManageAccountConsentRequired";
		break;
	case "STREAM_HANDLE_ID_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7e48b20f-6035-4f07-8d34-e34eabb9891b"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = "urn:dece:rightstokenid:org:dece:"+tC.getPropertyValue("rightstokenid");
def expectSH        = "urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "MANAGE_ACCOUNT_CONSENT_REQUIRED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length

////assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def RequestingUserID = myXML.RequestingUserID;
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

          //RequestingUserID
		if(tC.getPropertyValue("nodetype") == "llpcs" || tC.getPropertyValue("nodetype") == "dlpcs" || tC.getPropertyValue("nodetype") == "dececs")
		{
			tC.setPropertyValue("assertionUserIdFULL","");
		}
		log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
		if(tC.getPropertyValue("nodetype") == "dlp"){
		assert RequestingUserID == "urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId");
		}

		
		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + tC.getPropertyValue("expectDBModifiedBy");
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
//			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true" id="c10ca069-6743-48d5-9890-f0d1c0552612"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true" id="ddce7dbb-67b5-47c3-b8e9-10d8088b00c0"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours" id="3fd419e5-425d-4c75-bacf-8b49eb4b79f4"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_29104 - StreamView - LLP - StreamOwnerMismatch - Stream view by llpcs_ManageAccountConsentPresent_DeletedStream - 403 Forbidden_FLAKY</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrU+o6FP0rTP14pjQtLY+OMFMBvRwBUQQ9fHFiGiDYppikBfz1JylQKYqXe2eYYbK7s/baj6zkksMwsFyPc8wEiWhhHQaUu6m1rsWMuhHkhLsUhpi7ArlDr9d1rSJw4X6LVui06tpLrVSt2pUS0gGANd0ulR296pSB7ltOBdjVquWXTenKeYw7lAtIRV2zgOnoQP4qj6DsAse17SIo2xOtMMaMS2zpUgTajtSa17W5EEvXMFarVXFVKkZsZlgAmMZzrztEcxxCrXG5zSgNxBo7f1T0McJBgIooCo1LI+dz6XN3SGYUipjhXSz/VCxggJohfXxOZhdathf7HTqN0mUT0ogSBAPyAVV9eljMI7/gBbOIETEPTyZhAgWs4zXSkWnTC83IUzsTKMeQcajzOTR3WA94ihmmCBdGD526dnFe19KtjwxSPo1YyPPL/8YH0wQH0RL7Ot+ntaN2PuA3lWpcYuR2KApiThLcV8O6hAjzXTcxOh+qMGB4StZdwuWArrliZxzSO1puq9EiM8zF/2nQQXO2IGMYxLjRbj45f8JNb9T6ALe3zyPyMQ3uaNT9Z8brKYFD59SQtXa7PBrKbIi2O0Lmr8jo96LZ6yfoevXq41+T2HwetOf3CS/dWGwMKuLWgs6oW/KuBoL6V+V+1ZjOvHB62+lOK9awF4zvJ0HnA3T7Zm1O38aPy4/7zeZ+Yq36dBNMmwPWthKv8jZZs16ysFni3JjzZej0ayP2TCa/x57PW9edwarbD9+tm6fVYOHdzUTzqvSrUnv687RohaM16NWzdA745237Mz+MXxcYif1SjUGnVbiWXYLiZzFTFuLr09TVXSrx4QJToTXULqUdbizljviu7OF2bTqVatn2nLZVblnt6+s2cEqgUquZ18AD1StzLzJbFkcUmxGdEhVLSe52bH4miEKXY+pjpidRLJWOaz8gtqCAhQ59kIcgohw/RlKeo83CjsqvcfA2FRia5ep8AZK5LyW5H4k7esc8aWd5Sa7lJPkBI7IkWOm2Gmsu55oLWYp3mMQiMIsJLFIcS2VnSmRdy646BifhMsCKqBFGfhzg4nK+TAtj8O2/pUPEU2u36w0HL83hi5WeuZPZHX/bF0L6+EQ5cJXSFZbNxN9cMaV9Pifyrh5dRXt4L/aJOl6yqoIRtGWS//Q5LGpKskn5TGzPPNtwbMiBG8d5ZfH8hKBs6rO7W0q6FIHGvjnv0Cy+F+MkidN+2HbJYBLeUJkawDKGGMVSpjaP0RumRoZinHUnZMSPgmf2PMVYzOlQQIFDOT+FdHnGI2CIuXoEdOTcr899YeRCytIJvBbf2ZqBfMAoxj++cZCLlJ80D+TfKmL+Z8e+wTqII/OUbwBB6Eyt1H2wOTEeKJKwRCpZxA7BvwP4LnjemBU54yLkQL3GAp/+UlASVdcgQlFMRaelpYZD2Ux5is0Su59OX2BSZc6eauTf32o6SUcAYfnA4yTFVzeuq44AnR1I7y7oCfW9+kl98+waX8xfLQd1Op7xxl8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>1569E47CFE4852C1E05305991F0A3145</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>BB10034667404269A2087D51A0397E12</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>1569E47CFE3C52C1E05305991F0A3145</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>1569E47CFCEF52C1E05305991F0A3145</ACCOUNT_OID>
      <CREATED_BY_USER_OID>1569E47CFCFB52C1E05305991F0A3145</CREATED_BY_USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-05-06 18:47:34.892</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-05-06 12:47:34.892</CREATED_DATE>
      <CREATED_BY_NODE_OID>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>
    </Row>
    <Row rowNumber='2'>
      <STREAM_HISTORY_OID>1569E7A311ED48F6E05307991F0A89F1</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>BB10034667404269A2087D51A0397E12</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>1569E47CFE3C52C1E05305991F0A3145</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>1569E47CFCEF52C1E05305991F0A3145</ACCOUNT_OID>
      <CREATED_BY_USER_OID>1569E47CFCFB52C1E05305991F0A3145</CREATED_BY_USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>deleted</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-05-06 18:47:34.892</EXPIRATION_DATE>
      <CLOSED_DATE>2015-05-06 12:47:42.0</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:LLASP</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-05-06 12:47:34.892</CREATED_DATE>
      <CREATED_BY_NODE_OID>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:StreamOwnerMismatch">
      <Reason Language="en">The stream's owner does not match.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:157864A5E26B2EFFE05307991F0A08B1/Stream/urn:dece:streamhandleid:org:dece:C2C49554EB964CC39F9E7A1B9D892C26</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#StreamOwnerMismatch</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The stream's owner does not match.</con:value></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">StreamOwnerMismatch</con:value></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value>2015-05-06T12:47:42.256Z</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE7AD2AAA523855C3E0401F0A05993AC4</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE71CF336443F1F59E0401F0A07996EBC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>expectDBModifiedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>157864A5E26D2EFFE05307991F0A08B1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6f1173ad-06ee-4ae1-8e68-a7fab34c97c7" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f5390ed8-2f36-4095-bb4f-23b5d0feff23"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamDelete",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="f6547136-3715-411f-9fdd-bdd836977590"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("expectErrTypeStreamDelete",callTC.getPropertyValue("expectErrTypeStreamDelete"));

if (tC.getPropertyValue("expectErrTypeStreamDelete") == null || tC.getPropertyValue("expectErrTypeStreamDelete") == "null") {
	tC.setPropertyValue("expectErrTypeStreamDelete", "SUCCESS");
}
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "null") {
	tC.setPropertyValue("counter", "SUCCESS");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="b85c302c-f83a-426a-8617-b78cd095320c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - StreamDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - StreamDelete" id="55b1dd11-8fad-4dce-b6db-4c76f3f118f9"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - StreamDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d5e855aa-0e76-449d-8855-fba99772c2b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="96ffd62f-2345-4e81-bfb5-6166d2289824"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamDelete[" + tC.getPropertyValue("expectErrTypeStreamDelete") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="78e474a8-603e-4da6-97f0-ec75880d0631"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamDelete");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;



this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Return StreamDelete Attributes" id="a495c5f4-6314-42eb-8417-4a9fe086e1b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

log.info "expectErrTypeStreamDelete is " + tC.getPropertyValue("expectErrTypeStreamDelete");

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	log.info "cnt [$cnt]";
	def callTSname = tC.getPropertyValue("sName");
	def callTCname = tC.getPropertyValue("tName");
	def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

	callTC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBStatus","deleted");
	callTC.setPropertyValue("expectDBDeletedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBStatus_" + cnt,"deleted");
}
	</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="2a08101d-ee5c-4f8d-a0dc-b200f882cae6"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVbrcto8EH0Vxv35DfhKAE9gxoHQ0pCQYprbn46QF1CxZSPJXPL0lQy4mJB8tJ1hhtF6tXt292h3LzmKQsv1OAcmSExL6yik3M2kTS1l1I0RJ9ylKALuCuz63m3ftSqGi/ZXtFKv09R+gIMcpxbUyzAOqmWnZk/K9Qaqls2xbdl1GxnYsKQq5yn0KBeIiqZmGWa1bMhfbWRcuEbVte3KRb32opUegHFpW6pUDG0Has2b2kyIxNX11WpVWdmVmE11yzBM/em27+MZREhrXW4jyhyx1k4fVwLAEIa4guNIv9QLOpcBd30ypUikDHa+gvd8GbrR0KVOwMn0k5bfhaBHJ3F2bCMaU4JRSF6Rys8tiFkclLxwGjMiZtG7QZiGMlyGNS5j06GfNL0I7UxDBYSMozKfIXNnawgTYEAxlL4Pe03t03lVy66OGKJ8ErOIF49/hgfoEsI4gaDM92HtoJ1v8ESmWpeA3R7FYcrJEu4UWROEge+qCfh8U6V7BhOy7hMuCbrmCp1+CO/ouM1Gh0yBi78p0EFxtkYeUJhCKwxuBtP1Kkqi6MXXB18ex4Mnn7cdZOFmBuBQORPkpd0ej0iZk2h7ox9HiC426GHTWKK499h5Yt3ukG0GXuSkqTkfNq5mt58v2syEzuQFTZPX4M58mVvfvlwN7p+vzc3m4gKc9lNY/zpm63X1ET0/zRbdQXirv1hmY/6ZP49uRtzc+A/42rup4WcvueuTzUb3q19u+6MXzzG+fhuZZPzIB/Ofw/+WV2n/+2N90/82ee7C5t7uzchzdTG/mTfzcA7wF2X7N++n45+Axf6oaNDrlLqySkh83MyUhATlSabqJqr5cAFUaC11S/UON5XtjgSurOH2bFZr9ZrdrTe69nWt0Xaujapt1BoNs2t4Vr1xvW8yWxRHENsxnRDlS7XcLW0+BogjlwMNgJWXcSo7Hdc+sNhBApV6dCgfQUw5jGLZnjlZ2AlzGEqnqRkw4xWMn3GystZa6S4WAzpg3kQAK/bkRqEnDwGThIBq3IrXXBKbC5mLBVqmIjQrS1ShkMrWzlSXdS2nXtU5iZIQFFI9ioM0hEoyS7LM6Hz7b5UR5pl0eD3KXtu7cR1/26dA6gREKXAVyxXIMsKJ4WLtA3kT8MXJIbQ376UBUQ9L5lMwgrdIip9+00TxI+dIp+/593vQue4f3P3R9n+Yf2mg/w/O+//qXNby7U39g3zqx6XMHQVLcuB2v3XI+SU7XmtPxAUyK4tKulymGfccx9aZNK8rEuiGpfuAU9mTN6N4DlTPrehnDcAc+JHzXF6EmIoZ9QUSEMm3UsqOZ2w8PnC18fTkI1+fu04VXMrUCViLU7J2KLc1hfjDhQ67WOlJ8b38W8Us+F2xE7YO/Mg45cIjCJ2qkxp+m3d4gWNplsi2HbND46cMnHJeFOZJzrEISahxKuD9LyXVj5sawjhOqeh1tExwOCMynGKTgPtb6Y2ZbAzleyn5/8W0TDIKYJDbLCeZfbVeuOoJ0OnBnNk5PR41Xr1rV9uepE+tMGra3XY7T0oBXeuN+K3kIE/HHG/9Ag==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>97397C14A82BFA4CE0401F0A07996491</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_29104 - StreamView - LLP - StreamOwnerMismatch - Stream view by llpcs_ManageAccountConsentPresent_DeletedStream - 403 Forbidden_FLAKY</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>55789</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE7A963E9CAFF796FE0401F0A05993AED</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE71CF336443F1F59E0401F0A07996EBC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>157873F89F3E79C4E05307991F0A289E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="297718fc-889c-4592-8d32-da4f33259680" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="16ccd797-a125-43de-9b58-e38d085728d3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ab6f6534-d877-4c66-8ab4-ec3634deacb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
//tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "null") {
	tC.setPropertyValue("counter","1");
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == null || tC.getPropertyValue("expectErrTypeStreamRenew") == "null") {
	tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="7bc5e123-deed-4238-8e3a-e4d8b63ccc32"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$sh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="5d3f7b30-4868-4cc2-b993-5af550664e29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="63411825-a042-44c5-972b-47be7f82ee57"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">       
<StreamClientNickname>Release 4</StreamClientNickname>        
<RequestingUserID>${#TestCase#assertionUserIdFULL}</RequestingUserID>       
<RightsTokenID>${#TestCase#rightstokenidFULL}</RightsTokenID>        
<TransactionID>Sprint 4.1</TransactionID>         
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="560ab388-5be0-49e0-844d-dd1c86c99b86"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="7df5f91f-bc4d-4549-960b-98334a76b7b4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="cf301780-b5bf-43e1-ae7b-d15f8e4470a2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;


switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect[" + tC.getPropertyValue("streamhandleFULL") + "]";
		assert recvStreamHandle == tC.getPropertyValue("streamhandleFULL");
		//RequestingUserID
		if(tC.getPropertyValue("nodetype") == "llpcs" || tC.getPropertyValue("nodetype") == "dlpcs")
		{
			tC.setPropertyValue("assertionUserIdFULL","");
		}
		log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
		assert RequestingUserID == tC.getPropertyValue("assertionUserIdFULL");
		
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (Status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBUpdatedBy") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("expectDBUpdatedBy");

		/*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + tC.getPropertyValue("nodeid");
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return Attributes" id="e5a29165-aecd-4bdf-9846-1df3dc013aa2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cnt = tC.getPropertyValue("counter");
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	callTC.setPropertyValue("expectDBUpdatedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} else {
	callTC.setPropertyValue("expectDBUpdatedBy_" + cnt,null);
	callTC.setPropertyValue("expectDBUpdatedBy",null);
}
</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="1f1e4309-9b08-4c9d-bdd3-b738bc1cb17d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E71CF336443F1F59E0401F0A07996EBC</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1592</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:E7A94DE933FB4690E0401F0A0799387C</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Customer Support Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>E7ABA0ADD7C4D6B2E0401F0A07993839</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:E7ABA0ADD7C4D6B2E0401F0A07993839</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_16121 - StreamView - LLPCS - API invocation following Two StreamRenews by LLPCS - 200 OK</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20130924_124953</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:E7ABA0ADD7C4D6B2E0401F0A07993839" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:E7A94DE933FB4690E0401F0A0799387C</RightsTokenID>
   <TransactionID>1.0.3.1.S</TransactionID>
   <ExpirationDateTime>2013-10-02T06:22:15.000Z</ExpirationDateTime>
   <SubDividedGeolocation CalculationMethod="urn:dece:type:geoloc:other" ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreationDate="2013-10-01T11:21:54.757Z" CreatedBy="urn:dece:org:org:dece:LLASP_CS_1" ModificationDate="2013-10-01T11:23:06.036Z" ModifiedBy="urn:dece:org:org:dece:LLASP_CS_1">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModificationDate="2013-10-01T11:21:54.757Z" ModifiedBy="urn:dece:org:org:dece:LLASP_CS_1">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
         <Prior ModificationDate="2013-10-01T11:21:54.757Z" ModifiedBy="urn:dece:org:org:dece:LLASP_CS_1">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>E7ABA0ADD7C5D6B2E0401F0A07993839</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>E7ABA0ADD7C4D6B2E0401F0A07993839</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>E7A94DE933FB4690E0401F0A0799387C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>E71CF33644401F59E0401F0A07996EBC</ACCOUNT_OID>
      <CREATED_BY_USER_OID>null</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-10-01 17:21:54.757</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-10-01 11:21:54.757</CREATED_DATE>
      <CREATED_BY_NODE_OID>CCE44AF42FCD063BE0401F0A07991776</CREATED_BY_NODE_OID>
    </Row>
    <Row rowNumber='2'>
      <STREAM_HISTORY_OID>E7A60952344EB3FCE0401F0A07993846</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>E7ABA0ADD7C4D6B2E0401F0A07993839</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>E7A94DE933FB4690E0401F0A0799387C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>E71CF33644401F59E0401F0A07996EBC</ACCOUNT_OID>
      <CREATED_BY_USER_OID>null</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-10-02 00:22:15.0</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-10-01 11:21:54.757</CREATED_DATE>
      <CREATED_BY_NODE_OID>CCE44AF42FCD063BE0401F0A07991776</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013-10-01T11:21:54.757Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2013-10-02T06:22:15.000Z</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>55791</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE7ABA0ADD7C4D6B2E0401F0A07993839</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE71CF336443F1F59E0401F0A07996EBC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="e4341027-d78e-406b-9457-4b233f3f1c3e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="204d73df-1971-4173-a061-c28ee9a9b1bb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="2f868719-11b0-451e-88ec-6ef1c6f818f9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="995ee395-4f3c-4674-8694-7f0cd4e88215"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="c38c453c-825f-4a5a-a95c-b9f7e250d495"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("HEAD - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="HEAD - StreamView" id="c7048705-bf39-4da0-88a7-419d3b5bef4b"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="HEAD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="HEAD - StreamView" mediaType="application/xml" sslKeystore="0910_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="dfe979c2-1701-43d6-95a6-71d4dfc0a978"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="cc926450-1ebe-4a5e-bdc4-2d93ce9cdb77"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="6563b96e-ff91-4e6a-a66f-f389502a4fa7"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true" id="957715a3-a22f-4394-a213-e3082d6e6df1"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true" id="5b77c666-5d9d-4588-bc04-5093c7b01530"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours" id="6c1f96ab-2bf9-4567-b0e6-fc194f8c4034"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19100 - StreamView - LLP - Stream view using HEAD method for account with single stream handle present</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CFBAAC5E52F8A728E0401F0A07993E68</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CFBAAC5E52F8A728E0401F0A07993E68</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:CFBAAC5E52ECA728E0401F0A07993E68</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b0e4c57e-5526-49b3-9b24-4d0252a5c891</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-08-08T08:22:47.787Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-08-09T04:23:01.000Z</con:value></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>CFBAAC5E52F9A728E0401F0A07993E68</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>CFBAAC5E52F8A728E0401F0A07993E68</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>CFBAAC5E52ECA728E0401F0A07993E68</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2012-11-30 23:24:40.404</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2012-11-30 17:24:40.404</CREATED_DATE>
      <CREATED_BY_NODE_OID>0910</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:C6BDD053D2DF2C29E0401F0A07990628" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:C6BDD053D2D32C29E0401F0A07990628</RightsTokenID>
   <ExpirationDateTime>2012-08-09T04:23:01.000Z</ExpirationDateTime>
   <SubDividedGeolocation ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0910" CreationDate="2012-08-08T08:22:47.787Z" ModifiedBy="urn:dece:org:org:dece:0910" ModificationDate="2012-08-08T08:23:18.577Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:0910" ModificationDate="2012-08-08T08:22:47.787Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1243</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamViewQHost" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="86f054d2-92b6-4c53-b59c-004bff591c26"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9a16bb51-9c74-4885-a6b3-b2302aec58f6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e9bb6092-a473-4bdf-85ae-ed9c4853ffda"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="259853b9-da68-4ae3-9d11-7b341f528971"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="5f07f987-2a78-42e7-a932-787e1a48f4b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="4873b4e4-b0da-4f66-b9b2-5960e374be3c"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="0910_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="c4d10dfb-32be-4cef-b811-4bc53f46b058"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="a79c518d-3e91-4441-bae1-c2a629588f68"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="63ac0ef9-82f8-4677-8f76-88f4621542db"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true" id="765ecde8-7c09-4cab-85cf-0021a4a7c4d9"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true" id="2a10c9a5-a1cb-475e-8554-cfadf6a1138b"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours" id="d4bc2e87-42b9-41cb-beb3-9e2758b26512"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_19101 - StreamView - LLP - Stream view using q host</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CFBAAC5E5308A728E0401F0A07993E68</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CFBAAC5E5308A728E0401F0A07993E68</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:CFBAAC5E52FCA728E0401F0A07993E68</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b0e4c57e-5526-49b3-9b24-4d0252a5c891</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0910</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-11-30T17:25:25.236Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-11-30T23:25:25.236Z</con:value></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>CFBAAC5E5309A728E0401F0A07993E68</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>CFBAAC5E5308A728E0401F0A07993E68</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>CFBAAC5E52FCA728E0401F0A07993E68</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2012-11-30 23:25:25.236</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2012-11-30 17:25:25.236</CREATED_DATE>
      <CREATED_BY_NODE_OID>0910</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:CFBAAC5E5308A728E0401F0A07993E68" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:CFBAAC5E52FCA728E0401F0A07993E68</RightsTokenID>
   <TransactionID>1.0.3.1.S</TransactionID>
   <ExpirationDateTime>2012-11-30T23:25:25.236Z</ExpirationDateTime>
   <SubDividedGeolocation ViaProxy="urn:dece:type:unknown">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0910" CreationDate="2012-11-30T17:25:25.236Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1031</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamViewInvalidDST" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="151daa40-cef2-46f9-8ff7-4056148eac19"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="62f12dba-ab35-45eb-b5a1-5041f0ae9eb1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="4a982d4e-6ef5-455b-b8c1-c1cccbdca60a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
tC.setPropertyValue("SetDST",callTC.getPropertyValue("SetDST"));
tC.setPropertyValue("StreamCreateAssertion",callTC.getPropertyValue("StreamCreateAssertion"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="e86efe65-18b6-4004-97c5-c5b243dd4f1f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="76995feb-d1f4-4eac-81c7-f1cd6b92ccc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="SetAuthorization" id="adb9804f-1831-4ee5-abc7-850b9b034361"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import CacheTestManager.CacheTestManager;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.WsdlProject;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def CommonLib = "Test Cases Containing APIs";
def TcName = "StreamViewInvalidDST"
def TpName =  testSuite.getProject().getName();  

def Stream = "GET - StreamView";

def cc = new CacheTestManager(TpName, CommonLib, TcName, Stream) 



if(testCase.getPropertyValue("SetDST") == "YES"){	
log.info cc.setReqHeaders("Authorization","SAML2 assertion="+ testCase.getPropertyValue("StreamCreateAssertion"));
}

else if(testCase.getPropertyValue("SetDST") == "INVALID")
{
	log.info cc.setReqHeaders("Authorization","SAML2 assertion=");
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="72b0c809-e183-4fc0-835b-a9bdb15e3845"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="5480_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d950da3d-e1c0-433d-a8ce-49ed9fcd184c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="eb508133-6f6f-4eba-baa0-63ef9588d0a4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "MANAGE_ACCOUNT_CONSENT_REQUIRED":
		errId = "ManageAccountConsentRequired";
		break;
	case "STREAM_HANDLE_ID_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="94045dcf-f92b-4c89-98e0-5c93d119c974"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true" id="2102d006-565e-4e55-ba6b-b6355a4d2641"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true" id="4d4e449d-c20c-4793-a3c0-ace49051ef94"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours" id="a2aa5530-57c6-4ce0-bd0b-c87fdc413f3e"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_76010 - StreamView - PORTAL - Stream view for account with single stream handle present with invalid DST</con:value></con:property><con:property><con:name>sName</con:name><con:value>PortalTestCases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>5480</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DA6704DC84BFDA84E0401F0A07997B3C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DA6704DC84BFDA84E0401F0A07997B3C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:DA6704DC84B2DA84E0401F0A07997B3C</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_47ce2b6d-3d24-4246-aa3c-cf8402f09feb</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:A8A874EEB244D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:A8A874EEB246D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>DA6704DC84C0DA84E0401F0A07997B3C</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>DA6704DC84BFDA84E0401F0A07997B3C</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>DA6704DC84B2DA84E0401F0A07997B3C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-04-15 19:13:38.233</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-04-15 13:13:38.233</CREATED_DATE>
      <CREATED_BY_NODE_OID>0914</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:forbidden:1122">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA8A874EEB244D14EE0401F0A07990FBA/Stream/urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADA6704DC84BFDA84E0401F0A07997B3C</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>766</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADA6704DC84BFDA84E0401F0A07997B3C</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA8A874EEB244D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>SetDST</con:name><con:value>INVALID</con:value></con:property><con:property><con:name>StreamCreateAssertion</con:name><con:value>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</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>adb9804f-1831-4ee5-abc7-850b9b034361</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamViewWithoutDST" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="b74ff920-a66f-41f2-9455-f25f29c86b40"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b3304c0-30fc-4913-bf52-2a46da8342c0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectNickname","");
tC.setPropertyValue("expectGenericRightsToken",null);
tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);
tC.setPropertyValue("streamViewIgnoreDateDiff",null);
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="2f851539-1d48-421c-8376-d7409dd05a45"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("streamViewIgnoreDateDiff",callTC.getPropertyValue("streamViewIgnoreDateDiff"));
tC.setPropertyValue("streamViewIgnoreCreateDateDiff",callTC.getPropertyValue("streamViewIgnoreCreateDateDiff"));
tC.setPropertyValue("SetDST",callTC.getPropertyValue("SetDST"));
tC.setPropertyValue("StreamCreateAssertion",callTC.getPropertyValue("StreamCreateAssertion"));
def streamhandleFULLEncoded = URLEncoder.encode(tC.getPropertyValue("streamhandleFULL"),"UTF-8");
tC.setPropertyValue("streamhandleFULLEncoded",streamhandleFULLEncoded)

def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
if (tC.getPropertyValue("expectErrTypeStreamView") == null || tC.getPropertyValue("expectErrTypeStreamView") == "") {
	tC.setPropertyValue("expectErrTypeStreamView","SUCCESS")
}
if (tC.getPropertyValue("expectNickname") == null || tC.getPropertyValue("expectNickname") == "null") {
	tC.setPropertyValue("expectNickname","")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("streamViewIgnoreDateDiff") == null || tC.getPropertyValue("streamViewIgnoreDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreDateDiff","false")
}
if (tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == null || tC.getPropertyValue("streamViewIgnoreCreateDateDiff") == "null") {
	tC.setPropertyValue("streamViewIgnoreCreateDateDiff","false")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="b5fc9d22-5429-4890-8122-ee1e403e0ab9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')
	   order by STATUS""";

	  log.info "sql is $sql";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="ecd6cb5c-b190-4602-954b-83af0724d3e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="911e184c-8908-4271-bebc-e28e2e9ffe89"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="5480_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="77672e2e-5920-484c-9910-369e0763c1c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="af9223c1-4dbc-4abd-bce6-bb7d4db1b9f4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "MANAGE_ACCOUNT_CONSENT_REQUIRED":
		errId = "ManageAccountConsentRequired";
		break;
	case "STREAM_HANDLE_ID_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamView").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="a936b58d-08ea-4381-bcf6-dd903531daa9"><con:settings/><con:config><script><![CDATA[import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "-" + cdateMatcher.group(2) + "-" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}


def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def sh = tC.getPropertyValue("streamhandleFULL");
def account         = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType   = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody         = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String expectDescription = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = true;
boolean processXMLFlag = true;
boolean XMLbodynull = false;


switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

String errorID = "";
String errorReason = "";
String errorLink  = "";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;

//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
//assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if(errorRespType != "METHOD_NOT_ALLOWED")
{
if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS") {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		/*
		* Do expected element sizes first.
		*/
		def ResourceStatusSize = myXML.ResourceStatus.size();
		def CurrentSize = myXML.ResourceStatus.Current.size();
		def ValueSize = myXML.ResourceStatus.Current.Value.size();
		def DescriptionSize = myXML.ResourceStatus.Current.Description.size();
		def RightsTokenIDSize = myXML.RightsTokenID.size();
		def ExpirationDateTimeSize = myXML.ExpirationDateTime.size();
		def recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();
		def recvExpirationDateTime = myXML.ExpirationDateTime.toString();
		def recvDeletionDateTime = myXML.ResourceStatus.Current.@DeletionDate.text();
		
		this.log.info "ResourceStatusSize [$ResourceStatusSize] Expect 1";
		this.log.info "CurrentSize [$CurrentSize] Expect 1";
		this.log.info "ValueSize [$ValueSize] Expect 1";
		this.log.info "DescriptionSize [$DescriptionSize] Expect 1";
		this.log.info "RightsTokenIDSize [$RightsTokenIDSize] Expect 1";
		this.log.info "ExpirationDateTimeSize [$ExpirationDateTimeSize] Expect 1";
		assert ResourceStatusSize == 1;
		assert CurrentSize == 1;
		assert ValueSize == 1;
		assert DescriptionSize == 1;
		assert RightsTokenIDSize == 1;
		assert ExpirationDateTimeSize == 1;

		/*
		*  Save the returned values as TC properities for validations
		*  outside this script.
		*/
		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvDeletionDateTime",recvDeletionDateTime);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		/*
		*   Lengths
		*/
		assert myXML.ExpirationDateTime.text().length() > 0;
		assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

		/*  StreamHandle */
		def StreamHandleID = myXML.@StreamHandleID.toString();
		this.log.info "StreamHandleID[$StreamHandleID] - expectSH[$expectSH]";
		assert expectSH == StreamHandleID;

		/*  DeletedBy  */
		def DeletedByValue = myXML.ResourceStatus.Current.@DeletedBy.toString();
		if (expectStatus != "active") {
			this.log.info "DeletedByValue[$DeletedByValue] - expectDeletedBy[$expectDeletedBy]";
			assert expectDeletedBy == DeletedByValue;
		} else {
			this.log.info "Assert no DeletedBy Exists";
			assert DeletedByValue == "";
		}

		/*  CreatedBy  */
		def CreatedByValue = myXML.ResourceStatus.Current.@CreatedBy.toString();
		this.log.info "CreatedByValue[$CreatedByValue] - expectCreatedBy[$expectCreatedBy]";
		assert expectCreatedBy == CreatedByValue;

		/*  status value */
		def Value = myXML.ResourceStatus.Current.Value.text().toString();
		this.log.info "Value[$Value] - expectStatus[$expectStatus]";
		if (expectStatus == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		/*  Description */
		def Description = myXML.ResourceStatus.Current.Description.text().toString();
		this.log.info "Description[$Description] - expectDescription[$expectDescription]";
		assert Description == expectDescription;

		/*  RightsToken */
		def RightsTokenID = myXML.RightsTokenID.text().toString();
		this.log.info "RightsTokenID[$RightsTokenID] - expectRT[$expectRT]";
		assert expectRT == RightsTokenID;

		/*  Stream Nickname  */
		def StreamClientNicknameSize = myXML.StreamClientNickname.size();
		def expectNickSize = 0;
		if (expectNickname != null && expectNickname.length() > 0) {
			expectNickSize = 1;
			StreamClientNickname = myXML.StreamClientNickname.text();
		} else {
			StreamClientNickname = "";
		}
		this.log.info "StreamClientNicknameSize[$StreamClientNicknameSize] - expectNickSize[$expectNickSize]";
		this.log.info "StreamClientNickname[$StreamClientNickname] - expectNickname[$expectNickname]";
		assert StreamClientNicknameSize == expectNickSize;
		assert StreamClientNickname == expectNickname;

		/*
		*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		/*
		* pjg me added test
		*/
		
		log.info "-------------HISTORY-----------------";
		log.info "History Row Count[$rCnt] - <History> Count [" + myXML.ResourceStatus.History.size() + "]";
		if (tC.getPropertyValue("expectDBDeletedBy") != "1") {
			rCnt -= 1;
		} 
		
		assert myXML.ResourceStatus.History.Prior.size() == rCnt;
		
		for (int i = 0; i < rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;

			String hrecvModificationDate = formatDate(myXML.ResourceStatus.History.Prior[i].@ModificationDate.text());
			int subSec = myHistoryXML.ResultSet.Row[i].EXPIRATION_DATE.text().indexOf(".");
			String hexpectModificationDate = myHistoryXML.ResultSet.Row[i].CREATED_DATE.text().substring(0, subSec);
			log.info "$i --> hrecvModificationDate[$hrecvModificationDate] - hexpectModificationDate[$hexpectModificationDate]";
			assert hrecvModificationDate == hexpectModificationDate;
		}
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between CreationDate and sysDate() less than 5 minutes" disabled="true" id="70ac0f65-b096-472c-a11a-dae4fd8e0973"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreCreateDateDiff") != "true") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvCdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between DeletedDate and sysDate() less than 5 minutes" disabled="true" id="6f7c1fe0-a77a-4c49-a8b7-c1e722bb289c"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Calendar;
import java.text.SimpleDateFormat;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");


if ( tC.getPropertyValue("expectDBStatus") == "deleted" &amp;&amp;
	tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
	tC.getPropertyValue("streamViewIgnoreDeletionDateDiff") != "true") {
	String recvDdate = tC.getPropertyValue("recvDeletionDateTime").toString();
	String sql = "SELECT TO_CHAR(sysdate, 'YYYY/MM/DD HH24:mi:ss') as TOD from dual";
	String sqlResultXML = "";
	String cDate = "";
	String tod = "";

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		sqlResultXML = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info "sqlResultXML[$sqlResultXML]";

		if (sqlResultXML.length() > 0) {
			def myXML = new XmlSlurper().parseText(sqlResultXML);
			tod = myXML.ResultSet.Row.TOD;
			log.info "tod[$tod]";
		}
	}
	catch (Throwable e) {
		log.info "sql[$sql]";
		log.info "dbUtils request failed! - " + e;
		assert 1 == 2;
	}

	try {
	
		log.info "recvDdate[$recvDdate]";
		log.info "tod[$tod]";
	
		cDate = formatDate(recvDdate);
	
		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,tod,"seconds");
	
		log.info "cDate[$cDate]";
		log.info "tod[$tod]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Deletion Time and sysdate
		*  is less than 5 minutes.
		*/
		assert j &lt;= 300;
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify difference between returned Create/Expire time less than 24 hours" id="18421248-981a-4fc2-9062-c4faaac9ef6b"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
String cDate = "";
String eDate = "";
int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
				cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
				cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}
log.info "expectErrTypeStreamView is " + tC.getPropertyValue("expectErrTypeStreamView");

if (tC.getPropertyValue("expectErrTypeStreamView") == "SUCCESS" &amp;&amp;
    tC.getPropertyValue("streamViewIgnoreDateDiff") == "false") {
	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
		
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than 24 hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_76010 - StreamView - PORTAL - Stream view for account with single stream handle present with null DST</con:value></con:property><con:property><con:name>sName</con:name><con:value>PortalTestCases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>5480</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DA66F1A9FBD418ACE0401F0A07994AD2</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:DA66F1A9FBD418ACE0401F0A07994AD2</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:DA66F1A9FBC718ACE0401F0A07994AD2</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_47ce2b6d-3d24-4246-aa3c-cf8402f09feb</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:A8A874EEB244D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:A8A874EEB246D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamViewIgnoreDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>streamViewIgnoreCreateDateDiff</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>DA66F1A9FBD518ACE0401F0A07994AD2</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>DA66F1A9FBD418ACE0401F0A07994AD2</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>DA66F1A9FBC718ACE0401F0A07994AD2</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0900</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0600</CREATED_BY_USER_OID>
      <TRANSACTION_ID>1.0.3.1.S</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2013-04-15 19:11:57.955</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2013-04-15 13:11:57.955</CREATED_DATE>
      <CREATED_BY_NODE_OID>0914</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:forbidden:1122">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA8A874EEB244D14EE0401F0A07990FBA/Stream/urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADA66F1A9FBD418ACE0401F0A07994AD2</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>766</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvDeletionDateTime</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>55790</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADA66F1A9FBD418ACE0401F0A07994AD2</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA8A874EEB244D14EE0401F0A07990FBA</con:value></con:property><con:property><con:name>SetDST</con:name><con:value>NO</con:value></con:property><con:property><con:name>StreamCreateAssertion</con:name><con:value>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</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>adb9804f-1831-4ee5-abc7-850b9b034361</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="06c4aee6-f90e-41ac-9efe-9f3d0a413a88"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="59baef07-b56f-4b3e-bbe4-bde687e5e4a9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="c1020aad-29dd-4681-a59c-4359cabf80d1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="c16260a4-873e-439f-9c29-75e2e2be9ed2"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7",/*"us:tvpg:tv-y7-fv",*/"us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT= ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH= ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];
KijkwijzerRatingBE= ["BE:KIJKWIJZER:AL","BE:KIJKWIJZER:6","BE:KIJKWIJZER:9","BE:KIJKWIJZER:12","BE:KIJKWIJZER:16"];
MocRatingLU = ["LU:MOC:U","LU:MOC:10","LU:MOC:12","LU:MOC:16","LU:MOC:18"];
FSKRatingLU= ["LU:FSK:0","LU:FSK:6","LU:FSK:12","LU:FSK:16","LU:FSK:18"];
KijkwijzerRatingNL= ["NL:KIJKWIJZER:AL","NL:KIJKWIJZER:6","NL:KIJKWIJZER:9","NL:KIJKWIJZER:12","NL:KIJKWIJZER:16"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

           //case "${urnRating}ca:chvrs:e":
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      	case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
         case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
     case "${urnRating}BE:KIJKWIJZER:AL":
	case "${urnRating}BE:KIJKWIJZER:6":
	case "${urnRating}BE:KIJKWIJZER:9":
	case "${urnRating}BE:KIJKWIJZER:12":
	case "${urnRating}BE:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:FSK:0":
	case "${urnRating}LU:FSK:6":
	case "${urnRating}LU:FSK:12":
	case "${urnRating}LU:FSK:16":
	case "${urnRating}LU:FSK:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:MOC:U":
	case "${urnRating}LU:MOC:10":
	case "${urnRating}LU:MOC:12":
	case "${urnRating}LU:MOC:16":
	case "${urnRating}LU:MOC:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}NL:KIJKWIJZER:AL":
	case "${urnRating}NL:KIJKWIJZER:6":
	case "${urnRating}NL:KIJKWIJZER:9":
	case "${urnRating}NL:KIJKWIJZER:12":
	case "${urnRating}NL:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0b433338-a698-47d2-99b2-a9508306bb60"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="17188a85-0404-4246-a4d7-d395675976b2"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="30cdcb9b-007d-401e-b36d-0e7e185f22b5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="94705f65-067d-4fdb-badf-2f60ef66535c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E/User/urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:NL:KIJKWIJZER:16</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value><![CDATA[<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:AL</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:6</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:9</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:12</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:16</dece:Resource>
]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">010E985C867725D4E05307991F0A7949</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalConrolRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="274214c9-9e4d-4aca-8fc4-eecbc0e9d45a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="545649b5-a2e5-4e3c-afd8-36583528ac6a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="bbb81a11-7043-46c7-9577-f4a5aa7c9a9c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="9b260414-c5c0-4e08-bf5c-44b49317c115"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="3c9059aa-8ea8-4637-bfed-2408a773144a"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_CS_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="524b6a0c-4604-42b2-a900-570bbe9f223a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="a00cf09c-b3c0-4ab4-bf78-241ffd69a472"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK" ) {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	
} else {
	log.info "ERROR!";
	assert 1 == 2;
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="6ee5e23d-be06-4e05-83ce-e560830ed69b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_39308 - StreamView - LLP - ManageAccountConsentRequired - Stream view by llpcs_ManageAccountConsentNotPresent_DeletedStream - 403 Forbidden_FLAKY</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases without_MAC</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I6EP0rKP24gjwIr6ggUaBbtkChodxtv1SuMwHTxIbYAbq/fu0AKaHQy71SVeTJeObMzPGxrzkKA8tpcg6RIIzmNmFAuZNY61ocUYchTrhDUQjcEdhxm/2eYxUMB+23aLluu669GmW7+IbL5byHMc7bJhj5WgWb8h/yDLuETGRVpSvnMXQpF4iKumYZZilvyL/y2LQcu+jYZqFSMV603AQiLmNLl4Kh7UBteF2bCbFwdH29XhfWxQKLprplGKb+u99z8QxCpDWutxUliaLGzh8XPMAQBLiAWahf6xmfa487LplSJOIIdrm8c7kM3ajp0sfjZHqlpXvB61KfJcsWoowSjALyB6n+9EHMmJdrBlMWETELzxZhGipwHjY4j02bXml6FtqFgTIII47yfIbMXaxH8CECiiH39Nita1eXTS3ZOo4Q5T6LQp5d/jc8QFcQsAV4eb4vawft8oAnOtW4Bux0KQ5iTlYwUGRdIAx8N03Al4fKDSPwyaZHuCTohit0+iG8o+W2G20yBS7+z4AOhrMNMkFBDI2ne/N3uzoZhRtTuILWJs/CNOK5G/ijegLg0DkxpKPdLo9ImZJou2MxiYJuTCcv3qj3XpwES3vyY74aVePNi9dE87ZYwqDKOnhqjsjMJvow/DX7Rf8pdry7GXmavrQ4HQ8HVqm1DlnwMvBMn/Xvmv640nlvh2/d283N/RhG+KbJev6fuze/Rsnj5B7z52f35mEcu54fTObWw/KpXx30/Jk9HJEfrZ/9XnX68FypGu7Pbuz3XTEOo2k9LecAf9a2P/Nu/DYHLPZLRYNuO3crp4TE92KmLMTL+4mrs1DiwwVQoTXULqUdTizljniOnOF2bZbKtc5NxS63miW7elvtGKWiUanVzFujWepYnb3IbFEcQWwx6hOVS0nuljbfA8Shw4F6EOVXLJZKx7VvIraRQLkufZSHgFEOYybl2UMf/P1t82GV5kVzPY3K5Q03ipXVXMsNmHigD1HTFxBlNbmU0eRHwGRBQAm34jWXxOZC9mKJVrEIzMIKFSjEUtojpbKOZVdLOifhIgCFVA+ZFwdQWMwWSWd0vv218gjzxNrrNd3ha8t9tZJDd7a842/7TkgfjygHrkq6ATlNOHHHFPf1nKm7cnQX7cM3Y4+o8yXbKiKCt0iynz7ZomiSUuWzsD3ydMOxIRNcP64rzeetCE5pn17eUtOlCjT2w1kis7AsxKtVnMzDtot6JMPrqlLdsHQXcCx16mPM3oHqaRT9okshBX6UPLVnIcZiRl2BBISSP7lkecErwAWuXgFdSfzNpU+MTErZOgEbccrWCuQLRiH+9pGDHaz8pHkof9Ys8j4ndiLWQR5Zp3wECEKnaqUuhI8z9MBMhiVSylh0GPxUgFPJs8a0ySkWIQn1Fgs4/yWnNKquIYxZTEW3rSWGQ91McIqPBTifTl/CJNKcvtXIvz/W8iShAAb5wuMkia+uXEcdATo90N5d0jPyW/xOfrPoGl/MXy0HfTrmeOMv</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1569EB746CA348F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1569EB746CA548F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:1569EB746CA348F8E05307991F0A5E2E/User/urn:dece:userid:org:dece:1569EB746CA548F8E05307991F0A5E2E/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03EF82831975E05307991F0AA8B2</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1569EB746CA348F8E05307991F0A5E2E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1569EB746CA548F8E05307991F0A5E2E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="cfe3e69c-8d4c-4678-8e65-88bb7905186f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2749c3a3-ffce-4eac-b7ef-7ebbb88f3c1d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="c5b34b74-352f-446c-bc1b-9f0d744c8a4b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="eeb47be7-7a03-48db-b9e4-5038fc89e837"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="45e20fb5-f5be-480e-aaf3-be7943c5d0b9"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="86a5e98b-a14b-466f-b45a-7a365c682cf5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="6e3c7d8f-deb3-4f09-b3c9-6bbfa58e0c91"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="582bc855-cf5e-4597-a009-94781f572507"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03EF82831975E05307991F0AA8B2</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>010E985C867725D4E05307991F0A7949</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="2cb12f8a-5cbc-4382-9c61-d88ea3d275f7"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="40abac96-2965-42d2-9ceb-545f89c474ba"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="62b2c08e-86a6-46ea-8c27-18c51c965ea7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="eccd64df-53c7-4505-97b3-28f4f1c0ca48"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="ec5688e2-e2d3-40d3-917b-9f81fcf3d3f0"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="9c2138e5-e20e-4686-9088-9f36c665d8dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="1dd4e503-8ed9-4431-9649-5031f52a4ffa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E/User/urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - General Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>010E985C867725D4E05307991F0A7949</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="dea079d9-0e2e-4996-9512-d57c8a0a7de8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="28d08f41-9be3-4747-8409-d94e129ac3d6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="fe082d21-6e8f-4f40-87a7-00e9ce0b0d29"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="79e4ea7f-6438-45ca-ab47-21060389c8af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="ee983fe8-fdbb-4eb3-877c-d6756a25a4b1"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="92346999-aeb8-4b1f-9356-2e41eb1aa085"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="29d8e097-f9d3-4aed-a8a0-1422aa44083c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="2fb2df38-317e-4978-9747-b036e1e7a7b3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr1kjP8wjj2BGQih4xZICiRf2puOIq9BqS07lmwgT1/JgAOE5KPtlUfr1e7ZH53dS4biyPS6jEHGSUJrqziizCulbSXPqJcgRphHUQzM49ibdkdDz2zoHtpdUWp+v638bD0+ui0jtFUXXF1tIsdRxdlSL2zXDkxXd8AMhCpjOfiUcUR5WzF1w1Z1SzXcme56hu1ZVuNCd38otXvImLAtVBq6sgW1Ym1lwXnqadpyuWwsrUaSzTVT1w3tYTSc4gXESOlcbiIqHWWdrT5uBIAhinADJ7F2qR3oXAbMm5I5RTzPYOsreM+XrumuJnQCRuaflOouBD4Nk/J4hWhCCUYReUEyPyPgiySodaN5khG+iN8NwtClYRVWWMVGk35StENoZxo6QJgxpLIFMra2JhBCBhRD7W7it5VP51WtvDrLEGVhksXs8PhneIAWECUpBCrbhbWFdr7BE5nqXAL2fIqjnJECxrJZU4SBbasJ+HxTtdsMQrIaEiYadMUkOm0f3tFxk40+mQPjf1OgveJsjNyjKIfOePR8PXn8MsAv+dPDUxoPlk/aiqzr4+VFuwSwr1wKqtJujkdNWTXR5sZg3NTC5RrZdfj2+eblR/1aL9ZPqWuN8Hie+Gw0qq9Ddzi0Jp9vH+bf5zf9IvChWNj4S2alLGffv30NA+v5zrj2nVWKpuNouk7CRY/28bq+nN0BoF99e3bfrTsX977VW392abef9KKvvYeReY/NR8ha+Q+tdVOfXV13Xy4GD2uYzQat4rY7aCb17+5/Nw+Lr008b1fh7OE/lO3e/DR/fALMd0fZBn6/NhBVQvxjMpMSEqhhqeqlknwYB8qVjrwlucPLBd2RwBM13JwNo2u4zV7Lvmo2ndbAvNZtS3dc1xjoXWfQdHYks0FxBPEqoSGRviTlbtrmY4A49hjQADK1SHLBdEz5wGIfcVTz6UQ8goQymCWCng30ElprJ7ZMO9SN5QIvQl60sD4X/D1O+A29ybohh+yAlA3zgJQngElKQDK3bGwmOptxkYxnVOQ8MhoFalDIBbdnkmY9s3lha4zEaQQSqhYnQR5BI12kZWo0tvmaKsKslE6uZ+Vzezew43+7HAidgEgFJmPpgagjnJgu5i6QNwG3Tk6hnfluHhD5skRCeUbwBsnhr9c+kQ1SNUl/2J3e7kBXun9w9+fV9KfxlwaG/+B8+K/ORS3f3tQ+yKd2XMrKUVCQPbe7tUMMMEF5nV0jPqPGcyMvirxsPUdSeybMa7IJNN3UpoBzQcrrWfILqFZZ0c6agBXwI+eV/BBizhd0yhGHWLyVWnk8Y+WZApMrjy9e+ercferApUgdhxU/JbuKxLomEX+40WEPSz0hvhWfZZK9Bn7K1p4fEafYeDihc3mS02/9Tl/gRJglgreTbN/4KQOnnB8KqyRXWLhoqMecw/t/apKQ2wrCOMkp9/tKKdgfEiVOvk7Be1V6Y6acQ9ViSv5/M1VJ2QIYxDrLSGlf7heefAJ0vjdotk7fzpq+PjB7TcfR7f1ZY+u91zd6gK7zRvxWspen4x7v/AY=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:11A194D0F2B47705E05307991F0A50B1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:11A194B65C4476F2E05307991F0A7F47</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:11A194D0F2B47705E05307991F0A50B1/User/urn:dece:userid:org:dece:11A194B65C4476F2E05307991F0A7F47/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>843</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03C22D2D24EFE05305991F0A0288</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11A194D0F2B47705E05307991F0A50B1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>11A194B65C4476F2E05307991F0A7F47</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="c96f0e86-16e8-4dc4-a9c1-d916f7d4b5fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c0346bbb-e43c-449b-b139-9eb37b5ae9f9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ba0c086b-f6d3-4a6a-ac0b-d974c25c4a49"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="8a584a9b-b810-4435-845b-c7fa05831b42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="c2bbe60b-796b-46e6-aa12-0bff83060207"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="dda897f8-1e59-45fc-8970-8e40c59dc4e1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="f4c1563c-8557-4429-ad70-3bfa36c06087"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="663d3624-10ea-4140-9e8a-2af38688a660"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03C22D2D24EFE05305991F0A0288</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>010E985C867725D4E05307991F0A7949</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="8649a5e2-ee7c-4cfa-8832-427975c441a6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0e8dedd3-bb69-45ad-876e-4537085d862a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ae7745ec-664f-4b7c-93fb-d87954050995"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="3540524a-d890-466c-991b-388e760d52e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="b72342fc-944f-4370-846b-1cb840995e27"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="27ff35f4-b284-4cd5-82cb-86e5062ba5df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="72806754-0458-4edd-bf12-d8cfae26c691"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE872334B2B6CA196E0401F0A059919B7</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE872334B2B6CA196E0401F0A059919B7/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:E872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E872334B2B6CA196E0401F0A059919B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E872336DACB8B3C7E0401F0A07990BD2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="04535d4f-7114-498d-bc8d-274390f12eaf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="76b180f7-5809-474b-b91a-3f5462125dd7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="4cf4d91f-45f1-4247-b37c-9869bd80f957"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="faef7f02-39bc-41e1-ad22-585aad87d071"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="d4b51f96-9f38-4fd5-bcd5-00a830f19e83"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="ab2b8e44-ca0d-4a81-a762-e0790a91fa0c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="c3ab30d2-99f4-4152-94b5-1597ae13f67b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="301f3976-c312-4eb4-952b-077436f5b8e3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE872334B2B6CA196E0401F0A059919B7</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE872334B2B6CA196E0401F0A059919B7/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/06/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>846</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>E872336DACC4B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E872334B2B6CA196E0401F0A059919B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E872336DACB8B3C7E0401F0A07990BD2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="1e3c26d4-e8b0-48d0-8cb0-fd0f4e3d1579"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9a0a0950-c4cf-43d3-975c-5309439826d5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="48975c54-778a-4b14-8f85-a9cc8312badf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="40b9a8a5-26bc-4704-8cdc-717fcc2a45f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="cd19b2f4-b6b5-4ef3-acb8-002bc1a2f8d7"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="0901cabd-c8f7-4047-af68-ecb390435440"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="9cde8359-63a4-4706-bdcd-e992a9f41694"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="0b789485-e83a-49c5-b53f-ae12c34c6756"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove Allow Adult Policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE872334B2B6CA196E0401F0A059919B7</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE872336DACB8B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>E872336DACC4B3C7E0401F0A07990BD2</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E872334B2B6CA196E0401F0A059919B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E872336DACB8B3C7E0401F0A07990BD2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2cb9084f-75cc-4289-afcc-bfa9484fecc6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fe79744b-b9ef-4b41-bf8c-852575c3950d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("rtrnodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("cid",null);
tC.setPropertyValue("alid",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="b91695b3-b864-441a-a101-a6887c7dfa93"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("cid", callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid", callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("alid") == "null" || tC.getPropertyValue("alid") == null) {
	tC.setPropertyValue("alid", tP.getPropertyValue("alid"));
}
if (tC.getPropertyValue("cid") == "null" || tC.getPropertyValue("cid") == null) {
	tC.setPropertyValue("cid", tP.getPropertyValue("cid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity as RTR Consumer" id="a55b8455-9b83-4d7b-a1bd-fe01f06792eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="f136bcd8-c9a8-43a0-a705-ffc5f5153001"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - RightsTokenCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate" id="129ae15f-5093-4d9f-bc5e-c1309ef75ae3"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#Project#alid}" ContentID="${#Project#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#Project#cid}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
				<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">   
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc> 
<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">    
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc>

                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>urn:dece:accountid:org:dece:${#TestCase#assertionAccountId}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result" id="63d1dc30-fd14-44e9-81e2-690708703cc8"><con:settings/><con:config><script>import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def urnAcct = testProject.getPropertyValue("urnaccount");
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String rightsid = null;
String rightsidfull = null;
String contentLocation = null;
String major = testProject.getPropertyValue("VersionMajor");
String minor = testProject.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
	}
}

def b = contentLocation;
//def urlStr = b.getPath();
def urlStr = b;
//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*");


//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
int lastColon = urlStr.lastIndexOf('%');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 3);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}
else
{
int lastColon = urlStr.lastIndexOf(':');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 1);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case" id="af2da040-38b7-4c17-b62f-6741f092be05"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="a03b54fd-5323-4aa1-ba66-2a3d956e6ead"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_29104 - StreamView - LLP - StreamOwnerMismatch - Stream view by llpcs_ManageAccountConsentPresent_DeletedStream - 403 Forbidden_FLAKY</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1578A8F35CA11574E05307991F0ACFCC</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157873F89F3F79C4E05307991F0A289E</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbrcto8EH0Vxv35DfhKAE9gxoHQ0pCQYprbn46QF1CxZSPJXPL0lQy4mJB8tJ1hhtF6tXt292h3LzmKQsv1OAcmSExL6yik3M2kTS1l1I0RJ9ylKALuCuz63m3ftSqGi/ZXtFKv09R+gIMcpxbUyzAOqmWnZk/K9Qaqls2xbdl1GxnYsKQq5yn0KBeIiqZmGWa1bMhfbWRcuEbVte3KRb32opUegHFpW6pUDG0Has2b2kyIxNX11WpVWdmVmE11yzBM/em27+MZREhrXW4jyhyx1k4fVwLAEIa4guNIv9QLOpcBd30ypUikDHa+gvd8GbrR0KVOwMn0k5bfhaBHJ3F2bCMaU4JRSF6Rys8tiFkclLxwGjMiZtG7QZiGMlyGNS5j06GfNL0I7UxDBYSMozKfIXNnawgTYEAxlL4Pe03t03lVy66OGKJ8ErOIF49/hgfoEsI4gaDM92HtoJ1v8ESmWpeA3R7FYcrJEu4UWROEge+qCfh8U6V7BhOy7hMuCbrmCp1+CO/ouM1Gh0yBi78p0EFxtkYeUJhCKwxuBtP1Kkqi6MXXB18ex4Mnn7cdZOFmBuBQORPkpd0ej0iZk2h7ox9HiC426GHTWKK499h5Yt3ukG0GXuSkqTkfNq5mt58v2syEzuQFTZPX4M58mVvfvlwN7p+vzc3m4gKc9lNY/zpm63X1ET0/zRbdQXirv1hmY/6ZP49uRtzc+A/42rup4WcvueuTzUb3q19u+6MXzzG+fhuZZPzIB/Ofw/+WV2n/+2N90/82ee7C5t7uzchzdTG/mTfzcA7wF2X7N++n45+Axf6oaNDrlLqySkh83MyUhATlSabqJqr5cAFUaC11S/UON5XtjgSurOH2bFZr9ZrdrTe69nWt0Xaujapt1BoNs2t4Vr1xvW8yWxRHENsxnRDlS7XcLW0+BogjlwMNgJWXcSo7Hdc+sNhBApV6dCgfQUw5jGLZnjlZ2AlzGEqnqRkw4xWMn3GystZa6S4WAzpg3kQAK/bkRqEnDwGThIBq3IrXXBKbC5mLBVqmIjQrS1ShkMrWzlSXdS2nXtU5iZIQFFI9ioM0hEoyS7LM6Hz7b5UR5pl0eD3KXtu7cR1/26dA6gREKXAVyxXIMsKJ4WLtA3kT8MXJIbQ376UBUQ9L5lMwgrdIip9+00TxI+dIp+/593vQue4f3P3R9n+Yf2mg/w/O+//qXNby7U39g3zqx6XMHQVLcuB2v3XI+SU7XmtPxAUyK4tKulymGfccx9aZNK8rEuiGpfuAU9mTN6N4DlTPrehnDcAc+JHzXF6EmIoZ9QUSEMm3UsqOZ2w8PnC18fTkI1+fu04VXMrUCViLU7J2KLc1hfjDhQ67WOlJ8b38W8Us+F2xE7YO/Mg45cIjCJ2qkxp+m3d4gWNplsi2HbND46cMnHJeFOZJzrEISahxKuD9LyXVj5sawjhOqeh1tExwOCMynGKTgPtb6Y2ZbAzleyn5/8W0TDIKYJDbLCeZfbVeuOoJ0OnBnNk5PR41Xr1rV9uepE+tMGra3XY7T0oBXeuN+K3kIE/HHG/9Ag==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_241580697.txt</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77773</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1578A8F35CA81574E05307991F0ACFCC</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1578A8F35CA81574E05307991F0ACFCC</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="4e6452dc-0675-4f06-b6b5-85a1c3ca4ba1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0581da6f-a529-4039-92ff-2a60f831fb6e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="580f35ee-529c-44a6-8fe4-35834d90df9c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");


if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="4ecb2c2c-3417-4686-88bd-6921e24f9c05"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT = ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH = ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	//case "${urnRating}ca:chvrs:e":   
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

         
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
        //case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
       case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

			case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

			case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="7843c0ba-705b-4472-a6b6-b318eadad876"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="59a496b9-8198-44d7-85e8-a537ef784d58"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="fa91f20d-b41f-4ec6-ab50-f77130cdd1bb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('POST - PolicyCreate');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="e821ed29-6c3d-4b53-b7a7-f4317f6aac4b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E/User/urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949/Policy/urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77778</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>32598a14-7c38-48bd-b70b-d0c6e925a714</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="b1115e0c-f0ba-4949-a22a-eb633257120b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="eac1a426-7918-411f-992a-567159b18283"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="7380a22f-1707-4003-9cdf-a7ef15e95aba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="c30a8a2b-5a56-4fc6-8ef1-d5301d0a2935"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGET" id="0b853e31-67a1-4d30-98d1-c373eb472207"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGET" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="40d977dd-3505-4fdd-a480-5952c616e2ed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="f296bf3e-f1ae-4f8e-a77f-d7741d8af981"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass[0].text();
}

		
if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="d9af011f-bc68-482f-b73e-1ee311a0a611"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>958</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77779</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.w3.org/2000/09/xmldsig#" xmlns:ns3="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:010F03A751AD24E7E05305991F0AAA98">
      <PolicyClass>urn:dece:type:policy:UserDataUsageConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2014-08-20T11:44:33.000Z" CreatedBy="urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>010F03A751AD24E7E05305991F0AAA98</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="423f2f31-ec87-49ac-85d2-4f6fcba9db34"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a145ad25-08e5-42d5-9de9-120d4488111e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="f9b6df44-0a52-4fc5-888a-254aa0556bc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="e5eefe6f-49d6-41e2-a5ff-fb4a16388a19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="01a02388-8374-4dbe-a0d4-c3a844849e16"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="3710_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#VersionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#VersionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#PolicyID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3ef1061b-0c00-4c21-ad20-688dfd342fea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="b42d0852-ed4b-4161-8829-e7a04f615ae7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="eff7d8fd-5e53-49a2-9c06-afe838d6a9f8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3710</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVdZc7LMEr73V1h+l5ZhEResJFWDoCLiBq43p3AYEGWTYdNffwaNvkneJCffudLp6el+eqHnmWdseC7bARijKHYCvyyLL5X/7DimaTKmUeM5ul7jrEazZkCDrTV2XIttNJFpmEylLGOcINnHseHHLxWWZuo1ulWjWZ2hO2yrw/BPDN/cVspLFGFimqg80ZVy7rk+7lzdvlSSyO8EBnZwxzc8hDsx7GhAHXWIZse4Y6q8Pt9QXh1Gr/s4DjsUBZ9MBJHrwicYeNQz9UHn2cQdzbF9I04i9ObTxC+Vt7NZlj1l9acgsimWpmmK5imiY2LH/qfyWrofRqbsW8Ft3TX8wHeg4ToXowClongfmGXg2kHkxHvvG9MMxdCF6RrKYQ0ynP9Phfrj4Irul5Y+gIywUcN7g7kbmyMLRciHqLyYyy+Vf35XwdtZPTJ8bAWRhz+t/x0k5KfIDUJk1vA9sju631v8Il2vzwh2ZB+6CXZSNC7aJDQgwuVphCwnHzmYNJ+Jy9fyl3N87zAE/01Jnqn3OAls6ovMiI6NcPz/1Ot9rW5WloaboNestzkvZGCvubq6PU8XnLCMrBYFZ8vFyxXCe+UbqEep39afG/XRV2+HLExzrcnw0N3AgHUHCjOOFrHEeSGnw43ePGA4X7BzXhpDzhpaGjYcCu2ndO4faWRxw/1cRVausF57Nw9KvFyVLClTUDwRd1nEHW1hM1Ha076iHsK0b0wogR859lhIqYm+G9KGRjH+RGxmZjs45WfpTJmXpeZOqqt0VqoP1NA3lHS3Po8dPsOZfHz5E9P7GIq4FHS+Bln8XzdoXjRi47HoFpPCIp9njF5VWe5WxW4XoK4NMlkAtiyMLmAs2MfT/uj0+YwWwGzRAyI4q3OQifZGXM5mipSZy6W7Xcq9nqDOuWwANmKJbIhSvhS3axLMahtu2B691QTBXM+DXX0YmoNjNtjDsaqr2ViXz+pByse6RK+uMjsn64t6UJmJvqiXVgeBV+dSJmZXj6KU7cfb1TzcLPgMXqSZCrg+YBZSd68OdG/JwPp8Dw/SSAXHq1zYq93lUs0lHUxLgj1ektj0bm8bQs8Md567f2d8QIzrZn953vXdZHuRDmpX6ne1U1+Td3VxJg3BfLPYrZZHY9VLS3AwBru7R6fhGOsgs7ftTJxthkqwlfcpHIOZJAgzQNJFA1XuD0HQF4DKASe/dA9CM+iavYwasrhU5d1+c312Tmts9GnXYNptZjNaNaenpij51a2S7A57db/uTaqKZqYLPuYvG5xW06bhMDAPrdlaGsRKbg1mWmk3FfM1HFRNe0i5F74Xqa0hiC7nvava83jVnODzzrGslbCecG7LctX6PLRcKzzjqh7MjhHdFFCdpTbnVIlLwFYFAPqHxUGYqUK7SKopZ7ONKhigJ8UJuBzYWGGXp+EgdeGmDoJcWU0Ox7fCmGImCVQ2k0hbSaW2CMyiCANtIfUOYCHYdiTYUk+YQRHMNrKSbUi+FgOi/DmPvWsebUkAUn0LmvygVF/QfDyJNY4DZ19Y+D1+r57yldn06NYJSSNtHHKZiseWv10FR9VzokWUaAtFGY/ynZ70jwcyqyxaU9L6tiSlxxA4Y0XfH8VANKbhZhOHVR9GMJZDT5Xzy2SLD21n59HDaoMRprQIW+zC22WLviFtlcjWGGUw96f1Fl/CiXUeeNVDO1tVda0Ztsyub4nnM7WNlnQAgh4/b5zMnGWP+0U2ambWEBx3BjvOXV4485Ky1WE2nykrzas2So10NPLoi05x43CSaf2Mk2azat0U9IGOw8jZJG07jya+yW6MuJlu6WXTCd0jzyZHnQvrS9sjxZqmZthSp6UZt4Zbz26FcEjNqRRILWsk98+7i3EJvQm8DdDP0+EhvM0P6v1k+TB67qRDI92KYHxfFheQLJZ75FYw4p8JTCFxzJp1Ve2EBQvCMfLjymtxqiAvnYRQHMfskCvjtpbodqPLNCSx1e7WGwwn0RzN9GhAt3ieY2npznJuKD5B7Aa+5RS+Ch53u6V+Bgi9Dka+iaJaGiRwj3DlB4tFvsqyPyfXb+BjpAeEJ7Kthii2eJZptbpSsydJjNRlACfV6wzba7QJ2xsH8cSfRMCKUfSRI9Y/cMQ5gk7ooIJIFrcpJtcpjklKTkaaxC7zlBpPPkoI1YwKttdhuXaDwo4XuqgATHmBmbjoKdyH1wRR+PbLEtKDr9J6i6Gv1/y38X3eu6eC6JhOoYCLYAREyom+YLv0PZK/Iua+ZMV38yAxneI2J3mNIwfekHzc+tMuRZ88eqUI6Y75ofrro8zfR6kfEFGfk/HwZKbOO793zk5oKCEqr/danoyn01OSpsm1eq2ChEXEPMVQdJPSEEwIkzrrwRH51MME9SsS+0D9yfND/hFfEu99LSaDwCO9Vr4uf/GC0RAuXjAy+Vby3z6PPrgkeYtRHn8l67rkoVMg/vEtBDuw0CPiKfnJgsj8U64vbL3zQ+IsJp/j28WqoKznb7oCBsSsQ6ZfEL03/pWBr5x/FD6S/MASk27aJTH6fqdcjLWXigFhkPixLFaugvej9oozPoeo80fpLzNX0vj2Csjxt6+AtTrSyNDzjMpD1/nfyjXn2i4QkVPYuWJ5qeTkQUuc+/a70f4G8JvpDn6a7h8jef1L/LfkXU4/fw+v/wU=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77780</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="76f84e42-bf6e-4c3a-a432-ba94c90d9131"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2d996f30-9b40-4acb-8ef6-bd432562ebd0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="84abc700-3322-4dc4-aab2-bd64b0e1dea0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="e7b81ac8-dd38-4a74-94f1-187be22a248c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0b8bf0d4-34fa-4dcc-97de-14d0d7141bfc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate Account" id="f5d73f16-e8e5-4628-bd7d-da6b84a947cb"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="f3e2fea8-c05a-4362-a45d-ab46ac071131"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d7be8eaa-23ba-4900-9e94-3fe8a0608a79"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZtc6o6EP5+fgVDP97BAIIgU52xam+917ZW7YvnSyeGoDlCQBKU+utvgsWqtb3tOTPOOFk2u8++5Nk9ZzAKTa/FGE45ianS6zTU56lew7pr1TQLWq5mTS1dm7r2VHMNv+bUbQM5dlVVeoxluEcZh5Q3VFM3LE13NVMfG4ZX1T1Lr9Qd56eqPOCUCdNCpaKrSh6FlHmF24aapdSLISPMozDCzOPIG7Wu+57Q9GCJSW2eb1EWDtPmnPPEAwBVfIxwGKIKiiNwDg50zn3mjciMQp6l+NWnzxrq6931el1ZVytxOgOmrutArwOh4zMyO1ObP8rL2O/RIN6e25DGlCAYkg2UoK4xn8e+0gpncUr4PPrAtAEMXZrWcI40ZFj0TAVvDgp0X7R0ADJlUGNzaJTGhjjAKaYIK/fDXkM9+1oFt3fHKaQsiNOIHZ2/BwnTFQ7jBPsaKyMr0X3d4ol0Nc8x8noUhRkjK3wj2ySBCDNlkOKA5H3CRPP5TCnKr+RM/EjZZRh9pyznYB+rgA5OZKdDZpjx36nZfr22Vh5gmOEmt/rjdLNxAc+zS8NwXhbLq5vLuGr/GzcKCPvKW1C7cr+ej5t111uvlwZ57+lq1Lsx6CTIZ91JME9GLb+znA/yOANh2w4xuTZni5r794VtXN3VZt2BDszh43g5DuBT+/o+TFuXdyQzJ/Ufm8navplP/NEyuI2C7ixx9PY48W14t/zn/ip6CdehX3c208B9rD3dPV08rVe1KggeryfDVUCcifM4XIDJkNYHWefHTwctknx6Fw/YXxntm4sHvfEW034Mh8KSEkbZ9BdGvDzK9uh1lEtRL8g/pxcpIb4WFKpeIjmKcUy52pS3JLV4mSAg4nuimNuzbujdumu33ZrjmHbH6up2VXfqdeNSbzl1q15y0BbFEcR2TAMifUmW3fbP5wBR5DFMfZxqqzhDc8zUTyx2IIdKjw7F44gpw+NYsLgxY9ZmQQMars25YfxaLl42S2exQqGq3MT8lt6mrYDj9JC7rQPuHmJEEoIlwcsOZ6LFGRfJWMJVxkOjsoIVijMxAlLJwp5puTZgJEpCLKGCKPazEFeSeVKkBrDtv6lBxArpsDsuXt6HgR1/K3MgdHwiFZiM5QKLOuITQ6haBvIuYPvksCrNtzKfyAcmEspTgrZIDj+99YlskF2TdPqt0aAEvdP9xt3n9ujZ+E0D/T9w3v9T56KW72+CT/IJjku5c+SvyJ7bchEQs00wX7NsxCWsLCvZapUVredIVk+FeSDI3QAjjDJBzS/jeIEp2JkAX5qMO9RHnnfyQ3wZn9MRhxxH4qEoxfELa9EIM7kW9cQTz7+6cx24FHnjOOenZO1QbE8S8acLFvKQ1BPigfhbx6n/Vq4Ttvb8iDjFLsQJncmTnIEvHzQFioVZIkg7TveNnzJwyvmhcJfkHRYuummacfzxF0WycUOFCMUZ5b2OWgj2J0SBk78k2HtTememmEKva0XOPlwrnq77I8HVEVR3uuT/lTVStAvCqtxeCiwNNRdbsnBOZ3sT6RXg+6FkGUbLbpv2hbs/lFxb7+4SeBBJ8534vWQvp8fvofkf</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_1</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E&lt;/dece:Resource></con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.w3.org/2000/09/xmldsig#" xmlns:ns3="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:DuplicatePolicyCannotBeAdded">
      <Reason Language="en">The requested policy already exists.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com/rest/1/11/Account/urn:dece:accountid:org:dece:010E98411A5C25B8E05307991F0A850E/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:DuplicatePolicyCannotBeAdded</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>781</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77781</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085B86D7AAED6B1E0401F0A07993148</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">010E98411A5C25B8E05307991F0A850E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">010E985C867725D4E05307991F0A7949</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="de958d02-e698-4114-88bc-a23d6ff8e18d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="688c7ae0-9977-4fd6-b158-9d5e1d7b0b5c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="42c17c13-51f8-45c5-9351-4aee16e6d15d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="cfbf7dac-d2ff-4212-be04-4a4780566552"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet Account" id="f2442946-0682-43f0-93a6-44c809433521"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet Account" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="830e464f-e7c1-4e09-a3d7-cf64d4aeea98"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="c67f428f-c00e-44ff-860d-7480e719c0fb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}

tC.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists setting is " + tC.getPropertyValue("policyExists");</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="c1600470-6f56-4546-9d39-43651d435b8e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));

//if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
//}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPrYCbkRCJnCDJfCYbm0JWy7py8d1xHgbuLQ2Al0f/2xA6SE0h529yljRZY+SZ8lXTEUBqbbYgxiTiJa2oQBZW4mbShJTN0IMcJcikJgLseu1xqPXLOsu2h/RSkNug3lqVZFtYpTeVbBcOZqBZyaiizHV22/DjXb0SuO5QtVxhIYUMYR5Q3F1A1b1S3VtGaG7pqWa9TLtlF9VEr3EDNhW6iUdWUHasMaypLzlatp6/W6vLbKUbzQTF03tB/jkYeXECKlebWNKHMUN3f6uOwDhiDAZRyF2pVW0LnymeuRBUU8iWHny//Ml67pdU3o+IwsLpT8LvgDOo+yYwfRiBKMAvILyfyMgS8jv9QKFlFM+DL8NAhDl4ZV2GAVGxV6oWhFaGcaKiCMGVLZEhk7W1OYQwwUQ+n7dNBQLs6rWnZ1FiPK5lEcsuLx9/AATSGIVuCrbB/WDtr5Bk9kqnkF2B1QHCSMpDCRZF0hDGxXTcDnmyrdxjAnmxFhgqAbJtFph/COjttsdMkCGP+TAh0UZ2vkHgUJNLWXYf/Bv3zxulbKxjc1xzDr/wxxd3mPGxmAQ+VMkJd2ezwiZU6i7Q1cnwb0cTOtV7yu92hUe68sTsb1x15qmEv8csOD1maxrPZn7flwMnqL2pXkjiM0vn/o0cu+YMg0Jvp0NBo9jO/MVj+ZocfFqh8Mw3Xnzp+0q+uxs2mDU4960R0w2FwHqD9KzfZdvz6czCjMXgYPi9l9+1v3h6977REs/MG/v5JHMjTnm/ZsHb7Zk0u8Iuzb90YezgH+omz/5r3k+QUw3x8lDQbdUk9UCfGvm5mUEF+dZ6ruSjYfxoFypSlvyd7hJqLdEd8VNdyeDaNn9uya0etWaqbesa5129Ltet3o6S3dsqr7JrNFcQSxE9E5kb5ky93S5muAOHQZUB9iNY0S0emY8oXFLuKoNKBT8QgiymAWifYc2jylSewsnoGhn1h/rT3bazvGSmkS8Rt6E7fmHOJiS7YKLXkKmKwIyL4tac0ErxkXqXhFacIDo5yiMoVEdPZYNlnXrDi2xki4CkAC1cLITwIor5arLDEa235NFWGWSafXs+yxfRrW8b99BoSOT6QCk7G0QVQRTswWfR/Ih4CrJ2fQ3nwr8Yl8VyKdPCZ4i6T4650lkh45Rbqjlne7B53r/sbdp473ZPyhgdFfOB/9rXNRy483tS/yqR2XMnfkp+TA7X7pEONLNLzmnoivqPxaTtI0yahXk409FuY1SQJNNzUPcCJa8tss+glUy61oZ82/HPiR81xehJjwJfU44hCKt1LKjmcsPB4wufAMxBvfnLtNFVyK1HHY8FOyTiCWNYn4y30Ou1jqCfGt+Kyj+D3wU7YO/Ig4xb7DCV3Ik5x9b5/wAkfCLBFdO4oPjZ8ycMp5UZgnOcfCBaGeEw6f/ynJdtxQEMZRQvmgq2SCwxGR4eRvK3DflT6YyaZQvpaS/99LVZJRAINYZhnJ7MvtwpVPgC4OxszO6fGkaVuGaZktu+q0nMNJ07nu5pOmiK75QfxRcpCnY443/wM=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:11F2B31232A568A8E05305991F0ACED6</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:11F2F571FD4720C3E05305991F0A0336</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:11F2B31232A568A8E05305991F0ACED6/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">765</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77782</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085B86D7AAED6B1E0401F0A07993148</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11F2B31232A568A8E05305991F0ACED6</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11F2F571FD4720C3E05305991F0A0336</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="b5a9547d-6f72-4eb0-b51e-fba10f99ba4d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cf12c93f-189b-4313-9837-e0e7a60deb56"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="6496eeef-a6eb-40d6-8428-7693b24cee02"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="fee744a9-b7bc-40b6-abf6-22b36419015c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete Account" id="9317e1e2-19b7-4af1-ad33-438ab0be04b7"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete Account" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="4e6a1f1c-63bc-4187-a58c-cef331d3f101"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DELETE - PolicyDelete Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="2e65d358-08b2-4702-8f97-c9b86bfc5d4e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="123428a9-67f0-4787-8e98-8cf02a1a72d8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_08001 - StreamDelete - DLASP-CS - Policy - LockerViewAll - Nonenforcement of Policy Verification when policy NOT present</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Customer Service Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">299374d0-9ca0-4e88-9743-bccf7ec38c71</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ShareMediaHistory</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77783</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="93888073-4519-4a70-9fc1-097785eae4d9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a32729e3-b275-41be-8549-55fbf5c1287a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("transactionid",null);
tC.setPropertyValue("requestBody",null);
tC.setPropertyValue("sCbodyRequestingUserSetting",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="3fcfe9e2-7653-4d42-89a0-b580df1c41c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("sCbodyRequestingUserSetting",callTC.getPropertyValue("sCbodyRequestingUserSetting"));

if (tC.getPropertyValue("expectErrTypeStreamCreate") == null || tC.getPropertyValue("expectErrTypeStreamCreate") == "") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
}
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "") {
	tC.setPropertyValue("nodetype","dlp");
}
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Construct the StreamCreate request Body" id="9ff48dff-4b07-4e41-8dbd-90202435dc86"><con:settings/><con:config><script><![CDATA[def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String b = "";
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema").toString();
String SchemaNameSpace = tP.getPropertyValue("SchemaNameSpace").toString();
String assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL").toString();
String assertionUserId = tC.getPropertyValue("assertionUserId").toString();
String rightstokenidFULL = tC.getPropertyValue("rightstokenidFULL").toString();
String rightstokenid= tC.getPropertyValue("rightstokenid").toString();
String transactionid = tC.getPropertyValue("transactionid").toString();
String nickname = tC.getPropertyValue("nickname").toString();
String sCbodyRequestingUserSetting = tC.getPropertyValue("sCbodyRequestingUserSetting");

if (transactionid == "null") {
	log.info "yes";
	log.info transactionid.length();
	transactionid = "";
}
if (nickname == "null") {
	nickname = "";
}
if (rightstokenidFULL == "null") {
	rightstokenidFULL = "";
}
if (assertionUserIdFULL == "null") {
	assertionUserIdFULL = "";
}

String xmlBody = """<Stream xmlns="$coordinatorSchema" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>$nickname</StreamClientNickname> 
      %%%REQUESTINGUSER%%%
      <RightsTokenID>urn:dece:rightstokenid:org:dece:$rightstokenid</RightsTokenID> 
      <TransactionID>$transactionid</TransactionID>
</Stream>""";

log.info "sCbodyRequestingUserSetting[$sCbodyRequestingUserSetting]";

switch (sCbodyRequestingUserSetting) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "<RequestingUserID></RequestingUserID>";
		break;
	default:
		b = "<RequestingUserID>urn:dece:userid:org:dece:$assertionUserId</RequestingUserID>";
		break;
}

xmlBody = xmlBody.replaceAll("%%%REQUESTINGUSER%%%", b);

log.info xmlBody;
tC.setPropertyValue("requestBody", xmlBody);

]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="b55bf980-7c80-4304-9d81-3f773b4d4a81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate" id="2d983679-b2fa-411a-bb47-cd085b82c782"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#TestCase#requestBody}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Log" disabled="true" id="90ff14d3-548f-43dc-8771-663c57b0aecf"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\Temp\\RightsTClogFile.txt");
def RightsTCLogs;

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");
def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
                   def rawRequest = new String( r.rawRequestData );                                      

                    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
                "TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
                " ###################" + "\n\n" ;
   }
    else
   {           
                 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
                  " ###################" + "\n\n";   
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
RightsTClogFile << RightsTCLogs;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="5a2c3876-acba-4f25-929a-48926980d1f9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

 if(status=="HTTP/1.1 201 Created")
  {  int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));
   log.info "StreamCreateCount : "+StreamCreateCount;
   StreamCreateCount++;
    log.info "StreamCreateCount : "+StreamCreateCount;
     tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  }
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="5cb742e8-269f-4fb2-8acb-d52cb4d2505c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
		break;
		
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="ff29f474-b7a3-486f-abc6-f838f91c1133"><con:settings/><con:config><script><![CDATA[import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="0f4edb5d-db68-456d-a157-dfa68d57fe76"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle" id="0fc513b3-20aa-4fbd-b3ee-b7b97291ff0e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
	callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
	callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
	callTC.setPropertyValue("expectStatus","active");
	callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBDeletedBy",null);
	callTC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
		
	callTC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
	callTC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));
	callTC.setPropertyValue("expectStatus_" + cnt,"active");
	callTC.setPropertyValue("expectDBCreatedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBDeletedBy_" + cnt,null);
	callTC.setPropertyValue("expectDBCreateUser_" + cnt,tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("expectDBCreatedByNodeType_" + cnt,tC.getPropertyValue("nodetype"));
} </script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">157873F89F3F79C4E05307991F0A289E</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_29104 - StreamView - LLP - StreamOwnerMismatch - Stream view by llpcs_ManageAccountConsentPresent_DeletedStream - 403 Forbidden_FLAKY</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>1578A506EC9A156EE05307991F0A9200</con:value></con:property><con:property><con:name>requestBody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname></StreamClientNickname> 
      <RequestingUserID>urn:dece:userid:org:dece:157873F89F3E79C4E05307991F0A289E</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:1578A506EC9A156EE05307991F0A9200</RightsTokenID> 
      <TransactionID></TransactionID>
</Stream>]]></con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:1578A8F35CA01574E05307991F0ACFCC/Stream/urn:dece:streamhandleid:org:dece:C2C49554EB964CC39F9E7A1B9D892C26</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/dece/Account/urn:dece:accountid:org:dece:96D720451F824F56E0401F0A079921A9/Stream/urn:dece:streamhandleid:org:dece:98F5525959D92153E0401F0A07993F6C</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbrcto8EH0Vxv35DfhKAE9gxoHQ0pCQYprbn46QF1CxZSPJXPL0lQy4mJB8tJ1hhtF6tXt292h3LzmKQsv1OAcmSExL6yik3M2kTS1l1I0RJ9ylKALuCuz63m3ftSqGi/ZXtFKv09R+gIMcpxbUyzAOqmWnZk/K9Qaqls2xbdl1GxnYsKQq5yn0KBeIiqZmGWa1bMhfbWRcuEbVte3KRb32opUegHFpW6pUDG0Has2b2kyIxNX11WpVWdmVmE11yzBM/em27+MZREhrXW4jyhyx1k4fVwLAEIa4guNIv9QLOpcBd30ypUikDHa+gvd8GbrR0KVOwMn0k5bfhaBHJ3F2bCMaU4JRSF6Rys8tiFkclLxwGjMiZtG7QZiGMlyGNS5j06GfNL0I7UxDBYSMozKfIXNnawgTYEAxlL4Pe03t03lVy66OGKJ8ErOIF49/hgfoEsI4gaDM92HtoJ1v8ESmWpeA3R7FYcrJEu4UWROEge+qCfh8U6V7BhOy7hMuCbrmCp1+CO/ouM1Gh0yBi78p0EFxtkYeUJhCKwxuBtP1Kkqi6MXXB18ex4Mnn7cdZOFmBuBQORPkpd0ej0iZk2h7ox9HiC426GHTWKK499h5Yt3ukG0GXuSkqTkfNq5mt58v2syEzuQFTZPX4M58mVvfvlwN7p+vzc3m4gKc9lNY/zpm63X1ET0/zRbdQXirv1hmY/6ZP49uRtzc+A/42rup4WcvueuTzUb3q19u+6MXzzG+fhuZZPzIB/Ofw/+WV2n/+2N90/82ee7C5t7uzchzdTG/mTfzcA7wF2X7N++n45+Axf6oaNDrlLqySkh83MyUhATlSabqJqr5cAFUaC11S/UON5XtjgSurOH2bFZr9ZrdrTe69nWt0Xaujapt1BoNs2t4Vr1xvW8yWxRHENsxnRDlS7XcLW0+BogjlwMNgJWXcSo7Hdc+sNhBApV6dCgfQUw5jGLZnjlZ2AlzGEqnqRkw4xWMn3GystZa6S4WAzpg3kQAK/bkRqEnDwGThIBq3IrXXBKbC5mLBVqmIjQrS1ShkMrWzlSXdS2nXtU5iZIQFFI9ioM0hEoyS7LM6Hz7b5UR5pl0eD3KXtu7cR1/26dA6gREKXAVyxXIMsKJ4WLtA3kT8MXJIbQ376UBUQ9L5lMwgrdIip9+00TxI+dIp+/593vQue4f3P3R9n+Yf2mg/w/O+//qXNby7U39g3zqx6XMHQVLcuB2v3XI+SU7XmtPxAUyK4tKulymGfccx9aZNK8rEuiGpfuAU9mTN6N4DlTPrehnDcAc+JHzXF6EmIoZ9QUSEMm3UsqOZ2w8PnC18fTkI1+fu04VXMrUCViLU7J2KLc1hfjDhQ67WOlJ8b38W8Us+F2xE7YO/Mg45cIjCJ2qkxp+m3d4gWNplsi2HbND46cMnHJeFOZJzrEISahxKuD9LyXVj5sawjhOqeh1tExwOCMynGKTgPtb6Y2ZbAzleyn5/8W0TDIKYJDbLCeZfbVeuOoJ0OnBnNk5PR41Xr1rV9uepE+tMGra3XY7T0oBXeuN+K3kIE/HHG/9Ag==</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77774</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="2c21a03f-dfa7-43f7-ae49-e9c66997d59a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ac0febf7-6361-4457-a684-f3071ce36370"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = true;
}
else
{
	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = true;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="80af412d-42ee-4a01-a110-f29cc2c565a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
//tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "null") {
	tC.setPropertyValue("counter","1");
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == null || tC.getPropertyValue("expectErrTypeStreamRenew") == "null") {
	tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="02adf52b-9a3b-418b-aa0e-6dd6b0fcde2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID = hextoraw('$sh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="a85bc81d-f97a-447f-a639-5ccf64fe6bb7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="86bf1a15-6135-4b18-9141-50988c35d40f"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="${#TestCase#streamhandleFULL}">       
 <StreamClientNickname>xyz</StreamClientNickname>
<RequestingUserID>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</RequestingUserID>       
<RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>           
<ExpirationDateTime>${#Project#ExpirationDateTime}</ExpirationDateTime>    
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for PUT" id="277d6423-8b8b-4008-980f-4eecdf893809"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamRenew" id="392d26d3-0f8d-4901-888f-023093357a1b" disabled="true"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamRenew" mediaType="application/xml" sslKeystore="LLASP_concat.pem" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="STREAM" value="${#TestCase#streamhandleFULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for GET" id="e5349c8e-88ef-4573-967c-769d4977c12f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="9f1ac606-c6c3-470e-a3f2-c23d215546aa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="ee7d112c-da82-44c7-8f0b-e1da814ff0cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;


switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect[" + tC.getPropertyValue("streamhandleFULL") + "]";
		assert recvStreamHandle == "urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle");
		//RequestingUserID
		if(tC.getPropertyValue("nodetype") == "llpcs" || tC.getPropertyValue("nodetype") == "dlpcs")
		{
			tC.setPropertyValue("assertionUserIdFULL","");
		}
		log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
		if(tC.getPropertyValue("nodetype") == "dlp"){
		assert RequestingUserID == "urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId");
		}
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == "urn:dece:rightstokenid:org:dece:"+tC.getPropertyValue("rightstokenid");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (Status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBUpdatedBy") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("expectDBUpdatedBy");

		/*
		*  History validation
		*/
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.Prior.size();

//		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

//		for (int i = 0; i &lt; rCnt; i++) {
//			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
//			String hexpectModifiedBy = urnnode + tC.getPropertyValue("nodeid");
//			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
//			assert hrecvModifiedBy == hexpectModifiedBy;
//
//			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
//			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
//			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
//			if (hexpectStatus == "active") {
//				assert hrecvStatus == "urn:dece:type:status:active";
//			} else {
//				assert hrecvStatus == "urn:dece:type:status:deleted";
//			}
//			
//			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
//			switch (hexpectStatus) {
//				case "active": hexpectDescription = "active"; break;
//				case "deleted": hexpectDescription = "deleted"; break;
//				default: hexpectDescription = "deleted"; break;
//			}
//			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
//			assert hrecvDescription == hexpectDescription;
//		}
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return Attributes" id="f64d4827-f3d4-47ac-9068-43dbd475cf07"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cnt = tC.getPropertyValue("counter");
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	callTC.setPropertyValue("expectDBUpdatedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} else {
	callTC.setPropertyValue("expectDBUpdatedBy_" + cnt,null);
	callTC.setPropertyValue("expectDBUpdatedBy",null);
}
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZ/b9o8EP4qKPuzgvxmSVSQoEDHSn+MsJbtn8o4DpglNtgOZP30rx0gBUr7sk1CQr6c7567e3x3lxykiRW0OEdMYEoqeZoQHhTShpYxElDAMQ8ISBEPBAzC1u0gsGpGAHZXtEq/09CebceOoTGxq27sTKrOxHKrk7oNq9D0nciPfM/wgVTlPEN9wgUgoqFZhulWDfmrj0wjcPzA8mueb/zUKo+IcWlbqtQMbQsq5w1tJsQi0PX1el1b2zXKprplGKY+vh2EcIZSoDUvNxEVjlhzqw9rEYIoSWAN0lS/1A90LiMehHhKgMgY2vqK3vNl6IavS52I4+knrbyLoj6JaXG8AoQSDEGCX4DKzy0SMxpVWsmUMixm6btBmIYyXEW5SppDPmn6IbQzDR0gZBxU+QyYW1tDFCOGCESV78N+Q/t0XtWKqyMGCI8pS/nh8c/wILJCCV2gqMp3YW2hnW/wRKaalwgGfQKTjOMVulNkXQCI+LaaCJ5vqvLAUIzzAeaSoDlX6PR9eEfHTTY6eIq4+JsC7RVnY+QRJBlqAu/+8fPVPP8Cv9ov0c2TePlV7wzAWP+6bhQA9pULQVnazfGIlCWJNjfSVT5w+3R2cx0abpfBAcO9LvtGE7a6tXru94zd2T9HP3i3bV+AeGBfvExyl+ce6hnm53TmxeHjepmswq93Trvt6VhmrHtD4/b4tnOf9rz5OM+X4wfjhyDuTWh+YbfD7uy+1baih3geLXNv+fRlNnevr8c5sB8T3Rv3htcvF99GnNPFjf3taSraw/jpYvrYazXKcPbwH8p2bz7MJnMExe6oaNDvVHqySkB83MyUBEfVuFANFqr5cIGI0JrqluodQSbbHY4CWcPN2XTrnu36tmN2O4bjdbuGaxuu75s9o+W7XXPXZDYojiBeURJj5Uu13A1tPgYI04AjEiFWXdFMdjqufWCxAwSo9MlQPgJKOBpR2Z7rBibWfEXBZPFizjx37S6X8zSljla5o+Ke3LNWLBA77Mn2QU8eIogXGKnGrXjNJbG5kLlYglUmErO2AjWCMtnameqygeV4rs5xukiQQqqnNMoSVFvMFkVmdL75t6oA8kI67I6K1/ZuXMffdimQOhFWClzF0kayjOjEcDF3gbwJuH5yCO3Mt7IIq4cl8ykYhhskh59eaaL4UXKkM2iFDzvQpe4f3H2+Cp/NvzQw+Afng391Lmv59qb+QT7141KWjqIV3nO72zrk/JIdr7kj4hKYtWUtW62ygnuOY+tMmtcVCXTD0kMEM9mTf4/oL0T00op+1gAsgR85L+WHEDMxI6EAAqXyrVSK4xkbT4i42nj68pHn565TBy5l6gTKxSnZVSK3NYX4w4UOBlDpSfGD/FtTFr1W7IStPT8yTrnwCEym6qSG3+93eAGpNItl26Zs3/gpA6ecHwrLJJdYhCTUJBPo/S8V1Y8bGoCQZkT0O1oh2J8RBU7xe4GCV6U3ZooxVO6l+P8X0youKACR3GY5Luyr9SJQT4BM9+bM1unxqHEcv+VcdWyr63nFqPm8GTVevdctk3KArvlG/Fayl6djjjf/Aw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1568449A4CD32E88E05307991F0A86FE</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1568359341ED048EE05305991F0A95E1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">156974E4EE3B463FE05305991F0A84ED</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:156974E4EE3B463FE05305991F0A84ED</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Linked Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3A850865B4394E7E865393F45897AE03</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3A850865B4394E7E865393F45897AE03</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_36100 - StreamView - LLP - API invocation following StreamRenew - 200 OK_FLAKY</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150506_042135</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:3A850865B4394E7E865393F45897AE03" xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <StreamClientNickname>xyz</StreamClientNickname>
   <RequestingUserID>urn:dece:userid:org:dece:1568359341ED048EE05305991F0A95E1</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:156974E4EE3B463FE05305991F0A84ED</RightsTokenID>
   <ExpirationDateTime>2015-05-06T19:45:39.899Z</ExpirationDateTime>
   <SubDividedGeolocation Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress" ViaProxy="urn:dece:type:true">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreationDate="2015-05-06T12:02:21.839Z" CreatedBy="urn:dece:org:org:dece:LLASP" ModificationDate="2015-05-06T12:13:03.501Z" ModifiedBy="urn:dece:org:org:dece:LLASP">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>77777</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AC9E419060152889CE0401F0A05994440</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADDF10E5C8980679DE0401F0A059924F5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1568449A4CD32E88E05307991F0A86FE</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1568359341ED048EE05305991F0A95E1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value>2015-05-06T12:02:21.839Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value>2015-05-06T19:45:39.899Z</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>156982D024A7729DE05307991F0A04B8</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>3A850865B4394E7E865393F45897AE03</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>156974E4EE3B463FE05305991F0A84ED</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>1568449A4CD42E88E05307991F0A86FE</ACCOUNT_OID>
      <CREATED_BY_USER_OID>1568359341EE048EE05305991F0A95E1</CREATED_BY_USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-05-06 18:02:21.982</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-05-06 12:02:21.982</CREATED_DATE>
      <CREATED_BY_NODE_OID>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b9d9c47a-56ef-4686-a252-fd612cbc36ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89baa875-8ac6-4b39-9081-2fcdf4818869</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>02adf52b-9a3b-418b-aa0e-6dd6b0fcde2a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Setup" disabled="true" id="ba0bcaef-3721-4c20-a13e-4f84b4589f20"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" id="708a0bbb-b739-4409-b041-49a551684a9e"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="4dcfc122-d0e9-474d-8820-6f8d91ff394b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>${#Project#NodeValueRetailer}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>${#Project#Node_OID}</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="160aaf4d-490b-4800-95f7-4bf17fcf6bfa"><con:settings/><con:testStep type="datagen" name="AccName" id="76548248-984e-4375-ab41-c509b90d216b"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Ashwin_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="eb7e1775-e20d-4672-b179-a95de292222d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete" searchProperties="true" id="b576ade0-b4f8-4de1-a27e-30ee24faeb65"><con:settings/><con:testStep type="jdbc" name="Delete_Account" id="23d21add-4db9-42c2-a565-57c63b76d25a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
accountid ACCOUNT.ACCOUNT_OID%TYPE;
newsfeedid NEWSFEED_EVENT.NEWSFEED_EVENT_OID%TYPE;
BEGIN
select ACCOUNT_OID into accountid from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}';
--select NEWSFEED_EVENT_OID into newsfeedid from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from RIGHTS_LOCKER where ACCOUNT_OID = accountid;
delete from NODE_ACCOUNT where ACCOUNT_OID = accountid;
delete from DRM_DOMAIN where ACCOUNT_OID = accountid;
delete from ACCOUNT_STATUS_HISTORY where ACCOUNT_OID = accountid;
--delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID = newsfeedid;
--delete from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from ACCOUNT where ACCOUNT_OID = accountid;
END;</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ACCID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="f974a2c3-990c-419f-be31-09721576ece4"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="fdedb0a8-e9bd-4dda-92a6-64da0d66646d"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="2efc83e3-91cc-4689-a85c-84e9288aed2c"><con:settings/><con:testStep type="datagen" name="UserName" id="be6ea06f-e771-422c-bdf6-6e07746ef991"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "stream_view_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="02013601-b0e5-4541-8c7d-2e25c3cdf5cf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="a7028dba-b7f2-4a03-b3e2-9c0be6f1913a"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="4c9b5307-bad4-4c51-a5ec-c99aa9453829"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="8abb9e5e-1f60-42b9-921b-4afa8d560e5d"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="0dc5561e-f204-46ea-a7b6-3f279cb82f1a"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup for streams" searchProperties="true" id="789da26f-1af1-4a35-b865-7d03d68518bc"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="244d80ad-6cbd-474a-9583-b9e36e4eb771"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:lasp:linked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>C381F9C22E4A41E6E0401F0A0599030B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="End_To_End" disabled="true" id="84b64276-4776-45ff-a3ef-989c7ce9dbea"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountNameGeneration" searchProperties="true" id="7898fa08-8d03-418e-8291-85dc4fdb16d1"><con:settings/><con:testStep type="calltestcase" name="AccName" id="0fcdbba0-bc63-41e7-aba8-f70a6a7bd17d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>160aaf4d-490b-4800-95f7-4bf17fcf6bfa</con:targetTestCase><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name></con:property><con:property><con:name>sName</con:name></con:property></con:properties><con:returnProperties><con:entry>synced</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="34206e01-3cea-410b-a066-1c398b693ab1"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set pem" id="971348df-958a-418b-a3aa-838c46cb8226"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="ddcc75f8-4bfb-4f8b-a237-78a6f434a5e2"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="03ecb40c-96be-49ac-b978-5200b11706c0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="04c06d20-fde1-4833-83db-5048b59440c8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5b9dddb3-6670-48d6-a5d5-26893725708b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def nodeacc = context.expand( '${#Project#NODEACCID}' )
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode"))
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 3);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
     else
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 1);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39da0c46-7f38-4527-b6be-af58fbc91aba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf0fa3e3-b1e7-4bf9-9635-da2c55ceeed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0696f15b-f3ce-463e-b03b-33fc4c9d061d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserNameGeneration" searchProperties="true" id="aa1fcac8-e79b-41b6-8d28-44bd5a3dcf0b"><con:settings/><con:testStep type="groovy" name="SetCounter" id="332fb102-24d9-4a12-a8ea-cdd03be71931"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("UserNameCounter","1");
testCase.setPropertyValue("LoopUntil","6");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="74d4a552-1569-4631-8c62-215a838e1100"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>2efc83e3-91cc-4689-a85c-84e9288aed2c</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="860186a4-5fb8-4e67-adae-448a8be84bec"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="SetUserNames" id="f33b4e44-5593-4e55-8f97-4b5ee2ec6b85"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def UserName = testProject.getPropertyValue("UserName");

def count = testCase.getPropertyValue("UserNameCounter").toInteger();

if(count == 1)
{
	testProject.setPropertyValue("UserName_FAU1",UserName);
	log.info "==============="
}
if(count == 2)
{
	testProject.setPropertyValue("UserName_SAU1",UserName);
	log.info "==============="
}
if(count == 3)
{
	testProject.setPropertyValue("UserName_BAU1",UserName);
	log.info "==============="
}
if(count == 4)
{
	testProject.setPropertyValue("UserName_FAU2",UserName);
	log.info "==============="
}
if(count == 5)
{
	testProject.setPropertyValue("UserName_SAU2",UserName);
	log.info "==============="
}
if(count == 6)
{
	testProject.setPropertyValue("UserName_BAU2",UserName);
	log.info "==============="
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop again if necessary" id="3f0e3907-ae31-4088-ad94-bf6346520192"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def counter = testCase.getPropertyValue("UserNameCounter").toInteger();
def loopuntil = testCase.getPropertyValue("LoopUntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("UserNameCounter",counter.toString());
    testRunner.gotoStepByName("Get_UserName");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="5b321eda-8146-4a09-9c21-c2ba7f33f522"><con:settings/><con:testStep type="groovy" name="Set properties from calling test case" id="f806f7a3-f9ec-475e-a300-e01e940a4cae"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="beacd172-de44-4f93-8fa7-41893ed94a17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="2fd1372c-d862-43d5-bab1-43da11f00061"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>fau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>${#Project#primaryemail}</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
<!-- <DateOfBirth> depricated </DateOfBirth> -->       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="8a159699-2507-4401-a119-23f1c0dd0a73"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="58b4826e-6216-4d61-82fc-8f9e987b3a18"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();


     if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
    	tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	tP.setPropertyValue("USERIDFULL",userid);
     }
     else
     {
     assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
    	tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	tP.setPropertyValue("USERIDFULL",userid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:1578A8F35CA01574E05307991F0ACFCC/User/urn:dece:userid:org:dece:157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Standard" searchProperties="true" id="d7977a23-0121-477e-9300-e6ad038315f6"><con:settings/><con:testStep type="groovy" name="Set properties for User" id="a1002601-dca2-4047-92be-54003508fdd9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="f0ce5df5-5a5a-4732-bab4-6414a6b9c964"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="5e47a4f9-3dba-44c6-9551-9adafccdc335"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>sau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->      <LegalGuardian>${#TestCase#NODEUSERIDDecoded}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5fa9039e-5181-4f54-bf65-197fe5fbf8d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="dabb6c91-33cc-4c17-9c52-de22c9f822ae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
     else
     {
     assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:EBFDB718ADDEEB18E0401F0A059963FF/User/urn:dece:userid:org:dece:EBFDC8E492EC2259E0401F0A05991888</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ashwin_user_create_20131125_024337</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB93D9108325E854E0401F0A0799736D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E022B116218D0CE7E0401F0A07994C96</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser" searchProperties="true" id="665242b1-3814-490a-a04c-3082e712ed9c"><con:settings/><con:testStep type="groovy" name="Set pem" id="e3af359a-3bac-45d4-b2bf-5b8751b57078"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="efd20bd0-72c5-4a6e-8bcd-bc2c504fb24e"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="3b30b021-a5b3-4c8a-940e-b38307732d6c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="9e3a75ba-fe97-4198-9b89-c918e9cc4704"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="c1de93f7-ed8d-44a7-9dc8-e20b3150f9b7"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="b7a482ec-5eb8-4b95-97d7-10682a04e519"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="6ee37735-01ff-4285-967d-da7572215eb4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="12bbb26a-6f29-4151-99cc-89a2294922c4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForStandardUser" searchProperties="true" id="0c82e880-3893-4849-b3fc-e4b3cc21856a"><con:settings/><con:testStep type="groovy" name="Set pem" id="fb018d61-a80e-43a3-b7db-be1314509d1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="0c063e0b-cd82-48d5-a850-23ca43f27914"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="8ca63cec-ca90-4805-9658-4c4fb864b8d6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="7b7d368f-7ce8-4035-8e1e-812a59019615"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="b6150e27-26a3-4b7b-a8cb-312cd1d066b5"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="0aafd211-88d4-4eff-bb1d-81bf1b273027"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="6760e506-701d-4344-96c8-3b4bf90e6ef6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="a02cb02e-6fd0-4188-92b2-cd65d780b00a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D77DD7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95c44820-dc3d-41b1-aaeb-046ed883cdd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bebf0d96-3664-4297-8a60-39c898da110e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae07363f-1c5d-48de-93f1-d5ae9ad79a72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="STS" searchProperties="true" id="80c1f431-3da6-46e5-baa0-19823fc4e1c5" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8936266f-5f36-4d04-b5ed-12b27dc7270a"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
	def audienceList = URLEncoder.encode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLEncoder.encode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}
else
{
	def audienceList = URLDecoder.decode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLDecoder.decode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1" id="79b6c7c5-dce2-4624-8dbc-10a86bc698ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STS - POST");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="a2eaaee4-b0eb-47d5-a119-6a0a859d6098"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_CS_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#UserName}</Username> 
  <Password>${#TestCase#Password}</Password> 
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="fa7995e8-03c8-4191-840e-4453f03b89e4"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Rerun STS Post"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep = testCase.getTestStepByName("STS - POST");

log.info "#########################IN RERUN ######################" + tStep.getName();
String status = tStep.httpRequest.response.responseHeaders["#status#"]; 


if(!status.contains("201 Created"))
{
	log.info "STS Post not Sucessful Retrying...!";
	testRunner.runTestStepByName(tStep.getName());
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="7ba76dd8-552a-4e69-a8bb-ddd90d006614">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="fb855bfd-5656-42cd-9be0-415a23b33f2c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def major = tP.getPropertyValue("VersionMajor");
def minor = tP.getPropertyValue("VersionMinor");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS" id="0f395208-4658-4d3a-9dc2-76563009a726"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="DLASP_CS_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="19cecdc9-e9b3-4727-a348-716182fe1d1d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="80c7e1df-8c95-4b08-8485-ebfd499cc2bd"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="f77c9742-613e-4b9c-bd38-adabc1ecc144"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

if(tP.getPropertyValue("count") != "1"){
if (expectErrType == "" || expectErrType == "SUCCESS") {
                if (XMLbody.length() > 0) {
                                def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

                                                // Verify response sizes...
                                                assert myXML.size() == 1;

                                                /*
                                                String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
                                                */
                                                String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Subject"."saml2:NameID";
                                                
                                                this.log.info "accountId [$accountId]";
                                                this.log.info "userId [$userId]";

                                                tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
                                                tC.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
                                                tC.setPropertyValue("assertionAccountIdFULL",accountId);
                                                tC.setPropertyValue("assertionUserIdFULL",userId);
                                                tP.setPropertyValue("NODEACCOUNTID",accountId);
                                                tP.setPropertyValue("NODEUSERID",userId);
                                                def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID"); 
                                                int lastColon = nodeaccountid.lastIndexOf(':');
                                                def accountid = nodeaccountid.substring(lastColon + 1);
                                                tP.setPropertyValue("ACCOUNTID",accountid);
                                                def nodeuserid = tP.getPropertyValue("NODEUSERID"); 
                                                int lastSlash = nodeuserid.lastIndexOf(':');
                                                def userid = nodeuserid.substring(lastSlash + 1);
                                                tP.setPropertyValue("USERID",userid);
									     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
										{
											def nodeacctid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
										     tP.setPropertyValue("NODEACCOUNTID",nodeacctid);
										     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
										else
										{
											def nodeaccid = tP.getPropertyValue("NODEACCOUNTID");
										     tP.setPropertyValue("NODEACCOUNTID",nodeaccid);
										     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
                                                this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
                                                this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
                } else {
                                return false;
                }
}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrb+I6EP0rKPuxCnlACEQFiYbSRWW7XUK7235ZGWcAbxMntZ0A++uvHSAllPZyr4SEPBmfOfPwsS85iiPb63MOTJCE1tZxRLlXWLtaxqiXIE64R1EM3BPYC/rfxp5dNz2036LVRoOu9ruNwhBQ29Fxw7X1ZtN19HYbOrrbArfptOa26XSkK+cZjCgXiIquZpuWo5vy507Nlmc6ntOqW1b7Was9AuMSW7rUTW1Has272lKI1DOM1WpVXzXqCVsYtmlaxq9v4wAvIUZa73KbURGI9Xb+uB4ChijCdZzExqVR8bkMuReQBUUiY7CLFX4UyzTMjiF9Qk4WX7RyL4QjOk+KpY9oQglGEfmLVH2+gVgmYa0fLRJGxDL+MAnLVMA6rLGOrSb9ohlVamcCVRgyjnS+RNYOawJzYEAx1B4mo6725byuFVunDFE+T1jMq8v/xgdoDlGSQqjzfVo7aucDnqhU7xKwN6I4yjjJ4U4Na4ow8F03AZ8PVbtnMCfrMeFyQNdcsTMO6R0tt9UYkAVw8X8adNCcLcgjijLoBS+d8MK+YRPHH/LnGzdg/sPMJ31+xbsFgUPnwlC2drs8GspyiLY7nn/8aP0Sj7772Mzv7peDIBgQI+gMp+4M9de5+xyNN62/fnN1kw9n7RVn0/HLqkFao8e1++Dfj3BI858vk6eGYcWtmzafLjckeWhP2aZjUzoQk7vlT/sqzm6epsHm4vb6xfzjpqk/eLJfuQOZP766xUM/vv7zeutnTw+rC/I1tVrX01/DR8c3hzdfb1nCg5+zC7zqlukc8K/a9mc+yGZ/AIv9Uo3BaFAbyi4h8bmYKQsJ9Xnh6qVKfLgAKrSe2qW0w8uk3JHQkz3cri3Hbbeafefabg3s6+Hw2nQaptvpWEOzb7avrL3IbFkcUfQTOicqlpLc7dh8ThDHHgcaAtPzJJNKx7VPEAdIoNqITuQhSCiHaSLl2aIstR2+3DRy0bSI4zReO27SnoFWu0vEd/qd9ecCWFWTOxVNngAmKQEl3GquuRxsLmQtXlGeiciq56hOIZPSzpTKenaz7RicxGkEiqkRJ2EWQT1dpkVlDL79t3WEeWEdjPvB/W8/+G0Xh+7D9I6/7SshfUKiHLhK6QpkN+HEHdPc5/Mu79bJu2gP389Cos6XLKtgBG+ZVD+9TYsak3JU3hLbMy83HBsq4MZxXmW8MCe4HPvy8paaLlWgt2/OK7Lqr/Usz7OiH81mw2AS3lAVMUzbCABnUqc20+QFqFGiGGddCiXxo+ClvUoxE0saCCQglvNTK5ZnvAIC4OoVMJKDvz73iVEJKUsnYC1O2fxIvmAU408fOdjDyk+a7+XfKmHhW8dOYB3EkXnKR4AgdKFW6kLYfDAeOJGwREpZwg7BTwGcCl41lkUuuQg5ULNMwMdfakqjuhrCOMmoGA20wnComwVPsUnBe3N6B1NIc/lWI//+WNNJMQJYapD0L/DVleupI0AXB9q7C/qB/F59Jr9Vdr135veWgzodz3jvHw==</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_8addea85-c372-4475-88e9-76e7456f2059</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_8addea85-c372-4475-88e9-76e7456f2059</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_8addea85-c372-4475-88e9-76e7456f2059</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_8addea85-c372-4475-88e9-76e7456f2059" IssueInstant="2015-05-07T06:05:56.118Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_8addea85-c372-4475-88e9-76e7456f2059"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>Sk9d+2GrR5CFsZG7SrCUbCiAsBs=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>ZQQ6XtVC7V4vNPhDSSDi/S9FT7baAxv7ZlLy6zC4wGvFb8wsrTLkw3i6IVx7UCPIcdnvWkRY3/1m6G8sThyioU8Try92nnDtRNhW2BmuGYTSy+KEk0j7ppCDY2qs5euCLBKcFCmEjqKCuYUw+iHp16ETXFV5C0FGHKrosSWb+cw=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:157864A5E26D2EFFE05307991F0A08B1</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_1nrp25shy3vt41i553q97o8be" NotOnOrAfter="2015-05-07T09:05:56.118Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/DLASP_CS_2"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-05-07T06:05:46.118Z" NotOnOrAfter="2016-05-07T06:05:56.118Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_2</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_8addea85-c372-4475-88e9-76e7456f2059</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-05-07T06:05:56.118Z" SessionIndex="_8addea85-c372-4475-88e9-76e7456f2059"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:157864A5E26B2EFFE05307991F0A08B1</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Basic" searchProperties="true" id="d1cbd867-d4e0-4351-aa07-e1b12bb211c4"><con:settings/><con:testStep type="groovy" name="Set properties for user" id="e111b12d-c4ee-4374-85fe-fa5725042ebb"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="2aaa2454-63a8-416c-b6e8-3c4fa5527f80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="89b8cab5-15c9-4de2-a608-dc440caf1e3a"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>bau</SurName>
	</Name>	
	
  <!--<DisplayImage>
        <DisplayImageData>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
ral9qbL/2Q==</DisplayImageData>-->
<!--DisplayImageData>jfdkjdkfgdgd</DisplayImageData-->
<!--DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=avatar&amp;nodeId=urn:dece:org:org:dece:500500&amp;nodeUserId=urn:dece:userid:org:dece:B2F5D0FFF1B7BEC4E0401F0A0599368E</DisplayImageURL-->
<!--DisplayImageURL>www.yahoo1.com</DisplayImageURL-->
    <!--</DisplayImage>-->
<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->       <LegalGuardian>urn:dece:userid:org:dece:${#Project#USERIDFULL}</LegalGuardian>
       <Credentials> 

               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="9b29a95a-b0a3-4fa2-98f3-0c82af2fd793"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="863ec339-847c-456a-921b-710a7f960c24"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
	else
	{
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:EBFDB718ADDEEB18E0401F0A059963FF/User/urn:dece:userid:org:dece:EBFDC8EC23CDE252E0401F0A05991922</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ashwin_user_create_20131125_024338</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB8F0F6588921CE6E0401F0A05991E36</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E022B116218D0CE7E0401F0A07994C96</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForBasicUser" searchProperties="true" id="0883430f-2867-4987-aba0-e36b030c2586"><con:settings/><con:testStep type="groovy" name="Set pem" id="5c1dbcaf-0dfc-4833-b396-1582add7dae0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_COPPA");
//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="4871d070-3d9c-4c03-aaf3-476fa2d1ddbd"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

def testStep1 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" )
if( testStep1.disabled )
  testStep1.disabled = false;

def testStep2 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" )
if( testStep2.disabled )
  testStep2.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="d0a84031-f29c-41ef-8e46-931586f8f1b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
	
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="03354d16-5a63-493e-95a9-c17dc037c8ed"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}CLGAttestation"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="4428b2a4-5b79-493a-906d-208397d1c273"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_COPPA" id="8f4edb61-7171-4a30-a410-c6ecf104a7a8"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_COPPA" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}GeoPrivacyAssent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="6b007200-66bf-4506-a7c2-7f7a0e656d81"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="1c0bbcd4-aa5c-42cf-b5b3-a7e1e1c1a764" disabled="true"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="24556e88-f381-426b-8225-9821450ab48f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="3403ca3f-dcdf-451d-be1d-a254da214c39"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = false;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D789E7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538eac1e-267d-47ba-b194-f9953171618c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bac177f5-5586-4318-b970-cc997f810ec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2dc8a3b-c62a-4c6a-a101-634c57a370ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41774e16-4267-4acd-bbcd-b821f3f16b23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="273a1c1d-bd58-4842-92d3-921e0983ee2f"><con:settings/><con:testStep type="groovy" name="Set Pem" id="932edae2-a7be-4fbd-a6e7-5c917693e807"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true" id="de43a3ce-9a68-4b57-8ea8-e775cdc143aa"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_CS_2</con:value></con:property><con:property><con:name>tName</con:name><con:value>StreamView</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser_without MAC" searchProperties="true" id="8eeed4cf-0382-4030-bde0-7477dfd6dbcc"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_2_concat.pem</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="e3cce595-1ca4-451b-9122-c2c35411bef9"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
if(tP.getPropertyValue("count") == "4")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid40"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist4"));
}
if(tP.getPropertyValue("count") == "5")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid50"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist5"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E_without_MAC" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="a45c6243-8581-4882-975d-e8be2f4ad02a"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
	tP.setPropertyValue("cid","urn:dece:cid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));







</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser_without MAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_view_20150506_061547</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>AccountDisplayName</con:name><con:value>Ashwin_Acc_Create_20150507_113737</con:value></con:property><con:property><con:name>ACCOUNTID</con:name><con:value>157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>ACCOUNTID_1</con:name><con:value>1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_241580697.txt</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing1@uvvutesting.biz</con:value></con:property><con:property><con:name>apid</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:534576800</con:value></con:property><con:property><con:name>APItestSuite</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist1</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP;</con:value></con:property><con:property><con:name>audiencelist2</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist3</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist4</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist5</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certspath</con:name><con:value>C:\certificates\</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>count</con:name><con:value>3</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>ExpirationDateTime</con:name><con:value>2015-05-06T19:45:39.899Z</con:value></con:property><con:property><con:name>FLAKYSELECTOR</con:name><con:value>without_flaky</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>true</con:value></con:property><con:property><con:name>idempotentdelaymillisecs</con:name><con:value>60000</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>loop</con:name><con:value>3</con:value></con:property><con:property><con:name>microService</con:name><con:value>ON</con:value></con:property><con:property><con:name>NODEACCOUNTID</con:name><con:value>urn:dece:accountid:org:dece:157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>NODEACCOUNTID_1</con:name><con:value>urn:dece:accountid:org:dece:1578A8F35CA01574E05307991F0ACFCC</con:value></con:property><con:property><con:name>NODEACCOUNTID_2</con:name><con:value>urn:dece:accountid:org:dece:157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>NODEACCOUNTID_3</con:name><con:value>urn:dece:accountid:org:dece:157864A5E26B2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>NODEACCOUNTID_4</con:name><con:value>urn:dece:accountid:org:dece:EC39AB99C2717BBFE0401F0A05990C3A</con:value></con:property><con:property><con:name>NODEACCOUNTID_5</con:name><con:value>urn:dece:accountid:org:dece:EBFDDAFB6786F33DE0401F0A0799229D</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeoid10</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeoid11</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid12</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeoid13</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid14</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeoid20</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid21</con:name><con:value>3611</con:value></con:property><con:property><con:name>nodeoid30</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid31</con:name><con:value>3711</con:value></con:property><con:property><con:name>nodeoid40</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid50</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid51</con:name><con:value>3711</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_1</con:name><con:value>urn:dece:userid:org:dece:EBFDC8EC139DE252E0401F0A05991922</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_2</con:name><con:value>urn:dece:userid:org:dece:EBFDC8EC139AE252E0401F0A05991922</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_3</con:name><con:value>urn:dece:userid:org:dece:EBFDC8EC139BE252E0401F0A05991922</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_4</con:name><con:value>urn:dece:userid:org:dece:EBFDDAE33F5EA4AEE0401F0A079922A4</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_5</con:name><con:value>urn:dece:userid:org:dece:EBFDDAE33F5EA4AEE0401F0A079922A4</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBFDC8EC23CDE252E0401F0A05991922</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBFDC8EC23CAE252E0401F0A05991922</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBFDC8EC23CBE252E0401F0A05991922</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_4</con:name><con:value>urn:dece:userid:org:dece:EBFDD1CF6926645DE0401F0A07990D06</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_5</con:name><con:value>urn:dece:userid:org:dece:EBFDD1CF6926645DE0401F0A07990D06</con:value></con:property><con:property><con:name>NODEUSERIDFAU1</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE6BE4F3FBBA226D7E0401F0A07991B54</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_1</con:name><con:value>urn:dece:userid:org:dece:157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_2</con:name><con:value>urn:dece:userid:org:dece:157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_3</con:name><con:value>urn:dece:userid:org:dece:157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_4</con:name><con:value>urn:dece:userid:org:dece:EC39AB99C2737BBFE0401F0A05990C3A</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_5</con:name><con:value>urn:dece:userid:org:dece:EBFDDAFB6788F33DE0401F0A0799229D</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBFDC8F286A03E81E0401F0A0799736A</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBFDC8F2869D3E81E0401F0A0799736A</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBFDC8F2869E3E81E0401F0A0799736A</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_4</con:name><con:value>urn:dece:userid:org:dece:EBFDDAE34686A4AEE0401F0A079922A4</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_5</con:name><con:value>urn:dece:userid:org:dece:EBFDDAE34686A4AEE0401F0A079922A4</con:value></con:property><con:property><con:name>NODEUSERIDFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE022B116218D0CE7E0401F0A07994C96</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_1</con:name><con:value>urn:dece:userid:org:dece:EBFDC55D96B8914EE0401F0A059963F4</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_2</con:name><con:value>urn:dece:userid:org:dece:EBFDC55D96B5914EE0401F0A059963F4</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_3</con:name><con:value>urn:dece:userid:org:dece:EBFDC55D96B6914EE0401F0A059963F4</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_4</con:name><con:value>urn:dece:userid:org:dece:EBFDDAFB6D1FF33DE0401F0A0799229D</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_5</con:name><con:value>urn:dece:userid:org:dece:EBFDDAFB6D1FF33DE0401F0A0799229D</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBFDC8E492EC2259E0401F0A05991888</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBFDC8E492E92259E0401F0A05991888</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBFDC8E492EA2259E0401F0A05991888</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_4</con:name><con:value>urn:dece:userid:org:dece:EBFDDAFB73E5F33DE0401F0A0799229D</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_5</con:name><con:value>urn:dece:userid:org:dece:EBFDDAFB73E5F33DE0401F0A0799229D</con:value></con:property><con:property><con:name>Node_ID</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>primaryemail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>ProvisionHostName</con:name><con:value>https://qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>******</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_ReExport</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>off</con:value></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_7.8.2</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\StreamView</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>StreamView</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>pgentry</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>SAML</con:name><con:value>nVZrb+I6EP0rKPuxCnlACEQFiYbSRWW7XUK7235ZGWcAbxMntZ0A++uvHSAllPZyr4SEPBmfOfPwsS85iiPb63MOTJCE1tZxRLlXWLtaxqiXIE64R1EM3BPYC/rfxp5dNz2036LVRoOu9ruNwhBQ29Fxw7X1ZtN19HYbOrrbArfptOa26XSkK+cZjCgXiIquZpuWo5vy507Nlmc6ntOqW1b7Was9AuMSW7rUTW1Has272lKI1DOM1WpVXzXqCVsYtmlaxq9v4wAvIUZa73KbURGI9Xb+uB4ChijCdZzExqVR8bkMuReQBUUiY7CLFX4UyzTMjiF9Qk4WX7RyL4QjOk+KpY9oQglGEfmLVH2+gVgmYa0fLRJGxDL+MAnLVMA6rLGOrSb9ohlVamcCVRgyjnS+RNYOawJzYEAx1B4mo6725byuFVunDFE+T1jMq8v/xgdoDlGSQqjzfVo7aucDnqhU7xKwN6I4yjjJ4U4Na4ow8F03AZ8PVbtnMCfrMeFyQNdcsTMO6R0tt9UYkAVw8X8adNCcLcgjijLoBS+d8MK+YRPHH/LnGzdg/sPMJ31+xbsFgUPnwlC2drs8GspyiLY7nn/8aP0Sj7772Mzv7peDIBgQI+gMp+4M9de5+xyNN62/fnN1kw9n7RVn0/HLqkFao8e1++Dfj3BI858vk6eGYcWtmzafLjckeWhP2aZjUzoQk7vlT/sqzm6epsHm4vb6xfzjpqk/eLJfuQOZP766xUM/vv7zeutnTw+rC/I1tVrX01/DR8c3hzdfb1nCg5+zC7zqlukc8K/a9mc+yGZ/AIv9Uo3BaFAbyi4h8bmYKQsJ9Xnh6qVKfLgAKrSe2qW0w8uk3JHQkz3cri3Hbbeafefabg3s6+Hw2nQaptvpWEOzb7avrL3IbFkcUfQTOicqlpLc7dh8ThDHHgcaAtPzJJNKx7VPEAdIoNqITuQhSCiHaSLl2aIstR2+3DRy0bSI4zReO27SnoFWu0vEd/qd9ecCWFWTOxVNngAmKQEl3GquuRxsLmQtXlGeiciq56hOIZPSzpTKenaz7RicxGkEiqkRJ2EWQT1dpkVlDL79t3WEeWEdjPvB/W8/+G0Xh+7D9I6/7SshfUKiHLhK6QpkN+HEHdPc5/Mu79bJu2gP389Cos6XLKtgBG+ZVD+9TYsak3JU3hLbMy83HBsq4MZxXmW8MCe4HPvy8paaLlWgt2/OK7Lqr/Usz7OiH81mw2AS3lAVMUzbCABnUqc20+QFqFGiGGddCiXxo+ClvUoxE0saCCQglvNTK5ZnvAIC4OoVMJKDvz73iVEJKUsnYC1O2fxIvmAU408fOdjDyk+a7+XfKmHhW8dOYB3EkXnKR4AgdKFW6kLYfDAeOJGwREpZwg7BTwGcCl41lkUuuQg5ULNMwMdfakqjuhrCOMmoGA20wnComwVPsUnBe3N6B1NIc/lWI//+WNNJMQJYapD0L/DVleupI0AXB9q7C/qB/F59Jr9Vdr135veWgzodz3jvHw==</con:value></con:property><con:property><con:name>SAMLBAU1_1</con:name><con:value>pVZbc9o6EH7vr/C4jxnjC+ZiT2AGsGmgJCRAc+lLR8hrrMbIYMlA8usrmZgAITlpzwwzjNar3W8v+nbPGZrHlttiDFJOEqr0vIb6C6ZmGFTNUKsja6rZU9vWpoEz1ZwyBLZlBxWnEqpKj7EMepRxRHlDtQyzrJmmZlUmhuOatluxS7Wy+VNVbiFlwrRQKRmqspnHlLm524aapdRNECPMpWgOzOXYHbcuB67QdFGBSW2eb1HmDtNmxPnC1XVcCgBDHOMSTub6uX6gcx4wd0xmFPEshRefAWuoL3fX63VpXS4l6Uy3DMPQDUcXOgEjs69q80txGYIeDZPtuYNoQglGMXlGEtQl8CgJlFY8S1LCo/k7pk3dNKRpDTZYw6ZNv6r6q4Mc3SctHYBMGdJYhMzC2AhCSIFiUH6Meg316+cquL07SRFlYZLO2dH57yABXUGcLCDQWBFZge7zFk+kq3kO2O1RHGeMrOBKtskCYWDKdQoh2QwIE80XMCUvv7Jh4keKLgP8N2U51/exCuj6iex4ZAaM/0vN9uu1tXKL4gyak+EDD4dPEXr8eT/lQ7zqk45ezW6yIWvkEPaVt6B25X45HzfrrrdeLj0sb5aMBYNJlmYc99uTDC6qBrP46GxyX99ckbX1nfTvH75Vwuffo/t2+BCsvwG3hrcMBsSrPS+mRv86MKOBdfblrlL1y3b/Kerb/ezKmo9vHm8eO96db/vPZ/Vo8y1oDSfR2dlFz8m+P9D2MhzXw5vv6eMtRdNFtCTEAcv60b7z7m6/6PdRBZMLerFIk+ozM2sXl43XmPZjOBQWlDDOpr8B8+Io26PnKV1RL8Q/phcpIYEW5qruQnIU40C52pS3JLW4mSAgEriimNuz3+56nbrfMcuO51sVyzdsw+waLaPiOKZjWQUHbVEcQewkNCTSl2TZbf98DBDPXQY0gFRbJRmOgKkfWPQQR0qPjsTjSCiDSSJYvF5rOV3fqfm23el22pbh1ytmu+x0q51y2yl7qnKV8CEdpq2QQ3rA4KZ1wOAjwGRBQNK87HMmGp1xkZIlWmU8NksrVKKQiUGQSi52Lbte0RmZL2KQgPV5EmQxlBbRIk+Qzrb/loYwy6Ujf5K/v3fDO/5WZELoBEQqMBlLG0Q14cQosotA3gRsnxxZhflWFhD5zERaeUrwFsnhp9dukW2yaxVv0BpfF6B3un9x91dn/Mv8RwOD/2tA1OPtTf2DnOjH5dg5ClZkz20x0sWUEhzWLJppiUrLUrZaZXn71AzD0lNhXjd1o6aPAWeCZJ8mySNQfWdC/9SM26E+8ryTH+LLeETHHHGYi2ZX8uMnFpwxMLng9MRj3Xx2ezpwKfLGYcNPyTqx2IMk4g9XJexiqSfE1+JvnaTBa7lO2NrzI+IUWw0ndCZPcpo9vdMUOBFmiaDfJN03fsrAKeeHwl2Sd1i46KZpxuH9L4rk1YaKME4yynuSv4Rgn+tznPxpAe6r0hsz+Tx5WRA27N0F4f5yMBasO0fqTpf8t7JG8nbBoMo9JMfSUDdi3xXO6WxvtrwAPB4v7ZpZb3me77fN+v54qZa73V0CDyJpvhG/lezl9Pg9NP8A</con:value></con:property><con:property><con:name>SAMLBAU1_2</con:name><con:value>nVZbb6M6EH7vr0D0sSIYCLmgJhK5bbO9pU262/blyDFD4h4wFJtc+uvXkECTNO3pHilS5GE8883M588+5zgMTMflHBJBI6YMey31nxqgmmUbWKsSz9eqFkYaBlTVDKjj2hRsUjOmqjLkPIUh4wIz0VJNZFiaYWimPUFNx6g7ll2x7dqzqvyChMvQ0qWCVGUVBow7edqWmibMiTCn3GE4BO4I4ozd6ytHejq4wKS2zzco84RJey5E7Og6qXhAIAhIhUShfq7v+Zx73BnTGcMiTWCb0+Mtdbt3uVxWllYlSma6iRDSUVOXPh6ns1O1fVJsBm/I/Giz7mIWMUpwQN9wBuoaxDzyFDeYRQkV8/CT0IZuoCy0BiuiEaPKTlX9PUGO7puR9kAmHGt8jo0i2D34kAAjoDzcD1vq6fcmuNk7STDjfpSE/GD9d5CALSCIYvA0XlRWoPt+xCPtap8DcYaMBCmnC7jJaBJjAlwZJeDT1RXlknweV/LxKysuf7RgGZC/Gcu5votVQtePdKdHZ8DF/5nZ7rw2UX7hIIW2QBMeXbKX2vNdM+bctx5vyNXLffPmadnKIew6b0CV496uD8lacmu76fetNbIuGrOxfa3/bPAX2cYG9R79+Mfb+oq53Ucf+3fRML0eUUZdHl6mN9bzw1MzuRj6Nqr1Rt6gs5pe8aT2ND6Jzu7D6dk6EYPGY3MaXKKXu7duWIX57cPE64OYrhcry33g4esZ/VEfeXc3fmyNbu+eXqvdxQOfoLPrYP37DJ096v6JuPxpVscX4iLGo6Xb74+q/dZ7Tbs17BsLSRin0xcgolhm9Bj2lIGcFxZfy0tmoZ7m565OnGkUF8CE2s52ZdLipFKAqOfIYW7W/c6g1230u4bVdPumbfZRFRkD5CK72TSapllo0AbFAcRuxHya5cpUdsOfrwGS0OHAPEi0RZSSOXD1i4g9LLAyZPfycESMwySSKu6aNdvoDMzeoFvrIWT35CirjfqgarsNqdYNVbmJxC27TVxfQLKn4Ia5p+D3QGhMIZP5jOdcEp0L2ZJXvEhFYFQWuMIglRdBkmmxY1Ybts5pGAeQAdbDyEsDqMTzOG+Qzjf/poYJz615dwnPz+CnJR5+K7ohfTyaOfCsng7IicKR68gsivmk6NrBtVWEd1OPZkdNtlYklGyQ7H96Z0xGlZIu26oK2KX3oWEvsn5YVJnMW1BS8r68sKXeSzVoF2N5xZXXSrpYpPkg6giZeiLD64aO6voYSCrlaj2J/gWmlyH0b90WJeqDzKV9H18q5mwssIBQ0kbJl994KoyBZ0+FoaT96rvvkL2Usm8CVuKYrRvIF0WG+MtHB3FI5ifNI/m3jBLvfVxHYu3kkXXK94GgbJatsnth/QkxSCTDUilkUbIb/FiAY8n3jWWTSyxCsmmaCvj8i5IpVEvFhEQpE8Oemht2VTPHKdYxOO9OH8Lkyry9alf806v28fpqLPUrxGrpS//bWaM5XQio2Y2eY2mpK/lylMnZbEeltwAPhbpTNxpur9fpd4zGrlDXrMGgbOBeJe0P5o+WnZ4enof2Hw==</con:value></con:property><con:property><con:name>SAMLBAU1_3</con:name><con:value>nVZdb+I6EH3fXxFln4PtED4SFaRAYBdd2m2Bfr5cGccBbxOHxk5K76+/dmhSoLS3eyUk5Ml45szM8bHPBE5i2/OFoJlkKTcmQc/8O2oT18WUWFE3XFoOioiFw2Xbwg5qIRh1aLcbmcZEiJxOuJCYy55pQ9S0ELLs1gK6Hup6LbfRseGDadzQTKjQyqUBTWObxFx4ZdqemWfcS7FgwuM4ocKTxJv751NPeXq4wmT2z3Yoy4RZfy3lxgOANEJKaByTBkkTcAYOfM5C4c3ZimOZZ/Q1Zyh65uve5+fnxnOzkWYrYEMIAXSB8gkFW303+9+qzTSc8CjdrYeYp5wRHLN/sAZ1TuU6DQ0/XqUZk+vkg9AIIKhDW3RLLIIc/t0EbwlKdF+MdAAyE9gSa4yqYDMa0YxyQo3r2aRnfv/aBHd7FxnmIkqzRByt/wwS5QWN0w0NLVFVVqH7esQT7eqfUeJNOIlzwQp6oWmywYQK4zKjEdtOmVDkC4VRjt/YCvVjFcso+ZOxnIF9rAo6ONGdgK2okP9nZvvz2kW5wXFO+/Opf+u7L+MMbFvh49XjYHm/WsPioihWvRLCvvMOVD3u1/UxWWtuvW7aLJG73V6DKeg8SvYCBvP89tbh90Kw5uVIBsFy4hdJ+lc3v4njqyu8+H3/AOX5ZRg+3nUWszv0IP0ZKp5uKb3/trr+8RBOoXwgHTjx50S0rzh4cpoob4dz4sqn/PYHu7mL2j8Fye6CnyIe/CCX8nq8/R2MkiKBixe89lfdy/gCfuPnF9z2gb3x29NpcJH+NbvuvdW0X8OhsZKEeb78TYmslpoek8AYq3lh+bm8aAsLrah09TZao4SkXJp9vUtLi5crAWKhp4a5W48G42DYHQ1R0x2M7JY9gg5EY+jDlusi17YrDdqhOII4THnEdC6tsjv+fA6QJJ6gPKSZVaQ5WVNhfhIxwBIbEz5ThyPlgi5SpeKOH/gDOIIuCuwWcsaoORgOnUHLRw4cIjQwjYtU/uK/Mj+SNDtQcGQfKPiMErZhVMu85rlQRBdSteQJF7mMUaPADU5zdRFkWos92+m2gGDJJqYaMEjSMI9pY7PelA0CYvdvW5iI0krSNAs9IspD+GGNx9+qdiifkGkHoQsaUDVSeuI+cqpq3lXtnLy3qvB+HjJ91lRvZcbIDsnhpzfKaK7UfKnKqnDX7seGg9DguKo6W1gwUjO/vrKV4is96FeDecKNp0ZeFHk5ig6ENshUeIAA7IA5JbkSrJdF+kg5qEOAL90XNeqjzLX9EF8u13wusaSJIo5RLr/wWJhToR8LE0X87VdfIgcpVd8k3cpTtmGs3hQa8afPDuIR7afMl+rvWY3wbVwnYu3lUXWqF4JkfKVX+mZ4+YwZTElZmu0HPxXgVPJDY93kGotUbFrmkn78xdAa1TMxIWnO5SQwS8O+bpY45cuGem9O78KU2vx62W7Fh5ft3fl0rhQswWbty/7b2WIlXQg19Z1eYumZW/V2VMn5ak+nXwEeS/Wgg7p+EAxHA9Tdl+p2czyuG3hQSf+d+b1lr6fH56H/Lw==</con:value></con:property><con:property><con:name>SAMLBAU1_4</con:name><con:value>nVZdb+I6EH3fXxFlH6sQ5wtIVJCAwF12224LbdX2ZWWcIbgNDo0dPvrrrx2aFCjt7V4JFHkynjkzc3LsU47niR10OIdM0JRpw7Cl/5m4vuc1HDCwC47hoolr+ICJ4eDI94iNHN+a6tqQ8xyGjAvMREu3keUYlmXY3jXyAxsFtlNrNr0HXbuFjMvQ0qWGdG09TxgPirQtPc9YkGJOecDwHHggSDDunJ8F0jPAJSa9fbpFWSTM2jMhFoFpkloEBJKE1Eg6N0/NPZ/TiAdjGjMs8gxec0a8pb/uXa1WtZVTS7PYtBFCJvJN6RNxGn/X29/KzRAN2TTdrnuYpYwSnNAXrECdg5ilkdZJ4jSjYjb/ILRlWkiFNmBNDGK57LtuviUo0H0x0h7IjGODz7BVBhvBFDJgBLSb0bClf//aBLd7rzPM+DTN5vxg/XeQgC0hSRcQGbysrET39YhH2tU+BRIMGUlyTpdwoWiywAS4dpnBlK7PKJfki7hWjF9bc/mjJcuA/M1YTs1drBK6eaQ7IY2Bi/8zs915baPc4iSHds+ONqvH7v3jT9+bh3B/1x1F5IXaUb3ZKiDsOm9BVeN+XR+SteLW6yaaDEj/YtRE9Z/ogT+vBjFF+NaMMvCvJqtJM364muYQu/kP7yR7ery6D/1QsMZJQpxbhm6i5Qt+JOQxeXanvW893hS3J/z6HwsuG/275q/4KW30Ob26937+Nt2bQYyuG6PFjwb+Ffd+USfrOxthrZCdXZ4vz2NKhosTd/Zy9TBBF9/WM2/E13b94nyRcNbbpJun1ltNuzXsG0tJGOeTRyCiXCp6DENtIOeFxefyoiw0MqaFa7BQGsUFMKG31S4lLUEuBYhGgRzmdt3vDsKw03ecgdfvuJ1+H7nIGqAOavi+bXfcUoO2KA4g9lI2pSqXUtktfz4HSOYBBxZBZizTnMyA659EDLHA2pCN5MeRMg7XqVRx36rbqNe1rLDe68p/zx4gu2k3Hd8NG3XP07WLVPxmv7POVEC2p+CWvafgIyB0QUHJvOI5l0TnQrbkGS9zkVi1Ja4xyOVBkCktDmy36ZmczhcJKMDmPI3yBGqL2aJokMm3T9vAhBfWs7PO+PJPb/zHLj7DD6s8fFc2RPpEVDlwVVIX5FDhyIlklfV8UHf94OQqw3fyiKqvTXZXZJRskey/eiONYkvFmLfCSuTVhkPDXnDzsK4qX7SkpGJ/dWxL1Zea0C6H84xrz7V8ucyLcTQQss1MhjctEzXMMZBcitbmOn0CZlYhzC+dGRXqg8yVfR9fLmZsLLCAuSSPViy/cGEYA1cXhqEk//qrt5G9lLJvAtbimK2XyHuFQvzp1YMERPlJ86V8rNIsehvXkVg7eWSd8pYgKIvVSp0Omw+4QVIZlko5S7Pd4McCHEu+b6yaXGERkk2TXMDHbzSlUy0dE5LmTAxDvTDsameBU2wWELw5vQtT6PPrgbvmHx64d+dnY6lic6xXvvS/nQ1a0IWArs71AktLX8v7o0zO4h2tfgX4Xq4H3XqjWR84Trgv135YNXCvkvY783vLTk8Pv4f2vw==</con:value></con:property><con:property><con:name>SAMLBAU1_5</con:name><con:value>nVZdU+o8EL73V3Tq5ZmSfgClHWGmUlAUFAU96o0T0wDxtCk0KVR//UkKrYDo63lnmGGy3ew+u/vkSU4YjELT9RjDCScxVXp+U33WXyaBM6nVNKMOsVadvNQ0adFs6OBGAzaQFSBV6TGW4h5lHFLeVE3dsDTD0MzaWHdc03CrTkV36k+qco8TJkILl4quKlkUUubmaZtqmlA3howwl8IIM5cjd+QN+q7wdGGBSW2drFHmCZPWjPO5CwCqBBjhMEQVFEfgBOz4nATMHZEphTxN8CZnwJrqZu9qtaqsrEqcTIGp6zrQHSB8Akamx2rrqNiMgx6dxOt1G9KYEgRD8g4lqAHmszhQvHAaJ4TPoi9CG8DQZWgNZ0hDRpUeq+AjQY7uh5F2QCYMamwGjSLYLZ7gBFOElbvbXlM9/tkE13vHCaRsEicR21v/GyRMlziM5zjQWFFZge7nEQ+0q3WCkdujKEwZWeIrSZM5RJgpwwRPSNYnTJAvYEo+fiVj4kcKlmH0L2M5AdtYBXRwoDs+mWLG/8/Mtue1jnIPwxS3Vm2ScQPdG7/Px/PhohbXusCE7b5Vf2zmELad16DKcW/W+2QtubXZRB7PO+SVgf6dd3nzdo+fnh4njeni1/T0T7/2Pvt9e15PjPdr4gxvrNdl7+zi7ClzFr13br/VjOj94c88mL4/ZS+dfkaP2Pi6dnHjg8Ggf9Zw0mp6QdlF52Fqn4Hahc/nptO+5xa4ZQ+XKL4DLx5N2/5qxQe/+h27geojvRM9PYyct4f+zdFqhTI+GoyvuvTm/HLonM8GzY+atmvYNRaSMEpfXjHixVLSo+crXTEvyL+XF2khgTbJXd251CjGMeVqS+6S0uKmQoBI4Iphrted067vex3L6tY6XtXrdPSqbnR1T7cdxzS9aqFBaxR7ENsxnRCZS6rsmj/fA0SRyzANcKIt4xTNMFO/iehDDpUevRWHI6YMj2Oh4o5etzuOZdhWxz9tmF7D7vq2aYgi7HqjUfdV5Srm1/Q68SYcJzsKbpg7Cn6LEZkTLGVe8pwJojMuWrKAy5SHRmUJKxSn4iJIpBa7ZrVRA4xE8xBLwCCKgzTElflsnjcIsPW/qUHEcqvf90bD5/bo2cyP4ZdV7n8rGiJ8AiIdmCzpFIuh4gM3klXU86nu6sGbqwjvpQGRp010lycErZHsfvogjWRLyZiPwgrk5YZ9w05wsF9XmS9YElSyv7y2heoLTWgVw1nAyqKSLpdpPg5b102QiPDAALoNRhilQrTexvEfTEEZAvzozihR72Uu7bv4Uj6jIw45jgR5lHz5gwfDCDP5YOgJ8mc/fY3spBR94zjjh2ztULwrJOJvnx7IRdJPmIfibxUnwce4DsTayiPqFK8ETuhUruTt8PYFN1AswhIhZ3GyHfxQgEPJd41lk0ssXLDpJeX46y+K1KmmChGKU8p7Ug+EYVs7c5z8bY7dD6dPYXJ93ly4Gfvywn0Y9EdCxSKolr7kv501ktMFYVXe6zmWppqJ96NITqdbWr0B+Fmuu6d1u1HvWpa/K9eOXzZwp5LWJ/Nny1ZP989D6y8=</con:value></con:property><con:property><con:name>SAMLBAU2_1</con:name><con:value>pVZhc6I8EP5+v4KhHzsIQVRkqjMI+p6nba14Tvt+6cQQNHcQkAS0/fUXsFi1tm9774wzTpbN7rO7T3b3isEo1C2bMZxyElNp6Hbkx6De1JuBFihgYbYUow0WyqLZbiumDk0MAr3d8E1ZGjKW4SFlHFLekXUN1BUAFL0x09oWaFqNeq1uGP/K0hynTJgWKjVNlrZRSJlVuu3IWUqtGDLCLAojzCyOLM++HltC04IVJrl7tUNZOky7K84TS1VRzccIhyGqoThSr9QjnSufWR5ZUsizFL/49FlHfrm72Wxqm3otTpeqrmmaqrVVoeMzsryQu9+qy9gf0iDenR1IY0oQDMkzLEBdY76KfckOl3FK+Cp6xzRQgVaYVvAWKQgY9EJWXx2U6D5p6QhkyqDCVhBUxqY4wCmmCEs/p8OOfPG5Cu7uzlJIWRCnETs5fw0SpjkO4wT7Cqsiq9B93uKZdHWvMLKGFIUZIzm+KWiSQISZNElxQLZjwgT5fCaV5Ze2TPxIxTKMvlKWK/UQq4CunsmOS5aY8b+p2WG9dlbmMMxwd728m949OzdxpHE7gt/vY28EvYeVg1inhHCovAO1L/fL+ZSse269XJokaMXNfmBcb+7zS5I/+wNbj5w47wcZUO/WzeR2Plo4mzm4HCTPVL2epWtHm68noaHq+TiBTe1nHvhzY7k0v83RL7zQ81mPeXjQWE6Ccd5ujZbGb+MGmve3P6buBNQv2wPHvWsb/9yD/iUJrkc2vru8ncCJN/9x870H6ovkfkUX3x7mTz0wemiM8oabJZu7/qXZeY3pMIZjYdUSvGzxCyNeHQt6DF1pIOoF+cftpZAQXwlKVSspehTjmHK5W9wqWouViQZEfEsUc3fu9wauY/Ydve64fb2h9zVDAwPN1hrtNmjretWDdihOIDoxDUjhq+iyO/58DBBFFsPUx6mSxxlaYSZ/YNGFHEpDOhWPI6YMz2LRxXW31XPrzdbAcZy6bptu3+g1QcPRgT5oteyBLN3E/JbepnbAcXrUwYF+1MGnGJGE4KLNFzxnguiMi5SsYZ7xENRyWKM4E4MgLXqxpRtmQ2UkSkJcAFaj2M9CXEtWSZkgle3+dQUiVkqn/Vn5/t4N7/RblQmh45NCgRWx9LCoJj4ziowqkDcBG2dHVmXeznxSPDORVp4StENy/OmVLQVN9lRxx7Y3qUDvdb9w99HxHsFfGhj/XwOiHm9vqh/kRD0tx96Rn5MDt9VIF1NK9LBuRaY1rK1rWZ5nJX1amqarqTCvAlVrqR5GmWiyT7P4N6bq3oT6qRm3R33ieS8/xpfxFfU45DgSZJfK4ycWHA+zYsEZise6/ez2dORS5I3jLT8nc0KxBxWIP1yVkIUKPSGeiL9NnPqv5Tpj68CPiFNsNZzQZXEqptnTO6RAsTBLRPuN00Pj5wycc34s3Cd5j4ULNi0yjt//IhV9tSNDhOKM8qErl4LDXl/i5E8Jtl6V3pgp58nLgrBl7y4I99djT3TdCMp7XfLfygop6YKwXOwhJZaOvBX7rnBOlwez5QXg6XjptYBpu26/3wPm4Xhp1geDfQKPIum+Eb+VHOT09D10/wA=</con:value></con:property><con:property><con:name>SAMLBAU2_2</con:name><con:value>nVZdb+o4EH3vr4jSx1VwEggfESABgTa9/SQst7cvK+MYcEkciJ1A769fO5AUKHS5KyEhT8YzZ2aOj91kMAxMu8MYjjmJqOI6LfWfSq3eMGqWpTXgRNcq1gRr0ESmhqa+6U9qZs1Hhqq4jCXYpYxDyluqqRtlzTA00xrpDduo20a1ZBiNN1UZ45iJ0MKlpKvKJgwos7O0LTWJqR1BRphNYYiZzZHtdR7ubeFpwxyT2m5uUWYJ4/ac86UNACr5GOEgQCUUhaAJDnyaPrM9MqOQJzHe5fRZS93tXa/XpXW5FMUzYOq6DvQGED4+I7NrtX2Vb8a+S6fRdt2DNKIEwYD8hhLUA+bzyFc6wSyKCZ+HZ0IbwNBlaA1vkIaMCr1WwWeCDN2FkQ5AxgxqbA6NPNgQT3GMKcLK30O3pV5fNsHt3lEMKZtGcciO1n8GCdMUB9ES+xrLK8vRXR7xRLvaTYxsl6IgYSTFj5ImS4gwU55jPCWbe8IE+XymZONXNkz8SM4yjP5kLE2wj1VABye645AZZvz/zGx/XtsoYxgkuL2a3KUpo/3gYzi+W3uB+zJ6hkvTRGO3lUHYd96CKsa9Wx+TteDWbhN0+m7tObTM/ntc+/Vrwe7Kq3TAH+LH3i1cvJKnp+VLvL7tvEe/vZ8r8+nnDzp/1sv3b0bwkj5yX/TZXPd9rzpNhld1q482VbAxf9ws9Oq7fuO/Uq+eOsPFzKmFCTBuwIP//jZ4Dco9/+OvcrU/76La6KbneAFesUq1U7311rMb/TbkV7Vx8Dib9KGbBCAh1mIc9FufNe3XcGjMJcFLJu8Y8Xwp6eE6ykDMC/Lv5UVaiK9NM1d7KTWKcUy52pa7pLTYiRAg4ttimNt1vztwevV+zyz3On1TdFOv6MZA7+hWo2E0TDPXoC2KI4i9iE6JzCVVdsuf7wGi0GaY+jjW0ihBc8zUbyI6kEPFpUNxOCLK8CgSKi6wNRxr0DMqZt2qVytlvWFVu3qj4zR65bpVUZXHiD/Rp7gz5Tg+UHDDPFDwIUZkSbCUeclzJojOuGjJCqYJD4xSCksUJ+IiiKUW22albgFGwmWAJWAQRn4S4NJyvswaBNj239QgYpk16y5i2Rk8W+Lxt7wbwscn0oHJerpYTBSfuI70vJgzRVePrq08fCfxiTxqorU8JmiL5PDTJ2MkVQq67KrKYRfex4aDyOC4qCKZnxJU8L64sIXeCzVo52NZwdKqlKRpkg2ipusmiEV4YAC9BjyMEiFXH6NogSkoQoCLbosC9VHmwn6IL+Fz6nHIcShoo2TLC54KHmbyqeAK2m8ufYccpBR943jDT9l6gXhRSMTfPjqQjaSfMD+Lv3UU+5/jOhFrL4+oU7wPOKEzuZL3wscZYqBIhCVCyKJ4P/ipAKeSHxqLJhdYuGDTJOH4/BdFKlRLhQhFCeWuo2aGfdXMcPKPJbY/nb6EyZR5d9Vu2Nmr9vXh3hP6FUK18CX/7ayRjC4Iq/JGz7C01I14OYrkdLan0juAx0LdrRn1juN0+12jvi/U1fJgUDTwoJL2F/NXy15Pj89D+18=</con:value></con:property><con:property><con:name>SAMLBAU2_3</con:name><con:value>nVbbbuo6EH3fXxGlj1XInUtUkEKAllKgGyi77cuRcQy4DU6IHZry9ccOTQqU9rCPhIQ8Gc+smVle9hUFq8BwXEpRzHBIpG6rLv+jm4Zva2ZVgRa0FavsA2Wmo4oyt5AFan5Zm4GyLHUpTVCXUAYIq8uGppuKriuGPdFqjl5zLKNUMaxnWZqimPLQ3KWkyVK6Cgh1srR1OYmJEwKKqUPAClGHQWfs9u8c7umAHJPcuNqhzBLGjSVjkaOqsOQjiIIAlmC4Uq/UA58rnzpjvCCAJTH6yOnTuvyx9+3trfRmlsJ4oRqapqlaTeU+PsWLC7nxK9+M/C6Zh7u1B0hIMAQB3gIBqo/YMvQlN1iEMWbL1TehdVXXRGgFpVCBukUuZPUzQYbuzEgHIGMKFLoEeh5shOYoRgQi6WHUrcsX501wt3cSA0LnYbyiR+u/g4TIBgVhhHyF5pXl6M6PeKJdjSsEnS6BQULxBg0ETSIAEZXuYzTH6R2mnHw+lbLxSynlP5yzDMG/GcuVuo+VQ1dPdKeFF4iy/zOz/XntokxBkKDGzeLWHPZ0o7/ozeH1dvy0HTJ9sTX+PLv1DMK+8w5UMe6P9TFZC259bJpPNP93dW0zi00fR0/Vpwfd3Q5+J1MLvNw8Lb3Xbv8eGlNyUw5pCkaDdBheBn+i4eO1Pbk0q72OWbuews1kYLoPv/rvPW8UvW3V8H4G+2uwft76c9OovM6qvmdWb2rb10q6iS4Jebm/vevduLd3nre8B0u395img+cHf/A8HNwlFRjFvx6TrT2e64+twWWn97CsGC1a/6xpv4ZDYy4J42T2giDLl4Ie3ZbU4fMC7Gd5ERbsK/PM1YmERlGGCJMbYpeQFifhAoR9hw9zt243Oy2v2vYM02u2Ddtoa5amdzRXs2s1vWYYuQbtUBxB9EIyxyKXUNkdf34GCFcORcRHsbIJE7hEVP4hYgswIHXJiB+OkFA0CbmK20bHtVtmxWuadsvSLNduGl5b97SyWbY7miFLg5ANyTB25wzFBwquGwcKPkIQRxgJmRc8p5zolPGWrMEmYYFe2oASQQm/CGKhxY5hVW2V4lUUIAFYXYV+EqBStIyyBql0928oANLMCsMw9h1Is0P4bY3H3/J2cB8fCwcqCmoiPlJ04j4y82q+VG2dvLfy8G7iY3HWeG9ZjOEOyeGnT8oIrhR8ycvKcRfux4aD0OpxVUU2f4NhwfziyuaKz/WgkQ9mDUrrUrLZJNkoKppmqDEPr+qqVlHHCCZcsN4n4SsiahFCPeu+KFAfZS7sh/gStiRjBhhaceJI2fKMx8IYUfFY6HLip+e+RA5S8r4xlLJTNi/gbwqB+MdnB3Sg8OPme/73xkf4Oa4Tsfby8Dr5C4FhshArcTO8/8QMzKUsjPeDnwpwKvmhsWhygYVxNs0Shr7/IgmNqssAwjAhrNuSM8O+bmY42XuEnE+nL2Eybf64bFP67WX72L8bcwVbAbnwxf/trOCMLhDJ4k7PsNTllL8deXKy2NPpD4DHUt2s6FW31fLaTb26L9Vls9MpGnhQSeOL+atlr6fH56HxLw==</con:value></con:property><con:property><con:name>SAMLBAU2_4</con:name><con:value>nVZbb+I8EH3vr4jSxyrkwjVRQQq3blp6A3rbl8o4A7gkDsQO0P31aweSAqX9up+EhDwZz5yZOT72OUNhYDkuYxBzElHFa9fVV7MEdtkGQzPBL2mlGpS02qg40lAFihWMysXSCKuKx1gCHmUcUV5XLcMsaqapWeWhYTuW6Rilgl0yf6vKI8RMhBYuBUNV1mFAmZOmratJTJ0IMcIcikJgDsfOwL3uOcLTQRkmtXG+QZkmjBtTzueOruOCDxiCABdwFOrn+p7Puc+cAZlQxJMYtjl9Vle3e1erVWFVLETxRLcMw9ANWxc+PiOTU7Vxkm0G36PjaLNuIRpRglFA/iAJ6hr4NPIVN5hEMeHT8IvQpm4aMrQGa6xhs0RPVf0jQYruh5H2QMYMaWyKzCxYH8YQA8WgPPS9unr6swlu9g5jRNk4ikN2sP43SECXEERz8DWWVZah+3nEI+1qnAN2PIqDhJEl3EiazBEGptzFMCbrHmGCfD5T0vErayZ+JGMZ4H8Zy7m+i1VA1490p00mwPj/mdnuvDZRHlGQQIO0fj08P9l3t7WX2VszKS6axVU7YIv7M6OeQth13oDKx71dH5I159Z2UyeZn5HgZaj7dHl59XIbLJdsNbusejX/7b3ziM6u+jO3M2w2/T67sYetyFqsGD3z6eri16h1Z5mthydUve2vLumvk9nv1eJxbf1J+Kx3b1/DoGY9sPJFNylXXP3aKIsZXfBbrz13E5vMOmHYTe7XQfcKs6dqPPLt4bjysngwZ/7grXfyTG8u2M1k6NUufRx15tOuV/+oabeGfWMmCYNk9AaYZ0tJD6+tdMW8EP9eXqSF+No4dXXmUqMYB8rVhtwlpcVJhAAR3xHD3Kw7zW67bba6FduqVErldscoGWbXcI2qbRtto5Jp0AbFAcRWRMdE5pIqu+HP9wBx6DCgPsTaMkrwFJj6TcQ24kjxaF8cjogyGEZCxUtG0bWsitlqNoutptssulVTwG9a1U6tUyu3VeUm4rf0NnbHHOI9BTetPQXvAyZzAlLmJc+ZIDrjoiULtEx4YBaWqEAhERdBLLXYsUq1ss5IOA9AAtbDyE8CKMyn87RBOtv8WxrCLLX2eu7g7rU1eLXSY/hllYffsoYIH59IByZLaoIYKny6kQynnNXzRd2Vg5srC+8mPpGnTXSXxwRvkOx/+iCNZEvOmI/CMuT5hkPDXnD9sK48n78kOGd/fm0L1Rea0MiGs0CFRSFZLpN0HFXDsPRYhNdN3ajqA8CJEK33YTQDquch9B/dGTnqg8y5fR9fwqd0wBGHUJBHSZc/eDAMgMkHgyfIv/7pa2QvpegbhzU/ZmsF4l0hEX/79MAOln7CfCf+VlHsf4zrSKydPKJO8UrghE7kSt4O719wA0ciLBFyFsW7wY8FOJZ835g3OcfCBZtGCYevvyhSp+oqwjhKKPekHgjDrnamOPn7HJwPp09hUn3eXrhr9uWF+3zdGwgVC5Ga+5L/dtZIShcMqrzXUyx1dS3ejyI5nexo9RbgJ7l2u81KtVbpFot7cm1Zdjtv4F4ljU/mz5adnh6eh8Zf</con:value></con:property><con:property><con:name>SAMLBAU2_5</con:name><con:value>nVZdc9o6EH3vr/C4jx1j2ZgvT2AGbLh1JikUEtrmpaPIC4jaMrFkIPz6KxnsACG56Z1hhtF6tXt29+hIVxzHke12OYdU0IRpgd/Wf9ertoNqzaZhtWaW4aBZ3Xi0nLrRgqbziBDCVWzpWsB5BgHjAjPR1m1kVQ3LMuzaHWq5tu1WUcVBjQddm0LKZWjpUkG6to0jxt08bVvPUuYmmFPuMhwDdwVxJ93bG1d6urjApHeu9ijzhGlnIcTKNU1SCYFAFJEKSWLzyjzxuQq5O6FzhkWWwiFnyNv6Ye9ms6lsqpUknZu2rMdELVP6hJzOP+udT8VmCAM2S/ZrD7OEUYIjusMK1C2IRRJq3WiepFQs4jdCW6aFVGgDtsQglsM+6+ZLghzdByOdgEw5NvhCDuEQbAwzSIER0O7HQVv//LEJ7vfepZjxWZLG/Gz9d5CArSFKVhAavKisQPfxiBfa1bkC4gaMRBmna/imaLLCBLg2SmFGtzeUS/KFXMvHr225/NGCZUD+ZixX5jFWCd280B2fzoGL/zOz43nto0xxlEEnG6Z3ixYafn10FlkoRmL4dYf88QZ539s5hGPnPahy3If1OVlLbh02kZ1nhbY/FIMazBM6T2DV6/Fwg6Op+XO0nBG71l+lt9e15VO3Xw8af4bz5NczCaj4MYUas0Pvyyga3j/+GISDT83eYEX9exbYztcHvPN+Wd3pYpOOruP+9M+kb85/xf+0Hp6m8WTM/OkXvtkux43hsNUL8XPwUFvObtLd+noxQ2w7+BQ4P5brgeUNdw6+vv++Wy7v2y81HddwaiwkYZI9LoGIYqnoEfjaQM4Li/flRVloaMxyV3elNIoLYELvqF1KWtxMChANXTnM/brfG/i+5Q3qLbted2p+HznIGqAuarRayEf1QoP2KM4gegmbUZVLqeyeP+8DJLHLgYWQGuskIwvg+jsRfSywFrCxPBwJ43CXSBWX57/vWV3H61pOz0dNr++hatPuO77vNPyqo2vfEjFkw7Q7E5CeKLhlnyj4GAhdUVAyr3jOJdG5kC15wutMRFZljSsMMnkRpEqLXdtp1kxO41UECrAZJ2EWQWW1WOUNMvn+3zYw4bnVv+lORr+9yW87P4ZvVnn+rWiI9AmpcuCqpB7IocKFG8ku6nlVt3Px5irCd7OQqtMmuytSSvZITj+9kEaxpWTMS2EF8nLDueEkuHleV5kvXFNSsr+8tqXqS03oFMN5wpWnSrZeZ/k4GgjZZirDm5aJGuYESCZF6/ku+QPMLEOYH7ozStRnmUv7Kb5MLNhEYAGxJI+WLz/wYJgAVw+GQJJ/+9HXyElK2TcBW3HJ5kXyXaEQv/v0IC5RftI8kn+bJA1fxnUh1lEeWad8JQjK5mqlbofnN7hBEhmWSjlL0uPglwJcSn5qLJtcYhGSTY+ZgLe/aEqn2jomJMmYCHw9NxxrZ45TPK/AfXF6FSbX58OFu+VvXrg/b28mUsVirJe+9L+dDZrThYCu7vUcS1vfyvejTM7mR1p9APhKrruDXr3RrA+q1RO5tu2WXzbwpJLOK/Nry1FPz89D518=</con:value></con:property><con:property><con:name>SAMLFAU1_1</con:name><con:value>pVbrcto8EH0Vxv35DfhKAE9gxoHQ0pCQYprbn46QF1CxZSPJXPL0lQy4mJB8tJ1hhtF6tXt292h3LzmKQsv1OAcmSExL6yik3M2kTS1l1I0RJ9ylKALuCuz63m3ftSqGi/ZXtFKv09R+gIMcpxbUyzAOqmWnZk/K9Qaqls2xbdl1GxnYsKQq5yn0KBeIiqZmGWa1bMhfbWRcuEbVte3KRb32opUegHFpW6pUDG0Has2b2kyIxNX11WpVWdmVmE11yzBM/em27+MZREhrXW4jyhyx1k4fVwLAEIa4guNIv9QLOpcBd30ypUikDHa+gvd8GbrR0KVOwMn0k5bfhaBHJ3F2bCMaU4JRSF6Rys8tiFkclLxwGjMiZtG7QZiGMlyGNS5j06GfNL0I7UxDBYSMozKfIXNnawgTYEAxlL4Pe03t03lVy66OGKJ8ErOIF49/hgfoEsI4gaDM92HtoJ1v8ESmWpeA3R7FYcrJEu4UWROEge+qCfh8U6V7BhOy7hMuCbrmCp1+CO/ouM1Gh0yBi78p0EFxtkYeUJhCKwxuBtP1Kkqi6MXXB18ex4Mnn7cdZOFmBuBQORPkpd0ej0iZk2h7ox9HiC426GHTWKK499h5Yt3ukG0GXuSkqTkfNq5mt58v2syEzuQFTZPX4M58mVvfvlwN7p+vzc3m4gKc9lNY/zpm63X1ET0/zRbdQXirv1hmY/6ZP49uRtzc+A/42rup4WcvueuTzUb3q19u+6MXzzG+fhuZZPzIB/Ofw/+WV2n/+2N90/82ee7C5t7uzchzdTG/mTfzcA7wF2X7N++n45+Axf6oaNDrlLqySkh83MyUhATlSabqJqr5cAFUaC11S/UON5XtjgSurOH2bFZr9ZrdrTe69nWt0Xaujapt1BoNs2t4Vr1xvW8yWxRHENsxnRDlS7XcLW0+BogjlwMNgJWXcSo7Hdc+sNhBApV6dCgfQUw5jGLZnjlZ2AlzGEqnqRkw4xWMn3GystZa6S4WAzpg3kQAK/bkRqEnDwGThIBq3IrXXBKbC5mLBVqmIjQrS1ShkMrWzlSXdS2nXtU5iZIQFFI9ioM0hEoyS7LM6Hz7b5UR5pl0eD3KXtu7cR1/26dA6gREKXAVyxXIMsKJ4WLtA3kT8MXJIbQ376UBUQ9L5lMwgrdIip9+00TxI+dIp+/593vQue4f3P3R9n+Yf2mg/w/O+//qXNby7U39g3zqx6XMHQVLcuB2v3XI+SU7XmtPxAUyK4tKulymGfccx9aZNK8rEuiGpfuAU9mTN6N4DlTPrehnDcAc+JHzXF6EmIoZ9QUSEMm3UsqOZ2w8PnC18fTkI1+fu04VXMrUCViLU7J2KLc1hfjDhQ67WOlJ8b38W8Us+F2xE7YO/Mg45cIjCJ2qkxp+m3d4gWNplsi2HbND46cMnHJeFOZJzrEISahxKuD9LyXVj5sawjhOqeh1tExwOCMynGKTgPtb6Y2ZbAzleyn5/8W0TDIKYJDbLCeZfbVeuOoJ0OnBnNk5PR41Xr1rV9uepE+tMGra3XY7T0oBXeuN+K3kIE/HHG/9Ag==</con:value></con:property><con:property><con:name>SAMLFAU1_2</con:name><con:value>nVZrU+o6FP0rTP14pjQtLY+OMFMBvRwBUQQ9fHFiGiDYppikBfz1JylQKYqXe2eYYbK7s/baj6zkksMwsFyPc8wEiWhhHQaUu6m1rsWMuhHkhLsUhpi7ArlDr9d1rSJw4X6LVui06tpLrVSt2pUS0gGANd0ulR296pSB7ltOBdjVquWXTenKeYw7lAtIRV2zgOnoQP4qj6DsAse17SIo2xOtMMaMS2zpUgTajtSa17W5EEvXMFarVXFVKkZsZlgAmMZzrztEcxxCrXG5zSgNxBo7f1T0McJBgIooCo1LI+dz6XN3SGYUipjhXSz/VCxggJohfXxOZhdathf7HTqN0mUT0ogSBAPyAVV9eljMI7/gBbOIETEPTyZhAgWs4zXSkWnTC83IUzsTKMeQcajzOTR3WA94ihmmCBdGD526dnFe19KtjwxSPo1YyPPL/8YH0wQH0RL7Ot+ntaN2PuA3lWpcYuR2KApiThLcV8O6hAjzXTcxOh+qMGB4StZdwuWArrliZxzSO1puq9EiM8zF/2nQQXO2IGMYxLjRbj45f8JNb9T6ALe3zyPyMQ3uaNT9Z8brKYFD59SQtXa7PBrKbIi2O0Lmr8jo96LZ6yfoevXq41+T2HwetOf3CS/dWGwMKuLWgs6oW/KuBoL6V+V+1ZjOvHB62+lOK9awF4zvJ0HnA3T7Zm1O38aPy4/7zeZ+Yq36dBNMmwPWthKv8jZZs16ysFni3JjzZej0ayP2TCa/x57PW9edwarbD9+tm6fVYOHdzUTzqvSrUnv687RohaM16NWzdA745237Mz+MXxcYif1SjUGnVbiWXYLiZzFTFuLr09TVXSrx4QJToTXULqUdbizljviu7OF2bTqVatn2nLZVblnt6+s2cEqgUquZ18AD1StzLzJbFkcUmxGdEhVLSe52bH4miEKXY+pjpidRLJWOaz8gtqCAhQ59kIcgohw/RlKeo83CjsqvcfA2FRia5ep8AZK5LyW5H4k7esc8aWd5Sa7lJPkBI7IkWOm2Gmsu55oLWYp3mMQiMIsJLFIcS2VnSmRdy646BifhMsCKqBFGfhzg4nK+TAtj8O2/pUPEU2u36w0HL83hi5WeuZPZHX/bF0L6+EQ5cJXSFZbNxN9cMaV9Pifyrh5dRXt4L/aJOl6yqoIRtGWS//Q5LGpKskn5TGzPPNtwbMiBG8d5ZfH8hKBs6rO7W0q6FIHGvjnv0Cy+F+MkidN+2HbJYBLeUJkawDKGGMVSpjaP0RumRoZinHUnZMSPgmf2PMVYzOlQQIFDOT+FdHnGI2CIuXoEdOTcr899YeRCytIJvBbf2ZqBfMAoxj++cZCLlJ80D+TfKmL+Z8e+wTqII/OUbwBB6Eyt1H2wOTEeKJKwRCpZxA7BvwP4LnjemBU54yLkQL3GAp/+UlASVdcgQlFMRaelpYZD2Ux5is0Su59OX2BSZc6eauTf32o6SUcAYfnA4yTFVzeuq44AnR1I7y7oCfW9+kl98+waX8xfLQd1Op7xxl8=</con:value></con:property><con:property><con:name>SAMLFAU1_3</con:name><con:value>nVZrb+I6EP0rKPuxCnlACEQFiYbSRWW7XUK7235ZGWcAbxMntZ0A++uvHSAllPZyr4SEPBmfOfPwsS85iiPb63MOTJCE1tZxRLlXWLtaxqiXIE64R1EM3BPYC/rfxp5dNz2036LVRoOu9ruNwhBQ29Fxw7X1ZtN19HYbOrrbArfptOa26XSkK+cZjCgXiIquZpuWo5vy507Nlmc6ntOqW1b7Was9AuMSW7rUTW1Has272lKI1DOM1WpVXzXqCVsYtmlaxq9v4wAvIUZa73KbURGI9Xb+uB4ChijCdZzExqVR8bkMuReQBUUiY7CLFX4UyzTMjiF9Qk4WX7RyL4QjOk+KpY9oQglGEfmLVH2+gVgmYa0fLRJGxDL+MAnLVMA6rLGOrSb9ohlVamcCVRgyjnS+RNYOawJzYEAx1B4mo6725byuFVunDFE+T1jMq8v/xgdoDlGSQqjzfVo7aucDnqhU7xKwN6I4yjjJ4U4Na4ow8F03AZ8PVbtnMCfrMeFyQNdcsTMO6R0tt9UYkAVw8X8adNCcLcgjijLoBS+d8MK+YRPHH/LnGzdg/sPMJ31+xbsFgUPnwlC2drs8GspyiLY7nn/8aP0Sj7772Mzv7peDIBgQI+gMp+4M9de5+xyNN62/fnN1kw9n7RVn0/HLqkFao8e1++Dfj3BI858vk6eGYcWtmzafLjckeWhP2aZjUzoQk7vlT/sqzm6epsHm4vb6xfzjpqk/eLJfuQOZP766xUM/vv7zeutnTw+rC/I1tVrX01/DR8c3hzdfb1nCg5+zC7zqlukc8K/a9mc+yGZ/AIv9Uo3BaFAbyi4h8bmYKQsJ9Xnh6qVKfLgAKrSe2qW0w8uk3JHQkz3cri3Hbbeafefabg3s6+Hw2nQaptvpWEOzb7avrL3IbFkcUfQTOicqlpLc7dh8ThDHHgcaAtPzJJNKx7VPEAdIoNqITuQhSCiHaSLl2aIstR2+3DRy0bSI4zReO27SnoFWu0vEd/qd9ecCWFWTOxVNngAmKQEl3GquuRxsLmQtXlGeiciq56hOIZPSzpTKenaz7RicxGkEiqkRJ2EWQT1dpkVlDL79t3WEeWEdjPvB/W8/+G0Xh+7D9I6/7SshfUKiHLhK6QpkN+HEHdPc5/Mu79bJu2gP389Cos6XLKtgBG+ZVD+9TYsak3JU3hLbMy83HBsq4MZxXmW8MCe4HPvy8paaLlWgt2/OK7Lqr/Usz7OiH81mw2AS3lAVMUzbCABnUqc20+QFqFGiGGddCiXxo+ClvUoxE0saCCQglvNTK5ZnvAIC4OoVMJKDvz73iVEJKUsnYC1O2fxIvmAU408fOdjDyk+a7+XfKmHhW8dOYB3EkXnKR4AgdKFW6kLYfDAeOJGwREpZwg7BTwGcCl41lkUuuQg5ULNMwMdfakqjuhrCOMmoGA20wnComwVPsUnBe3N6B1NIc/lWI//+WNNJMQJYapD0L/DVleupI0AXB9q7C/qB/F59Jr9Vdr135veWgzodz3jvHw==</con:value></con:property><con:property><con:name>SAMLFAU1_4</con:name><con:value>nVZdj9o6EH3vr4jSxyrkg89EC1IgpDfb7cIF2rvbl8o4A7hNnGzsBOivv3bYZIHC3u2VkJAn45kznuMzvmEojizHZQwyThKqBF5f/Y46KGwjZGirZYi1VttuasjomBpadnu9MMRLjJeqEjCWQ0AZR5T3Vcswm5ppalZ7YdiOaTvtbqNrGN9U5StkTIQWLg1DVXZxRJlTpu2reUadBDHCHIpiYA7Hztz9fOcITwdVmNTBzQFlmTAbbDhPHV3HjRAwRBFu4CTWb/QTn5uQOXOypojnGTznDFlffd673W4b22Yjyda6ZRiGbti68AkZWb9XB++qzRAGdJUc1iNEE0owisgvJEF9Br5JQsWN1klG+Ca+EtrUTUOG1mCHNWy26HtVf0lQontjpBOQGUMa2yCzCjaDFWRAMShfZkFfff+2Dh72LjJE2SrJYna2/jNIQAuIkhRCjVWVVejeHvHCcQ1uADsBxVHOSAH3kiYpwsCUaQYrsrsjTJAvZErZfmXHxI9ULAP8J2250Y+xCuj6hdPxyBoY/z89O+7XIcpXFOUw+LrDrTD78u2hyz4ETWYNh4F/W2SPX9q4X0I4dj6Aqtv9vD4na82t5034oRVnk7QF4ZRGW/Any9kH3/348E/U2XyyJ96t2108jn88+uunhyKZfSJ6y+8WbNFddNdh9ri/K/bL4mN3OVlP+Lvx0GWt212w6PlT30N/zQrO6N6+f0h7f98Wj3Pee2zP8yRMl2787cln05gl3vJ2HYw9NP7wU7f+age/yHSSbmD7TmejJ9Jdo3R4v9lviB3Zbv+lpuMaTo2VJMzz5Q/AvFpKegSe4ot+If66vEgLCbVV6eqkUqMYB8rVgdwlpcXJhQCR0BHNPKzHQ9/zXH/YEXfIbza9sdEyTN9wja5tW5btVRp0QHEGcZTQFZG5pMoe+PM6QBw7DGgImVYkOd4AU1+J6CGOlIDOxOVIKINFIlR86BpDr9NsjyzL9ca9ZrPtufbIbQ59szlu2T1VuU/4hE4yd8UhO1Fw0zpR8BlgkhKQMi95zgTRGRdH8oSKnEdmo0ANCrkYBJnUYsdq9do6I3EagQSsx0mYR9BIN2l5QDo7/Fsawqy03t258+n30fy7VV7Dq1Wef6sORPiERDowWdIQRFPhwkRqVfVcqbtzNrmq8G4eEnnbxOnyjOADktNPL6SRbKkZ81JYhbzecG44Ca6f11XnCwuCa/bXY1uovtCEQdWcJ9R4auRFkZftELVYeibC66ZudPU54FyI1n6R/ASq1yH0N82MGvVZ5tp+ii/nGzrniEMsyKOUyzc8GObA5IMhEOTfvfU1cpJSnBuHHb9kG0XiXSERv/r0wA6WfsI8FX/bJAtf2nUh1lEeUad4JXBC13Ilp8P+CjdwIsISIWdJdhz8UoBLyU+N9SHXWLhg0zLncP2LInWqryKMk5zywFNLw7F2ljj5PgXnxem3MKU+Pw/cHbs6cB8+382FisVIrX3JfztrpKQLBlXO9RJLX92J96NITtdHWv0M8Ipcd16T69NKBr+Zf7ccnen5fRj8Cw==</con:value></con:property><con:property><con:name>SAMLFAU1_5</con:name><con:value>nVZdb6M6EH3fX4HYx4rwmS/URCKhaelttlVJq3RfVo6ZJN6CTbFJ6f76a0ihSZr2dq+EhDyMZ854Dmd8ylESW67HOWSCMKoE/kD9ZUPb6lvmQoscZGhOdxFpyDB7mrlEdmT1HcsBW1UCznMIKBeIioFqGaatmaZmtWdG37VM+bRMq/1TVe4h4zK0dGkZqlIkMeVulXag5hl1GeKEuxQlwF2B3dCbXrnS00U1JnV4ukVZJcyGayFSV9dxKwIMcYxbmCX6qb7ncxpxNyQrikSewWvOiA/U173Pz8+tZ7vFspVuGYahG31d+kScrL6rw2/1ZogCumTb9RhRRglGMfmDSlBTEGsWKV68YhkR6+SD0KZuGmVoDQqsYdOh31X9LUGF7ouR9kBmHGl8jcw62C0sIQOKQbm7DQbq9691cLt3liHKlyxL+MH67yAB3UDMUog0XldWo/t6xCPHNTwF7AYUxzknG/hR0iRFGLhyk8GSFFeES/JFXKnarxRcPqRmGeC/acupvotVQtePnI5PVsDF/+nZbr+2Ue5RnMPQDrnPLb5JrWtz9M9q/rByXk5eRmLc54MKwq7zFlTT7tf1IVkbbr1uCv6s6LTAKZuk8+QCzMeHiZ8Ut2ehA3gxmq3yYr1YwEOxvgyXwWbBApg4s3uTz/X0bqa/rEwsuuzi/OR8anW/2aPx5fwpu0u6P2+wPQ3mHTunnW6U6dz5fZ7C6GaCl/G8e06iy8cL/9zKl87tOaXsLG5nabb+8fB0IXr2KHr62f3mdO7DaX/WnnX6BXkcX3dOpoO3mnZr2DfWkhDmi9+ARb0s6RH4ykT2C4nP5aW0kEhbVq5uWmoUF0CFOix3ldLi5lKASOTKZm7XZ6OJ73uTUafb601s2z8zHMOcGJ7R7fctq+/XGrRFcQBxzOiSlLlKld3y53OAOHE50AgybcNyvAaufhLRRwIpAb2VPwejHGZMqvi47zl+72zkWP7Y9tqdiTEan1mmNx71PN/2pBb/YOKaXmfeUkC2p+Cmtafgt4BJSqCU+ZLnXBKdC3kkT2iTi9hsbVCLQi4HQVZqsWs5vbbOSZLGUALWExblMbTSdVodkM63b0tDmFdW/8oLb36Nw19W9Rt+WOXht/pApE9ESgdeljQC2VQ4MpHMup53dTtHJ1cd3ssjUv5t8nRFRvAWyf6nN9KUbGkY81ZYjbzZcGjYC64f1tXkizYEN+xvxrZUfakJw7o5T6j11Mo3m7xqR9cwLD2T4XVTN7p6CDiXovUyY49A9SaE/qWZ0aA+yNzY9/HlYk1DgQQkkjxKtfzChSEEXl4YAkn+4qu3kb2U8twEFOKYbRzLe0WJ+NOrB3Zx6SfNN/L1zLLorV1HYu3kkXXKW4IgdFWuyunw8gE3MJNhiZQzlu0GPxbgWPJ9Y3PIDRYh2bTIBXz8RSl1aqAijFlOReCrlWFXOyuc4iUF983pXZhKn18HbsE/HLjz6VUoVSxBauNL/ttZIxVdMKjlXK+wDNRC3h9lcrra0epXgB/Ideczud6vZPjO/N6yc6aH/8PwXw==</con:value></con:property><con:property><con:name>SAMLFAU2_1</con:name><con:value>pVZbc6JKEH7fX0GxzzgDXhAqWqWiJ+6amIi5bF62JsMgE2EwzKCYX38GDESNycnuqbLKmqan++vub7r7jKMoNOwe5yQRNGbK2Omov4nX8swmxFrbI02t8eg3Ncv0fa2ht02MkNcy61BVxpynZMy4QEx0VAPqdU3XNaM5h5atN23DqrVM60FVbknCpWmpUpO3sihk3C7cdtQ0YXaMOOU2QxHhtsC227uY2FLTRiUmtXu2Q1k4TLqBECsbAFzzCCZhiGs4jsAZONA587jt0gVDIk3Iq0+Pd9TXu5vNprap1+JkAQwIIYAWkDoep4vvavdbeZl4Y+bHu/MAsZhRjEL6gnJQF0QEsaf0wkWcUBFEH5jWgQ5z0xrJsIb1BvuugjcHBbovWjoAmXCk8QDppbEZ8UlCGCbKzWzcUb9/rYK7u/MEMe7HScSPzn8GibA1CeMV8TReRlai+7rFE+nqnhFsjxkOU07X5DKnyQphwpWrhPg0m1AuyedxpSi/knH5oyXLCP6TspyBfawSOjiRHYcuCBd/U7P9eu2s3KIwJV13GVzHt76JUjozNoNtXL/L1vc/xvH5olNA2FfegarK/Xo+JmvFrddL06dl7264go3Q8R9CfPOI5ndrOvFGUWDFARgtUXr5fHFhwp/jzL3JWP/+/pqJq/PZw/M/wXDDQtAMrt32dtb4cfktfHRvL83r9B6G9WnaugTL8zkKYMz7rPly609HdXbrPq1W9YEFwi2Z8Acx/eVnWz4kP93sfPkM3eGv9V1i+uDm2yC6B0+cTl9+XE+vXc+H22XnLab9GA6FZUtw08cngkV5zOkxdpSRrBcSn7eXXEI9zS9U7VXeo7ggTKjd/FbeWuxUNiDq2bKYu/OwP3IG7ZHRbvVgfdjWh7AB9RHsQdOyzHqrV/agHYojiIOY+TT3lXfZHX8+B4gjmxPmkURbxykOCFc/segggZQxm8nHETNO5rHs4o4+aFp9fTTsNxzDbJtwMNCh3oCmYRmmUx+pymUspmya9HxBkoMOrhsHHXxGMF1Rkrf5nOdcEp0LmZJntE5FqNfWqMZIKgdBkvdi22i0m4DTaBWSHDCIYi8NSW0VrIoEAb77NzSEeSGdDefF+/swvONvZSakjkdzBZ7H0ieymuTEKNLLQN4F3Dg5skrzvdSj+TOTaRUJxTskh5/e2JLTpKKKM+m5VyXoSvcP7v4euL/1vzQw+b8GZD3e3wSf5AQcl6Ny5K3pnttypMspJXtYtyTTM6o919L1Oi3oY0JogESaBzqAJnAJTmWT3c7jJWGgMgG+NOMq1EeeK/khvlQEzBVIkEiSXSmOX1hwXMLzBWcsH2v21e3pwKXMmyCZOCUbhHIPyhF/uiphG+d6Unwl/zZx4r2V64StPT8yTrnVCMoW+SmfZtsPSIFjaZbK9hsn+8ZPGTjl/FBYJbnCIiSbHlNBPv6i5H21oyKM45SJsaMWgv1eX+AU2xWx35TemSnmyeuCkPEPF4T7i4kru26E1EqX/reyRgu6YKLme0iBpaNmct+Vztlib7a8AjweL31Tb/ccZzjs6+1qvDQtq1UfjaoEHkTSfSd+L9nL6fF76P4L</con:value></con:property><con:property><con:name>SAMLFAU2_2</con:name><con:value>nVbbcuI4EH3PV7g8jynjCxdfKlAFGHacISEBMkn2ZUuRG1CwZbBkIPP1KxnsAEOyma2iilK71X26++hIVwzFkeW1GYOUk4Qqgd9U/7FtBIZpVrW6UbO0mhU6GjKhrtVDwwyRW6+7CKtKwFgGAWUcUd5ULUP4m6Zm1SeG65m2V3Mrtl3/W1V+QspEaOFSMVRlG0eUeXnappql1EsQI8yjKAbmceyN2zcDT3h6qMCktq52KPOEaWvO+dLTdVwJAUMU4QpOYv1KP/K5Cpk3JjOKeJbCPmfImup+72azqWyqlSSd6ZZhGLrh6sInZGT2TW1dFJshDOg02a27iCaUYBSRX0iCugE+T0KlHc2SlPB5/EFoUzcNGVqDLdawWaPfVP09QY7ui5GOQKYMaWyOzCLYCKaQAsWgPIyCpvrtaxPc7Z2kiLJpksbsZP1nkICuIUqWEGqsqKxA9/WIZ9rVugLsBRRHGSNruJU0WSIMTLlLYUq2A8IE+UKm5ONXtkz8SMEywH8yliv9EKuArp/pjk9mwPj/mdnhvHZRfqIog5aPf8XZ6LUxXj3ere/niLf9tf096DyMWTOHcOi8A1WOe78+JWvJrf0mcj2put3k++X3Gbt+3Cx6Q/PH/ZvVSAf2Y7acvUwW84UedCJsUac3fMULPNCfJz8ufz3Hq3T1Fx48PvrOYrTohmR4sXyYXCdDeOjyu9WgFm/txup6GlQXqHMThncPl9YSjMYkW90+Xz8N+9XsdX5/bxi9zmJVa5sP9ovTeOqu+Lbm93D9on2TLn7Gd5FPntJJt0ZH4XPzvabDGo6NhSSMs5dXwLxYSnoEvtIX80L8c3mRFhJq09zVW0qNYhwoV1tyl5QWLxMCREJPDHO37nX6ftfpW07D9as9x+wZNcPsG23Ddl272mgXGrRDcQKxm9Apkbmkyu748zlAHHsMaAiptk4yPAemfhLRRxwpAR2Jw5FQBpNEqHiv3+s4br3f7zht3zFts9tr291qveP2G9W+Y6vKbcKHdJi2pxzSIwU3rSMFHwEmSwJS5iXPmSA646IlK7TOeGRW1qhCIRMXQSq12LNqTl1nJF5GIAHrcRJmEVSW82XeIJ3t/i0NYZZb8+5ilp/BD0s8/VZ0Q/iERDowWU8HxEThzHVULYr5oOjGybVVhG9nIZFHTbSWpwTvkBx/emeMpEpJl31VBezS+9RwFFk/LapMFq4JLnlfXthC74UatIqxrFBlVcnW6ywfhG0Ylp6K8LqpG7Y+BpwJuXqbJAugehlC/9JtUaI+yVzaj/FlfE7HHHGIBW2UfPmFp8IYmHwqBIL226++Q45Sir5x2PJztm4kXhQS8aePDuxh6SfMd+Jvk6Th+7jOxDrII+oU7wNO6Eyu5L3w9gExcCLCEiFkSXoY/FyAc8mPjWWTSyxcsOkl4/DxF0UqVFNFGCcZ5YGv5oZD1cxx8rcleO9Ov4XJlXl/1W7Zh1ft081gLPQrRmrpS/7bWSM5XTCo8kbPsTTVrXg5iuR0dqDSe4CnQt2xTSF7fqfXMZ1SqOuuK6SvXzbwqJLWb+bfLQc9PT0PrX8B</con:value></con:property><con:property><con:name>SAMLFAU2_3</con:name><con:value>nVZdb+I6EH3vr4jSxyo4CQRCVJDC1zb9oku6bNuXK9cZwLfBobEDtL9+7dCkQGlv90pIyJPxzJmZ42OfcjyPbc/nHFJBE6YFvZb+D8Z2ZEHdNupNyzVq+DEy3OqkadScR7uKXRIRILoWcJ5BwLjATLR027SqhmUZtnNrNj1L/pxKw24+6NoYUi5DS5eKqWvrecy4l6dt6VnKvARzyj2G58A9QbzQv7r0pKeHC0x6+3SDMk+YtmdCLDyESCUCAnFMKiSZo1O043MacS+kU4ZFlsJbzoi39Le9q9WqsqpWknSKbNM0kdlE0ifidHqst4+KzRAFbJJs1l3MEkYJjukrVqCuQMySSPPjaZJSMZt/EtpClqlCG7AmBrFq7FhH7wlydN+MtAMy5djgM2wVwUYwgRQYAe3XKGjpx9+b4GbvbYoZnyTpnO+t/w4SsCXEyQIigxeVFei+H/FAu9qnQLyAkTjjdAnXiiYLTIBrNylM6PqSckm+iGv5+LU1lz9asAzI34zlFG1jldDRge706BS4+D8z257XJsoYxxm0sesuh5cZSa755ZldX438cDwOw2Ad81YOYdt5A6oc99t6n6wlt942nZ84Y+eFjtM6vTtzf7/OateddFQdnNydJAEPXYjH97K9Ddx7ousG6k5GcYzWrxf3wR1nd9fZcjn2g/Mnt3+Bn48Wk4551jh/9RficUgb5w5NXPSwrNWm5utDtzY+M0evP6mDVuTH/RCWZwP719PNMxl25j/ucP0lbA5XF04I179d++pI3GQnty/OsmMNf9Kq6U+qV633mrZr2DUWkhBmj/8CEcVS0SPoaQM5Lyy+lhdloZExyV29hdIoLoAJva12KWnxMilANPLkMDfrfmfQ67oD2603+9W+a/XNmmkNTN9sNJuNat0vNGiDYg9iN2ETqnIpld3w52uAZO5xYBGkxjLJyAy4/kXEHhZYC9hIHo6EcbhNpIoP+lat57t+1Wn03a5juR130O/3O3XT7Zq+LbX4OhFDNkz9iYB0R8Ete0fBR0DogoKSecVzLonOhWzJM15mIrYqS1xhkMmLIFVa7Nk110GczhcxKMBonkRZDJXFbJE3CPHNv21gwnMrSZI08gjPD+GnNe5/K9ohfSKqHLgqqANypHDgPjKLaj5UXTt4bxXh/Syi6qzJ3oqUkg2S3U/vlFFcKflSlFXgLt33DTuh0X5VZbZoSUnJ/PLKloov9aBdDOYZV54r8sRm+SgapmmjVIZHFjIbKASSScF6uU2egKEyBPrWfVGi3stc2nfxZWLGQoEFzCVxtHz5jcdCCFw9FgJJ/PV3XyI7KWXfBKzFIVs3lm8KhfjLZwfxiPKT5hv5t5IjfB/XgVhbeWSd8oUgKJuqlboZXr5iBpVSlqTbwQ8FOJR811g2ucQiJJseMwGff9GURrV0TEiSMRH09NywrZs5TvGyAO/d6UOYXJvfLts1//Syvbu6DKWCzbFe+tL/djZoThcCurrTcywtfS3fjjI5m27p9BvAfanuNCzX7/W6/Y7lllLtNJv16mBQNnCnkvYH80fLVk/3z0P7Dw==</con:value></con:property><con:property><con:name>SAMLFAU2_4</con:name><con:value>nVZbb+I6EH7fXxFlH1fBuUFCVJBSLnvSQsty256+VMZxwG3iQOxA2l+/TmhSoLSneyQk5Ml45puZz599wWAU6o7LGE44iankdVvyQ11XYR3CQPEtAymmZiPFxoGl2KoBfbMZ2EjXZMljLMUeZRxS3pJ1VTMUTVP0+lRtOrrqGHbNVM17WZrjhInQwqWmylIWhZQ5RdqWnCbUiSEjzKEwwszhyJm4w4EjPB1YYpLbF3uURcKkveJ87QCAaj5GOAxRDcURuABHPhc+cyZkSSFPE/ya02ct+XXvbrer7YxanCyBrqoqUJtA+PiMLL/L7W/lZux7NIj36w6kMSUIhuQF5qCGmK9iX3LDZZwQvoo+CK0BTc1DKzhDCtJM+l0GbwkKdF+MdAQyYVBhK6iVwcY4wAmmCEuzsdeSv39tgvu90wRSFsRJxE7WfwcJ0y0O4zX2FVZWVqL7esQz7WpfYOR4FIUpI1t8k9NkDRFm0ijBAckGhAny+Uwqxi9lTPxIyTKM/mYsF+AQq4AOznSnS5aY8f8zs8N57aPMYZjidrbu9K5+ZQ1y583raLuwg/HEnUHtespaBYRD5z2oatyv61OyVtx63TR9+Wdx4/MM3fT1GWls1jdsPsfabDnuRPd+U/85sEa43v11myRGBkdXnXAwu2ZXYzYnYJjc/wyiweZ2tqlf7vTGN5CZffV6CPzgLuu5yfpqkXQ2/tCdq1Zz1LH1ObCeF4sV9nqLMP7x72P90eg2VjvbfURPnn5994sNNqD/exEs7em336Pu9PHlruc+LR+n4Y/J02zYeqvpsIZjYykJk3TxiBEvlzk9vK7UF/OC/HN5yS3EV4LC1VnnGsU4plxu57tyaXFSIUDEd8Qw9+veZb/bdXuG2bAbrun2eqqpan3VFYU3dd01Sw3aoziB2IlpQPJcucru+fM5QBQ5DFMfJ8o2TtEKM/mTiF3IoeTRsTgcMWV4GgsV7zX1Tl1VjeZlvW5aatOwdEs1m7ZmaJZrWkLBb2J+S28TN+A4OVJwTT9S8DFGZE1wLvM5z5kgOuOiJRu4TXmo1bawRnEqLoIk12JHN+06YCRahzgHDKLYT0NcW6/WRYMA2//rCkSssA4G7mT00Jk86MUx/LDK029lQ4SPT3IHlpd0icVQ8ZkbSS/r+aDuxsnNVYZ3U5/kp010lycE7ZEcf3ojTc6WijFvhZXIqw2nhqPg4LSuKp+/Jahif3VtC9UXmtAuh7OBtU0t3W7TYhyWquogEeGBBlQLTDBKhWg9T+MnTEEVAnzpzqhQn2Su7Mf4Ur6iEw45jgR5pGL5hQfDBLP8weAJ8mdffY0cpRR94zjj52ydULwrcsSfPj2Qg3I/YR6Jv12c+G/jOhPrII+oU7wSOKHLfJXfDs8fcAPFIiwRchYnh8HPBTiX/NhYNbnCwgWbFinHH3+Rcp1qyRChOKXc68qF4VA7C5z8eY2dN6d3YQp9fr1wM/bhhXs3HEyEikVQrnzJfzsrpKALwnJ+rxdYWnIm3o8iOV0eaPUrwPdy3b9sWHajbxjdY7ludqsGHlXSfmd+bzno6el5aP8B</con:value></con:property><con:property><con:name>SAMLFAU2_5</con:name><con:value>nVZdc6o8EL7vr2DoZQcJiKhMdQa/Tun3EU9te9OJIUpaCJQExf76E7BQtbZvzzvjjJNls/vs7pMnOWUwDHTLZgwnnERUcgYd+aneNNtG05sp2hy0FQMaTaUFPUOZeTOEzAYA2ECy5DCWYocyDinvyDrQ6oqmKXpjAtqWrlugXmuY2qMs3eGEidDCpQZkKQsDyqwibUdOE2pFkBFmURhiZnFkufbVpSU8LVhikrunG5RFwqTrcx5bqopqHkY4CFANRaF6qu74nHrMcsmCQp4m+D2nxzry+97ValVb1WtRslB1AIAK2qrw8RhZHMvdo3Iz9hw6jzbrPqQRJQgG5A3moK4w9yNPsoNFlBDuh1+E1lQN5KEVnCEFaQY9ltWPBAW6H0baAZkwqDAfamWwMZ7jBFOEpT9jpyMf/2yCm72TBFI2j5KQ7a3/DRKmSxxEMfYUVlZWovt5xAPt6p5iZDkUBSkjS3yd0ySGCDPpNsFzkl0SJsjnMakYv5Qx8SMlyzD6l7GcqttYBXT1QHcGZIEZ/z8z257XJsodDFLcVe9jtWlovT/+2U18Gz86a1+HRrxqPb50CgjbzhtQ1bjf1/tkrbj1vqmfkBvs/mapDqbhWfhsXkSpj/sX+n3/BKDsbPKQGuctc+WCi3vnXBudT+dvv8jZSaA9/0ba21Q9OcmCyS98t5q8HhE601HPeTj362N/bd6q65V/m7ST0cy5uHhZjRuPj2+o/ZBdvgHjeXre72MyR0Y6pb9a0+HJmvKh8YCyloay6fjo1T3RX4ZuOhnCUdO0+cV11PmoabuGXWMpCW46e8aIl8ucHs5AGol5Qf69vOQW4inzwtWKc41iHFMud/NdubRYqRAg4llimJv1sDcaDOxh3TBbpm3YwyEwgDYCNmi227puG6UGbVDsQexHdE7yXLnKbvjzPUAUWgxTDyfKMkqRj5n8TcQB5FBy6FgcjogyPImEijeGPRuYmmGCFgBGazgY9ZtGqw56zbY5Msy6LF1H/IbeJPac42RHwTV9R8HHGJGY4Fzmc54zQXTGRUte4TLlgVZbwhrFqbgIklyLLd1oNVRGwjjAOWA1jLw0wLXYj4sGqWzzrysQscI6uLTd26e++6QXx/DLKve/lQ0RPh7JHVheUg+LoeJPN5JmNcp6PtVtHLy5yvB26pH8tInu8oSgDZLdTx+kydlSMeajsBJ5tWHfsBNc3a+ryuctCarYX13bQvWFJnTL4bzC2mstXS7TYhxNAHQ1EeFVTQVN1cUoFaK1nkQvmKpVCPVHd0aFei9zZd/Fl3KfuhxyHArySMXyBw8GF7P8weAI8mc/fY3spBR94zjjh2z9QLwrcsTfPj2QhXI/Yb4Vf6so8T7GdSDWVh5Rp3glcEIX+Sq/HdZfcANFIiwRchYl28EPBTiUfNdYNbnCwgWbZinHX3+Rcp3qyBChKKXcGciFYVs7C5x8HWPrw+lTmEKf3y/cjH154d5fXbpCxUIoV77kv50VUtAFYTm/1wssHTkT70eRnC62tPod4Ge5HvXMZssc1euDXbluD6oG7lTS/WT+bNnq6f556P4F</con:value></con:property><con:property><con:name>SAMLFULL</con:name><con:value>nVZrb+I6EP0rKPuxCnlACEQFiYbSRWW7XUK7235ZGWcAbxMntZ0A++uvHSAllPZyr4SEPBmfOfPwsS85iiPb63MOTJCE1tZxRLlXWLtaxqiXIE64R1EM3BPYC/rfxp5dNz2036LVRoOu9ruNwhBQ29Fxw7X1ZtN19HYbOrrbArfptOa26XSkK+cZjCgXiIquZpuWo5vy507Nlmc6ntOqW1b7Was9AuMSW7rUTW1Has272lKI1DOM1WpVXzXqCVsYtmlaxq9v4wAvIUZa73KbURGI9Xb+uB4ChijCdZzExqVR8bkMuReQBUUiY7CLFX4UyzTMjiF9Qk4WX7RyL4QjOk+KpY9oQglGEfmLVH2+gVgmYa0fLRJGxDL+MAnLVMA6rLGOrSb9ohlVamcCVRgyjnS+RNYOawJzYEAx1B4mo6725byuFVunDFE+T1jMq8v/xgdoDlGSQqjzfVo7aucDnqhU7xKwN6I4yjjJ4U4Na4ow8F03AZ8PVbtnMCfrMeFyQNdcsTMO6R0tt9UYkAVw8X8adNCcLcgjijLoBS+d8MK+YRPHH/LnGzdg/sPMJ31+xbsFgUPnwlC2drs8GspyiLY7nn/8aP0Sj7772Mzv7peDIBgQI+gMp+4M9de5+xyNN62/fnN1kw9n7RVn0/HLqkFao8e1++Dfj3BI858vk6eGYcWtmzafLjckeWhP2aZjUzoQk7vlT/sqzm6epsHm4vb6xfzjpqk/eLJfuQOZP766xUM/vv7zeutnTw+rC/I1tVrX01/DR8c3hzdfb1nCg5+zC7zqlukc8K/a9mc+yGZ/AIv9Uo3BaFAbyi4h8bmYKQsJ9Xnh6qVKfLgAKrSe2qW0w8uk3JHQkz3cri3Hbbeafefabg3s6+Hw2nQaptvpWEOzb7avrL3IbFkcUfQTOicqlpLc7dh8ThDHHgcaAtPzJJNKx7VPEAdIoNqITuQhSCiHaSLl2aIstR2+3DRy0bSI4zReO27SnoFWu0vEd/qd9ecCWFWTOxVNngAmKQEl3GquuRxsLmQtXlGeiciq56hOIZPSzpTKenaz7RicxGkEiqkRJ2EWQT1dpkVlDL79t3WEeWEdjPvB/W8/+G0Xh+7D9I6/7SshfUKiHLhK6QpkN+HEHdPc5/Mu79bJu2gP389Cos6XLKtgBG+ZVD+9TYsak3JU3hLbMy83HBsq4MZxXmW8MCe4HPvy8paaLlWgt2/OK7Lqr/Usz7OiH81mw2AS3lAVMUzbCABnUqc20+QFqFGiGGddCiXxo+ClvUoxE0saCCQglvNTK5ZnvAIC4OoVMJKDvz73iVEJKUsnYC1O2fxIvmAU408fOdjDyk+a7+XfKmHhW8dOYB3EkXnKR4AgdKFW6kLYfDAeOJGwREpZwg7BTwGcCl41lkUuuQg5ULNMwMdfakqjuhrCOMmoGA20wnComwVPsUnBe3N6B1NIc/lWI//+WNNJMQJYapD0L/DVleupI0AXB9q7C/qB/F59Jr9Vdr135veWgzodz3jvHw==</con:value></con:property><con:property><con:name>SAMLSAU1_1</con:name><con:value>pVZtc6o6EP7eX8HQj2cQAiiFqc6oaLUv1iO219MvnRiCxEKwJKjtr78Bi1Vre9tzZ5xxsmx2n919srvnDMaR7jQZwyknCZX6bl1+tCwrALplKfY0CBQTBkCZghpQELSBBixj6qOaLPUZy3CfMg4pr8u6BgwFAEWvjjXbAaYD9ArQzQdZuscpE6aFSkWTpXUcUeYUbutyllIngYwwh8IYM4cjx2veXDtC04ElJrlxvkFZOEwbIecLR1VRxccIRxGqoCRWz9U9nXOfOR6ZUcizFL/59Fldfru7Wq0qK6OSpDNV1zRN1WxV6PiMzE7lxkl5Gft9GiSbcxvShBIEI/IKc1A3mIeJLzWjWZISHsafmAYq0HLTCl4jBQGTnsrqu4MC3Tct7YFMGVRYCEFpbIQDnGKKsHQ36tfl0+9VcHN3nELKgiSN2cH5Z5AwXeIoWWBfYWVkJbrvWzySrsY5Rk6foihjZIkHOU0WEGEmDVMckPU1YYJ8PpOK8ktrJn6kZBlGPynLubqLVUBXj2THJTPM+N/UbLdeGyv3MMpwY35xaT1Phtrl5G48GaDBr3lEFwE0J8SsFxB2lTegtuV+Ox+Sdcutt0tPl6ve/M9gbjDPHPcyu2ZyYlzw2W9qAiNrB6/jWTS5Gfk999dg+M+gl5pr4N3c9XjvwRiiIWdXfBre9q4ucGt18kJb7dXMBaAbhrDjTa+Mm/7abDKj220uh+6lPQLG/PVqvazdQwZ+d8Z/QnO6Jg/3nXAGOve3r30B5GnlPQ/jy5PUrT7FMLycQ8wmndr1mYrq7zHtxrAvLFuCl03nGPHymNOj70pdUS/Iv24vuYT4SlCoOou8RzGOKZcb+a28tTiZaEDEd0QxN+dOq+u2q1XXrrXObGB2Opqpga7W1Kq2XTO6ZtmDNigOILYTGpDcV95lN/z5GiCKHYapj1NlmWQoxEz+wqILOZT6dCQeR0IZHieii3d007LPmrZZ1Votw3KNqlGtgW7NtvRmyzRasjRI+C29TZsBx+leBwf6XgcfYUQWBOdtPuc5E0RnXKTkGS4zHoHKElYozsQgSPNe7OjmWVVlJF5EOAesxomfRbiyCBdFglS2+dcViFghHXXGxfv7NLzDb2UmhI5PcgWWx9LCopr4yCjSykA+BGweHVml+Wbmk/yZibTylKANkv1P72zJabKlinvd9IYl6K3uD+4+tr1H8JcGrv+vAVGPjzfVL3KiHpZj68hfkh235UgXU0r0sEZJpmdYea5ky2VW0MfSNF1NhXkVqJqlehhlosm+jJMnTNWtCfVbM26L+sDzVr6PL+Mh9TjkOBZkl4rjNxYcD7N8wemLx7r+7va051LkjeM1PyZrR2IPyhF/uSohB+V6QjwUf6sk9d/LdcTWjh8Rp9hqOKGz/JRPs5dPSIESYZaI9puku8aPGTjmfF+4TfIWCxdsmmYcf/5FyvtqXYYIJRnlfVcuBLu9vsDJXxbYeVf6YKaYJ28Lwpp9uiBMbq490XVjKG91yX8rK6SgC8JyvocUWOryWuy7wjmd7cyWN4CH46VlgbOm63Y6LXB2MF662wTuRdL4IP4o2cnp4Xto/As=</con:value></con:property><con:property><con:name>SAMLSAU1_2</con:name><con:value>nVZdc6JKEH3fX0Gxj1vIhyBCRatUJEtiPk2y2bzcwqGVuQszyAxq7q+/AwpR1+Rmb5VV1jQ93ae7z5yZMxamieEOGIOcY0qkwOvJf83RDPSZbSuoYxiKqdmm0p3ZoDhtZHRN23DaMJOlgLECAsJ4SHhPNjS9rei6YlgPmuPqtmu0W+2u9iJLT5AzEVq4tDRZ2qQJYW6VticXOXFpyDBzSZgCczlyp4OriSs83bDGJPfPtiirhHk/5jxzVRW1IkCQJKiFaKqeqQc+ZxFzp3hBQl7ksMsZsZ6827ter1vrdovmC9XQNE3VHFX4RAwvvsr9L/VmiAIyp9v1KCSUYBQm+J+wBHUFPKaRNEgWNMc8Tt8Jrau6VoZWYIMUpJvkq6y+JajQfTLSAcichQqLQ70Odg9zyIEgkB7vg5789XMT3O59yEPC5jRP2dH6zyABWUFCM4gUVldWo/t8xBPt6p8BcgOCkoLhFVyXNMlCBEy6zWGONxPMBPkiJlXjlzZM/HDNMkB/MpYzdR+rgK6e6I6HF8D4/5nZ/ry2UZ7CpID+2Mp1D0ffbJ4E3e/Oo2pfYH8Ea8f62asg7DtvQTXj3q2Pydpwa7fp5TF3MuP8lvvnTncdI1V1ZkOyXGqXnZ/FeZbc+tHzE0KPj7Pzub8Iu/wZdSCzwLj4HkP6i3zzfgQ30Y+OfXc9/oLS8dK+KCY3k5+Du9XlS0EvHb5urx7U8x+DwcuvxVXC/PXzNF11nu468WtM1p3Mupy8BqO7YphdU3PKl/H54pYmt1/u+Obajycz+m11bT6/PKKXQe+tpv0aDo21JEyL2d+AeL0s6RF4ki/mFfKP5aW04EiZV65uVmoU40C43C93ldLiFkKAcOSKYW7X46HvjSzLczpDy9HN8VgzNd3XBprlOJ22b9YatEVxBHFEyRyXuUqV3fLnY4AodRmQCHJlRQsUA5M/iOiFPJQCci8OByUMHqhQ8e547LetUdf2vJFtjgbm2Bpbuu8MnY5j2m1dlq4pvyE3+WDOIT9QcN04UPB7QDjDUMp8yXMmiM64aMkyXBU80VursEWgEBdBXmqxa5hdS2U4zRIoAaspjYoEWlmcVQ1S2fbfUELEKmvVXcSqM/huicff6m4InwiXDqysZwhionDiOtLrYt4punN0bdXhB0WEy6MmWstzjLZIDj+9MaakSkOXXVU17Mb72HAQWT0uqkkWrTBqeN9c2ELvhRr067Esw9ayVaxWRTUIW9MMNRfhVV3VbHUKqBBy9fpAfwFRmxDqp26LBvVR5sZ+iK/gMZnykEMqaCNVy088FabAyqdCIGi/+ew75CCl6BuHDT9lGyXiRVEi/vDRgVxU+gnzrfhb0zx6G9eJWHt5RJ3ifcAxWZSr8l54fYcYiIqwWAgZzfeDnwpwKvmhsWlyg4ULNs0KDu9/kUqF6skhQrQgPPDkyrCvmhVO/pqB++b0W5hKmXdX7Ya9e9U+X02mQr/SUG588X87K7iiCwK5vNErLD15I16OIjlZ7Kn0DuCxUA9tvTvwvOF4qHePhNpvGnhQSf838++WvZ4en4f+vw==</con:value></con:property><con:property><con:name>SAMLSAU1_3</con:name><con:value>nVZdb+I6EH3vr4iyj6vgfBEgKkjhS0u3LN1CabcvV64zgEviQOxA6K+/TmhSoLS3eyUk5Ml45szM8bEvOQ4D0/U4h1jQiCmDblP9h5gzeMLE0J4MBzS7ZlS1hvmENceqGrqOa9WaA6oy4DyBAeMCM9FUTd2wNMPQzOpEb7hG3bWdilm3HlVlCjGXoaVLRVeVNAwYd/O0TTWJmRthTrnLcAjcFcQde8NrV3q6uMCkti73KPOEcWshxMpFiFR8IBAEpEKiEF2iI59Ln7tjOmdYJDG85vR5U33du91uK1urEsVzZOq6jvQGkj4+p/Nvauui2Az+gM2i/bqDWcQowQF9wRmoIYhF5CteMI9iKhbhB6ENZOhZaA1SohHDZt9U9JYgR/fFSEcgY441vsBGEewWZhADI6Dc3Q6a6revTXC/dxJjxmdRHPKT9d9BAraBIFqBr/GisgLd1yOeaVfrEog7YCRION3Ar4wmK0yAKzcxzGh6Tbkkn8+VfPxKyuWPFiwD8jdjuUSHWCV0dKY7XToHLv7PzA7ntY8yxUECratdjZPpc+Kx0WoWG0tv7VSX97MU1stmDuHQeQ+qHPfr+pSsJbdeN/Gb2TLedKL5y+SXXXecaf0xCPnz1Xc7ukrtux+76WTdNnd/7vrD+mJ0b9Pwx2QUbJ17jyE+7TSqtXToo6Vo/NzVL8La4r5tO8M/u8epiepIb8+3L7vhzeDeEC+772nwex330HO1H1nUm2x6Q8f7nf6g6YNz/SDo8x3TrXpqMcOs+XDRszq/H/XlT3/w4N+NzP4ELZtvNR3WcGwsJGGcPD0DEcUyo8egq/TlvLD4XF4yC/W1We7qrjKN4gKYUFvZrkxa3EQKEPVdOcz9utfudzvVarfhtJ2GYfd6uq0bfd3Tq42GY/XtQoP2KE4gdiI2o1muTGX3/PkcIAldDsyHWNtECVkAVz+J2MUCKwN2Kw9HxDhMIqninmV2ddPrebbVthyzb5jtnt33unWjX2tU9baq/IrEiI1ibyYgPlJwwzxS8FsgdEUhk/mM51wSnQvZkjXeJCIwKhtcYZDIiyDOtNg17XoVcRquAsgAozDykwAqq8UqbxDi+39Tw4TnVhJFse8Snh/CD2s8/Va0Q/r4NHPgWUFtkCOFM/eRVVTzrmr77L1VhPcSn2ZnTfZWxJTskRx/eqNMxpWSL0VZBe7S/dRwFBqdVlVm8zeUlMwvr2yp+FIPWsVg1riyriSbTZKPoqbrJopleGQgvYbGQBIpWLtJtASGyhDoS/dFifokc2k/xpeIBRsLLCCUxFHy5RceC2Pg2WNhIImffvUlcpRS9k1AKs7ZOoF8U2SIP312EJdkftJ8I/+2coRv4zoT6yCPrFO+EARl82yV3Qy7z5hBpZRF8WHwcwHOJT82lk0usQjJpqdEwMdflEyjmiomJEqYGHTV3HComzlOsVuB++b0Lkyuza+Xbco/vGwfhtdjqWAhVktf+t/OGs3pQuRTU/rnWJpqKt+OMjmbH+j0K8BTqW7XjLrX7XZ6baN+ItX9soFHlbTemd9bDnp6eh5a/wI=</con:value></con:property><con:property><con:name>SAMLSAU1_4</con:name><con:value>nVZdb+o4EH2/vyJKH6uQD2iAqCABgVtaSimh7N6+VMZxwEtiQ+xAuL9+7dCkQKHbuxIS8mQ8c8ZzfMa3DESh5bQYQzHHlCh9t6G+wZuZPUOGodm2YWmVajDT6uWar9mVWuCDwDetqqUqfcYS1CeMA8IbqmWYZc00NetmYtQdy3BMq2RZtVdVmaKYidDCpWSoShqFhDlZ2oaaxMShgGHmEBAh5nDoeK3HgSM8HZBjUpu3e5RZwri54Hzl6Dos+QiiMIQlSCP9Vj/yufWZ4+E5ATyJ0XtOnzXU973b7ba0LZdoPNctwzB0o64LH5/h+ZXa/JFvRn6fBHS/7gBCCYYgxL+BBPWI+IL6Siuc0xjzRXQhtKmbhgytoRRq0KyQK1X/SJCh+2akI5AxAxpbADMPNkYBihGBSHkZ9xvq1fc6uN87iQFhAY0jdrL+M0iIbFBIV8jXWF5Zju77Ec8cV/MWQadPYJgwvEFDSZMVgIgpoxgFOB1gJsjnMyVrv5Iy8cM5yxD8k7bc6odYBXT9zOm4eI4Y/z89O+zXPsoUhAlq1jbrcL68i0ZPw+5z8DAixkDvL1u/dtWXRgbh0HkPqmj3+/qUrAW33jet08rk4fe4k9Ym25+PL/7TeOVtlhOAQ7uakkn32e6jdmR7TzGZvly3dr43HfPF65Cmu0E4uP9rUB+vJ0Fqlb3t/Q97N7Bf1suZPu3WgT3fXAf455A8Dn/VgpkHOzpEZnk5H9t3jCwfpvX41ZvXnimt0Jvu9Zi8rOcdPoppZbexu9c/OuwOd3pekNRb9VFQrtzvnhsfNR3WcGzMJcFLZv8gyPOlpEffVXqiX4B/LS/Sgn0tyFydldQoxhHhalPuktLiJEKAsO+IZu7X3XbPdVu9tu2avV657HaNimH2jJZRrdctq+7mGrRHcQKxQ0mAZS6psnv+fA0QRg5DxEextqEJXCCmfhHRBRwofTIWl4MShiZUqLhVNdx2pVXudeq24d7Ybq/XNtrlqlUru5WO7arKkPIn8hS3Ao7iIwU3rSMFHyOIVxhJmZc8Z4LojIsjWYNNwkOztAElghIxCGKpxY5Vqd3oDEerEEnAekT9JESl1WKVHZDO9v+WBiDLrINByxu9dbw3K7uGF6s8/ZYfiPDxsXRgsqQ2Ek1FZyaSkddzoW77ZHLl4VuJj+VtE6fLYwz3SI4/fZBGsqVgzEdhOfJiw6nhKLh+WleRz99gWLC/GNtC9YUmNPPmrEFpXUo2myRrR9UwLD0W4XVTN6q6h2AiRGs3oUtE9CKE/q2ZUaA+yVzYj/ElfEE8DjiKBHmUbPmNB4OHmHww9AX50+++Ro5SinPjKOXnbJ1QvCsk4i+fHtCB0k+YR+JvS2P/o11nYh3kEXWKVwLHZC5XcjrsLnADUhEWCzmj8WHwcwHOJT82FodcYOGCTbOEo8tfFKlTDRVASBPC+1IPhOFQOzOcfLdCzofTpzCZPr8P3JRdHLh/Pw48oWIRUAtf/N/OGs7oApEq53qGpaGm4v0okpP5gVa/Azwr19Wa/ZVcH1fS/GT+bDk409P70PwX</con:value></con:property><con:property><con:name>SAMLSAU1_5</con:name><con:value>nVbRbuI6EH3fr4iyj6vgJBACUUEKBO6iQmlJt614qVxnAG8Th8ZOgP3664QmBUp7u1dCQp6MZ87MHB/7guMoNB2Xc0gEjZky8jrqo21Cq7kgoD0BIVpD1+sabgUNTW+SVj3AZNE0QFVGnKcwYlxgJjqqqRt1zTA007rV245pOHWr1m6Yc1W5g4TL0NKlpqvKNgoZd4q0HTVNmBNjTrnDcATcEcTx3cnYkZ4OLjGp3Ys9yiJh0l0JsXYQIrUACIQhqZE4QhfoyOci4I5PlwyLNIHXnAHvqK97N5tNbVOvxckSmbquI72NpE/A6fK72v1WboZgxBbxft3HLGaU4JD+wTmoCYhVHChuuIwTKlbRB6ENZOh5aA22RCNGg31X0VuCAt0XIx2BTDjW+AobZbAZLCABRkD5NRt11O9fm+B+722CGV/EScRP1n8HCVgGYbyGQONlZSW6r0c8067uBRBnxEiYcprBVU6TNSbAlesEFnQ7plySL+BKMX5ly+WPliwD8jdjuUCHWCV0dKY7Hl0CF/9nZofz2ke5w2EKXTIZxbdNf4v4w8uv3TObW1YYev+07eGmU0A4dN6Dqsb9uj4la8Wt100vo5vNcjOIf8xnzSfDJP3raHLTGk8RWt/dT+d2EIQr63nSnw6Na99t9Oiv+91gxx6S+uDSniHRmN1dBvoNXzyI8NvwSmTbl83GuvlhL0eXRnSlm/ZqNcc/YdW2N1fEeohusofNmJHJ2spiY3pP/WzVnnhuy2wPENxH4PmDP9lw/Pvb9N6yyNX8Cc8Tbqc/d08J6bzVdFjDsbGUBD99+g1ElMucHiNPGcp5YfG5vOQWGmiLwtVZ5xrFBTChdvNdubQ4qRQgGjhymPv1oDf0PHfYa3rGcFivewO9oRtD3dXtdts0216pQXsUJxD7MVvQPFeusnv+fA6QRA4HFkCiZXFKVsDVTyJ6WGBlxGbycMSMw20sVbzXswaW3XcHbsNo2VazP/R6drPXarq9er/XHqjKVSymbJq4CwHJkYIb5pGCz4DQNYVc5nOec0l0LmRLXnCWitCoZbjGIJUXQZJrsWM2WhbiNFqHkANGURykIdTWq3XRIMT3/6aGCS+s3tj1rx/7/qNZHMMPqzz9VjZE+gQ0d+B5ST2QQ4UzN5JZ1vOu7sbZm6sM76YBzU+b7K5IKNkjOf70RpqcLRVj3gorkVcbTg1HwdFpXVW+IKOkYn91bUvVl5rQLYfzgmsvtTTL0mIctq6bKJHhkYF0G/lAUilau9v4GRiqQqAv3RkV6pPMlf0YXypWzBdYQCTJoxTLLzwYfOD5g2Ekyb/96mvkKKXsm4CtOGfrh/JdkSP+9OlBHJL7SfO1/NvESfA2rjOxDvLIOuUrQVC2zFf57bD7gBsklmGplLM4OQx+LsC55MfGqskVFiHZ9JQK+PiLkutUR8WExCkTI08tDIfaWeAUuzU4b07vwhT6/HrhbvmHF+7DZOxLFYuwWvnS/3bWaEEXIp+b0r/A0lG38v0ok7PlgVa/Ajwr13ar+ZlcH1fSfWd+bzno6el56P4L</con:value></con:property><con:property><con:name>SAMLSAU2_1</con:name><con:value>pVZdc6JKEH3fX0GRxy0cQIxARatUNMvGfEk2yc3L1ji0MhsYlBnU5NffAYNRY3KTvVWpMtP0dJ/uPtPdJxwnsel2OIdM0JQpvtdSfxMCY8duhFqdkIlmNXRDG+NxUzOOxzism3rDMYiq+Jzn4DMuMBMt1dSNumYYmtm40R3XOHb1Zs2wmw+qcgsZl6alSk1XlVUSM+6WbltqnjE3xZxyl+EEuCuIG3TOh67UdHGFSW2frFGWDrN2JMTMRYjUQiAQx6RG0gSdoB2dk5C7AZ0yLPIMXnyGvKW+3F0ul7VlvZZmU2Tquo50B0mdkNPpkdr+Vl2G0GeTdH3uYZYySnBMn3EB6hxElIZKJ56mGRVR8o5pAxl6YVqDFdGIYbEjFb06KNF90tIOyIxjjUfYqIyNYAIZMALKr5HfUo8+V8H13ZsMMz5Js4Tvnb8GCdgC4nQGocaryCp0n7d4IF3tEyCuz0icc7qAi4ImM0yAK1cZTOhqSLkkX8iVsvzKiss/WrEMyFfKcoK2sUro6EB2PDoFLv6mZtv1Wlu5xXEObZzVnYz/uY/R7OExCJ574XwxaISnnv5Pq4SwrbwGtSn3y3mfrBtuvVw64+a1BfnYYlfXPTO7DkbPf/rjs/tfy0FvZVkcgvo4jBLqXBAwH6dmA04v5rPTzs8fd8suOjsG/Hx667DzM+/h8Vt4FYb3/o1/68EPb/h9MTm9nxiJH50nfjib9+1JnTw93V2cXZvdfndZN9Fl71g0TIsa99PLKcsaCKyHPIqj0d31tzg+Zizq/xzO59HV9wenM7VbrzFtx7ArrFpCkI//ABHVsaCH7ykDWS8sPm4vhYSG2qRUdWdFj+ICmFDbxa2itbi5bEA0dGUx1+d+d+D17L7lmP2eaTacvm7pxkDvyNfkGLZtVz1ojWIPYi9lE1r4Krrsmj8fAySJy4GFkGmLNCcRcPUDix4WWPHZSD6OlHG4SWUXlyiNZrM3aEiMzsBwbMvuy/8c2zEHer3ZVJWLVFyyy6wzEZDtdHDD3OngIyB0RqFo8wXPuSQ6FzIlc7zIRWzUFrjGIJeDICt6sWtadgNxmsxiKACjJA3zGGqzaFYmCPH1r6lhwkvpqH9Tvr93w9v/VmVC6oS0UOBFLF2Q1YQ3o6jhNqpA3gRsHRxZlflOHtLimcm0ioySNZLdT69sKWiyoYo37ARXFeiN7hfu/u4Fv42/NDD8vwZkPd7eRB/kBO2XY+MoXNAtt9VIl1NK9rB2RaY5rs1r+WKRl/Rp6rqJMmkeGUhvogBILpvs0036CAxtTKBPzbgN6j3PG/kuvlxELBBYQCLJrpTHTyw4AfBiwfHlY119dnvacSnzJmAlDsl6sdyDCsQfrkrEJYWeFF/Jn2Waha/lOmBry4+MU241grJpcSqm2dM7pCCpNEtl+02zbeOHDBxyvivcJHmDRUg2jXMB739Rir7aUjEhac6E76mlYLvXlzjF0wzcV6U3Zsp58rIgrPi7C8L9+TCQXTfB6kaX/reyRku6EFCLPaTE0lJXct+Vztl0a7a8ANwfL92mYXc8r9/vGvb2eDmuDwabBO5E0n4jfivZyun+e2j/Cw==</con:value></con:property><con:property><con:name>SAMLSAU2_2</con:name><con:value>nVZbj9o6EH7vr4jSx6OQ++aiBSkEaMNeaIFut/ty5HUG8DY4EDvcfn2dQLLAXs72SEjIk/HMNzOfP/uSoXli+AFjkHGSUinqNOV/HQthAyxHcXRkKJbhPioeAFJAM93YiU3P0G1ZihjLIaKMI8qbsqHppqLrimGPNc/XXV8zG65lPsjSHWRMhBYuDU2WNvOEMr9M25TzjPopYoT5FM2B+Rz7o+Dm2heePqowya3LPcoyYdaacb7wVRU3YsCQJLiB07l6qZ74XMbMH5EpRTzP4JAzZk35sHe9XjfWZiPNpqqhaZqqearwiRmZfpZbn6rNEEd0ku7XIaIpJRglZIcKUDfAZ2ksBck0zQifzd8Irau6VoRWYIMVrFv0s6w+JyjRfTDSCciMIYXNkF4FG8IEMqAYpB/DqCl//tgE93vHGaJskmZzdrb+O0hAV5CkC4gVVlVWoft4xFfa1boE7EcUJzkjK7gtaLJAGJj0LYMJ2VwTJsgXM6kcv7Rh4kcqlgH+m7FcqsdYBXT1le50yBQY/z8zO57XPsodSnJo/fbI4DEaGb8WbPuUjyY75vaN7NfPh9W6WUI4dt6Dqsd9WJ+TtebWYVN4lQZdNBw+8fA6cc2BrqEble/i7786/yzuPeg99df2+DvpPXhdvU/0+w79OY28pZn2tzfxVXqzRmF3tBzi0Aw/tfsjko/Xc1OPqNPf7czN9Pv2wrm/MtRJ94e6e3CHg+huGUyvgrC/MVfpeNJtP325/3b31bF3ThIMbn8H9q0djsjDp93sR2/59XH6pA6mfPOFW9uo+VzTcQ2nxkoSRvnjE2BeLQt6RB2pJ+aF+PvyUlhIrExKV39RaBTjQLncKnYV0uLnQoBI7Ith7tfddq8Tul3LM7qeYdheV7M0vacFmu15uuu6lQbtUZxBDFM6IUWuQmX3/HkfIJ77DGgMmbJKczwDJr8TsYM4kiI6FIcjpQzGqVBxqyPQalbQcSy7Z3uh5emO57TtsHdhhXZgydJtygd0kAUTDtmJguvGiYIPAZMFgULmC54zQXTGRUuWaJXzRG+sUINCLi6CrNBi37BcW2VkvkigAKzO0zhPoLGYLcoGqWz/bygIs9Jadhez8gy+WeL5t6obwicmhQMr6mmDmCi8uI4c366KeaPoi7Nrqwof5DEpjppoLc8I3iM5/fTMmIIqNV0OVVWwa+9zw0lk9byoOlm8IrjmfX1hC70XatCqxrJEjWUjX63ychCOphlqJsKruqo56ghwLuRqO05/A1XrEOqHbosa9Vnm2n6KL+czOuKIw1zQRiqXH3gqjIAVT4VI0H7z0XfISUrRNw4b/potTMSLokD87qMD+7jwE+Zv4m+dZvHzuF6JdZRH1CneB5zQabEq7oXtG8TAqQhLhJCl2XHw1wK8lvzUWDe5xsIFmx5zDm9/kQqFasoI4zSnPOrIpeFYNUucfLsA/9npRZhSmQ9X7Ya9edXe31yPhH7NkVz7kv92VkhJFwxycaOXWJryRrwcRXI6PVLpA8BzoW47uht0Ou1uW3ePhfrC7PXqBp5U0nphfmk56un5eWj9AQ==</con:value></con:property><con:property><con:name>SAMLSAU2_3</con:name><con:value>nVZdb+I6EH3fXxFlH69CPggQooJECXTTwtJCW7p9uTKOCaaJHWKHj/31a4cmBUp7u1dCQp6MZ87MHB/7goE4stwOYyjlmBLF91rqv/VaEDgzONPmtXlds22jrjmoVtPmVdO26oZhA8tQFZ+xDPmEcUB4S7UMs6qZpmbV7o2mazbdqlExq9azqjyilInQwqUidm3jiDA3T9tSs5S4FDDMXAJixFwO3UlnOHCFpwsKTGr7Yo8yT5i2F5wnrq7DSoAgiiJYgTTWL/Qjn4uAuRMcEsCzFL3mDFhLfd272Wwqm2qFpqFuGYahG01d+AQMh9/V9rdiMwp8Mqf7dRcQSjAEEf4NJKgh4gsaKJ0opCnmi/iD0KZuGjK0hrZQg6ZNvqv6W4Ic3RcjHYFMGdDYAphFsDGaoxQRiJSHsd9Sv39tgvu99ykgbE7TmJ2s/w4SImsU0QQFGisqK9B9PeKZdrUvEHR9AqOM4TX6KWmSAIiYcpuiOd4OMBPkC5iSj1/ZMvHDBcsQ/JuxXOiHWAV0/Ux3PBwixv/PzA7ntY/yCKIMteHK88fWs2PdzAa0OghG6dym9ex6uvrVyiEcOu9BleN+XZ+SteTW66alAX5ET9ybrbuP+qjfeLh5ft5eZ9NZ8nB919zMErYky0W4mf6TxSy1nyb90f3dsnl9N9pc7+Yzbgzp9KlHs0aMr741VztIcDy4ut3VwysyXiR3k3BHf3vPEILGaJzwxeChWr25ZDgY/jBvrd5Uv69XzSV7WQQ3vgUf/GUw/IXC6XD1jUxhyOrCgF4wfvzpZbWw9VbTYQ3HxkISJtlsiSAvlpIevqf0xbwA/1xepAUH2jx3dROpUYwjwtW23CWlxc2EAOHAFcPcr3uXfa/r9Oym1etYVq3ZM2zD7Bsdo9Zsmo7jFBq0R3ECsUvJHMtcUmX3/PkcIIxdhkiAUm1NM7hATP0kogc4UHwyFoeDEobuqVDxvmd3+rWqYxjNhtOw7YbjNCynbtTNrlm97DVV5SflIzJKO3OO0iMFN60jBR8jiBOMpMxLnjNBdMZFS1ZgnfHIrKxBhaBMXASp1GLXsp2aznCcREgC1mMaZBGqJIskb5DO9v+WBiDLrZDSNHAhyw/hhzWefivaIXwCLB2YLOgSiZGiM/eRVVTzrmr77L1VhO9kAZZnTfSWpxjukRx/eqOM5ErJl6KsAnfpfmo4Cq2fVlVmC9YYlswvr2yh+EIP2sVgVqCyqmTrdZaPomEYlp6K8LqpGw19gmAmBGt3T18Q0csQ+pfuixL1SebSfowv4wsy4YCjWBBHyZdfeCxMEJOPBV8Qf/vVl8hRStE3jrb8nK0biTeFRPzpswO6UPoJ863424gRvo3rTKyDPKJO8ULgmIRyJW+G3WfMwELKaHoY/FyAc8mPjWWTSyxcsGmWcfTxF0VqVEsFENKMcN9Tc8OhbuY4+S5B7pvTuzC5Nr9etlv24WX7NBxMhILFQC198X87azinC0SqvNNzLC11K96OIjkJD3T6FeCpVF82TKfjed3epekcSnW92u+XDTyqpP3O/N5y0NPT89D+Aw==</con:value></con:property><con:property><con:name>SAMLSAU2_4</con:name><con:value>nVZdc9o6EH3vr/C4jx0jfxGDJzBDcEmdmwQKaZrkpSPkNaixZbBkQvj1VzKxA5TkpneGGUbr1e5Z7dFZnXKcJrbf4xxyQTOmhUFH/xV7JkSkNTVOTIgNdxq5RrvZNg0C09jBxJlCPNW1kPMCQsYFZqKj26blGJZl2M0bs+3bpt+0G7bnPejaLeRchpYuDVPX1mnCuF+m7ehFzvwMc8p9hlPgviD+pHd16UtPH1eY9O7pFmWZMO/OhVj4CJFGBASShDRIlqJTtOdzGnF/QmcMiyKHl5wR7+gve5+enhpPTiPLZ8g2TROZbSR9Ik5nn/Xup2ozRCGLs+26j1nGKMEJ3WAF6grEPIu0XjLLcirm6RuhLWSZKrQBa2IQy2WfdfSaoET3wUh7IHOODT7HVhVsDDHkwAhoP8ZhR//8sQ5u997kmPE4y1N+sP47SMBWkGQLiAxeVVah+3jEI8fVPQXih4wkBacruFY0WWACXBvlENP1JeWSfBHXyvZray5/tGIZkL9pyynaxSqhoyOnE9AZcPF/erbbr22UW5wU0KXZxv15Yz1vfoohe/iZXwzj8fK39X3zeN8pIew6b0HV7X5ZH5K15tbLpuUovG7R57vbjVVI7Pfj/D4UE+S5V2Rps2JM0Mq9N/95+P19QDbDO+9q+vAlXvWXOW6v1+fuSDwUX26vrQvB0otPTSZ+5ITGI+/Z+T7kd4Ph3Wb+bXQOYv2YfbseLif4S5ol6+GKewP38SFZnTd/LKMz9DTmMSrIBp+HeJBgs+X0PkVT9C14nMd8lLRocXHTT8zOa027NewbK0mYFNPfQES1VPQIA20g+4XF+/KiLDQy4tLVXyiN4gKY0Ltql5IWv5ACRCNfNnO7/no2CILe4MxzvjYHjhN8NV3TGpg902u3bbsdVBq0RXEAsZ+xmKpcSmW3/HkfIEl9DiyC3FhlBZkD19+JGGCBtZCN5eXIGIebTKq46fTbTjOw21Y/cE76pue6juV5vXarZzX7wZmuXWeScsO8FwvI9xTcsvcUfAyELigomVc855LoXMgjWeJVIRKrscINBoUcBLnSYt92W03EabpIQAFGaRYVCTQW80V5QIhv/20DE15aLy97k9Gv/uSXXV7DN6s8/FYdiPSJqHLgqqQzkE2FIxPJrep5o+6Tg8lVhe8VEVW3TZ6uyCnZItn/9EoaxZaaMa+FVcjrDYeGveDosK46X7SipGZ/Pbal6ktN6FbNWeLGslGsVkXZDs80bZTL8MhCpocmQAopWs832SMwVIdAH5oZNeqDzLV9H18h5mwisIBUkkcrlx94MEyAqwdDKMm//uhrZC+lPDcBa3HM1k/ku0IhfvfpQXyi/KR5JP+esjx6bdeRWDt5ZJ3ylSAom6mVmg7Pb3CDZDIslXKW5bvBjwU4lnzfWB9yjUVINk0LAW9/0ZROdXRMSFYwEQZ6adjVzhKneF6A/+r0R5hSn18G7pq/OXDvri4nUsVSrNe+9L+dDVrShYCu5nqJpaOv5ftRJmezHa1+AXhMrk+81sl7cr1fSfcP85+WnTM9vA/dfwE=</con:value></con:property><con:property><con:name>SAMLSAU2_5</con:name><con:value>nVbvU+I8EP7uX9HpfXRKf1CEdoSZSuGuKnqCp55fnJBuIVybYpPyw7/+kmIrIPp67wwzTLab3WezT57NKUNJbLkeY5BxklIl8NvqU9jC4xaKWho2LUezI6ulOeY40uoGjqLIMhGKDFUJGMshoIwjytuqZZh1zTQ1q3FrOK5luWazZhv2o6rcQcZEaOFSE7tWSUyZW6Rtq3lG3RQxwlyKEmAux+7IG1y6wtNFJSa1c7pBWSTMOlPO566u41oIGOIY13Ca6Kf6js9pyNwRmVDE8wxec4asrb7uXS6XtWW9lmYT3TIMQzccXfiEjEy+qZ2jcjOEAY3SzbqLaEoJRjF5QRLUAPg0DRUvnqQZ4dPkg9CmbhoytAYrLE7Tpt9U/S1Bge6LkXZAZgxpbIrMMtgQIsiAYlB+DYO2+u1rHdzsvc0QZVGaJWxv/W+QgC4gTucQaqysrET39YgHjqtzCtgNKI5zRhZwJWkyRxiY8jODiKwuCRPkC5lStF9ZMfEjJcsA/0tbTvVtrAK6fuB0fDIBxv9Pz7b7tYlyh+IcOqgxPB7rYfZjkh33X2AyS4d3CMaPx9mgXUDYdt6Aqtr9ut4na8Wt103T32HPtr/3gvw29r7fB+PHC9OxyPQH5+v59Sw+u1g7A32Yz3D0EOHZ7HFsPutn58vGy411f7e8f8jJ6OL5vHF9fd84Cs3nOP+xenCu7CCxHscATfoSA2UJWaPLX359cNzF9fMb8+bFOnbW907/PB6y48HY40THDxY2brqeTVqIZ3+ObmYxNfpXvxu3NEPr8MpcBO23mrZr2DWWkjDKxzPAvFxKegS+0hf9QvxzeZEWEmpR4erOpUYxDpSrHblLSoubCwEioSuauVn3zvq+7/XPmvVeo1+v+z3DNsy+4RlNx7Esxy81aINiD2I3pRGRuaTKbvjzOUCcuAxoCJm2SHM8BaZ+EtFHHCkBHYrLkVIGt6lQ8V63bvWaZ36v1WzZnnXiGbbvWL7VrTuGeWI0VeUq5df0OvMiDtmOgpvWjoIPAZM5ASnzkudMEJ1xcSTPaJHz2KwtUI1CLgZBJrXYtexWQ2ckmccgAetJGuYx1ObTeXFAOtv8WxrCrLD6l97o51N39GQV1/DDKve/lQcifEIiHZgs6QxEU+HARDLKet7VbR+cXGV4Lw+JvG3idHlG8AbJ7qc30ki2VIx5K6xEXm3YN+wE1/frqvKFC4Ir9ldjW6i+0IRO2ZxnVHuu5YtFXrSjaRiWnonwuqkbTX0EOBeitb5N/wDVqxD6l2ZGhXovc2XfxZfzKR1xxCER5FGK5RceDCNg8sEQCPKvvvoa2Ukpzo3Dih+ydWPxrpCIP316YBdLP2H+Kf6WaRa+tetArK08ok7xSuCETuRKTof1B9zAqQhLhJyl2XbwQwEOJd81VodcYeGCTeOcw8dfFKlTbRVhnOaUB75aGLa1s8ApRgS4b07vwhT6/DpwV+zDgfswuBwJFUuQWvmS/3bWSEEXDKqc6wWWtroS70eRnE62tPoV4CG5Pmm2Tj6T691KOu/M7y1bZ7p/Hzp/AQ==</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\Scripts</con:value></con:property><con:property><con:name>StreamCreateCount</con:name><con:value>9</con:value></con:property><con:property><con:name>streamlimit</con:name><con:value>12</con:value></con:property><con:property><con:name>streamMaxCreateExpireTimeDiffhours</con:name><con:value>24</con:value></con:property><con:property><con:name>streamRenewTimeHours</con:name><con:value>6</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>tester</con:name><con:value>pjg</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>TOU</con:name><con:value>qa.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnGenericRightsToken</con:name><con:value>urn:dece:stream:generic</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnParentalControlAllowAdult</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>urnParentalControlBlockUnratedContent</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>urnParentalControlRating</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>urnPolicy</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>urnPolicyID</con:name><con:value>urn:dece:policyid:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urnRightsLocker</con:name><con:value>urn:dece:rightslockerid:org:dece:</con:value></con:property><con:property><con:name>urnRightsToken</con:name><con:value>urn:dece:rightstokenid:org:dece:</con:value></con:property><con:property><con:name>urnstream</con:name><con:value>urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>userBasic1Org1Name</con:name><con:value>pjgOrg1Basic1</con:value></con:property><con:property><con:name>userBasic1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>USERID</con:name><con:value>157864A5E26D2EFFE05307991F0A08B1</con:value></con:property><con:property><con:name>USERIDBAU1_1</con:name><con:value>EBFDC8EC139DE252E0401F0A05991922</con:value></con:property><con:property><con:name>USERIDBAU2_1</con:name><con:value>EBFDC8EC23CDE252E0401F0A05991922</con:value></con:property><con:property><con:name>USERIDFAU1_1</con:name><con:value>157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>USERIDFAU2_1</con:name><con:value>EBFDC8F286A03E81E0401F0A0799736A</con:value></con:property><con:property><con:name>USERIDFULL</con:name><con:value>157873F89F3E79C4E05307991F0A289E</con:value></con:property><con:property><con:name>USERIDSAU1_1</con:name><con:value>EBFDC55D96B8914EE0401F0A059963F4</con:value></con:property><con:property><con:name>USERIDSAU2_1</con:name><con:value>EBFDC8E492EC2259E0401F0A05991888</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_view_20150507_113744</con:value></con:property><con:property><con:name>UserName_BAU1</con:name><con:value>stream_view_20150507_113741</con:value></con:property><con:property><con:name>UserName_BAU2</con:name><con:value>stream_view_20150507_113744</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>stream_view_20150507_113739</con:value></con:property><con:property><con:name>UserName_FAU2</con:name><con:value>stream_view_20150507_113742</con:value></con:property><con:property><con:name>UserName_SAU1</con:name><con:value>stream_view_20150507_113740</con:value></con:property><con:property><con:name>UserName_SAU2</con:name><con:value>stream_view_20150507_113743</con:value></con:property><con:property><con:name>userPropertyNameArray</con:name><con:value>UserName_FAU1,UserName_SAU1,UserName_FAU2,UserName_SAU2,UserName_BAU1,UserName_BAU2</con:value></con:property><con:property><con:name>userStandard1Org1Name</con:name><con:value>pjgOrg1Standard1</con:value></con:property><con:property><con:name>userStandard1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userStandard2Org1Name</con:name><con:value>pjgorg1standard2</con:value></con:property><con:property><con:name>userStandard2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>V1</con:name><con:value>2015</con:value></con:property><con:property><con:name>V2</con:name><con:value>02</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionUrlEncode</con:name><con:value>06</con:value></con:property></con:properties><con:wssContainer><con:crypto><con:source>C:/Code_Repo/uvvu-soapui-sanity/Certs/QALP1/RET_concat.pem</con:source><con:password>123</con:password><con:type>KEYSTORE</con:type></con:crypto><con:crypto><con:source>C:/Code_Repo/uvvu-soapui-sanity/Certs/QALP1/LLASP_CS_2_concat.pem</con:source><con:password>123</con:password><con:type>KEYSTORE</con:type></con:crypto></con:wssContainer><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>